{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red96\green96\blue96;\red0\green0\blue191;
}
\vieww18400\viewh10940\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\fs36 \cf0 Unit Generator Plug-In Example\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
Unit generator plug-ins will be described in another document. But for an example of what one looks like, here is the complete source to a plug-in for a sample-and-hold unit generator called Latch. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
#include \cf3 "SC_PlugIn.h"\cf0 \
\
static \cf4 InterfaceTable\cf0  *ft;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
struct \cf4 Latch\cf0  : public \cf4 Unit\cf0 \
\{\
	float mLevel, m_prevtrig;\
\};\
\
\
extern \cf3 "C"\cf0 \
\{\
	void start();\
	void load(\cf4 InterfaceTable\cf0  *inTable);\
\
	void \cf4 Latch_Ctor\cf0 (\cf4 Latch\cf0  *unit);\
	void \cf4 Latch_next_ak\cf0 (\cf4 Latch\cf0  *unit, int inNumSamples);\
	void \cf4 Latch_next_aa\cf0 (\cf4 Latch\cf0  *unit, int inNumSamples);\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 // Codewarrior's linker has a bug that demands this function be defined...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 void start() \{\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
void \cf4 Latch_Ctor\cf0 (\cf4 Latch\cf0  *unit)\
\{\
	if (\cf4 INRATE\cf0 (1) == calc_FullRate) \{\
		\cf4 SETCALC\cf0 (\cf4 Latch_next_aa\cf0 );\
	\} else \{\
		\cf4 SETCALC\cf0 (\cf4 Latch_next_ak\cf0 );\
	\}\
\
	unit->m_prevtrig = 0.f;\
	unit->mLevel = 0.f;\
	\
	\cf4 ZOUT0\cf0 (0) = 0.f;\
\}\
\
\
void \cf4 Latch_next_ak\cf0 (\cf4 Latch\cf0  *unit, int inNumSamples)\
\{\
	float *out = \cf4 ZOUT\cf0 (0);\
	float level = unit->mLevel;\
	\
	float curtrig = \cf4 ZIN0\cf0 (1);\
	if (unit->m_prevtrig <= 0.f && curtrig > 0.f) level = \cf4 ZIN0\cf0 (0);\
	\
	\cf4 LOOP\cf0 (inNumSamples, *++out = level; );\
\
	unit->m_prevtrig = curtrig;\
	unit->mLevel = level;\
\}\
\
\
void \cf4 Latch_next_aa\cf0 (\cf4 Latch\cf0  *unit, int inNumSamples)\
\{\
	float *out = \cf4 ZOUT\cf0 (0);\
	float *in = \cf4 ZIN\cf0 (0);\
	float *trig = \cf4 ZIN\cf0 (1);\
	float prevtrig = unit->m_prevtrig;\
	float level = unit->mLevel;\
	\
	\cf4 LOOP\cf0 (inNumSamples, \
		float curtrig = *++trig;\
		if (prevtrig <= 0.f && curtrig > 0.f) level = *++in;\
		else \{ ++in; \}\
		*++out = level;\
		prevtrig = curtrig;\
	);\
	unit->m_prevtrig = prevtrig;\
	unit->mLevel = level;\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
void load(\cf4 InterfaceTable\cf0  *inTable)\
\{\
	ft = inTable;\
\
	\cf4 DefineSimpleUnit\cf0 (\cf4 Latch\cf0 );\
	\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b\fs36 \cf0 Adding a Target to XCode\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs20 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Each group of plugins shares a target in XCode and each target creates a combined file: eg. TargetName.scx.\
\
1- Duplicate an existing target. For example, click on "ChaosUGens" and use Edit->Duplicate.\
2- Double click on the new target to open it's inspector.\
3- In the "General" tab, change the name of the target to correspond with your UGen's name.\
4- In the "Build" tab, change the "Product Name" setting to correspond with your UGen.\
5- Close the target inspector.\
6- Open the disclosure triangle for your target, then open the disclosure triangle for "Compile Sources".\
7- Delete the existing source code (i.e ChaosUGens.cpp), by clicking on it and pressing the delete key.\
8- Use the "Project->Add to Project..." menu item to add your source code to the new target. In the sheet that pops up, be sure to check only your target in the "Add To Targets" table.\
9- Open the disclosure triangle for the "All" target and drag your new target into that list.\
10- Build the project. Your plugin will be compiled into the "build/plugins" directory.}