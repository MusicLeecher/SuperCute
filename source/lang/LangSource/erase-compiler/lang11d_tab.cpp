
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BEGINGENERATOR	281
#define	LEFTARROW	282
#define	WHILE	283
#define	BINOP	284
#define	KEYBINOP	285
#define	READWRITEVAR	286
#define	UMINUS	287

#line 16 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		510
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 287 ? yytranslate[x] : 153)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    54,     2,     2,     2,     2,    50,
    51,    37,    38,    49,    34,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,    48,    35,
    31,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    46,     2,    47,    52,     2,    42,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    39,    45,    53,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    32,    33,    40,    43
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   103,
   105,   107,   110,   115,   118,   120,   122,   125,   126,   129,
   130,   134,   135,   139,   141,   144,   146,   148,   149,   151,
   154,   159,   166,   175,   181,   189,   194,   197,   203,   210,
   216,   223,   231,   239,   246,   255,   263,   268,   269,   277,
   278,   286,   287,   290,   295,   301,   307,   310,   315,   320,
   322,   324,   326,   328,   330,   332,   336,   339,   343,   347,
   352,   356,   358,   363,   365,   371,   377,   384,   392,   400,
   409,   416,   423,   431,   440,   449,   459,   462,   466,   472,
   475,   478,   482,   487,   493,   495,   497,   499,   501,   507,
   510,   515,   519,   524,   530,   538,   543,   550,   558,   559,
   562,   565,   570,   572,   576,   579,   580,   583,   585,   589,
   592,   596,   601,   607,   609,   613,   616,   621,   623,   627,
   630,   631,   634,   636,   640,   642,   646,   648,   650,   652,
   654,   656,   658,   660,   662,   664,   666,   668,   670,   672,
   674,   676,   678,   680,   682,   684,   686,   688,   690,   692,
   694,   696,   698,   700,   702,   704,   706,   708,   710,   716,
   722,   723,   726,   728,   731,   735,   736,   740,   746,   750,
   756,   757,   759,   761,   765,   767,   771,   777,   778,   780,
   782,   786,   788,   792,   797,   801,   804,   806,   810,   811,
   813,   815,   819,   822,   827,   832,   836,   840,   843,   845,
   849,   850,   852,   857,   863,   867,   872,   873,   876,   878,
   882,   883,   885,   887,   889,   891,   894,   896,   899,   901,
   904,   906,   908,   910,   913,   916,   918,   921,   923,   925,
   927,   929,   931,   933,   935,   937,   939,   941,   943,   945,
   947,   949,   951,   953,   955,   957,   959,   961,   963,   965
};

static const short yyrhs[] = {    56,
     0,    57,     0,    26,    70,     0,     0,    56,    58,     0,
    59,     0,    57,    59,     0,   140,    61,    44,    62,    64,
    45,     0,   140,    46,    60,    47,    61,    44,    62,    64,
    45,     0,    38,   140,    44,    64,    45,     0,     0,   139,
     0,     0,    30,   140,     0,     0,    62,    63,     0,    15,
   122,    48,     0,    13,   122,    48,     0,     0,    64,    65,
     0,   139,    44,   112,   109,    72,    71,    45,     0,    37,
   139,    44,   112,   109,    72,    71,    45,     0,   149,    44,
   112,   109,    72,    71,    45,     0,    37,   149,    44,   112,
   109,    72,    71,    45,     0,     0,    48,     0,     0,    49,
     0,     0,    31,     0,    74,     0,    93,    74,     0,    50,
   110,    69,    51,     0,   110,    69,     0,    69,     0,    73,
     0,    93,    73,     0,     0,   141,    66,     0,     0,    52,
    90,    66,     0,     0,    52,    90,    66,     0,    76,     0,
    75,    76,     0,   104,     0,    79,     0,     0,    75,     0,
   139,    75,     0,    50,   151,    51,    75,     0,   139,    50,
    96,   100,    51,    77,     0,    50,   151,    51,    50,    96,
   100,    51,    77,     0,   139,    50,    97,   100,    51,     0,
    50,   151,    51,    50,    97,   100,    51,     0,   140,    46,
    94,    47,     0,   140,    75,     0,   140,    50,    98,    51,
    77,     0,   140,    50,    96,   100,    51,    77,     0,   140,
    50,    97,   100,    51,     0,    90,    41,    50,    98,    51,
    77,     0,    90,    41,   139,    50,    98,    51,    77,     0,
    90,    41,    50,    96,   100,    51,    77,     0,    90,    41,
    50,    97,   100,    51,     0,    90,    41,   139,    50,    96,
   100,    51,    77,     0,    90,    41,   139,    50,    97,   100,
    51,     0,    90,    41,   139,    77,     0,     0,    44,    30,
    93,    80,    49,    83,    45,     0,     0,    44,    48,    93,
    81,    49,    83,    45,     0,     0,    49,    83,     0,   139,
    28,    93,    82,     0,   139,   139,    28,    93,    82,     0,
    13,   139,    31,    93,    82,     0,    93,    82,     0,    30,
    30,    93,    82,     0,    30,    29,    93,    82,     0,   106,
     0,   104,     0,    79,     0,   105,     0,   152,     0,    78,
     0,    50,    93,    51,     0,    53,   139,     0,    46,    94,
    47,     0,    50,    88,    51,     0,    50,    30,    89,    51,
     0,    50,   121,    51,     0,   148,     0,    84,    46,    96,
    47,     0,    85,     0,    84,    46,    96,    22,    47,     0,
    84,    46,    22,    93,    47,     0,    84,    46,    96,    22,
    93,    47,     0,    84,    46,    96,    22,    47,    31,    90,
     0,    84,    46,    22,    93,    47,    31,    90,     0,    84,
    46,    96,    22,    93,    47,    31,    90,     0,    90,    41,
    46,    96,    22,    47,     0,    90,    41,    46,    22,    93,
    47,     0,    90,    41,    46,    96,    22,    93,    47,     0,
    90,    41,    46,    96,    22,    47,    31,    90,     0,    90,
    41,    46,    22,    93,    47,    31,    90,     0,    90,    41,
    46,    96,    22,    93,    47,    31,    90,     0,    22,    93,
     0,    93,    22,    93,     0,    93,    49,    93,    22,    93,
     0,    22,    93,     0,    93,    22,     0,    93,    22,    93,
     0,    93,    49,    93,    22,     0,    93,    49,    93,    22,
    93,     0,    84,     0,    87,     0,    86,     0,   140,     0,
    90,    41,    46,    96,    47,     0,    42,    90,     0,    90,
   151,    91,    90,     0,   139,    31,    90,     0,    53,   139,
    31,    90,     0,    90,    41,   139,    31,    90,     0,   139,
    50,    96,   100,    51,    31,    90,     0,    54,   101,    31,
    90,     0,    84,    46,    96,    47,    31,    90,     0,    90,
    41,    46,    96,    47,    31,    90,     0,     0,    41,   139,
     0,    41,   134,     0,    41,    50,    93,    51,     0,    90,
     0,    92,    48,    90,     0,    92,    66,     0,     0,    95,
    67,     0,    93,     0,    93,    30,    93,     0,   150,    93,
     0,    95,    49,    93,     0,    95,    49,   150,    93,     0,
    95,    49,    93,    30,    93,     0,    93,     0,    96,    49,
    93,     0,    37,    93,     0,    96,    49,    37,    93,     0,
    99,     0,    98,    49,    99,     0,   150,    93,     0,     0,
    49,    98,     0,   102,     0,   102,    21,   139,     0,   139,
     0,   102,    49,   139,     0,   134,     0,   138,     0,   145,
     0,   147,     0,   146,     0,   142,     0,   143,     0,   144,
     0,   129,     0,   124,     0,   108,     0,   139,     0,   134,
     0,   138,     0,   145,     0,   147,     0,   146,     0,   142,
     0,   143,     0,   144,     0,   129,     0,   124,     0,   134,
     0,   138,     0,   145,     0,   147,     0,   146,     0,   142,
     0,   143,     0,   144,     0,   130,     0,   125,     0,    44,
   112,   109,    69,    45,     0,    24,   112,   109,    69,    45,
     0,     0,   109,   111,     0,   111,     0,   110,   111,     0,
    13,   117,    48,     0,     0,    14,   117,    48,     0,    14,
   116,    21,   139,    48,     0,    39,   114,    39,     0,    39,
   113,    21,   139,    39,     0,     0,   114,     0,   115,     0,
   114,    67,   115,     0,   139,     0,   139,    68,   103,     0,
   139,    68,    50,    93,    51,     0,     0,   117,     0,   118,
     0,   117,    49,   118,     0,   139,     0,   139,    31,    90,
     0,   139,    50,    93,    51,     0,    93,    30,    93,     0,
   150,    93,     0,   119,     0,   120,    49,   119,     0,     0,
   120,     0,   123,     0,   122,    49,   123,     0,   133,   139,
     0,   133,   139,    31,   103,     0,    54,    50,   128,    51,
     0,    50,   128,    51,     0,   107,    30,   107,     0,   150,
   107,     0,   126,     0,   127,    49,   126,     0,     0,   127,
     0,    54,    46,   131,    47,     0,    54,   140,    46,   131,
    47,     0,    46,   131,    47,     0,   140,    46,   131,    47,
     0,     0,   132,    67,     0,   107,     0,   132,    49,   107,
     0,     0,    35,     0,    40,     0,    36,     0,     4,     0,
    34,     4,     0,     5,     0,    34,     5,     0,     6,     0,
    34,     6,     0,    23,     0,   135,     0,   136,     0,   135,
   137,     0,   134,   137,     0,   137,     0,    34,   137,     0,
     3,     0,    29,     0,    11,     0,    10,     0,    18,     0,
    19,     0,    17,     0,     9,     0,     7,     0,     8,     0,
    20,     0,    32,     0,    40,     0,    35,     0,    36,     0,
    34,     0,    37,     0,    38,     0,    39,     0,    33,     0,
   149,     0,   150,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    40,    42,    44,    48,    49,    53,    54,    58,    62,    69,
    75,    76,    79,    80,    84,    85,    89,    91,    95,    96,
   100,   103,   106,   109,   114,   115,   118,   119,   122,   123,
   126,   127,   131,   133,   135,   139,   140,   144,   145,   149,
   151,   155,   157,   161,   162,   168,   169,   172,   173,   176,
   180,   184,   189,   194,   212,   225,   227,   238,   249,   262,
   283,   292,   297,   310,   330,   336,   354,   360,   360,   370,
   370,   376,   398,   402,   436,   474,   488,   499,   503,   528,
   529,   530,   531,   532,   533,   534,   540,   550,   552,   554,
   556,   558,   560,   573,   576,   603,   621,   648,   676,   695,
   723,   750,   768,   793,   821,   840,   868,   887,   904,   920,
   939,   957,   974,   990,  1006,  1007,  1008,  1009,  1010,  1023,
  1037,  1042,  1046,  1057,  1062,  1072,  1077,  1091,  1107,  1108,
  1109,  1110,  1113,  1114,  1120,  1123,  1124,  1128,  1129,  1131,
  1136,  1138,  1145,  1153,  1154,  1158,  1160,  1164,  1165,  1169,
  1173,  1174,  1177,  1179,  1183,  1184,  1189,  1190,  1191,  1192,
  1193,  1194,  1195,  1196,  1197,  1198,  1201,  1204,  1207,  1208,
  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  1219,  1220,
  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1231,  1234,
  1239,  1240,  1244,  1245,  1249,  1253,  1254,  1258,  1262,  1266,
  1273,  1274,  1277,  1278,  1282,  1284,  1286,  1294,  1295,  1298,
  1299,  1303,  1305,  1307,  1315,  1317,  1324,  1325,  1329,  1330,
  1333,  1334,  1338,  1340,  1344,  1348,  1352,  1354,  1361,  1362,
  1366,  1367,  1372,  1374,  1378,  1380,  1384,  1385,  1388,  1389,
  1393,  1394,  1396,  1398,  1402,  1403,  1412,  1413,  1422,  1423,
  1434,  1437,  1438,  1439,  1445,  1453,  1460,  1469,  1470,  1473,
  1476,  1479,  1482,  1485,  1488,  1491,  1494,  1497,  1500,  1501,
  1502,  1503,  1504,  1505,  1506,  1507,  1510,  1513,  1514,  1517
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","BEGINGENERATOR","LEFTARROW",
"WHILE","':'","'='","BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR",
"'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'",
"'#'","root","classes","classextensions","classdef","classextension","optname",
"superclass","classvardecls","classvardecl","methods","methoddef","optsemi",
"optcomma","optequal","funcbody","cmdlinecode","methbody","primitive","retval",
"funretval","blocklist1","blocklistitem","blocklist","msgsend","generator","@1",
"@2","nextqual","qual","expr1","valrangex1","valrangeassign","valrangexd","valrange2",
"valrange3","expr","adverb","exprn","exprseq","arrayelems","arrayelems1","arglist1",
"arglistv1","keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral",
"blockliteral","pushname","pushliteral","listliteral","block","funcvardecls",
"funcvardecls1","funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef",
"vardeflist0","vardeflist","vardef","dictslotdef","dictslotlist1","dictslotlist",
"rwslotdeflist","rwslotdef","dictlit","dictlit2","litdictslotdef","litdictslotlist1",
"litdictslotlist","listlit","listlit2","literallistc","literallist1","rwspec",
"integer","floatr","accidental","pie","floatp","name","classname","primname",
"trueobj","falseobj","nilobj","ascii","symbol","string","pseudovar","binop",
"keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    55,    55,    55,    56,    56,    57,    57,    58,    58,    59,
    60,    60,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    65,    66,    66,    67,    67,    68,    68,
    69,    69,    70,    70,    70,    71,    71,    72,    72,    73,
    73,    74,    74,    75,    75,    76,    76,    77,    77,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    80,    79,    81,
    79,    82,    82,    83,    83,    83,    83,    83,    83,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    85,    85,    85,    86,    86,    86,
    87,    87,    87,    87,    87,    87,    88,    88,    88,    89,
    89,    89,    89,    89,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    91,    91,
    91,    91,    92,    92,    93,    94,    94,    95,    95,    95,
    95,    95,    95,    96,    96,    97,    97,    98,    98,    99,
   100,   100,   101,   101,   102,   102,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   104,   105,   106,   106,
   106,   106,   106,   106,   106,   106,   106,   106,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   108,   108,
   109,   109,   110,   110,   111,   112,   112,   112,   112,   112,
   113,   113,   114,   114,   115,   115,   115,   116,   116,   117,
   117,   118,   118,   118,   119,   119,   120,   120,   121,   121,
   122,   122,   123,   123,   124,   125,   126,   126,   127,   127,
   128,   128,   129,   129,   130,   130,   131,   131,   132,   132,
   133,   133,   133,   133,   134,   134,   135,   135,   136,   136,
   137,   138,   138,   138,   138,   138,   138,   139,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   149,
   149,   149,   149,   149,   149,   149,   150,   151,   151,   152
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     0,     1,
     1,     2,     4,     2,     1,     1,     2,     0,     2,     0,
     3,     0,     3,     1,     2,     1,     1,     0,     1,     2,
     4,     6,     8,     5,     7,     4,     2,     5,     6,     5,
     6,     7,     7,     6,     8,     7,     4,     0,     7,     0,
     7,     0,     2,     4,     5,     5,     2,     4,     4,     1,
     1,     1,     1,     1,     1,     3,     2,     3,     3,     4,
     3,     1,     4,     1,     5,     5,     6,     7,     7,     8,
     6,     6,     7,     8,     8,     9,     2,     3,     5,     2,
     2,     3,     4,     5,     1,     1,     1,     1,     5,     2,
     4,     3,     4,     5,     7,     4,     6,     7,     0,     2,
     2,     4,     1,     3,     2,     0,     2,     1,     3,     2,
     3,     4,     5,     1,     3,     2,     4,     1,     3,     2,
     0,     2,     1,     3,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     5,
     0,     2,     1,     2,     3,     0,     3,     5,     3,     5,
     0,     1,     1,     3,     1,     3,     5,     0,     1,     1,
     3,     1,     3,     4,     3,     2,     1,     3,     0,     1,
     1,     3,     2,     4,     4,     3,     3,     2,     1,     3,
     0,     1,     4,     5,     3,     4,     0,     2,     1,     3,
     0,     1,     1,     1,     1,     2,     1,     2,     1,     2,
     1,     1,     1,     2,     2,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    42,     0,     1,     2,     6,   258,   245,   247,   249,   266,
   267,   265,   260,   280,     0,   264,   262,   263,   268,   251,
   196,   259,     0,     0,   196,   136,   219,     0,     0,     0,
    35,     3,    31,    85,    82,   115,    94,   117,   116,   133,
    25,    42,    81,    83,    80,   167,    42,   193,   178,   177,
   169,   252,   253,   256,   170,   168,   118,   174,   175,   176,
   171,   173,   172,    92,    84,     0,     5,    13,     7,     0,
   210,   212,   208,   201,   191,   246,   248,   250,   257,   219,
   120,     0,     0,   191,   277,   138,     0,    27,     0,     0,
     0,   269,   273,   271,   272,   274,   275,   276,   270,     0,
     0,    42,   217,   220,     0,   278,   279,     0,    25,    87,
   237,   231,     0,   153,   155,     0,     0,   273,     0,   279,
   129,    26,   135,    32,    34,   194,   255,   254,     0,     0,
    50,    44,    47,    46,   136,     0,    57,    19,     0,    11,
     0,   195,     0,     0,     0,     0,   209,     0,    27,   203,
    29,    42,    68,    70,    42,     0,    88,    28,   137,   140,
   107,     0,     0,     0,    89,     0,     0,     0,    86,     0,
     0,    91,   216,     0,    26,    43,     0,   237,   231,   239,
   188,   187,     0,    27,   179,   180,     0,   184,   185,   186,
   181,   183,   182,     0,   229,   232,     0,     0,     0,     0,
     0,   237,     0,   144,     0,     0,     0,    48,     0,     0,
   134,   122,     0,   151,   151,    45,     0,   151,   151,     0,
   148,     0,     0,    14,     0,    12,    15,   211,   213,     0,
     0,   197,     0,   199,    28,     0,    30,     0,     0,   192,
     0,     0,     0,   139,   141,     0,   110,    90,   111,     0,
   108,   215,     0,    33,     0,   218,     0,     0,    51,   123,
     0,     0,   233,    28,   238,   237,     0,     0,   225,   228,
   126,   154,   156,     0,     0,     0,    93,     0,     0,     0,
   151,   151,     0,     0,     0,    49,    67,     0,     0,   131,
   130,   121,   146,     0,     0,     0,     0,    56,     0,     0,
     0,    48,   150,   274,    10,    20,     0,     0,    13,    19,
   214,     0,     0,   204,     0,     0,   206,   166,   165,   157,
   158,   162,   163,   164,   159,   161,   160,   190,     0,     0,
   189,     0,   142,   112,     0,     0,   151,   151,   235,   226,
   240,     0,   227,   230,   234,    96,    95,     0,     0,   145,
     0,     0,   119,     0,     0,    48,   124,   151,   151,     0,
     0,     0,   152,    48,    54,    48,    60,   149,    58,     0,
     0,   196,   196,     0,   241,   241,    16,     0,   198,   200,
     0,     0,     0,     0,    72,   168,     0,   143,   113,   109,
     0,     0,   236,     0,     0,    97,   127,   102,   101,     0,
     0,    48,    64,    61,     0,     0,    48,   132,   147,     0,
    52,    59,   196,   196,   191,   191,    15,   242,   244,   243,
     0,   221,     0,     0,     8,   207,     0,     0,     0,    69,
     0,    77,     0,     0,    71,   114,    48,    55,    99,    98,
     0,     0,     0,   103,   128,    63,    48,    66,    62,   125,
   191,   191,    38,    38,    19,    18,   241,   223,    17,     0,
    72,    72,    73,    72,     0,    53,   100,   105,   104,     0,
    65,    38,    38,   261,    40,    25,    40,     0,   222,     0,
    72,    79,    78,    74,    72,   106,    40,    40,     0,     0,
    36,    40,    39,     0,     9,   224,    76,    75,     0,     0,
    25,    21,    37,    23,    22,    24,    41,     0,     0,     0
};

static const short yydefgoto[] = {   508,
     3,     4,    67,     5,   225,   141,   310,   377,   223,   306,
   123,   159,   238,    31,    32,   490,   475,   491,    33,   286,
   132,   287,    34,    35,   241,   242,   432,   384,    36,    37,
    38,    39,   100,   163,    40,   210,    41,   204,    87,    88,
   205,   215,   363,   221,   295,   113,   114,   317,    43,    44,
    45,   180,    46,   152,    47,   240,    75,   148,   149,   150,
   146,    70,    71,   103,   104,   105,   421,   422,    49,   181,
   195,   196,   197,    50,   182,   183,   184,   423,    51,    52,
    53,    54,    55,    56,    57,   476,    58,    59,    60,    61,
    62,    63,    64,   106,   120,   121,    65
};

static const short yypact[] = {   101,
   620,    25,    25,     2,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   175,-32768,-32768,-32768,-32768,-32768,
    83,-32768,   182,  1503,    48,  1087,   714,  1503,   175,    24,
-32768,-32768,-32768,-32768,-32768,    56,-32768,-32768,-32768,  1662,
    -3,    60,-32768,-32768,-32768,-32768,   879,-32768,-32768,-32768,
   118,   118,-32768,-32768,-32768,    99,   102,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    64,-32768,   170,-32768,   219,
-32768,    49,   175,   175,-32768,-32768,-32768,-32768,-32768,   827,
-32768,  1503,  1503,-32768,-32768,   138,   130,   152,  1503,  1503,
  1139,-32768,   182,-32768,-32768,-32768,-32768,-32768,-32768,   166,
     9,   879,-32768,   177,   185,-32768,  1503,   188,  1645,   220,
  1574,  1554,   253,    45,-32768,   233,  1191,-32768,    26,-32768,
   257,  1503,-32768,-32768,-32768,-32768,-32768,-32768,  1503,  1243,
    85,-32768,-32768,-32768,  1087,   931,    85,-32768,    25,   175,
   256,-32768,   175,  1503,  1503,   287,   258,   298,    12,-32768,
   150,   879,-32768,-32768,   879,  1503,-32768,  1087,-32768,-32768,
-32768,  1503,   270,    37,-32768,  1503,  1503,  1503,-32768,   271,
  1087,-32768,-32768,   132,-32768,-32768,  1503,  1574,  1554,-32768,
-32768,-32768,   273,   275,   118,-32768,   280,-32768,-32768,-32768,
-32768,-32768,-32768,   295,-32768,   278,   283,  1574,  1503,   175,
   175,  1574,  1503,-32768,    28,  1295,   931,   230,    18,  1503,
  1662,  1662,  1503,   284,   290,-32768,   289,   284,   290,   162,
-32768,  1503,  1593,-32768,   293,-32768,-32768,-32768,  1662,   291,
   175,-32768,   175,-32768,-32768,   175,-32768,   765,   299,-32768,
   294,   296,   301,-32768,   320,  1503,-32768,-32768,  1503,  1503,
-32768,-32768,   330,-32768,   323,-32768,  1503,  1243,    85,  1662,
   310,   307,-32768,  1574,-32768,  1574,  1574,  1554,-32768,-32768,
  1662,-32768,-32768,   315,   316,  1347,   334,  1503,  1503,    51,
   284,   290,   211,  1503,   931,    85,-32768,   373,  1503,-32768,
-32768,   338,-32768,   983,   327,   350,   333,-32768,   336,   339,
   350,    85,-32768,   195,-32768,-32768,   341,   345,   362,   279,
-32768,   346,   360,-32768,  1503,    21,-32768,-32768,-32768,   118,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1035,  1035,
-32768,  1503,-32768,-32768,   378,  1503,   284,   290,-32768,-32768,
-32768,   356,-32768,-32768,-32768,   377,   379,   357,  1503,-32768,
   366,  1399,   383,   358,   364,    85,  1662,   284,   290,   248,
   365,  1503,   368,   265,-32768,    85,-32768,-32768,-32768,   374,
   375,    83,    83,   376,   255,   255,-32768,  1607,-32768,-32768,
   370,   175,   282,   384,   382,   194,   388,-32768,  1503,-32768,
   387,   389,-32768,  1503,  1503,   404,  1662,   408,   421,   409,
  1503,    85,-32768,-32768,   406,   407,    85,-32768,-32768,  1503,
-32768,-32768,    83,    83,-32768,-32768,-32768,-32768,-32768,-32768,
   267,-32768,   175,   269,-32768,-32768,   424,  1503,  1503,-32768,
  1035,-32768,  1503,   434,-32768,-32768,    85,-32768,  1662,  1662,
  1503,  1503,  1503,   432,  1662,-32768,    85,-32768,-32768,  1662,
-32768,-32768,   137,   137,   279,-32768,   255,   435,-32768,  1503,
   382,   382,-32768,   382,  1503,-32768,  1662,  1662,  1662,  1503,
-32768,   137,   137,-32768,  1451,   417,  1451,  1631,-32768,   681,
   382,-32768,-32768,-32768,   382,  1662,  1451,  1451,  1503,   422,
-32768,   416,-32768,   426,-32768,-32768,-32768,-32768,   430,   436,
  1645,-32768,-32768,-32768,-32768,-32768,-32768,   469,   480,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   478,-32768,   174,    67,-32768,  -295,-32768,
  -108,  -121,-32768,   -37,-32768,  -230,  -340,    -4,   447,   -54,
  -114,    70,-32768,     0,-32768,-32768,  -198,  -318,-32768,-32768,
-32768,-32768,-32768,-32768,   -19,-32768,-32768,    -1,   355,-32768,
  -122,  -116,  -112,   190,    22,-32768,-32768,    13,   139,-32768,
-32768,   -58,-32768,   -78,   465,    17,   -18,-32768,-32768,   260,
-32768,   427,   351,   328,-32768,-32768,   125,    47,  -234,-32768,
   238,-32768,   329,  -227,-32768,  -159,-32768,-32768,   -74,-32768,
-32768,   -10,     5,    19,   443,-32768,   103,   300,   332,   337,
   342,   349,-32768,  -193,   522,   -11,-32768
};


#define	YYLAST		1703


static const short yytable[] = {    42,
   176,   131,   137,   318,    81,   155,    84,   214,   109,   125,
   319,   387,    79,   218,   378,   108,   216,    48,   261,   219,
     6,     7,   216,   220,    86,   101,     6,   236,     6,   308,
   166,    13,  -202,    72,    13,    13,   185,   185,   167,     2,
   127,   128,   274,    48,   122,    42,    22,   110,   115,   276,
   234,   288,    22,   194,    22,   133,   133,   168,   249,   169,
   235,    73,   265,   126,   170,   200,   111,   289,   108,   111,
   112,   206,   352,   112,   277,   207,   278,    82,   101,   144,
   153,   154,    79,   280,   281,   250,    74,   160,   161,   164,
   282,    72,   151,   201,   283,    83,    73,   353,   145,   278,
    42,   117,   211,   185,   185,   173,   342,   138,    21,   212,
   371,    28,   463,   477,   239,   186,   186,   243,   126,   259,
   194,    74,    21,   185,   229,    21,     1,   185,    25,   129,
   133,   487,   488,    86,   290,   337,   133,   208,     2,   270,
    20,   338,    25,   230,   216,    25,   474,   135,   130,    15,
    42,   136,  -205,    42,   244,    21,   245,   260,   226,   478,
   247,    72,   358,   320,   251,   252,   253,   156,   359,   255,
  -205,   216,   360,   133,   127,    25,   157,     6,  -205,   271,
   237,   258,   186,   186,   308,    76,    77,    78,  -205,   185,
   292,   185,   185,   185,   134,   134,     6,     6,  -205,   139,
   158,   275,   186,    22,    20,   341,   186,   133,   343,   194,
   301,   293,   302,   188,   188,   140,   165,    21,   272,   273,
   303,   433,    22,    22,   129,   171,    92,   291,   118,    94,
    95,    96,    97,    98,    99,   172,   297,    25,   174,   299,
   300,   307,   321,   130,   333,   318,   494,   334,   335,   312,
   177,   313,   319,    21,   151,   173,   499,   500,   133,   301,
   284,   356,   482,   483,   357,   484,   142,   143,   186,   134,
   186,   186,   186,    25,   348,   134,   350,   351,   202,   285,
   188,   188,   497,   199,   308,   133,   498,   361,    21,   418,
   419,   375,   350,   376,   420,   410,   301,   209,   407,   227,
   188,   133,   354,   355,   188,   232,   143,   231,    25,   127,
   428,   429,   134,   381,   456,   457,   459,   457,   233,   263,
   248,   254,   370,   264,   267,   266,   268,   385,   385,   397,
   388,   131,   294,   269,   390,   298,   453,   454,   296,   309,
   322,   311,   329,   328,   330,   331,   134,   386,   386,   332,
   400,   336,   167,   415,   416,   133,   339,   340,   391,   392,
   409,   345,   346,   133,   349,   133,   188,   493,   188,   188,
   188,   369,   472,   473,   439,   440,    76,   364,   119,   405,
   406,   445,    85,   365,   372,   133,   366,   436,   373,   367,
   450,   139,   507,   379,   451,   452,   307,   134,   380,   389,
   427,   133,   393,   396,   434,   320,   133,   394,   402,   395,
   189,   189,   398,   401,   403,   408,   301,   413,   414,   417,
   426,   467,   468,   469,   134,   404,   461,   462,   430,   385,
   431,   464,   435,   411,   441,   412,   133,   437,   442,   438,
   134,   458,   190,   190,    66,    68,   133,   191,   191,   386,
   486,   443,   192,   192,   460,   444,   447,   448,   481,   193,
   193,   465,   470,   485,   175,   480,   502,   489,   509,   501,
   504,   446,   116,   492,   505,   492,   449,   189,   189,   510,
   506,    69,   374,   455,   321,   492,   492,   503,   124,   217,
   368,   102,   496,   228,   134,   314,   307,   189,   256,   147,
   424,   189,   134,   479,   134,   344,   466,   262,     0,   190,
   190,     0,     0,     0,   191,   191,   471,     0,     0,   192,
   192,     0,     0,     0,   134,     0,   193,   193,     0,   190,
     0,     0,     0,   190,   191,     0,     0,   323,   191,   192,
   134,     0,     0,   192,     0,   134,   193,    89,   107,     0,
   193,     0,     0,   187,   187,     0,     0,     0,     0,     0,
     0,     0,     0,   189,     0,   189,   189,   189,     0,   324,
     0,     0,     0,     0,   325,   134,     0,     0,     0,   326,
     0,   224,   322,     0,     0,   134,   327,     0,     0,     0,
     0,     0,     0,     0,     0,   190,     0,   190,   190,   190,
   191,   107,   191,   191,   191,   192,     0,   192,   192,   192,
     0,     0,   193,     0,   193,   193,   193,     0,     0,     0,
   187,   187,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,    15,   198,     0,     0,    16,    17,    18,    19,
   187,     0,    20,    21,   187,     0,     0,     0,    22,     0,
     0,     0,     0,    23,     0,     0,    89,   222,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    27,
     0,    28,    29,    30,     0,     0,     0,     0,     0,   246,
     0,     0,     0,     0,     7,     8,     9,    10,    11,    12,
     0,     0,   257,     0,     0,     0,     0,    16,    17,    18,
   198,     0,     0,    20,     0,     0,   187,     0,   187,   187,
   187,     0,     0,     0,    23,     0,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,    15,     0,   222,     0,
    16,    17,    18,    19,   316,    90,    20,    21,     0,     0,
     0,     0,    22,    91,     0,    92,    85,    93,    94,    95,
    96,    97,    98,    99,     0,    24,     0,    25,   116,    26,
     0,     0,     0,    80,     0,     0,    29,    30,     7,     8,
     9,    10,    11,    12,     0,     0,     0,     0,     0,   323,
     0,    16,    17,    18,     0,     0,     0,    20,     0,   198,
     0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,   222,     0,     0,     0,
     0,   324,     0,     0,   315,   222,   325,   222,   316,     0,
     0,   326,   222,     0,     0,     0,     0,     0,   327,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,    90,    20,
    21,     0,     0,     0,     0,    22,    91,     0,    92,    85,
    93,    94,    95,    96,    97,    98,    99,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,    15,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
    28,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,    85,    23,     0,     0,   213,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,    85,    23,     0,     0,   362,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,   382,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,    22,   383,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,    85,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
   162,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,   203,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,     0,    23,     0,     0,   213,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,   279,    20,    21,     0,
     0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,   347,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,   399,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,   489,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,     0,    23,     0,     0,     0,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,     0,
    16,    17,    18,     0,     0,     0,    20,     7,     8,     9,
    10,    11,    12,     0,    13,     0,    85,    23,     0,     0,
    16,    17,    18,     0,     0,     6,    20,     0,     0,   178,
     0,     0,     0,   179,     0,     0,     0,    23,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   178,
     0,    22,     0,   179,    92,     0,   118,    94,    95,   304,
    97,    98,    99,     6,     0,    22,     0,   305,    92,     0,
   118,    94,    95,   304,    97,    98,    99,     0,     0,     0,
     0,   425,     0,     0,     0,     0,     0,     0,     0,    22,
     0,     0,    92,     0,   118,    94,    95,   304,    97,    98,
    99,     0,     0,     0,     0,   495,    92,    85,   118,    94,
    95,    96,    97,    98,    99,   119,     0,     0,     0,     0,
     0,     0,   175,    92,    85,   118,    94,    95,    96,    97,
    98,    99,   119
};

static const short yycheck[] = {     1,
   109,    56,    57,   238,    24,    84,    25,   130,    28,    47,
   238,   330,    23,   136,   310,    27,   131,     1,   178,   136,
     3,     4,   137,   136,    26,    27,     3,   149,     3,   223,
    22,    11,    21,    15,    11,    11,   111,   112,    30,    38,
    51,    52,   202,    27,    48,    47,    29,    29,    30,    22,
    39,    34,    29,   112,    29,    56,    57,    49,    22,    51,
    49,    14,   184,    47,   102,    21,    46,    50,    80,    46,
    50,    46,    22,    50,    47,    50,    49,    30,    80,    31,
    82,    83,    93,   206,   207,    49,    39,    89,    90,    91,
   207,    73,    74,    49,   207,    48,    14,    47,    50,    49,
   102,    46,   122,   178,   179,   107,   266,    44,    24,   129,
   304,    52,   431,   454,   152,   111,   112,   155,   102,   174,
   179,    39,    24,   198,   144,    24,    26,   202,    44,    31,
   131,   472,   473,   135,   209,   258,   137,   119,    38,   198,
    23,   258,    44,   145,   259,    44,    10,    46,    50,    13,
   152,    50,     3,   155,   156,    24,   158,   177,   140,   455,
   162,   143,   285,   238,   166,   167,   168,    30,   285,   171,
    21,   286,   285,   174,   185,    44,    47,     3,    29,   199,
    31,    50,   178,   179,   378,     4,     5,     6,    39,   264,
   210,   266,   267,   268,    56,    57,     3,     3,    49,    30,
    49,   203,   198,    29,    23,   264,   202,   208,   267,   268,
    49,   213,    51,   111,   112,    46,    51,    24,   200,   201,
   222,    28,    29,    29,    31,    49,    32,   209,    34,    35,
    36,    37,    38,    39,    40,    51,   215,    44,    51,   218,
   219,   223,   238,    50,   246,   480,   477,   249,   250,   231,
    31,   233,   480,    24,   236,   257,   487,   488,   259,    49,
    31,    51,   461,   462,   284,   464,    48,    49,   264,   131,
   266,   267,   268,    44,   276,   137,   278,   279,    46,    50,
   178,   179,   481,    31,   478,   286,   485,   289,    24,    35,
    36,    13,   294,    15,    40,    31,    49,    41,    51,    44,
   198,   302,   281,   282,   202,    48,    49,    21,    44,   320,
    29,    30,   174,   315,    48,    49,    48,    49,    21,    47,
    51,    51,   304,    49,    30,    46,    49,   329,   330,   349,
   332,   386,    49,    51,   336,    47,   415,   416,    49,    47,
   238,    51,    49,    45,    49,    45,   208,   329,   330,    30,
   352,    22,    30,   372,   373,   356,    47,    51,   337,   338,
   362,    47,    47,   364,    31,   366,   264,   476,   266,   267,
   268,   302,   451,   452,   394,   395,     4,    51,    41,   358,
   359,   401,    33,    51,    44,   386,    51,   389,    44,    51,
   410,    30,   501,    48,   413,   414,   378,   259,    39,    22,
   382,   402,    47,    47,   386,   480,   407,    31,    51,    31,
   111,   112,    47,    31,    51,    51,    49,    44,    44,    44,
    51,   441,   442,   443,   286,   356,   428,   429,    45,   431,
    49,   433,    45,   364,    31,   366,   437,    51,    31,    51,
   302,   423,   111,   112,     2,     3,   447,   111,   112,   431,
   470,    31,   111,   112,    31,    47,    51,    51,   460,   111,
   112,    28,    31,   465,    48,    31,    45,    52,     0,   489,
    45,   402,    30,   475,    45,   477,   407,   178,   179,     0,
    45,     4,   309,   417,   480,   487,   488,   492,    42,   135,
   301,    27,   480,   143,   356,   236,   478,   198,   171,    73,
   376,   202,   364,   457,   366,   268,   437,   179,    -1,   178,
   179,    -1,    -1,    -1,   178,   179,   447,    -1,    -1,   178,
   179,    -1,    -1,    -1,   386,    -1,   178,   179,    -1,   198,
    -1,    -1,    -1,   202,   198,    -1,    -1,   238,   202,   198,
   402,    -1,    -1,   202,    -1,   407,   198,    26,    27,    -1,
   202,    -1,    -1,   111,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   264,    -1,   266,   267,   268,    -1,   238,
    -1,    -1,    -1,    -1,   238,   437,    -1,    -1,    -1,   238,
    -1,   139,   480,    -1,    -1,   447,   238,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   264,    -1,   266,   267,   268,
   264,    80,   266,   267,   268,   264,    -1,   266,   267,   268,
    -1,    -1,   264,    -1,   266,   267,   268,    -1,    -1,    -1,
   178,   179,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    13,   112,    -1,    -1,    17,    18,    19,    20,
   198,    -1,    23,    24,   202,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    34,    -1,    -1,   135,   136,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,   158,
    -1,    -1,    -1,    -1,     4,     5,     6,     7,     8,     9,
    -1,    -1,   171,    -1,    -1,    -1,    -1,    17,    18,    19,
   179,    -1,    -1,    23,    -1,    -1,   264,    -1,   266,   267,
   268,    -1,    -1,    -1,    34,    -1,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    13,    -1,   207,    -1,
    17,    18,    19,    20,    54,    22,    23,    24,    -1,    -1,
    -1,    -1,    29,    30,    -1,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    -1,    42,    -1,    44,   316,    46,
    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     4,     5,
     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,   480,
    -1,    17,    18,    19,    -1,    -1,    -1,    23,    -1,   268,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,
    -1,   480,    -1,    -1,    50,   294,   480,   296,    54,    -1,
    -1,   480,   301,    -1,    -1,    -1,    -1,    -1,   480,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    29,    30,    -1,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    13,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    52,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    33,    34,    -1,    -1,    37,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    22,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    47,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    52,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
    17,    18,    19,    -1,    -1,    -1,    23,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    33,    34,    -1,    -1,
    17,    18,    19,    -1,    -1,     3,    23,    -1,    -1,    46,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    34,    -1,     3,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    -1,    29,    -1,    50,    32,    -1,    34,    35,    36,    37,
    38,    39,    40,     3,    -1,    29,    -1,    45,    32,    -1,
    34,    35,    36,    37,    38,    39,    40,    -1,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    32,    -1,    34,    35,    36,    37,    38,    39,
    40,    -1,    -1,    -1,    -1,    45,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    -1,    -1,    -1,    -1,
    -1,    -1,    48,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 43 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 45 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 48 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 55 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 63 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 70 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 81 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 84 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 86 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 90 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 92 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 95 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 97 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 101 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 104 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 107 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 110 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 32:
#line 128 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 33:
#line 132 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 34:
#line 134 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 136 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 37:
#line 141 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 38:
#line 144 "lang11d"
{ yyval = 0; ;
    break;}
case 39:
#line 146 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 40:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 41:
#line 152 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 42:
#line 156 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 43:
#line 158 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 45:
#line 163 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 48:
#line 172 "lang11d"
{ yyval = 0; ;
    break;}
case 50:
#line 177 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 51:
#line 181 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 52:
#line 185 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 53:
#line 190 "lang11d"
{
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 195 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 55:
#line 213 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-5], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 56:
#line 226 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 57:
#line 228 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 58:
#line 239 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 59:
#line 250 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 263 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 61:
#line 284 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 62:
#line 293 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 63:
#line 298 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 64:
#line 311 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 65:
#line 331 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 66:
#line 337 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 67:
#line 355 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 68:
#line 360 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 1); ;
    break;}
case 69:
#line 361 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[-1], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0); 
			;
    break;}
case 70:
#line 370 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 2); ;
    break;}
case 71:
#line 371 "lang11d"
{
				yyval = yyvsp[-1];
			;
    break;}
case 72:
#line 377 "lang11d"
{ 
					// innermost part
					int action = popls(&generatorStack); 
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);
					
					switch (action) 
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);
					
							yyval = (long)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							yyval = (long)expr;
						} break;
					}
				;
    break;}
case 73:
#line 399 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 74:
#line 403 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 75:
#line 437 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 76:
#line 475 "lang11d"
{ 
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)yyvsp[-1]);
				
				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 77:
#line 489 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit);

				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 78:
#line 500 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 79:
#line 504 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);
				
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);
				
				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);
				
				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0); 
				
				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				yyval = (long)newPyrCallNode(selectornode2, args3, 0, 0); 
			;
    break;}
case 86:
#line 535 "lang11d"
{ 
				PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
				node->mParens = 1;
				yyval = yyvsp[-1]; 
			;
    break;}
case 87:
#line 541 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 88:
#line 551 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 89:
#line 553 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 90:
#line 555 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 91:
#line 557 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 92:
#line 559 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 93:
#line 561 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 95:
#line 577 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 604 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 622 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 98:
#line 649 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 99:
#line 677 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 696 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 724 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 751 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 769 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 104:
#line 794 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 105:
#line 822 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 106:
#line 841 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 107:
#line 869 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 108:
#line 888 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 109:
#line 905 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 110:
#line 921 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 111:
#line 940 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 112:
#line 958 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 113:
#line 975 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 114:
#line 991 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 118:
#line 1009 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 119:
#line 1011 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 120:
#line 1024 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 121:
#line 1038 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 122:
#line 1043 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 123:
#line 1047 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 124:
#line 1058 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 125:
#line 1063 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 126:
#line 1073 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 127:
#line 1078 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 128:
#line 1092 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 129:
#line 1107 "lang11d"
{ yyval = 0; ;
    break;}
case 130:
#line 1108 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 1109 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 1110 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 134:
#line 1115 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 136:
#line 1123 "lang11d"
{ yyval = 0; ;
    break;}
case 137:
#line 1125 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 139:
#line 1130 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 140:
#line 1132 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 141:
#line 1137 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 142:
#line 1139 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 143:
#line 1146 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 145:
#line 1155 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 146:
#line 1159 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 147:
#line 1161 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 149:
#line 1166 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 150:
#line 1170 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 151:
#line 1173 "lang11d"
{ yyval = 0; ;
    break;}
case 152:
#line 1174 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 153:
#line 1178 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 1180 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 156:
#line 1185 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 157:
#line 1189 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 1190 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 159:
#line 1191 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 160:
#line 1192 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 161:
#line 1193 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 162:
#line 1194 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 163:
#line 1195 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 164:
#line 1196 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 165:
#line 1197 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 166:
#line 1198 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 167:
#line 1201 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 168:
#line 1204 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 169:
#line 1207 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 170:
#line 1208 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 171:
#line 1209 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 172:
#line 1210 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 173:
#line 1211 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 174:
#line 1212 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 175:
#line 1213 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 176:
#line 1214 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 177:
#line 1215 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 178:
#line 1216 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 179:
#line 1219 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 180:
#line 1220 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 181:
#line 1221 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 182:
#line 1222 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 183:
#line 1223 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 184:
#line 1224 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 185:
#line 1225 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 186:
#line 1226 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 187:
#line 1227 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 188:
#line 1228 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 189:
#line 1232 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 190:
#line 1235 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 191:
#line 1239 "lang11d"
{ yyval = 0; ;
    break;}
case 192:
#line 1241 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 194:
#line 1246 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 195:
#line 1250 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 196:
#line 1253 "lang11d"
{ yyval = 0; ;
    break;}
case 197:
#line 1255 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 198:
#line 1259 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 199:
#line 1263 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 200:
#line 1267 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 201:
#line 1273 "lang11d"
{ yyval = 0; ;
    break;}
case 204:
#line 1279 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 205:
#line 1283 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 206:
#line 1285 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 207:
#line 1287 "lang11d"
{
					PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
					node->mParens = 1;
					yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], node, 0);
				;
    break;}
case 208:
#line 1294 "lang11d"
{ yyval = 0; ;
    break;}
case 211:
#line 1300 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 212:
#line 1304 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 213:
#line 1306 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 214:
#line 1308 "lang11d"
{ 
									PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
									node->mParens = 1;
									yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], node, 0); 
								;
    break;}
case 215:
#line 1316 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 216:
#line 1318 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 218:
#line 1326 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 219:
#line 1329 "lang11d"
{ yyval = 0; ;
    break;}
case 222:
#line 1335 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 223:
#line 1339 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 224:
#line 1341 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 225:
#line 1345 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 226:
#line 1349 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 227:
#line 1353 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 228:
#line 1355 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 230:
#line 1363 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 231:
#line 1366 "lang11d"
{ yyval = 0; ;
    break;}
case 233:
#line 1373 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 234:
#line 1375 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 235:
#line 1379 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 236:
#line 1381 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 237:
#line 1384 "lang11d"
{ yyval = 0; ;
    break;}
case 240:
#line 1390 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 241:
#line 1393 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 242:
#line 1395 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 243:
#line 1397 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 244:
#line 1399 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 245:
#line 1402 "lang11d"
{ yyval = zzval; ;
    break;}
case 246:
#line 1404 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 247:
#line 1412 "lang11d"
{ yyval = zzval; ;
    break;}
case 248:
#line 1414 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 249:
#line 1422 "lang11d"
{ yyval = zzval; ;
    break;}
case 250:
#line 1424 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 251:
#line 1434 "lang11d"
{ yyval = zzval; ;
    break;}
case 254:
#line 1440 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 255:
#line 1446 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 256:
#line 1454 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 257:
#line 1461 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 258:
#line 1469 "lang11d"
{ yyval = zzval; ;
    break;}
case 259:
#line 1470 "lang11d"
{ yyval = zzval; ;
    break;}
case 260:
#line 1473 "lang11d"
{ yyval = zzval; ;
    break;}
case 261:
#line 1476 "lang11d"
{ yyval = zzval; ;
    break;}
case 262:
#line 1479 "lang11d"
{ yyval = zzval; ;
    break;}
case 263:
#line 1482 "lang11d"
{ yyval = zzval; ;
    break;}
case 264:
#line 1485 "lang11d"
{ yyval = zzval; ;
    break;}
case 265:
#line 1488 "lang11d"
{ yyval = zzval; ;
    break;}
case 266:
#line 1491 "lang11d"
{ yyval = zzval; ;
    break;}
case 267:
#line 1494 "lang11d"
{ yyval = zzval; ;
    break;}
case 268:
#line 1497 "lang11d"
{ yyval = zzval; ;
    break;}
case 269:
#line 1500 "lang11d"
{ yyval = zzval; ;
    break;}
case 270:
#line 1501 "lang11d"
{ yyval = zzval; ;
    break;}
case 271:
#line 1502 "lang11d"
{ yyval = zzval; ;
    break;}
case 272:
#line 1503 "lang11d"
{ yyval = zzval; ;
    break;}
case 273:
#line 1504 "lang11d"
{ yyval = zzval; ;
    break;}
case 274:
#line 1505 "lang11d"
{ yyval = zzval; ;
    break;}
case 275:
#line 1506 "lang11d"
{ yyval = zzval; ;
    break;}
case 276:
#line 1507 "lang11d"
{ yyval = zzval; ;
    break;}
case 277:
#line 1510 "lang11d"
{ yyval = zzval; ;
    break;}
case 280:
#line 1517 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1519 "lang11d"
