
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#ifdef SC_WIN32
#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#endif

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BINOP	281
#define	KEYBINOP	282
#define	READWRITEVAR	283
#define	UMINUS	284

#line 15 "lang11d"


#ifndef SC_WIN32
#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#endif

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		413
#define	YYFLAG		-32768
#define	YYNTBASE	52

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 134)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    51,     2,     2,     2,     2,    47,
    48,    34,    35,    46,    31,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    27,    45,    32,
    28,    33,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    43,     2,    44,    49,     2,    39,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    41,    36,    42,    50,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    29,    30,    37,    40
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   160,   165,
   168,   174,   181,   187,   194,   202,   210,   217,   226,   234,
   239,   241,   243,   245,   247,   249,   253,   256,   260,   264,
   268,   270,   275,   277,   283,   289,   296,   304,   312,   321,
   328,   335,   343,   352,   361,   371,   374,   378,   384,   386,
   388,   390,   392,   398,   401,   406,   410,   415,   421,   429,
   434,   441,   449,   450,   453,   456,   461,   463,   467,   470,
   471,   474,   476,   480,   483,   487,   492,   498,   500,   504,
   507,   512,   514,   518,   521,   522,   525,   527,   531,   533,
   537,   539,   541,   543,   545,   547,   549,   551,   553,   555,
   557,   559,   561,   563,   565,   567,   569,   571,   573,   575,
   577,   579,   581,   583,   585,   587,   589,   591,   593,   595,
   601,   607,   608,   611,   613,   616,   620,   621,   625,   631,
   635,   641,   642,   644,   646,   650,   652,   656,   660,   663,
   665,   669,   670,   672,   674,   678,   681,   686,   691,   697,
   701,   706,   707,   710,   712,   716,   717,   719,   721,   723,
   725,   728,   730,   733,   735,   738,   740,   742,   744,   747,
   750,   752,   755,   757,   759,   761,   763,   765,   767,   769,
   771,   773,   775,   777,   779,   781,   783,   785,   787,   789,
   791,   793,   795,   797
};

static const short yyrhs[] = {    53,
     0,    54,     0,    26,    66,     0,     0,    53,    55,     0,
    56,     0,    54,    56,     0,   121,    58,    41,    59,    61,
    42,     0,   121,    43,    57,    44,    58,    41,    59,    61,
    42,     0,    35,   121,    41,    61,    42,     0,     0,   120,
     0,     0,    27,   121,     0,     0,    59,    60,     0,    15,
   108,    45,     0,    13,   108,    45,     0,     0,    61,    62,
     0,   120,    41,   101,    98,    68,    67,    42,     0,    34,
   120,    41,   101,    98,    68,    67,    42,     0,   130,    41,
   101,    98,    68,    67,    42,     0,    34,   130,    41,   101,
    98,    68,    67,    42,     0,     0,    45,     0,     0,    46,
     0,    70,     0,    82,    70,     0,    47,    99,    65,    48,
     0,    99,    65,     0,    65,     0,    69,     0,    82,    69,
     0,     0,   122,    63,     0,     0,    49,    79,    63,     0,
     0,    49,    79,    63,     0,    93,     0,    71,    93,     0,
     0,    71,     0,   120,    71,     0,   120,    47,    85,    89,
    48,    72,     0,   120,    47,    86,    89,    48,     0,   121,
    43,    83,    44,     0,   121,    71,     0,   121,    47,    87,
    48,    72,     0,   121,    47,    85,    89,    48,    72,     0,
   121,    47,    86,    89,    48,     0,    79,    38,    47,    87,
    48,    72,     0,    79,    38,   120,    47,    87,    48,    72,
     0,    79,    38,    47,    85,    89,    48,    72,     0,    79,
    38,    47,    86,    89,    48,     0,    79,    38,   120,    47,
    85,    89,    48,    72,     0,    79,    38,   120,    47,    86,
    89,    48,     0,    79,    38,   120,    72,     0,    95,     0,
    93,     0,    94,     0,   133,     0,    73,     0,    47,    82,
    48,     0,    50,   120,     0,    43,    83,    44,     0,    47,
    78,    48,     0,    47,   107,    48,     0,   129,     0,    74,
    43,    85,    44,     0,    75,     0,    74,    43,    85,    22,
    44,     0,    74,    43,    22,    82,    44,     0,    74,    43,
    85,    22,    82,    44,     0,    74,    43,    85,    22,    44,
    28,    79,     0,    74,    43,    22,    82,    44,    28,    79,
     0,    74,    43,    85,    22,    82,    44,    28,    79,     0,
    79,    38,    43,    85,    22,    44,     0,    79,    38,    43,
    22,    82,    44,     0,    79,    38,    43,    85,    22,    82,
    44,     0,    79,    38,    43,    85,    22,    44,    28,    79,
     0,    79,    38,    43,    22,    82,    44,    28,    79,     0,
    79,    38,    43,    85,    22,    82,    44,    28,    79,     0,
    22,    82,     0,    82,    22,    82,     0,    82,    46,    82,
    22,    82,     0,    74,     0,    77,     0,    76,     0,   121,
     0,    79,    38,    43,    85,    44,     0,    39,    79,     0,
    79,   132,    80,    79,     0,   120,    28,    79,     0,    50,
   120,    28,    79,     0,    79,    38,   120,    28,    79,     0,
   120,    47,    85,    89,    48,    28,    79,     0,    51,    90,
    28,    79,     0,    74,    43,    85,    44,    28,    79,     0,
    79,    38,    43,    85,    44,    28,    79,     0,     0,    38,
   120,     0,    38,   115,     0,    38,    47,    82,    48,     0,
    79,     0,    81,    45,    79,     0,    81,    63,     0,     0,
    84,    64,     0,    82,     0,    82,    27,    82,     0,   131,
    82,     0,    84,    46,    82,     0,    84,    46,   131,    82,
     0,    84,    46,    82,    27,    82,     0,    82,     0,    85,
    46,    82,     0,    34,    82,     0,    85,    46,    34,    82,
     0,    88,     0,    87,    46,    88,     0,   131,    82,     0,
     0,    46,    87,     0,    91,     0,    91,    21,   120,     0,
   120,     0,    91,    46,   120,     0,   115,     0,   119,     0,
   126,     0,   128,     0,   127,     0,   123,     0,   124,     0,
   125,     0,   110,     0,    97,     0,   120,     0,   115,     0,
   119,     0,   126,     0,   128,     0,   127,     0,   123,     0,
   124,     0,   125,     0,   110,     0,   115,     0,   119,     0,
   126,     0,   128,     0,   127,     0,   123,     0,   124,     0,
   125,     0,   111,     0,    41,   101,    98,    65,    42,     0,
    24,   101,    98,    65,    42,     0,     0,    98,   100,     0,
   100,     0,    99,   100,     0,    13,   103,    45,     0,     0,
    14,   103,    45,     0,    14,   102,    21,   120,    45,     0,
    36,   103,    36,     0,    36,   102,    21,   120,    36,     0,
     0,   103,     0,   104,     0,   103,    46,   104,     0,   120,
     0,   120,    28,    92,     0,    82,    27,    82,     0,   131,
    82,     0,   105,     0,   106,    46,   105,     0,     0,   106,
     0,   109,     0,   108,    46,   109,     0,   114,   120,     0,
   114,   120,    28,    92,     0,    51,    43,   112,    44,     0,
    51,   121,    43,   112,    44,     0,    43,   112,    44,     0,
   121,    43,   112,    44,     0,     0,   113,    64,     0,    96,
     0,   113,    46,    96,     0,     0,    32,     0,    37,     0,
    33,     0,     4,     0,    31,     4,     0,     5,     0,    31,
     5,     0,     6,     0,    31,     6,     0,    23,     0,   116,
     0,   117,     0,   116,   118,     0,   115,   118,     0,   118,
     0,    31,   118,     0,     3,     0,    11,     0,    10,     0,
    18,     0,    19,     0,    17,     0,     9,     0,     7,     0,
     8,     0,    20,     0,    29,     0,    37,     0,    32,     0,
    33,     0,    31,     0,    34,     0,    35,     0,    36,     0,
    30,     0,   130,     0,   131,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   191,   193,
   204,   215,   228,   249,   258,   263,   276,   296,   302,   320,
   326,   327,   328,   329,   330,   331,   333,   343,   345,   347,
   349,   351,   364,   367,   394,   412,   439,   467,   486,   514,
   541,   559,   584,   612,   631,   659,   678,   695,   711,   712,
   713,   714,   715,   728,   742,   747,   751,   762,   767,   777,
   782,   796,   812,   813,   814,   815,   818,   819,   825,   828,
   829,   833,   834,   836,   841,   843,   850,   858,   859,   863,
   865,   869,   870,   874,   878,   879,   882,   884,   888,   889,
   894,   895,   896,   897,   898,   899,   900,   901,   902,   905,
   908,   911,   912,   913,   914,   915,   916,   917,   918,   919,
   922,   923,   924,   925,   926,   927,   928,   929,   930,   933,
   936,   941,   942,   946,   947,   951,   955,   956,   960,   964,
   968,   975,   976,   979,   980,   984,   986,   990,   992,   999,
  1000,  1004,  1005,  1008,  1009,  1013,  1015,  1021,  1023,  1027,
  1029,  1033,  1034,  1037,  1038,  1042,  1043,  1045,  1047,  1051,
  1052,  1061,  1062,  1071,  1072,  1083,  1086,  1087,  1088,  1094,
  1102,  1109,  1118,  1121,  1124,  1127,  1130,  1133,  1136,  1139,
  1142,  1145,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,
  1158,  1161,  1162,  1165
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","':'","'='","BINOP",
"KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","'.'","'`'","UMINUS",
"'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root","classes",
"classextensions","classdef","classextension","optname","superclass","classvardecls",
"classvardecl","methods","methoddef","optsemi","optcomma","funcbody","cmdlinecode",
"methbody","primitive","retval","funretval","blocklist1","blocklist","msgsend",
"expr1","valrangex1","valrangeassign","valrangexd","valrange2","expr","adverb",
"exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1","keyarglist1",
"keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral","pushname",
"pushliteral","listliteral","block","funcvardecls","funcvardecls1","funcvardecl",
"argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef","dictslotlist1",
"dictslotlist","rwslotdeflist","rwslotdef","listlit","listlit2","literallistc",
"literallist1","rwspec","integer","floatr","accidental","pie","floatp","name",
"classname","primname","trueobj","falseobj","nilobj","ascii","symbol","string",
"pseudovar","binop","keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    52,    52,    52,    53,    53,    54,    54,    55,    55,    56,
    57,    57,    58,    58,    59,    59,    60,    60,    61,    61,
    62,    62,    62,    62,    63,    63,    64,    64,    65,    65,
    66,    66,    66,    67,    67,    68,    68,    69,    69,    70,
    70,    71,    71,    72,    72,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    75,    75,    75,    76,    76,    76,    77,
    77,    77,    77,    77,    77,    78,    78,    78,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    80,    80,    80,    80,    81,    81,    82,    83,
    83,    84,    84,    84,    84,    84,    84,    85,    85,    86,
    86,    87,    87,    88,    89,    89,    90,    90,    91,    91,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    93,
    94,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    97,
    97,    98,    98,    99,    99,   100,   101,   101,   101,   101,
   101,   102,   102,   103,   103,   104,   104,   105,   105,   106,
   106,   107,   107,   108,   108,   109,   109,   110,   110,   111,
   111,   112,   112,   113,   113,   114,   114,   114,   114,   115,
   115,   116,   116,   117,   117,   118,   119,   119,   119,   119,
   119,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   130,   130,   130,   130,   130,   130,   130,
   131,   132,   132,   133
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     5,     4,     2,
     5,     6,     5,     6,     7,     7,     6,     8,     7,     4,
     1,     1,     1,     1,     1,     3,     2,     3,     3,     3,
     1,     4,     1,     5,     5,     6,     7,     7,     8,     6,
     6,     7,     8,     8,     9,     2,     3,     5,     1,     1,
     1,     1,     5,     2,     4,     3,     4,     5,     7,     4,
     6,     7,     0,     2,     2,     4,     1,     3,     2,     0,
     2,     1,     3,     2,     3,     4,     5,     1,     3,     2,
     4,     1,     3,     2,     0,     2,     1,     3,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     5,
     5,     0,     2,     1,     2,     3,     0,     3,     5,     3,
     5,     0,     1,     1,     3,     1,     3,     3,     2,     1,
     3,     0,     1,     1,     3,     2,     4,     4,     5,     3,
     4,     0,     2,     1,     3,     0,     1,     1,     1,     1,
     2,     1,     2,     1,     2,     1,     1,     1,     2,     2,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   213,   200,   202,   204,   220,
   221,   219,   214,   234,     0,   218,   216,   217,   222,   206,
   167,     0,     0,   167,   110,   182,     0,     0,     0,    33,
     3,    29,    65,    89,    73,    91,    90,   107,    25,    40,
    62,    63,    61,   140,    40,   164,   150,   142,   207,   208,
   211,   143,   141,    92,   147,   148,   149,   144,   146,   145,
    71,    64,     0,     5,    13,     7,     0,   174,   176,   172,
   172,   162,   201,   203,   205,   212,   182,    94,   162,   231,
   112,     0,    27,     0,     0,     0,     0,    40,   180,   183,
     0,     0,    25,    67,   192,     0,   127,   129,     0,     0,
   223,   227,   225,   226,   228,   229,   230,   224,     0,   232,
   233,   103,    26,   109,    30,    32,   165,   210,   209,     0,
     0,    46,    42,   110,     0,    50,    19,     0,    11,     0,
   166,     0,     0,     0,   173,     0,   173,    40,    40,     0,
    68,    28,   111,   114,    86,    69,     0,     0,     0,    66,
     0,     0,    70,   179,    26,    41,     0,   192,   194,   159,
     0,    27,   151,   152,     0,   156,   157,   158,   153,   155,
   154,     0,     0,     0,   192,     0,   118,     0,     0,     0,
    44,     0,     0,   108,    96,     0,   125,   125,    43,     0,
   125,   125,     0,   122,     0,     0,    14,     0,    12,    15,
   175,     0,   177,   139,   131,   132,   136,   137,   138,   133,
   135,   134,     0,   168,     0,   170,     0,   163,     0,   113,
   115,     0,    87,   178,     0,    31,     0,   181,    97,     0,
   188,    28,   193,   192,   100,   128,   130,     0,     0,     0,
    72,     0,     0,     0,   125,   125,     0,     0,     0,    45,
    60,     0,     0,   105,   104,    95,   120,     0,     0,     0,
     0,    49,     0,     0,     0,    44,   124,   228,    10,    20,
     0,     0,    13,    19,     0,     0,   161,   160,     0,   116,
     0,   190,   195,     0,   189,    75,    74,     0,     0,   119,
     0,     0,    93,     0,     0,    44,    98,   125,   125,     0,
     0,     0,   126,    44,    48,    44,    53,   123,    51,     0,
     0,   167,   167,     0,   196,   196,    16,     0,   169,   171,
   117,    88,   191,     0,     0,    76,   101,    81,    80,     0,
     0,    44,    57,    54,     0,     0,    44,   106,   121,     0,
    47,    52,   167,   167,   162,   162,    15,   197,   199,   198,
     0,   184,     0,     0,     8,    78,    77,     0,     0,     0,
    82,   102,    56,    44,    59,    55,    99,   162,   162,    36,
    36,    19,    18,   196,   186,    17,    79,    84,    83,     0,
    58,    36,    36,   215,    38,    25,    38,     0,   185,     0,
    85,    38,    38,     0,     0,    34,    38,    37,     0,     9,
   187,     0,     0,    25,    21,    35,    23,    22,    24,    39,
     0,     0,     0
};

static const short yydefgoto[] = {   411,
     3,     4,    64,     5,   198,   130,   274,   317,   196,   270,
   114,   143,    30,    31,   395,   385,   396,    32,   250,   251,
    33,    34,    35,    36,    37,    86,    38,   183,    39,   177,
    82,    83,   178,   188,   303,   194,   259,    96,    97,   203,
    41,    42,    43,   159,    44,   138,    45,   218,    72,   134,
    67,    68,    89,    90,    91,   351,   352,    47,   160,   161,
   162,   353,    48,    49,    50,    51,    52,    53,    54,   386,
    55,    56,    57,    58,    59,    60,    61,   110,   111,   112,
    62
};

static const short yypact[] = {   151,
   442,    20,    20,     6,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    44,-32768,-32768,-32768,-32768,-32768,
    13,   220,  1030,    13,   687,   390,  1030,    44,    18,-32768,
-32768,-32768,-32768,     9,-32768,-32768,-32768,  1174,    26,    32,
-32768,-32768,-32768,-32768,   491,-32768,-32768,    71,    71,-32768,
-32768,-32768,   137,   203,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    63,-32768,    31,-32768,   158,-32768,    81,    44,
    44,-32768,-32768,-32768,-32768,-32768,   540,-32768,-32768,-32768,
    89,    83,    96,  1030,  1030,   115,   170,   491,-32768,   126,
   132,  1030,  1157,   155,  1099,   167,     5,-32768,   168,   736,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    17,-32768,
-32768,   160,  1030,-32768,-32768,-32768,-32768,-32768,-32768,  1030,
   785,     4,-32768,   687,   589,     4,-32768,    20,    44,   173,
-32768,    44,  1078,   198,   225,   202,   -34,   491,   491,  1030,
-32768,   687,-32768,-32768,-32768,-32768,  1030,  1030,  1030,-32768,
   185,   687,-32768,-32768,-32768,-32768,  1030,  1099,-32768,-32768,
   193,   194,    71,-32768,   204,-32768,-32768,-32768,-32768,-32768,
-32768,  1030,    44,    44,  1099,  1030,-32768,    33,   834,   589,
   227,    15,  1030,  1174,  1174,  1030,   207,   212,-32768,   222,
   207,   212,   145,-32768,  1030,  1112,-32768,   229,-32768,-32768,
-32768,    11,-32768,-32768,    71,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    44,-32768,    44,-32768,   235,-32768,   237,-32768,
   258,  1030,-32768,-32768,   265,-32768,   269,-32768,  1174,   248,
-32768,  1099,-32768,  1099,  1174,-32768,-32768,   266,   267,   883,
   281,  1030,  1030,    46,   207,   212,   169,  1030,   589,     4,
-32768,   308,  1030,-32768,-32768,   275,-32768,   638,   268,   287,
   270,-32768,   271,   272,   287,     4,-32768,  1148,-32768,-32768,
   280,   285,   295,   223,   283,   294,-32768,-32768,  1030,-32768,
  1030,-32768,-32768,   291,-32768,   303,   310,   292,  1030,-32768,
   296,   932,   316,   298,   299,     4,  1174,   207,   212,   217,
   300,  1030,   304,    58,-32768,     4,-32768,-32768,-32768,   311,
   312,    13,    13,   313,    87,    87,-32768,  1124,-32768,-32768,
-32768,-32768,-32768,  1030,  1030,   321,  1174,   329,   331,   318,
  1030,     4,-32768,-32768,   319,   322,     4,-32768,-32768,  1030,
-32768,-32768,    13,    13,-32768,-32768,-32768,-32768,-32768,-32768,
   236,-32768,    44,   238,-32768,  1174,  1174,  1030,  1030,  1030,
   332,  1174,-32768,     4,-32768,-32768,  1174,-32768,-32768,   121,
   121,   223,-32768,    87,   338,-32768,  1174,  1174,  1174,  1030,
-32768,   121,   121,-32768,   981,   324,   981,  1136,-32768,  1078,
  1174,   981,   981,  1030,   330,-32768,   326,-32768,   334,-32768,
-32768,   336,   337,  1157,-32768,-32768,-32768,-32768,-32768,-32768,
   371,   373,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   376,-32768,   108,    35,-32768,  -266,-32768,
   -89,   221,   -10,-32768,  -223,  -226,   -12,   347,   252,   -76,
-32768,-32768,-32768,-32768,-32768,-32768,   -17,-32768,-32768,    -1,
   264,-32768,  -114,   -87,   -82,   125,    57,-32768,-32768,    10,
   -37,-32768,-32768,   172,-32768,   -70,   379,    22,   -19,   335,
   219,   279,   263,-32768,-32768,   100,    43,  -130,-32768,  -122,
-32768,-32768,   -61,-32768,-32768,    -9,   -58,   -14,    30,-32768,
   -53,   -45,   -32,   -26,   -25,   -22,-32768,  -166,   209,-32768,
-32768
};


#define	YYLAST		1212


static const short yytable[] = {    40,
    69,   216,   204,   156,    79,    78,   187,   318,   139,    93,
   191,   132,    76,    94,    98,   123,   123,     6,     7,     6,
     6,    13,    46,    81,    87,   173,    70,    21,    13,   272,
    13,    63,    65,   163,   116,   230,   164,   192,   118,   119,
     2,   166,   193,    40,    24,   252,     6,    46,    71,   167,
   174,   100,   238,    95,   240,    69,    69,   128,    99,   179,
    95,   253,   168,   180,   244,   245,   117,   292,   169,   170,
   113,   205,   171,   129,   206,    87,   241,   151,   242,   207,
    27,    21,   144,   145,   189,   340,    40,   208,   189,   293,
   154,   242,   246,    20,   181,   184,   163,   247,    24,   164,
   209,   311,   185,   127,   166,   388,   210,   211,   133,   117,
   212,   284,   167,   163,   199,   140,   164,    69,   348,   349,
   254,   166,    81,   350,   165,   168,   141,   217,   219,   167,
   384,   169,   170,    15,   298,   171,    40,    40,   220,   229,
   221,   142,   168,   123,   387,   223,   224,   225,   169,   170,
   227,   272,   171,   118,   235,   392,   393,   197,   236,   237,
    21,   299,   146,   399,   120,   256,   300,   255,   402,   403,
   163,   152,   163,   164,   239,   164,     1,    24,   166,   153,
   166,   271,   157,   121,   257,     2,   167,   165,   167,   309,
   265,   147,   266,   267,   172,   118,   148,   182,   275,   168,
   276,   168,   131,   132,   165,   169,   170,   169,   170,   171,
   175,   171,   189,   200,   265,   149,   296,   150,   213,   334,
   280,   272,   215,    73,    74,    75,    21,   341,   123,   342,
   297,    99,   226,    84,    92,   315,   231,   316,   288,   232,
   290,   291,    20,    24,   261,   124,   234,   263,   264,   125,
    21,   301,   258,   310,   248,   363,   290,   260,   123,   204,
   366,   165,   265,   165,   337,   262,   123,    24,   123,   214,
   132,   327,   273,   249,   370,   371,   277,   321,   278,   322,
   373,   374,   376,   374,   279,    92,   281,   381,   135,   137,
   330,   282,   345,   346,   123,   148,   398,   382,   383,   123,
   339,   294,   295,   271,   122,   126,   356,   357,   289,   285,
   286,    73,   109,   362,   410,   304,    80,   305,   306,   307,
   312,   128,   367,   368,   369,   313,   123,   319,   205,   320,
   324,   206,    84,   195,   323,   326,   207,   325,   375,   328,
   377,   378,   379,   331,   208,   332,   333,   338,   358,   265,
   222,   343,   344,   347,   335,   336,   359,   209,   360,   380,
    92,   361,   391,   210,   211,   390,   364,   212,   155,   365,
   412,   405,   413,   271,   394,   407,   404,   408,   409,    66,
   314,   372,   233,   397,   406,   397,   115,   190,   195,   308,
   397,   397,     6,     7,     8,     9,    10,    11,    12,   401,
    13,    14,    15,   283,    88,   136,    16,    17,    18,    19,
   201,    85,    20,    21,   228,   354,   389,     0,     0,    80,
    22,     0,     0,     0,     0,     0,     0,     0,    23,     0,
    24,     0,    25,     0,     0,     0,    77,     0,     0,    28,
    29,     0,     0,     0,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,    15,     0,     0,   195,    16,    17,
    18,    19,     0,     0,    20,    21,   195,     0,   195,     0,
     0,     0,    22,   195,     0,     0,     0,     0,     0,     0,
    23,     0,    24,     0,    25,     0,     0,     0,    26,     0,
    27,    28,    29,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,    15,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,     0,    23,
     0,    24,     0,    25,     0,     0,     0,    77,     0,    27,
    28,    29,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,    85,    20,    21,     0,     0,     0,     0,     0,    80,
    22,     0,     0,     0,     0,     0,     0,     0,    23,     0,
    24,     0,    25,     0,     0,     0,    77,     0,     0,    28,
    29,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,     0,    80,    22,
     0,     0,   186,     0,     0,     0,     0,    23,     0,    24,
     0,    25,     0,     0,     0,    77,     0,     0,    28,    29,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,     0,    80,    22,     0,
     0,   302,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
     0,     0,     0,     0,     0,    23,     0,    24,     0,    25,
     0,     0,     0,    77,     0,     0,    28,    29,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,   176,    20,    21,
     0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
     0,     0,     0,     0,    23,     0,    24,     0,    25,     0,
     0,     0,    77,     0,     0,    28,    29,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,     0,     0,    22,     0,     0,   186,     0,
     0,     0,     0,    23,     0,    24,     0,    25,     0,     0,
     0,    77,     0,     0,    28,    29,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,   243,    20,    21,     0,     0,
     0,     0,     0,     0,    22,     0,     0,     0,     0,     0,
     0,     0,    23,     0,    24,     0,    25,     0,     0,     0,
    77,     0,     0,    28,    29,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,     0,     0,    22,     0,     0,     0,     0,     0,     0,
     0,    23,     0,    24,     0,    25,   287,     0,     0,    77,
     0,     0,    28,    29,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
     0,     0,    22,     0,     0,     0,     0,     0,     0,     0,
    23,     0,    24,     0,    25,   329,     0,     0,    77,     0,
     0,    28,    29,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,     0,    23,
     0,    24,     0,    25,     0,     0,     0,    77,     0,   394,
    28,    29,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
    22,     0,     0,     0,     0,     0,     0,     0,    23,     0,
    24,     0,    25,     0,     0,     0,    77,     0,     0,    28,
    29,     7,     8,     9,    10,    11,    12,     0,     0,     0,
     0,     0,     0,     0,    16,    17,    18,     0,     0,     0,
    20,     0,     7,     8,     9,    10,    11,    12,    22,    13,
     0,     0,     0,     0,     6,    16,    17,    18,     0,     0,
     0,    20,     0,     0,     0,     0,     6,     0,   202,    22,
     0,     0,     0,     0,     0,     0,     0,     0,     6,     0,
   101,   158,   102,   103,   104,   268,   106,   107,   108,     0,
     6,     0,   101,   269,   102,   103,   104,   268,   106,   107,
   108,     0,     0,     0,   101,   355,   102,   103,   104,   268,
   106,   107,   108,     0,     0,     0,   101,   400,   102,   103,
   104,   105,   106,   107,   108,   101,    80,   102,   103,   104,
   105,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     0,   155,   101,    80,   102,   103,   104,   105,   106,   107,
   108,   109
};

static const short yycheck[] = {     1,
    15,    36,   133,    93,    24,    23,   121,   274,    79,    27,
   125,    46,    22,    28,    29,    53,    54,     3,     4,     3,
     3,    11,     1,    25,    26,    21,    14,    24,    11,   196,
    11,     2,     3,    95,    45,   158,    95,   125,    48,    49,
    35,    95,   125,    45,    41,    31,     3,    26,    36,    95,
    46,    43,   175,    43,    22,    70,    71,    27,    29,    43,
    43,    47,    95,    47,   179,   180,    45,    22,    95,    95,
    45,   133,    95,    43,   133,    77,    44,    88,    46,   133,
    49,    24,    84,    85,   122,    28,    88,   133,   126,    44,
    92,    46,   180,    23,   109,   113,   158,   180,    41,   158,
   133,   268,   120,    41,   158,   372,   133,   133,    28,    88,
   133,   234,   158,   175,   129,    27,   175,   132,    32,    33,
   182,   175,   124,    37,    95,   158,    44,   138,   139,   175,
    10,   158,   158,    13,   249,   158,   138,   139,   140,   157,
   142,    46,   175,   181,   371,   147,   148,   149,   175,   175,
   152,   318,   175,   163,   172,   382,   383,   128,   173,   174,
    24,   249,    48,   387,    28,   183,   249,   182,   392,   393,
   232,    46,   234,   232,   176,   234,    26,    41,   232,    48,
   234,   196,    28,    47,   186,    35,   232,   158,   234,   266,
    46,    22,    48,   195,    28,   205,    27,    38,   213,   232,
   215,   234,    45,    46,   175,   232,   232,   234,   234,   232,
    43,   234,   250,    41,    46,    46,    48,    48,    21,   296,
   222,   388,    21,     4,     5,     6,    24,   304,   266,   306,
   248,   202,    48,    25,    26,    13,    44,    15,   240,    46,
   242,   243,    23,    41,   188,    43,    43,   191,   192,    47,
    24,   253,    46,   268,    28,   332,   258,    46,   296,   390,
   337,   232,    46,   234,    48,    44,   304,    41,   306,    45,
    46,   289,    44,    47,   345,   346,    42,   279,    42,   281,
    45,    46,    45,    46,    27,    77,    22,   364,    70,    71,
   292,    44,   312,   313,   332,    27,   386,   368,   369,   337,
   302,   245,   246,   318,    53,    54,   324,   325,    28,    44,
    44,     4,    38,   331,   404,    48,    30,    48,    48,    48,
    41,    27,   340,   343,   344,    41,   364,    45,   390,    36,
    28,   390,   124,   125,    44,    44,   390,    28,   353,    44,
   358,   359,   360,    28,   390,    48,    48,    48,    28,    46,
   142,    41,    41,    41,   298,   299,    28,   390,    28,    28,
   152,    44,   380,   390,   390,    28,    48,   390,    45,    48,
     0,    42,     0,   388,    49,    42,   394,    42,    42,     4,
   273,   347,   162,   385,   397,   387,    40,   124,   180,   265,
   392,   393,     3,     4,     5,     6,     7,     8,     9,   390,
    11,    12,    13,   232,    26,    71,    17,    18,    19,    20,
   132,    22,    23,    24,   152,   316,   374,    -1,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,
    51,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    13,    -1,    -1,   249,    17,    18,
    19,    20,    -1,    -1,    23,    24,   258,    -1,   260,    -1,
    -1,    -1,    31,   265,    -1,    -1,    -1,    -1,    -1,    -1,
    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,
    49,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    13,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    49,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    30,    31,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    39,    -1,    41,
    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,
    -1,    34,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,
    43,    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,
    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,
    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    -1,    50,    51,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,
    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,
    47,    -1,    -1,    50,    51,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    39,    -1,    41,    -1,    43,    44,    -1,    -1,    47,
    -1,    -1,    50,    51,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    39,    -1,    41,    -1,    43,    44,    -1,    -1,    47,    -1,
    -1,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    49,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,
    51,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    17,    18,    19,    -1,    -1,    -1,
    23,    -1,     4,     5,     6,     7,     8,     9,    31,    11,
    -1,    -1,    -1,    -1,     3,    17,    18,    19,    -1,    -1,
    -1,    23,    -1,    -1,    -1,    -1,     3,    -1,    51,    31,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    29,    43,    31,    32,    33,    34,    35,    36,    37,    -1,
     3,    -1,    29,    42,    31,    32,    33,    34,    35,    36,
    37,    -1,    -1,    -1,    29,    42,    31,    32,    33,    34,
    35,    36,    37,    -1,    -1,    -1,    29,    42,    31,    32,
    33,    34,    35,    36,    37,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 49:
#line 192 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 50:
#line 194 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 205 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 216 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 53:
#line 229 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 54:
#line 250 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 55:
#line 259 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 56:
#line 264 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 277 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 58:
#line 297 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 59:
#line 303 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 60:
#line 321 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 66:
#line 332 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 67:
#line 334 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 68:
#line 344 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 69:
#line 346 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 70:
#line 348 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 71:
#line 350 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 72:
#line 352 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 368 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 395 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 413 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 440 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 468 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 487 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 515 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 542 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 560 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 585 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 84:
#line 613 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 632 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 660 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 87:
#line 679 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 88:
#line 696 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 92:
#line 714 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 93:
#line 716 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 94:
#line 729 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 95:
#line 743 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 96:
#line 748 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 97:
#line 752 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 98:
#line 763 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 99:
#line 768 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 100:
#line 778 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 101:
#line 783 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 797 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 812 "lang11d"
{ yyval = 0; ;
    break;}
case 104:
#line 813 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 105:
#line 814 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 106:
#line 815 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 108:
#line 820 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 110:
#line 828 "lang11d"
{ yyval = 0; ;
    break;}
case 111:
#line 830 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 113:
#line 835 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 114:
#line 837 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 115:
#line 842 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 116:
#line 844 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 117:
#line 851 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 119:
#line 860 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 120:
#line 864 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 121:
#line 866 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 123:
#line 871 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 124:
#line 875 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 125:
#line 878 "lang11d"
{ yyval = 0; ;
    break;}
case 126:
#line 879 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 127:
#line 883 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 128:
#line 885 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 130:
#line 890 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 131:
#line 894 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 895 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 896 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 897 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 898 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 899 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 900 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 138:
#line 901 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 139:
#line 902 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 140:
#line 905 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 141:
#line 908 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 142:
#line 911 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 912 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 913 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 914 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 146:
#line 915 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 147:
#line 916 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 148:
#line 917 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 149:
#line 918 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 150:
#line 919 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 151:
#line 922 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 923 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 924 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 925 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 926 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 927 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 928 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 929 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 159:
#line 930 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 160:
#line 934 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 161:
#line 937 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 162:
#line 941 "lang11d"
{ yyval = 0; ;
    break;}
case 163:
#line 943 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 165:
#line 948 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 166:
#line 952 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 167:
#line 955 "lang11d"
{ yyval = 0; ;
    break;}
case 168:
#line 957 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 169:
#line 961 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 170:
#line 965 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 171:
#line 969 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 172:
#line 975 "lang11d"
{ yyval = 0; ;
    break;}
case 175:
#line 981 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 176:
#line 985 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 177:
#line 987 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 178:
#line 991 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 179:
#line 993 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 181:
#line 1001 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 182:
#line 1004 "lang11d"
{ yyval = 0; ;
    break;}
case 185:
#line 1010 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 186:
#line 1014 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 187:
#line 1016 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 188:
#line 1022 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 189:
#line 1024 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 190:
#line 1028 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 191:
#line 1030 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 192:
#line 1033 "lang11d"
{ yyval = 0; ;
    break;}
case 195:
#line 1039 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 196:
#line 1042 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 197:
#line 1044 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 198:
#line 1046 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 199:
#line 1048 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 200:
#line 1051 "lang11d"
{ yyval = zzval; ;
    break;}
case 201:
#line 1053 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 202:
#line 1061 "lang11d"
{ yyval = zzval; ;
    break;}
case 203:
#line 1063 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 204:
#line 1071 "lang11d"
{ yyval = zzval; ;
    break;}
case 205:
#line 1073 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 206:
#line 1083 "lang11d"
{ yyval = zzval; ;
    break;}
case 209:
#line 1089 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 210:
#line 1095 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 211:
#line 1103 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 212:
#line 1110 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 213:
#line 1118 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 1121 "lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1124 "lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1127 "lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1130 "lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1133 "lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1136 "lang11d"
{ yyval = zzval; ;
    break;}
case 220:
#line 1139 "lang11d"
{ yyval = zzval; ;
    break;}
case 221:
#line 1142 "lang11d"
{ yyval = zzval; ;
    break;}
case 222:
#line 1145 "lang11d"
{ yyval = zzval; ;
    break;}
case 223:
#line 1148 "lang11d"
{ yyval = zzval; ;
    break;}
case 224:
#line 1149 "lang11d"
{ yyval = zzval; ;
    break;}
case 225:
#line 1150 "lang11d"
{ yyval = zzval; ;
    break;}
case 226:
#line 1151 "lang11d"
{ yyval = zzval; ;
    break;}
case 227:
#line 1152 "lang11d"
{ yyval = zzval; ;
    break;}
case 228:
#line 1153 "lang11d"
{ yyval = zzval; ;
    break;}
case 229:
#line 1154 "lang11d"
{ yyval = zzval; ;
    break;}
case 230:
#line 1155 "lang11d"
{ yyval = zzval; ;
    break;}
case 231:
#line 1158 "lang11d"
{ yyval = zzval; ;
    break;}
case 234:
#line 1165 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1167 "lang11d"
