
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	VAR	266
#define	ARG	267
#define	CLASSVAR	268
#define	CONST	269
#define	NILOBJ	270
#define	TRUEOBJ	271
#define	FALSEOBJ	272
#define	INFINITUMOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BINOP	281
#define	KEYBINOP	282
#define	READWRITEVAR	283
#define	DOUBLEEQUAL	284
#define	UMINUS	285

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		405
#define	YYFLAG		-32768
#define	YYNTBASE	53

#define YYTRANSLATE(x) ((unsigned)(x) <= 285 ? yytranslate[x] : 133)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    52,     2,     2,     2,     2,    48,
    49,    34,    35,    47,    31,    39,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    27,    46,    32,
    28,    33,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    44,     2,    45,    50,     2,    40,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    42,    36,    43,    51,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    29,    30,    37,    38,    41
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   160,   167,
   175,   183,   190,   199,   207,   212,   214,   216,   218,   220,
   224,   227,   231,   235,   239,   241,   246,   252,   258,   263,
   268,   270,   276,   282,   289,   297,   305,   314,   321,   328,
   336,   345,   354,   364,   367,   371,   377,   379,   381,   383,
   389,   391,   394,   398,   402,   406,   411,   417,   425,   430,
   437,   445,   447,   451,   454,   455,   458,   460,   464,   467,
   471,   476,   482,   484,   488,   491,   496,   498,   502,   505,
   506,   509,   511,   515,   517,   521,   523,   525,   527,   529,
   531,   533,   535,   537,   539,   541,   543,   545,   547,   549,
   551,   553,   555,   557,   559,   561,   563,   565,   567,   569,
   571,   573,   575,   577,   579,   581,   583,   585,   591,   597,
   598,   601,   603,   606,   610,   611,   615,   621,   625,   631,
   632,   634,   636,   640,   642,   646,   650,   653,   655,   659,
   660,   662,   664,   668,   671,   676,   681,   687,   691,   696,
   697,   700,   702,   706,   707,   709,   711,   713,   715,   718,
   720,   723,   725,   728,   730,   732,   734,   737,   740,   742,
   745,   747,   749,   751,   753,   755,   757,   759,   761,   763,
   765,   767,   769,   771,   773,   775,   777,   779,   781,   783,
   785
};

static const short yyrhs[] = {    54,
     0,    55,     0,    26,    67,     0,     0,    54,    56,     0,
    57,     0,    55,    57,     0,   121,    59,    42,    60,    62,
    43,     0,   121,    44,    58,    45,    59,    42,    60,    62,
    43,     0,    35,   121,    42,    62,    43,     0,     0,   120,
     0,     0,    27,   121,     0,     0,    60,    61,     0,    14,
   108,    46,     0,    12,   108,    46,     0,     0,    62,    63,
     0,   120,    42,   101,    98,    69,    68,    43,     0,    34,
   120,    42,   101,    98,    69,    68,    43,     0,   131,    42,
   101,    98,    69,    68,    43,     0,    34,   131,    42,   101,
    98,    69,    68,    43,     0,     0,    46,     0,     0,    47,
     0,    71,     0,    82,    71,     0,    48,    99,    66,    49,
     0,    99,    66,     0,    66,     0,    70,     0,    82,    70,
     0,     0,   122,    64,     0,     0,    50,    80,    64,     0,
     0,    50,    80,    64,     0,    93,     0,    72,    93,     0,
     0,    72,     0,   120,    72,     0,   120,    48,    85,    89,
    49,    73,     0,   120,    48,    86,    89,    49,     0,    80,
    39,    48,    87,    49,    73,     0,    80,    39,   120,    48,
    87,    49,    73,     0,    80,    39,    48,    85,    89,    49,
    73,     0,    80,    39,    48,    86,    89,    49,     0,    80,
    39,   120,    48,    85,    89,    49,    73,     0,    80,    39,
   120,    48,    86,    89,    49,     0,    80,    39,   120,    73,
     0,    95,     0,    93,     0,    94,     0,    74,     0,    48,
    82,    49,     0,    51,   120,     0,    44,    83,    45,     0,
    48,    79,    49,     0,    48,   107,    49,     0,   130,     0,
   121,    48,    87,    49,     0,   121,    48,    85,    89,    49,
     0,   121,    48,    86,    89,    49,     0,   121,    44,    83,
    45,     0,    75,    44,    85,    45,     0,    76,     0,    75,
    44,    85,    22,    45,     0,    75,    44,    22,    82,    45,
     0,    75,    44,    85,    22,    82,    45,     0,    75,    44,
    85,    22,    45,    28,    80,     0,    75,    44,    22,    82,
    45,    28,    80,     0,    75,    44,    85,    22,    82,    45,
    28,    80,     0,    80,    39,    44,    85,    22,    45,     0,
    80,    39,    44,    22,    82,    45,     0,    80,    39,    44,
    85,    22,    82,    45,     0,    80,    39,    44,    85,    22,
    45,    28,    80,     0,    80,    39,    44,    22,    82,    45,
    28,    80,     0,    80,    39,    44,    85,    22,    82,    45,
    28,    80,     0,    22,    82,     0,    82,    22,    82,     0,
    82,    47,    82,    22,    82,     0,    75,     0,    78,     0,
    77,     0,    80,    39,    44,    85,    45,     0,   121,     0,
    40,    80,     0,    80,   131,    80,     0,    80,   132,    80,
     0,   120,    28,    80,     0,    51,   120,    28,    80,     0,
    80,    39,   120,    28,    80,     0,   120,    48,    85,    89,
    49,    28,    80,     0,    52,    90,    28,    80,     0,    75,
    44,    85,    45,    28,    80,     0,    80,    39,    44,    85,
    45,    28,    80,     0,    80,     0,    81,    46,    80,     0,
    81,    64,     0,     0,    84,    65,     0,    82,     0,    82,
    27,    82,     0,   132,    82,     0,    84,    47,    82,     0,
    84,    47,   132,    82,     0,    84,    47,    82,    27,    82,
     0,    82,     0,    85,    47,    82,     0,    34,    82,     0,
    85,    47,    34,    82,     0,    88,     0,    87,    47,    88,
     0,   132,    82,     0,     0,    47,    87,     0,    91,     0,
    91,    21,   120,     0,   120,     0,    91,    47,   120,     0,
   115,     0,   119,     0,   127,     0,   129,     0,   128,     0,
   123,     0,   124,     0,   125,     0,   126,     0,   110,     0,
    97,     0,   120,     0,   115,     0,   119,     0,   127,     0,
   129,     0,   128,     0,   123,     0,   124,     0,   125,     0,
   126,     0,   110,     0,   115,     0,   119,     0,   127,     0,
   129,     0,   128,     0,   123,     0,   124,     0,   125,     0,
   126,     0,   111,     0,    42,   101,    98,    66,    43,     0,
    24,   101,    98,    66,    43,     0,     0,    98,   100,     0,
   100,     0,    99,   100,     0,    12,   103,    46,     0,     0,
    13,   103,    46,     0,    13,   102,    21,   120,    46,     0,
    36,   103,    36,     0,    36,   102,    21,   120,    36,     0,
     0,   103,     0,   104,     0,   103,    47,   104,     0,   120,
     0,   120,    28,    92,     0,    82,    27,    82,     0,   132,
    82,     0,   105,     0,   106,    47,   105,     0,     0,   106,
     0,   109,     0,   108,    47,   109,     0,   114,   120,     0,
   114,   120,    28,    92,     0,    52,    44,   112,    45,     0,
    52,   121,    44,   112,    45,     0,    44,   112,    45,     0,
   121,    44,   112,    45,     0,     0,   113,    65,     0,    96,
     0,   113,    47,    96,     0,     0,    32,     0,    37,     0,
    33,     0,     4,     0,    31,     4,     0,     5,     0,    31,
     5,     0,     6,     0,    31,     6,     0,    23,     0,   116,
     0,   117,     0,   116,   118,     0,   115,   118,     0,   118,
     0,    31,   118,     0,     3,     0,    11,     0,    10,     0,
    17,     0,    18,     0,    16,     0,    19,     0,     9,     0,
     7,     0,     8,     0,    20,     0,    29,     0,    37,     0,
    38,     0,    32,     0,    33,     0,    31,     0,    34,     0,
    35,     0,    36,     0,    30,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   186,   195,
   200,   213,   228,   234,   247,   253,   254,   255,   256,   257,
   259,   269,   271,   273,   275,   277,   288,   301,   317,   319,
   332,   335,   362,   380,   407,   435,   454,   482,   509,   527,
   552,   580,   599,   627,   646,   663,   679,   680,   681,   682,
   695,   697,   711,   716,   721,   725,   736,   741,   751,   756,
   770,   786,   787,   793,   796,   797,   801,   802,   804,   809,
   811,   818,   826,   827,   831,   833,   837,   838,   842,   846,
   847,   850,   852,   856,   857,   862,   863,   864,   865,   866,
   867,   868,   869,   870,   871,   874,   877,   880,   881,   882,
   883,   884,   885,   886,   887,   888,   889,   892,   893,   894,
   895,   896,   897,   898,   899,   900,   901,   904,   907,   912,
   913,   917,   918,   922,   926,   927,   931,   935,   939,   946,
   947,   950,   951,   955,   957,   961,   963,   970,   971,   975,
   976,   979,   980,   984,   986,   992,   994,   998,  1000,  1004,
  1005,  1008,  1009,  1013,  1014,  1016,  1018,  1022,  1023,  1032,
  1033,  1042,  1043,  1054,  1057,  1058,  1059,  1065,  1073,  1080,
  1089,  1092,  1095,  1098,  1101,  1104,  1107,  1110,  1113,  1116,
  1119,  1122,  1123,  1124,  1125,  1126,  1127,  1128,  1129,  1130,
  1133
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR",
"ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","INFINITUMOBJ","PSEUDOVAR",
"ELLIPSIS","DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","':'","'='",
"BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","DOUBLEEQUAL",
"'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'",
"'#'","root","classes","classextensions","classdef","classextension","optname",
"superclass","classvardecls","classvardecl","methods","methoddef","optsemi",
"optcomma","funcbody","cmdlinecode","methbody","primitive","retval","funretval",
"blocklist1","blocklist","msgsend","expr1","valrangex1","valrangeassign","valrangexd",
"valrange2","expr","exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1",
"keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral",
"pushname","pushliteral","listliteral","block","funcvardecls","funcvardecls1",
"funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef",
"dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","listlit","listlit2",
"literallistc","literallist1","rwspec","integer","floatr","accidental","pie",
"floatp","name","classname","primname","trueobj","falseobj","nilobj","infobj",
"ascii","symbol","string","pseudovar","binop","keybinop", NULL
};
#endif

static const short yyr1[] = {     0,
    53,    53,    53,    54,    54,    55,    55,    56,    56,    57,
    58,    58,    59,    59,    60,    60,    61,    61,    62,    62,
    63,    63,    63,    63,    64,    64,    65,    65,    66,    66,
    67,    67,    67,    68,    68,    69,    69,    70,    70,    71,
    71,    72,    72,    73,    73,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    76,    76,    76,    77,    77,    77,    78,    78,    78,
    78,    78,    78,    79,    79,    79,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
    80,    81,    81,    82,    83,    83,    84,    84,    84,    84,
    84,    84,    85,    85,    86,    86,    87,    87,    88,    89,
    89,    90,    90,    91,    91,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    93,    94,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    96,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    97,    97,    98,
    98,    99,    99,   100,   101,   101,   101,   101,   101,   102,
   102,   103,   103,   104,   104,   105,   105,   106,   106,   107,
   107,   108,   108,   109,   109,   110,   110,   111,   111,   112,
   112,   113,   113,   114,   114,   114,   114,   115,   115,   116,
   116,   117,   117,   118,   119,   119,   119,   119,   119,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   132
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     5,     6,     7,
     7,     6,     8,     7,     4,     1,     1,     1,     1,     3,
     2,     3,     3,     3,     1,     4,     5,     5,     4,     4,
     1,     5,     5,     6,     7,     7,     8,     6,     6,     7,
     8,     8,     9,     2,     3,     5,     1,     1,     1,     5,
     1,     2,     3,     3,     3,     4,     5,     7,     4,     6,
     7,     1,     3,     2,     0,     2,     1,     3,     2,     3,
     4,     5,     1,     3,     2,     4,     1,     3,     2,     0,
     2,     1,     3,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     5,     0,
     2,     1,     2,     3,     0,     3,     5,     3,     5,     0,
     1,     1,     3,     1,     3,     3,     2,     1,     3,     0,
     1,     1,     3,     2,     4,     4,     5,     3,     4,     0,
     2,     1,     3,     0,     1,     1,     1,     1,     2,     1,
     2,     1,     2,     1,     1,     1,     2,     2,     1,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   211,   198,   200,   202,   219,
   220,   218,   212,     0,   216,   214,   215,   217,   221,   204,
   165,     0,     0,   165,   105,   180,     0,     0,     0,    33,
     3,    29,    59,    87,    71,    89,    88,   102,    25,    40,
    57,    58,    56,   136,    40,   162,   147,   138,   205,   206,
   209,   139,   137,    91,   143,   144,   145,   146,   140,   142,
   141,    65,     0,     5,    13,     7,     0,   172,   174,   170,
   170,   160,   199,   201,   203,   210,   180,    92,   160,   231,
   107,     0,    27,     0,     0,     0,     0,    40,   178,   181,
     0,     0,    25,    61,   190,     0,   122,   124,     0,     0,
   222,   227,   225,   226,   228,   229,   230,   223,   224,     0,
     0,     0,    26,   104,    30,    32,   163,   208,   207,     0,
     0,    46,    42,   105,     0,    19,     0,    11,     0,   164,
     0,     0,     0,   171,     0,   171,    40,    40,     0,    62,
    28,   106,   109,    84,    63,     0,     0,     0,    60,     0,
     0,    64,   177,    26,    41,     0,   190,   192,   157,     0,
    27,   148,   149,     0,   153,   154,   155,   156,   150,   152,
   151,     0,     0,     0,   190,     0,   113,     0,     0,     0,
    44,    93,    94,   103,    95,     0,   120,   120,    43,     0,
   120,   120,     0,   117,     0,     0,    14,     0,    12,    15,
   173,     0,   175,   135,   126,   127,   131,   132,   133,   134,
   128,   130,   129,     0,   166,     0,   168,     0,   161,     0,
   108,   110,     0,    85,   176,     0,    31,     0,   179,    96,
     0,   186,    28,   191,   190,    99,   123,   125,     0,     0,
     0,    70,     0,     0,     0,   120,   120,     0,     0,     0,
    45,    55,   115,     0,     0,     0,     0,    69,     0,     0,
     0,    66,   119,   228,    10,    20,     0,     0,    13,    19,
     0,     0,   159,   158,     0,   111,     0,   188,   193,     0,
   187,    73,    72,     0,     0,   114,     0,     0,    90,     0,
     0,    44,    97,   120,   120,     0,     0,   121,    44,    48,
    67,    68,   118,     0,     0,   165,   165,     0,   194,   194,
    16,     0,   167,   169,   112,    86,   189,     0,     0,    74,
   100,    79,    78,     0,     0,    44,    52,    49,     0,     0,
    44,   116,     0,    47,   165,   165,   160,   160,    15,   195,
   197,   196,     0,   182,     0,     0,     8,    76,    75,     0,
     0,     0,    80,   101,    51,    44,    54,    50,    98,   160,
   160,    36,    36,    19,    18,   194,   184,    17,    77,    82,
    81,     0,    53,    36,    36,   213,    38,    25,    38,     0,
   183,     0,    83,    38,    38,     0,     0,    34,    38,    37,
     0,     9,   185,     0,     0,    25,    21,    35,    23,    22,
    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   403,
     3,     4,    64,     5,   198,   129,   270,   311,   196,   266,
   114,   142,    30,    31,   387,   377,   388,    32,   251,   252,
    33,    34,    35,    36,    37,    86,    38,    39,   177,    82,
    83,   178,   188,   298,   194,   255,    96,    97,   203,    41,
    42,    43,   158,    44,   137,    45,   219,    72,   133,    67,
    68,    89,    90,    91,   343,   344,    47,   159,   160,   161,
   345,    48,    49,    50,    51,    52,    53,    54,   378,    55,
    56,    57,    58,    59,    60,    61,    62,   111,   112
};

static const short yypact[] = {   141,
   447,    36,    36,    18,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    29,-32768,-32768,-32768,-32768,-32768,-32768,
    10,   232,  1047,    10,   697,   397,  1047,    29,    27,-32768,
-32768,-32768,-32768,    22,-32768,-32768,-32768,  1205,    35,    23,
-32768,-32768,-32768,-32768,   497,-32768,-32768,    84,    84,-32768,
-32768,-32768,   149,    56,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    75,-32768,    -8,-32768,   -35,-32768,   104,    29,
    29,-32768,-32768,-32768,-32768,-32768,   547,-32768,-32768,-32768,
   116,   112,   118,  1047,  1047,   130,     7,   497,-32768,   143,
   147,  1047,  1187,   177,  1124,   207,    -4,-32768,   170,   747,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     4,
  1047,  1047,  1047,-32768,-32768,-32768,-32768,-32768,-32768,  1047,
   797,    -3,-32768,   697,   597,-32768,    36,    29,   197,-32768,
    29,  1096,   220,    13,   227,    38,   497,   497,  1047,-32768,
   697,-32768,-32768,-32768,-32768,  1047,  1047,  1047,-32768,   200,
   697,-32768,-32768,-32768,-32768,  1047,  1124,-32768,-32768,   213,
   205,    84,-32768,   216,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1047,    29,    29,  1124,  1047,-32768,   148,   847,   597,
   202,   225,   225,  1205,  1205,  1047,   218,   222,-32768,   228,
   218,   222,    65,-32768,  1047,   309,-32768,   230,-32768,-32768,
-32768,    -2,-32768,-32768,    84,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    29,-32768,    29,-32768,   229,-32768,   234,
-32768,   251,  1047,-32768,-32768,   260,-32768,   256,-32768,  1205,
   241,-32768,  1124,-32768,  1124,  1205,-32768,-32768,   245,   246,
   897,   267,  1047,  1047,   178,   218,   222,   135,  1047,   597,
    -3,-32768,-32768,   647,   248,   277,   261,-32768,   262,   270,
   277,-32768,-32768,  1177,-32768,-32768,   278,   279,   282,   194,
   276,   288,-32768,-32768,  1047,-32768,  1047,-32768,-32768,   283,
-32768,   301,   302,   286,  1047,-32768,   292,   947,   311,   299,
   300,    -3,  1205,   218,   222,   164,  1047,   303,   203,-32768,
-32768,-32768,-32768,   312,   315,    10,    10,   316,   196,   196,
-32768,  1141,-32768,-32768,-32768,-32768,-32768,  1047,  1047,   325,
  1205,   332,   333,   317,  1047,    -3,-32768,-32768,   314,   319,
    -3,-32768,  1047,-32768,    10,    10,-32768,-32768,-32768,-32768,
-32768,-32768,   125,-32768,    29,   174,-32768,  1205,  1205,  1047,
  1047,  1047,   336,  1205,-32768,    -3,-32768,-32768,  1205,-32768,
-32768,    21,    21,   194,-32768,   196,   337,-32768,  1205,  1205,
  1205,  1047,-32768,    21,    21,-32768,   997,   324,   997,  1154,
-32768,  1096,  1205,   997,   997,  1047,   328,-32768,   322,-32768,
   334,-32768,-32768,   338,   339,  1187,-32768,-32768,-32768,-32768,
-32768,-32768,   375,   379,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   376,-32768,   117,    46,-32768,  -265,-32768,
   -90,   226,   -10,-32768,  -260,  -253,     0,   350,   340,  -157,
-32768,-32768,-32768,-32768,-32768,-32768,   -17,-32768,    -1,   271,
-32768,    67,  -117,   -88,   136,    79,-32768,-32768,     9,   -33,
-32768,-32768,   163,-32768,   -57,   372,    25,   -22,   341,   186,
   280,   259,-32768,-32768,    97,    52,  -128,-32768,  -130,-32768,
-32768,   -82,-32768,-32768,    19,   -77,   -13,    59,-32768,   -67,
   -55,   -46,   -31,   -26,   -23,   -16,-32768,  -182,   138
};


#define	YYLAST		1244


static const short yytable[] = {    40,
    69,    79,   155,   204,   312,    78,     6,   192,    13,    93,
   130,   131,   162,   268,    94,    98,   173,   163,   127,   123,
    21,   138,    70,    81,    87,    46,   231,   165,   146,     6,
   376,     6,    14,   147,   116,   128,   193,    13,    24,   166,
    76,    95,   174,    40,   239,    71,    13,   179,   167,   205,
    46,   180,     2,   148,   206,   149,    69,    69,   215,   131,
    63,    65,   247,   168,   207,   100,   118,   119,   169,   117,
    95,   170,    27,   217,   162,    87,   208,   150,   171,   163,
   113,   305,   143,   144,   131,   209,    40,    99,   189,   165,
   153,   248,   162,   182,   183,   184,   181,   163,   380,   124,
   210,   166,   185,   125,   280,   211,    20,   165,   212,   379,
   167,   261,   117,   262,   199,   213,   126,    69,   391,   166,
   384,   385,    81,   394,   395,   168,   218,   220,   167,   268,
   169,   132,   295,   170,   328,    40,    40,   221,   230,   222,
   171,   334,   139,   168,   224,   225,   226,   123,   169,   228,
   162,   170,   162,   164,   236,   163,   140,   163,   171,   237,
   238,   296,    84,    92,   141,   165,     1,   165,   355,   241,
   365,   366,    21,   358,   240,     2,   120,   166,   145,   166,
   118,   261,   267,   292,   253,   197,   167,   187,   167,   151,
    24,   191,   242,   263,   243,   152,   121,   268,   373,   288,
   271,   168,   272,   168,   156,   309,   169,   310,   169,   170,
   261,   170,   331,   175,    92,   164,   171,   189,   171,   368,
   366,   276,   289,   118,   243,    21,    21,   340,   341,   249,
   333,   293,   342,   164,   172,    73,    74,    75,   200,   284,
   214,   286,   287,    24,    24,   245,   246,   216,   227,   250,
   304,   233,   286,   204,    20,   134,   136,   232,   123,   235,
    99,    84,   195,   110,   254,   123,   257,   321,   256,   259,
   260,   273,   258,   315,   269,   316,   274,   275,   223,   362,
   363,   277,   147,   337,   338,   278,   324,   390,    92,   281,
   282,   164,   123,   164,   285,   332,   299,   123,   267,   205,
   348,   349,   374,   375,   206,   402,    80,   354,   127,   300,
   301,     6,   360,   361,   207,   359,   294,   195,   302,   306,
   307,   313,   123,   314,   290,   291,   208,   317,   318,   319,
   320,   367,   369,   370,   371,   209,   322,   101,   325,   102,
   103,   104,   264,   106,   107,   108,   109,   326,   327,   261,
   210,   265,   350,   335,   383,   211,   336,   339,   212,   351,
   352,   353,   356,   372,   382,   213,   267,   357,   396,   154,
   397,   386,   329,   330,   404,   389,   399,   389,   405,    66,
   400,   401,   389,   389,   364,   308,   234,   195,   398,   115,
   393,   195,   122,   195,   190,   279,   303,    88,   195,     6,
     7,     8,     9,    10,    11,    12,   346,    13,    14,   229,
   201,   135,    15,    16,    17,    18,    19,   381,    85,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    26,     0,    27,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,    27,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,    85,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
   186,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
   297,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,   176,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
   186,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,   244,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,   283,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,   323,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,   386,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     7,
     8,     9,    10,    11,    12,     0,     0,     0,     0,     0,
     0,    15,    16,    17,    18,     0,     0,     0,    20,     0,
     0,     0,     0,     0,     0,     0,    22,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,    15,
    16,    17,    18,     6,     0,     0,    20,   202,     0,     0,
     0,     0,     0,     0,    22,     0,     6,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   157,     0,   101,
     0,   102,   103,   104,   264,   106,   107,   108,   109,     6,
     0,     0,   101,   347,   102,   103,   104,   264,   106,   107,
   108,   109,     0,     0,     0,     0,   392,     0,     0,     0,
     0,     0,     0,     0,     0,   101,     0,   102,   103,   104,
   105,   106,   107,   108,   109,   101,    80,   102,   103,   104,
   105,   106,   107,   108,   109,   110,     0,     0,     0,     0,
     0,     0,   154,   101,    80,   102,   103,   104,   105,   106,
   107,   108,   109,   110
};

static const short yycheck[] = {     1,
    14,    24,    93,   132,   270,    23,     3,   125,    11,    27,
    46,    47,    95,   196,    28,    29,    21,    95,    27,    53,
    24,    79,    13,    25,    26,     1,   157,    95,    22,     3,
    10,     3,    12,    27,    45,    44,   125,    11,    42,    95,
    22,    44,    47,    45,   175,    36,    11,    44,    95,   132,
    26,    48,    35,    47,   132,    49,    70,    71,    46,    47,
     2,     3,   180,    95,   132,    44,    48,    49,    95,    45,
    44,    95,    50,    36,   157,    77,   132,    88,    95,   157,
    46,   264,    84,    85,    47,   132,    88,    29,   122,   157,
    92,   180,   175,   111,   112,   113,   110,   175,   364,    44,
   132,   157,   120,    48,   235,   132,    23,   175,   132,   363,
   157,    47,    88,    49,   128,   132,    42,   131,   379,   175,
   374,   375,   124,   384,   385,   157,   137,   138,   175,   312,
   157,    28,   250,   157,   292,   137,   138,   139,   156,   141,
   157,   299,    27,   175,   146,   147,   148,   181,   175,   151,
   233,   175,   235,    95,   172,   233,    45,   235,   175,   173,
   174,   250,    25,    26,    47,   233,    26,   235,   326,    22,
    46,    47,    24,   331,   176,    35,    28,   233,    49,   235,
   162,    47,   196,    49,   186,   127,   233,   121,   235,    47,
    42,   125,    45,   195,    47,    49,    48,   380,   356,    22,
   214,   233,   216,   235,    28,    12,   233,    14,   235,   233,
    47,   235,    49,    44,    77,   157,   233,   251,   235,    46,
    47,   223,    45,   205,    47,    24,    24,    32,    33,    28,
    28,   249,    37,   175,    28,     4,     5,     6,    42,   241,
    21,   243,   244,    42,    42,   179,   180,    21,    49,    48,
   264,    47,   254,   382,    23,    70,    71,    45,   292,    44,
   202,   124,   125,    39,    47,   299,   188,   285,    47,   191,
   192,    43,    45,   275,    45,   277,    43,    27,   141,   337,
   338,    22,    27,   306,   307,    45,   288,   378,   151,    45,
    45,   233,   326,   235,    28,   297,    49,   331,   312,   382,
   318,   319,   360,   361,   382,   396,    30,   325,    27,    49,
    49,     3,   335,   336,   382,   333,   250,   180,    49,    42,
    42,    46,   356,    36,   246,   247,   382,    45,    28,    28,
    45,   345,   350,   351,   352,   382,    45,    29,    28,    31,
    32,    33,    34,    35,    36,    37,    38,    49,    49,    47,
   382,    43,    28,    42,   372,   382,    42,    42,   382,    28,
    28,    45,    49,    28,    28,   382,   380,    49,   386,    46,
    43,    50,   294,   295,     0,   377,    43,   379,     0,     4,
    43,    43,   384,   385,   339,   269,   161,   250,   389,    40,
   382,   254,    53,   256,   124,   233,   261,    26,   261,     3,
     4,     5,     6,     7,     8,     9,   310,    11,    12,   151,
   131,    71,    16,    17,    18,    19,    20,   366,    22,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    50,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    50,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    45,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    45,    -1,    -1,    48,    -1,    -1,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    50,    51,    52,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
    44,    -1,    -1,    -1,    48,    -1,    -1,    51,    52,     4,
     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
    -1,    16,    17,    18,    19,    -1,    -1,    -1,    23,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    31,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,
    17,    18,    19,     3,    -1,    -1,    23,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    31,    -1,     3,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    29,
    -1,    31,    32,    33,    34,    35,    36,    37,    38,     3,
    -1,    -1,    29,    43,    31,    32,    33,    34,    35,    36,
    37,    38,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,    33,
    34,    35,    36,    37,    38,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 49:
#line 187 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 196 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 201 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 214 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 53:
#line 229 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 235 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 55:
#line 248 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 258 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 260 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 62:
#line 270 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 63:
#line 272 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 64:
#line 274 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 65:
#line 276 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 66:
#line 278 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 67:
#line 289 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 68:
#line 302 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 69:
#line 318 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 70:
#line 320 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 336 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 363 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 381 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 408 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 436 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 455 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 483 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 510 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 528 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 553 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 581 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 600 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 84:
#line 628 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 647 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 664 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 90:
#line 683 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 696 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 92:
#line 698 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 93:
#line 712 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 94:
#line 717 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 95:
#line 722 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 96:
#line 726 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 737 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 98:
#line 742 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 99:
#line 752 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 100:
#line 757 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 771 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 788 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 105:
#line 796 "lang11d"
{ yyval = 0; ;
    break;}
case 106:
#line 798 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 108:
#line 803 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 109:
#line 805 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 110:
#line 810 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 111:
#line 812 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 112:
#line 819 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode(yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 114:
#line 828 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 115:
#line 832 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 116:
#line 834 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 118:
#line 839 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 119:
#line 843 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 120:
#line 846 "lang11d"
{ yyval = 0; ;
    break;}
case 121:
#line 847 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 122:
#line 851 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 123:
#line 853 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 125:
#line 858 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 126:
#line 862 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 863 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 128:
#line 864 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 129:
#line 865 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 866 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 867 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 868 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 869 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 870 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 871 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 136:
#line 874 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 137:
#line 877 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 138:
#line 880 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 139:
#line 881 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 140:
#line 882 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 141:
#line 883 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 142:
#line 884 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 885 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 886 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 887 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 146:
#line 888 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 147:
#line 889 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 148:
#line 892 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 149:
#line 893 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 150:
#line 894 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 151:
#line 895 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 896 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 897 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 898 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 899 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 900 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 901 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 158:
#line 905 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 159:
#line 908 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 160:
#line 912 "lang11d"
{ yyval = 0; ;
    break;}
case 161:
#line 914 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 163:
#line 919 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 923 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 165:
#line 926 "lang11d"
{ yyval = 0; ;
    break;}
case 166:
#line 928 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 167:
#line 932 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 168:
#line 936 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 169:
#line 940 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 170:
#line 946 "lang11d"
{ yyval = 0; ;
    break;}
case 173:
#line 952 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 174:
#line 956 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 175:
#line 958 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 176:
#line 962 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 177:
#line 964 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 179:
#line 972 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 180:
#line 975 "lang11d"
{ yyval = 0; ;
    break;}
case 183:
#line 981 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 184:
#line 985 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 185:
#line 987 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 186:
#line 993 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 187:
#line 995 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 188:
#line 999 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 189:
#line 1001 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 190:
#line 1004 "lang11d"
{ yyval = 0; ;
    break;}
case 193:
#line 1010 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 194:
#line 1013 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 195:
#line 1015 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 196:
#line 1017 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 197:
#line 1019 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 198:
#line 1022 "lang11d"
{ yyval = zzval; ;
    break;}
case 199:
#line 1024 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 200:
#line 1032 "lang11d"
{ yyval = zzval; ;
    break;}
case 201:
#line 1034 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 202:
#line 1042 "lang11d"
{ yyval = zzval; ;
    break;}
case 203:
#line 1044 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->slot.uf + 0.5);
					fracval = node->slot.uf - intval;
					node->slot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 204:
#line 1054 "lang11d"
{ yyval = zzval; ;
    break;}
case 207:
#line 1060 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 208:
#line 1066 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 209:
#line 1074 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 210:
#line 1081 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 211:
#line 1089 "lang11d"
{ yyval = zzval; ;
    break;}
case 212:
#line 1092 "lang11d"
{ yyval = zzval; ;
    break;}
case 213:
#line 1095 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 1098 "lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1101 "lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1104 "lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1107 "lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1110 "lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1113 "lang11d"
{ yyval = zzval; ;
    break;}
case 220:
#line 1116 "lang11d"
{ yyval = zzval; ;
    break;}
case 221:
#line 1119 "lang11d"
{ yyval = zzval; ;
    break;}
case 222:
#line 1122 "lang11d"
{ yyval = zzval; ;
    break;}
case 223:
#line 1123 "lang11d"
{ yyval = zzval; ;
    break;}
case 224:
#line 1124 "lang11d"
{ yyval = zzval; ;
    break;}
case 225:
#line 1125 "lang11d"
{ yyval = zzval; ;
    break;}
case 226:
#line 1126 "lang11d"
{ yyval = zzval; ;
    break;}
case 227:
#line 1127 "lang11d"
{ yyval = zzval; ;
    break;}
case 228:
#line 1128 "lang11d"
{ yyval = zzval; ;
    break;}
case 229:
#line 1129 "lang11d"
{ yyval = zzval; ;
    break;}
case 230:
#line 1130 "lang11d"
{ yyval = zzval; ;
    break;}
case 231:
#line 1133 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1136 "lang11d"
