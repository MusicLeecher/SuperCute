
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	SYMBOL	260
#define	STRING	261
#define	ASCII	262
#define	PRIMITIVENAME	263
#define	CLASSNAME	264
#define	VAR	265
#define	ARG	266
#define	CLASSVAR	267
#define	CONST	268
#define	NILOBJ	269
#define	TRUEOBJ	270
#define	FALSEOBJ	271
#define	INFINITUMOBJ	272
#define	PSEUDOVAR	273
#define	ELLIPSIS	274
#define	DOTDOT	275
#define	PIE	276
#define	BADTOKEN	277
#define	INTERPRET	278
#define	BINOP	279
#define	KEYBINOP	280
#define	READWRITEVAR	281
#define	DOUBLEEQUAL	282
#define	UMINUS	283

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		364
#define	YYFLAG		-32768
#define	YYNTBASE	51

#define YYTRANSLATE(x) ((unsigned)(x) <= 283 ? yytranslate[x] : 128)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    50,     2,     2,     2,     2,    46,
    47,    32,    33,    45,    29,    37,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    25,    44,    30,
    26,    31,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    42,     2,    43,    48,     2,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    40,    34,    41,    49,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    27,    28,
    35,    36,    39
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   161,   169,
   177,   186,   191,   193,   195,   197,   199,   203,   206,   210,
   214,   218,   220,   225,   231,   236,   241,   243,   249,   255,
   262,   269,   276,   284,   288,   294,   296,   298,   304,   306,
   309,   313,   317,   321,   326,   332,   340,   345,   352,   360,
   362,   366,   369,   370,   373,   375,   379,   381,   385,   388,
   389,   392,   394,   398,   400,   404,   406,   408,   410,   412,
   414,   416,   418,   420,   422,   424,   426,   428,   430,   432,
   434,   436,   438,   440,   442,   444,   446,   448,   450,   452,
   454,   456,   458,   460,   462,   464,   466,   468,   474,   481,
   482,   485,   487,   490,   494,   495,   499,   505,   509,   515,
   516,   518,   520,   524,   526,   530,   534,   537,   539,   543,
   544,   546,   548,   552,   555,   560,   565,   571,   575,   580,
   581,   584,   586,   590,   591,   593,   595,   597,   599,   602,
   604,   607,   609,   611,   614,   617,   619,   622,   624,   626,
   628,   630,   632,   634,   636,   638,   640,   642,   645,   647,
   649,   651,   653,   655,   657,   659,   661,   663,   665,   667
};

static const short yyrhs[] = {    52,
     0,    53,     0,    24,    65,     0,     0,    52,    54,     0,
    55,     0,    53,    55,     0,   115,    57,    40,    58,    60,
    41,     0,   115,    42,    56,    43,    57,    40,    58,    60,
    41,     0,    33,   115,    40,    60,    41,     0,     0,   114,
     0,     0,    25,   115,     0,     0,    58,    59,     0,    13,
   103,    44,     0,    11,   103,    44,     0,     0,    60,    61,
     0,   114,    40,    96,    93,    67,    66,    41,     0,    32,
   114,    40,    96,    93,    67,    66,    41,     0,   126,    40,
    96,    93,    67,    66,    41,     0,    32,   126,    40,    96,
    93,    67,    66,    41,     0,     0,    44,     0,     0,    45,
     0,    69,     0,    79,    69,     0,    46,    94,    64,    47,
     0,    94,    64,     0,    64,     0,    68,     0,    79,    68,
     0,     0,   116,    62,     0,     0,    48,    77,    62,     0,
     0,    48,    77,    62,     0,    88,     0,    70,    88,     0,
     0,    70,     0,   114,    70,     0,   114,    46,    81,    84,
    47,    71,     0,    77,    37,    46,    82,    47,    71,     0,
    77,    37,   114,    46,    82,    47,    71,     0,    77,    37,
    46,    81,    84,    47,    71,     0,    77,    37,   114,    46,
    81,    84,    47,    71,     0,    77,    37,   114,    71,     0,
    90,     0,    88,     0,    89,     0,    72,     0,    46,    79,
    47,     0,    49,   114,     0,    42,    80,    43,     0,    46,
    76,    47,     0,    46,   102,    47,     0,   125,     0,   115,
    46,    82,    47,     0,   115,    46,    81,    84,    47,     0,
   115,    42,    80,    43,     0,    73,    42,    81,    43,     0,
    74,     0,    73,    42,    81,    21,    43,     0,    73,    42,
    21,    79,    43,     0,    73,    42,    81,    21,    79,    43,
     0,    77,    37,    42,    81,    21,    43,     0,    77,    37,
    42,    21,    79,    43,     0,    77,    37,    42,    81,    21,
    79,    43,     0,    79,    21,    79,     0,    79,    45,    79,
    21,    79,     0,    73,     0,    75,     0,    77,    37,    42,
    81,    43,     0,   115,     0,    38,    77,     0,    77,   126,
    77,     0,    77,   127,    77,     0,   114,    26,    77,     0,
    49,   114,    26,    77,     0,    77,    37,   114,    26,    77,
     0,   114,    46,    81,    84,    47,    26,    77,     0,    50,
    85,    26,    77,     0,    73,    42,    81,    43,    26,    77,
     0,    77,    37,    42,    81,    43,    26,    77,     0,    77,
     0,    78,    44,    77,     0,    78,    62,     0,     0,    81,
    63,     0,    79,     0,    81,    45,    79,     0,    83,     0,
    82,    45,    83,     0,   127,    79,     0,     0,    45,    82,
     0,    86,     0,    86,    20,   114,     0,   114,     0,    86,
    45,   114,     0,   110,     0,   113,     0,   121,     0,   123,
     0,   122,     0,   117,     0,   118,     0,   119,     0,   120,
     0,   105,     0,    92,     0,   114,     0,   110,     0,   113,
     0,   121,     0,   123,     0,   122,     0,   117,     0,   118,
     0,   119,     0,   120,     0,   105,     0,   110,     0,   113,
     0,   121,     0,   123,     0,   122,     0,   117,     0,   118,
     0,   119,     0,   120,     0,   106,     0,    40,    96,    93,
    64,    41,     0,    50,    40,    96,    93,    64,    41,     0,
     0,    93,    95,     0,    95,     0,    94,    95,     0,    11,
    98,    44,     0,     0,    12,    98,    44,     0,    12,    97,
    20,   114,    44,     0,    34,    98,    34,     0,    34,    97,
    20,   114,    34,     0,     0,    98,     0,    99,     0,    98,
    45,    99,     0,   114,     0,   114,    26,    87,     0,    77,
    25,    77,     0,   127,    77,     0,   100,     0,   101,    45,
   100,     0,     0,   101,     0,   104,     0,   103,    45,   104,
     0,   109,   114,     0,   109,   114,    26,    87,     0,    50,
    42,   107,    43,     0,    50,   115,    42,   107,    43,     0,
    42,   107,    43,     0,   115,    42,   107,    43,     0,     0,
   108,    63,     0,    91,     0,   108,    45,    91,     0,     0,
    30,     0,    35,     0,    31,     0,     4,     0,    29,     4,
     0,     5,     0,    29,     5,     0,    22,     0,   111,     0,
   111,   112,     0,   110,   112,     0,   112,     0,    29,   112,
     0,     3,     0,    10,     0,     9,     0,    16,     0,    17,
     0,    15,     0,    18,     0,     8,     0,     6,     0,   124,
     0,   123,   124,     0,     7,     0,    19,     0,    27,     0,
    35,     0,    36,     0,    30,     0,    31,     0,    29,     0,
    32,     0,    33,     0,    34,     0,    28,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    35,    37,    39,    43,    44,    48,    49,    53,    57,    64,
    70,    71,    74,    75,    79,    80,    84,    86,    90,    91,
    95,    98,   101,   104,   109,   110,   113,   114,   117,   118,
   122,   124,   126,   130,   131,   135,   136,   140,   142,   146,
   148,   152,   153,   159,   160,   163,   167,   172,   181,   186,
   199,   205,   211,   212,   213,   214,   215,   217,   227,   229,
   231,   233,   235,   246,   259,   261,   274,   277,   304,   322,
   349,   376,   394,   421,   438,   454,   455,   456,   469,   471,
   485,   490,   495,   499,   510,   515,   525,   530,   544,   560,
   561,   567,   570,   571,   574,   575,   579,   580,   584,   588,
   589,   592,   594,   598,   599,   604,   605,   606,   607,   608,
   609,   610,   611,   612,   613,   616,   619,   622,   623,   624,
   625,   626,   627,   628,   629,   630,   631,   634,   635,   636,
   637,   638,   639,   640,   641,   642,   643,   646,   649,   654,
   655,   659,   660,   664,   668,   669,   673,   677,   681,   688,
   689,   692,   693,   697,   699,   703,   705,   712,   713,   717,
   718,   721,   722,   726,   728,   734,   736,   740,   742,   746,
   747,   750,   751,   755,   756,   758,   760,   764,   765,   774,
   775,   784,   787,   788,   794,   802,   809,   818,   821,   824,
   827,   830,   833,   836,   839,   842,   845,   846,   872,   875,
   878,   879,   880,   881,   882,   883,   884,   885,   886,   889
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR","ARG","CLASSVAR",
"CONST","NILOBJ","TRUEOBJ","FALSEOBJ","INFINITUMOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BADTOKEN","INTERPRET","':'","'='","BINOP","KEYBINOP","'-'","'<'",
"'>'","'*'","'+'","'|'","READWRITEVAR","DOUBLEEQUAL","'.'","'`'","UMINUS","'{'",
"'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root","classes",
"classextensions","classdef","classextension","optname","superclass","classvardecls",
"classvardecl","methods","methoddef","optsemi","optcomma","funcbody","cmdlinecode",
"methbody","primitive","retval","funretval","blocklist1","blocklist","msgsend",
"expr1","valrangex1","valrangexd","valrange2","expr","exprn","exprseq","arglistc",
"arglist1","keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral",
"blockliteral","pushname","pushliteral","listliteral","block","funcvardecls",
"funcvardecls1","funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef",
"dictslotdef","dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","listlit",
"listlit2","literallistc","literallist1","rwspec","integer","floatr","pie","floatp",
"name","classname","primname","trueobj","falseobj","nilobj","infobj","ascii",
"symbol","string","string1","pseudovar","binop","keybinop", NULL
};
#endif

static const short yyr1[] = {     0,
    51,    51,    51,    52,    52,    53,    53,    54,    54,    55,
    56,    56,    57,    57,    58,    58,    59,    59,    60,    60,
    61,    61,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    66,    66,    67,    67,    68,    68,    69,
    69,    70,    70,    71,    71,    72,    72,    72,    72,    72,
    72,    72,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    74,    74,    74,
    75,    75,    75,    76,    76,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
    78,    79,    80,    80,    81,    81,    82,    82,    83,    84,
    84,    85,    85,    86,    86,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    88,    89,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    92,    92,    93,
    93,    94,    94,    95,    96,    96,    96,    96,    96,    97,
    97,    98,    98,    99,    99,   100,   100,   101,   101,   102,
   102,   103,   103,   104,   104,   105,   105,   106,   106,   107,
   107,   108,   108,   109,   109,   109,   109,   110,   110,   111,
   111,   112,   113,   113,   113,   113,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   123,   124,   125,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   127
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     6,     7,     7,
     8,     4,     1,     1,     1,     1,     3,     2,     3,     3,
     3,     1,     4,     5,     4,     4,     1,     5,     5,     6,
     6,     6,     7,     3,     5,     1,     1,     5,     1,     2,
     3,     3,     3,     4,     5,     7,     4,     6,     7,     1,
     3,     2,     0,     2,     1,     3,     1,     3,     2,     0,
     2,     1,     3,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     6,     0,
     2,     1,     2,     3,     0,     3,     5,     3,     5,     0,
     1,     1,     3,     1,     3,     3,     2,     1,     3,     0,
     1,     1,     3,     2,     4,     4,     5,     3,     4,     0,
     2,     1,     3,     0,     1,     1,     1,     1,     2,     1,
     2,     1,     1,     2,     2,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   188,   178,   180,   196,   199,
   195,   189,     0,   193,   191,   192,   194,   200,   182,     0,
     0,   145,    93,   160,     0,     0,     0,    33,     3,    29,
    56,    76,    67,    77,    90,    25,    40,    54,    55,    53,
   116,    40,   142,   127,   118,   183,   186,   119,   117,    79,
   123,   124,   125,   126,   120,   122,   121,   197,    62,     0,
     5,    13,     7,     0,   152,   154,   179,   181,   187,   160,
    80,   150,   150,   140,    95,     0,    27,   210,     0,    90,
     0,    40,   158,   161,     0,     0,    25,    58,   145,   170,
     0,   102,   104,     0,     0,   201,   206,   204,   205,   207,
   208,   209,   202,   203,     0,     0,     0,    26,    92,    30,
    32,   143,   185,   184,     0,     0,     0,    46,    42,    93,
     0,   198,    19,     0,    11,     0,   144,     0,     0,     0,
   151,     0,   151,    40,    59,    28,    94,    60,     0,     0,
     0,    57,     0,     0,    61,   157,    26,    41,     0,   140,
   170,   172,   137,     0,    27,   128,   129,     0,   133,   134,
   135,   136,   130,   132,   131,     0,     0,     0,   170,     0,
     0,     0,     0,    44,    81,    82,    91,    83,   100,    43,
     0,   100,     0,    97,     0,     0,    14,     0,    12,    15,
   153,     0,   155,   115,   106,   107,   111,   112,   113,   114,
   108,   110,   109,     0,   146,     0,   148,     0,   141,    96,
   156,    74,     0,    31,     0,   159,    84,    40,     0,   166,
    28,   171,   170,    87,   103,   105,     0,     0,     0,    66,
     0,     0,     0,   100,     0,     0,     0,    45,    52,     0,
     0,    65,     0,     0,    63,    99,   207,    10,    20,     0,
     0,    13,    19,     0,     0,   138,     0,     0,   168,   173,
     0,   167,    69,    68,     0,     0,     0,     0,    78,     0,
    44,    85,   100,     0,   101,    44,    64,    98,     0,     0,
   145,   145,     0,   174,   174,    16,     0,   147,   149,    75,
   139,   169,    70,    88,    72,    71,     0,     0,    44,    48,
     0,    44,     0,    47,   145,   145,   140,   140,    15,   175,
   177,   176,     0,   162,     0,     0,     8,    73,    89,    50,
    44,    49,    86,   140,   140,    36,    36,    19,    18,   174,
   164,    17,    51,    36,    36,   190,    38,    25,    38,     0,
   163,     0,    38,    38,     0,     0,    34,    38,    37,     0,
     9,   165,     0,     0,    25,    21,    35,    23,    22,    24,
    39,     0,     0,     0
};

static const short yydefgoto[] = {   362,
     3,     4,    61,     5,   188,   126,   253,   286,   186,   249,
   109,   137,    28,    29,   346,   337,   347,    30,   238,   239,
    31,    32,    33,    34,    79,    35,    36,    75,    76,    77,
   183,   184,   241,    91,    92,   193,    38,    39,    40,   152,
    41,   134,    42,   209,    74,   130,    64,    65,    83,    84,
    85,   313,   314,    44,   153,   154,   155,   315,    45,    46,
    47,    48,    49,    50,   338,    51,    52,    53,    54,    55,
    56,    57,    58,    59,   106,   107
};

static const short yypact[] = {    78,
   341,     8,     8,    10,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    43,-32768,-32768,-32768,-32768,-32768,-32768,   119,
   773,    16,   773,   389,   773,    43,   173,-32768,-32768,-32768,
-32768,    25,-32768,-32768,   922,    38,    56,-32768,-32768,-32768,
-32768,   437,-32768,-32768,   108,   108,-32768,-32768,   194,    61,
-32768,-32768,-32768,-32768,-32768,-32768,   144,-32768,-32768,    75,
-32768,    12,-32768,   116,-32768,   164,-32768,-32768,-32768,   485,
-32768,    43,    43,-32768,-32768,   155,   160,-32768,   163,   911,
   159,   437,-32768,   171,   180,   773,   893,   210,    16,   820,
   221,    -7,-32768,   200,   533,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    17,   773,   773,   773,-32768,-32768,
-32768,-32768,-32768,-32768,   773,   773,   225,    92,-32768,   773,
   485,-32768,-32768,     8,    43,   239,-32768,    43,   289,   257,
   188,   264,    49,   437,-32768,   773,-32768,-32768,   773,   773,
   773,-32768,   243,   485,-32768,   922,-32768,-32768,   773,-32768,
   820,-32768,-32768,   255,   241,   108,-32768,   258,-32768,-32768,
-32768,-32768,-32768,-32768,   144,   773,    43,    43,   820,   773,
   101,   581,   485,   223,   262,   262,   922,   922,   256,-32768,
   259,   256,   174,-32768,   773,   836,-32768,   265,-32768,-32768,
-32768,     7,-32768,-32768,   108,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   144,    43,-32768,    43,-32768,   268,-32768,-32768,
   922,-32768,   291,-32768,   911,-32768,   922,   437,   267,-32768,
   820,-32768,   820,   922,-32768,-32768,   270,   271,   629,   290,
   773,   773,   166,   256,   196,   773,   485,    92,-32768,   485,
   272,-32768,   273,   287,-32768,-32768,   883,-32768,-32768,   277,
   281,   297,    51,   279,   292,-32768,   773,   283,-32768,-32768,
   282,-32768,-32768,-32768,   286,   773,   288,   677,   306,   293,
    92,   922,   256,   213,   296,   127,-32768,-32768,   294,   295,
    16,    16,   310,   158,   158,-32768,   849,-32768,-32768,-32768,
-32768,-32768,-32768,   922,-32768,-32768,   311,   773,    92,-32768,
   308,    92,   773,-32768,    16,    16,-32768,-32768,-32768,-32768,
-32768,-32768,   217,-32768,    43,   237,-32768,-32768,   922,-32768,
    92,-32768,   922,-32768,-32768,   261,   261,    51,-32768,   158,
   327,-32768,-32768,   261,   261,-32768,   725,   317,   725,   870,
-32768,   289,   725,   725,   773,   321,-32768,   316,-32768,   324,
-32768,-32768,   325,   326,   893,-32768,-32768,-32768,-32768,-32768,
-32768,   368,   369,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   367,-32768,   120,    64,-32768,  -229,-32768,
   -79,   219,    -6,-32768,  -136,   -89,    27,   339,   328,  -246,
-32768,-32768,-32768,-32768,-32768,   -18,-32768,    -1,   260,    13,
  -131,   134,  -148,-32768,-32768,    40,   -47,-32768,-32768,   165,
-32768,  -129,   360,     3,   -80,   312,   216,   274,   244,-32768,
-32768,   113,    71,  -119,-32768,    31,-32768,-32768,   -85,-32768,
     2,   -78,   -12,    30,-32768,   -74,   -71,   -64,   -59,   -55,
   -51,   -50,   -28,-32768,  -175,    93
};


#define	YYLAST		959


static const short yytable[] = {    37,
    66,   119,    71,    43,   156,    80,    87,   148,   150,   194,
   251,   157,   167,    88,    93,   159,    12,    12,   160,     6,
   218,    69,    81,   287,   300,   161,    43,    72,   122,   304,
   162,    60,    62,   243,   163,   111,   124,   168,   164,   165,
    37,   235,     2,   195,   112,     6,   113,   114,    90,    73,
   196,    80,   320,   125,   197,   322,    94,   198,   172,    66,
    66,   284,   173,   285,   199,   156,    95,   146,    81,   200,
   180,   280,   157,   201,   333,   143,   159,   202,   203,   160,
    37,   108,   207,   156,   112,   270,   161,   175,   176,   177,
   157,   162,   174,   128,   159,   163,   178,   160,   340,   164,
   165,     1,   120,    25,   161,   274,   121,   171,   275,   162,
     2,   251,   189,   163,   123,    66,    86,   164,   165,   158,
   211,   229,    67,    68,   301,   215,   119,   208,   179,    19,
   217,    22,    37,   182,   210,   156,   122,   156,   212,   213,
    19,   117,   157,   230,   157,   231,   159,   224,   159,   160,
    10,   160,   303,   187,   225,   226,   161,   113,   161,   127,
   128,   162,    86,   162,   251,   163,    22,   163,   228,   164,
   165,   164,   165,   250,   122,     6,   117,   326,   327,   140,
   158,   219,    12,   246,   233,   234,   268,   310,   311,   129,
   180,   254,   312,   255,   334,   335,   113,   135,   158,   227,
   307,   308,   350,   141,   136,   142,   353,   354,   269,   138,
   231,   258,    89,   185,    90,   144,    37,   272,   244,   115,
   245,    94,   194,   119,   324,   325,   145,   265,   119,   210,
   267,   205,   128,    22,   279,   149,    86,   339,   210,   116,
   244,   169,   271,   117,   343,   344,   166,   294,   236,   273,
   158,   119,   158,   261,   119,   290,   195,   244,   349,   302,
   329,   330,    22,   196,    89,   185,   297,   197,   237,   336,
   198,    13,   117,   119,   250,   361,   204,   199,   190,   319,
   332,   330,   200,   206,   323,   221,   201,   131,   133,   214,
   202,   203,     7,     8,     9,    10,    11,   220,   105,   223,
   240,   242,   331,    14,    15,    16,    17,   252,   256,   259,
    19,   257,   262,   263,    78,   266,   281,    20,   276,   277,
   282,   124,   288,   291,   292,   289,   355,   250,   293,   185,
   295,   298,   185,   305,   306,   348,   185,   348,   192,   299,
   244,   348,   348,     6,     7,     8,     9,    10,    11,   309,
    12,    13,   342,   318,   321,    14,    15,    16,    17,    18,
   147,   356,    19,   345,   358,   359,   360,   363,   364,    20,
    63,   283,   328,   222,   357,   110,   118,   278,    21,   181,
    22,   352,    23,    82,   132,   260,    24,   216,    25,    26,
    27,     6,     7,     8,     9,    10,    11,   316,    12,    13,
   341,   191,     0,    14,    15,    16,    17,    18,     0,     0,
    19,     0,     0,     0,     0,     0,    78,    20,     0,     0,
     0,     0,     0,     0,     0,     0,    21,     0,    22,     0,
    23,     0,     0,     0,    70,     0,     0,    26,    27,     6,
     7,     8,     9,    10,    11,     0,    12,    13,     0,     0,
     0,    14,    15,    16,    17,    18,     0,     0,    19,     0,
     0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
     0,     0,     0,     0,    21,     0,    22,     0,    23,     0,
     0,     0,    70,     0,    25,    26,    27,     6,     7,     8,
     9,    10,    11,     0,    12,     0,     0,     0,     0,    14,
    15,    16,    17,    18,     0,     0,    19,     0,     0,     0,
     0,     0,    78,    20,     0,     0,     0,     0,     0,     0,
     0,     0,    21,     0,    22,     0,    23,     0,     0,     0,
    70,     0,     0,    26,    27,     6,     7,     8,     9,    10,
    11,     0,    12,     0,     0,     0,     0,    14,    15,    16,
    17,    18,     0,   170,    19,     0,     0,     0,     0,     0,
     0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
    21,     0,    22,     0,    23,     0,     0,     0,    70,     0,
     0,    26,    27,     6,     7,     8,     9,    10,    11,     0,
    12,     0,     0,     0,     0,    14,    15,    16,    17,    18,
     0,   232,    19,     0,     0,     0,     0,     0,     0,    20,
     0,     0,     0,     0,     0,     0,     0,     0,    21,     0,
    22,     0,    23,     0,     0,     0,    70,     0,     0,    26,
    27,     6,     7,     8,     9,    10,    11,     0,    12,     0,
     0,     0,     0,    14,    15,    16,    17,    18,     0,     0,
    19,     0,     0,     0,     0,     0,     0,    20,     0,     0,
     0,     0,     0,     0,     0,     0,    21,     0,    22,     0,
    23,   264,     0,     0,    70,     0,     0,    26,    27,     6,
     7,     8,     9,    10,    11,     0,    12,     0,     0,     0,
     0,    14,    15,    16,    17,    18,     0,     0,    19,     0,
     0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
     0,     0,     0,     0,    21,     0,    22,     0,    23,   296,
     0,     0,    70,     0,     0,    26,    27,     6,     7,     8,
     9,    10,    11,     0,    12,     0,     0,     0,     0,    14,
    15,    16,    17,    18,     0,     0,    19,     0,     0,     0,
     0,     0,     0,    20,     0,     0,     0,     0,     0,     0,
     0,     0,    21,     0,    22,     0,    23,     0,     0,     0,
    70,     0,   345,    26,    27,     6,     7,     8,     9,    10,
    11,     0,    12,     0,     0,     0,     0,    14,    15,    16,
    17,    18,     0,     0,    19,     0,     0,     0,     0,     0,
     0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
    21,     0,    22,     0,    23,     0,     0,     0,    70,     0,
     0,    26,    27,     7,     8,     9,    10,    11,     0,    12,
     0,     0,     0,     0,    14,    15,    16,    17,     6,     0,
     0,    19,     0,     0,     0,     0,     0,     0,    20,     0,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   151,    96,     0,    97,    98,    99,   247,   101,   102,
   103,   104,     6,     0,     0,    96,   248,    97,    98,    99,
   247,   101,   102,   103,   104,     6,     0,     0,     0,   317,
     0,     0,     0,     0,     0,     0,    96,     0,    97,    98,
    99,   247,   101,   102,   103,   104,     0,     0,     0,    96,
   351,    97,    98,    99,   100,   101,   102,   103,   104,    96,
    78,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     0,     0,     0,     0,     0,   139,   147,    96,    78,    97,
    98,    99,   100,   101,   102,   103,   104,   105,    96,    78,
    97,    98,    99,   100,   101,   102,   103,   104,   105
};

static const short yycheck[] = {     1,
    13,    49,    21,     1,    90,    24,    25,    87,    89,   129,
   186,    90,    20,    26,    27,    90,    10,    10,    90,     3,
   150,    20,    24,   253,   271,    90,    24,    12,    57,   276,
    90,     2,     3,   182,    90,    42,    25,    45,    90,    90,
    42,   173,    33,   129,    42,     3,    45,    46,    42,    34,
   129,    70,   299,    42,   129,   302,    27,   129,    42,    72,
    73,    11,    46,    13,   129,   151,    42,    86,    70,   129,
   118,   247,   151,   129,   321,    82,   151,   129,   129,   151,
    82,    44,    34,   169,    82,   234,   151,   106,   107,   108,
   169,   151,   105,    45,   169,   151,   115,   169,   328,   151,
   151,    24,    42,    48,   169,   237,    46,    95,   240,   169,
    33,   287,   125,   169,    40,   128,    24,   169,   169,    90,
   139,    21,     4,     5,   273,   144,   174,   134,   116,    22,
   149,    40,   134,   121,   136,   221,   165,   223,   140,   141,
    22,    50,   221,    43,   223,    45,   221,   166,   223,   221,
     7,   223,    26,   124,   167,   168,   221,   156,   223,    44,
    45,   221,    70,   223,   340,   221,    40,   223,   170,   221,
   221,   223,   223,   186,   203,     3,    50,   307,   308,    21,
   151,   151,    10,   185,   172,   173,    21,    30,    31,    26,
   238,   204,    35,   206,   324,   325,   195,    43,   169,   169,
   281,   282,   339,    45,    45,    47,   343,   344,    43,    47,
    45,   218,    40,   121,    42,    45,   218,   236,    45,    26,
    47,   192,   342,   271,   305,   306,    47,   229,   276,   231,
   232,    44,    45,    40,   247,    26,   144,   327,   240,    46,
    45,    42,    47,    50,   334,   335,    26,   266,    26,   237,
   221,   299,   223,   223,   302,   257,   342,    45,   338,    47,
    44,    45,    40,   342,    40,   173,   268,   342,    46,     9,
   342,    11,    50,   321,   287,   355,    20,   342,    40,   298,
    44,    45,   342,    20,   303,    45,   342,    72,    73,    47,
   342,   342,     4,     5,     6,     7,     8,    43,    37,    42,
    45,    43,   315,    15,    16,    17,    18,    43,    41,    43,
    22,    21,    43,    43,    28,    26,    40,    29,    47,    47,
    40,    25,    44,    41,    43,    34,   345,   340,    43,   237,
    43,    26,   240,    40,    40,   337,   244,   339,    50,    47,
    45,   343,   344,     3,     4,     5,     6,     7,     8,    40,
    10,    11,    26,    43,    47,    15,    16,    17,    18,    19,
    44,    41,    22,    48,    41,    41,    41,     0,     0,    29,
     4,   252,   309,   155,   348,    37,    49,   244,    38,   120,
    40,   342,    42,    24,    73,   221,    46,   144,    48,    49,
    50,     3,     4,     5,     6,     7,     8,   285,    10,    11,
   330,   128,    -1,    15,    16,    17,    18,    19,    -1,    -1,
    22,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
    42,    -1,    -1,    -1,    46,    -1,    -1,    49,    50,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    -1,    -1,
    -1,    15,    16,    17,    18,    19,    -1,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,
    -1,    -1,    46,    -1,    48,    49,    50,     3,     4,     5,
     6,     7,     8,    -1,    10,    -1,    -1,    -1,    -1,    15,
    16,    17,    18,    19,    -1,    -1,    22,    -1,    -1,    -1,
    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    40,    -1,    42,    -1,    -1,    -1,
    46,    -1,    -1,    49,    50,     3,     4,     5,     6,     7,
     8,    -1,    10,    -1,    -1,    -1,    -1,    15,    16,    17,
    18,    19,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
    -1,    49,    50,     3,     4,     5,     6,     7,     8,    -1,
    10,    -1,    -1,    -1,    -1,    15,    16,    17,    18,    19,
    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    49,
    50,     3,     4,     5,     6,     7,     8,    -1,    10,    -1,
    -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
    42,    43,    -1,    -1,    46,    -1,    -1,    49,    50,     3,
     4,     5,     6,     7,     8,    -1,    10,    -1,    -1,    -1,
    -1,    15,    16,    17,    18,    19,    -1,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    43,
    -1,    -1,    46,    -1,    -1,    49,    50,     3,     4,     5,
     6,     7,     8,    -1,    10,    -1,    -1,    -1,    -1,    15,
    16,    17,    18,    19,    -1,    -1,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    40,    -1,    42,    -1,    -1,    -1,
    46,    -1,    48,    49,    50,     3,     4,     5,     6,     7,
     8,    -1,    10,    -1,    -1,    -1,    -1,    15,    16,    17,
    18,    19,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
    -1,    49,    50,     4,     5,     6,     7,     8,    -1,    10,
    -1,    -1,    -1,    -1,    15,    16,    17,    18,     3,    -1,
    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    27,    -1,    29,    30,    31,    32,    33,    34,
    35,    36,     3,    -1,    -1,    27,    41,    29,    30,    31,
    32,    33,    34,    35,    36,     3,    -1,    -1,    -1,    41,
    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    29,    30,
    31,    32,    33,    34,    35,    36,    -1,    -1,    -1,    27,
    41,    29,    30,    31,    32,    33,    34,    35,    36,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    -1,    -1,    -1,    -1,    -1,    25,    44,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 36 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 38 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 40 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 43 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 45 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 54 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 58 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 65 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 70 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 74 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 76 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 81 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 85 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 87 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 90 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 92 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 96 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 99 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 102 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 105 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 119 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 123 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 125 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 127 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 132 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 135 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 137 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 141 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 143 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 147 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 149 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 154 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 159 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 164 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 168 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 173 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 49:
#line 182 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 187 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 200 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 206 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 216 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 58:
#line 218 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 59:
#line 228 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 60:
#line 230 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 232 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 62:
#line 234 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 63:
#line 236 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 64:
#line 247 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 65:
#line 260 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 66:
#line 262 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 68:
#line 278 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 69:
#line 305 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 70:
#line 323 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 71:
#line 350 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 377 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 395 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 422 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 439 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 457 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 470 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 80:
#line 472 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 81:
#line 486 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 82:
#line 491 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 83:
#line 496 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 84:
#line 500 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 511 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 86:
#line 516 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 87:
#line 526 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 88:
#line 531 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 89:
#line 545 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 562 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 93:
#line 570 "lang11d"
{ yyval = 0; ;
    break;}
case 96:
#line 576 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 98:
#line 581 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 99:
#line 585 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 100:
#line 588 "lang11d"
{ yyval = 0; ;
    break;}
case 101:
#line 589 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 102:
#line 593 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 103:
#line 595 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 105:
#line 600 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 106:
#line 604 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 107:
#line 605 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 108:
#line 606 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 109:
#line 607 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 110:
#line 608 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 111:
#line 609 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 112:
#line 610 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 113:
#line 611 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 114:
#line 612 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 115:
#line 613 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 116:
#line 616 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 117:
#line 619 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 118:
#line 622 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 119:
#line 623 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 120:
#line 624 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 121:
#line 625 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 122:
#line 626 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 123:
#line 627 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 124:
#line 628 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 125:
#line 629 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 126:
#line 630 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 631 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 128:
#line 634 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 129:
#line 635 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 636 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 637 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 638 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 639 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 640 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 641 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 642 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 643 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 138:
#line 647 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 139:
#line 650 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 140:
#line 654 "lang11d"
{ yyval = 0; ;
    break;}
case 141:
#line 656 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 143:
#line 661 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 144:
#line 665 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 145:
#line 668 "lang11d"
{ yyval = 0; ;
    break;}
case 146:
#line 670 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 147:
#line 674 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 148:
#line 678 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 149:
#line 682 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 150:
#line 688 "lang11d"
{ yyval = 0; ;
    break;}
case 153:
#line 694 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 154:
#line 698 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 155:
#line 700 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 156:
#line 704 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 157:
#line 706 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 159:
#line 714 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 160:
#line 717 "lang11d"
{ yyval = 0; ;
    break;}
case 163:
#line 723 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 727 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 165:
#line 729 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 166:
#line 735 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 167:
#line 737 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 168:
#line 741 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 169:
#line 743 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 170:
#line 746 "lang11d"
{ yyval = 0; ;
    break;}
case 173:
#line 752 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 174:
#line 755 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 175:
#line 757 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 176:
#line 759 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 177:
#line 761 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 178:
#line 764 "lang11d"
{ yyval = zzval; ;
    break;}
case 179:
#line 766 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 180:
#line 774 "lang11d"
{ yyval = zzval; ;
    break;}
case 181:
#line 776 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 182:
#line 784 "lang11d"
{ yyval = zzval; ;
    break;}
case 184:
#line 789 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 185:
#line 795 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 186:
#line 803 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 187:
#line 810 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 188:
#line 818 "lang11d"
{ yyval = zzval; ;
    break;}
case 189:
#line 821 "lang11d"
{ yyval = zzval; ;
    break;}
case 190:
#line 824 "lang11d"
{ yyval = zzval; ;
    break;}
case 191:
#line 827 "lang11d"
{ yyval = zzval; ;
    break;}
case 192:
#line 830 "lang11d"
{ yyval = zzval; ;
    break;}
case 193:
#line 833 "lang11d"
{ yyval = zzval; ;
    break;}
case 194:
#line 836 "lang11d"
{ yyval = zzval; ;
    break;}
case 195:
#line 839 "lang11d"
{ yyval = zzval; ;
    break;}
case 196:
#line 842 "lang11d"
{ yyval = zzval; ;
    break;}
case 198:
#line 847 "lang11d"
{
					PyrSlotNode	*node1, *node2, *node3;
					PyrSlot slot;
					PyrString *string;
					char *str;
					long len1, len2, len3;
					
					node1 = (PyrSlotNode*)yyvsp[-1];
					node2 = (PyrSlotNode*)yyvsp[0];
					len1 = node1->slot.uo->size;
					len2 = node2->slot.uo->size;
					len3 = len1 + len2;
					string = newPyrStringN(NULL, len3, obj_permanent | obj_immutable, false);
					memcpy(string->s,        node1->slot.uos->s, len1);
					memcpy(string->s + len1, node2->slot.uos->s, len2);
					
					pyr_pool_runtime->Free(node1->slot.uo);
					pyr_pool_runtime->Free(node2->slot.uo);
					
					SetObject(&slot, string);
					node3 = newPyrSlotNode(&slot);
					yyval = (long)node3;
				;
    break;}
case 199:
#line 872 "lang11d"
{ yyval = zzval; ;
    break;}
case 200:
#line 875 "lang11d"
{ yyval = zzval; ;
    break;}
case 201:
#line 878 "lang11d"
{ yyval = zzval; ;
    break;}
case 202:
#line 879 "lang11d"
{ yyval = zzval; ;
    break;}
case 203:
#line 880 "lang11d"
{ yyval = zzval; ;
    break;}
case 204:
#line 881 "lang11d"
{ yyval = zzval; ;
    break;}
case 205:
#line 882 "lang11d"
{ yyval = zzval; ;
    break;}
case 206:
#line 883 "lang11d"
{ yyval = zzval; ;
    break;}
case 207:
#line 884 "lang11d"
{ yyval = zzval; ;
    break;}
case 208:
#line 885 "lang11d"
{ yyval = zzval; ;
    break;}
case 209:
#line 886 "lang11d"
{ yyval = zzval; ;
    break;}
case 210:
#line 889 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 892 "lang11d"
