
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	SYMBOL	260
#define	STRING	261
#define	ASCII	262
#define	PRIMITIVENAME	263
#define	CLASSNAME	264
#define	VAR	265
#define	ARG	266
#define	CLASSVAR	267
#define	CONST	268
#define	NILOBJ	269
#define	TRUEOBJ	270
#define	FALSEOBJ	271
#define	INFINITUMOBJ	272
#define	PSEUDOVAR	273
#define	ELLIPSIS	274
#define	DOTDOT	275
#define	PIE	276
#define	BADTOKEN	277
#define	INTERPRET	278
#define	BINOP	279
#define	KEYBINOP	280
#define	READWRITEVAR	281
#define	DOUBLEEQUAL	282
#define	UMINUS	283

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		378
#define	YYFLAG		-32768
#define	YYNTBASE	51

#define YYTRANSLATE(x) ((unsigned)(x) <= 283 ? yytranslate[x] : 128)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    50,     2,     2,     2,     2,    46,
    47,    32,    33,    45,    29,    37,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    25,    44,    30,
    26,    31,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    42,     2,    43,    48,     2,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    40,    34,    41,    49,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    27,    28,
    35,    36,    39
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   161,   169,
   177,   186,   191,   193,   195,   197,   199,   203,   206,   210,
   214,   218,   220,   225,   231,   236,   241,   243,   249,   255,
   262,   270,   279,   286,   293,   301,   310,   320,   324,   330,
   332,   334,   340,   342,   345,   349,   353,   357,   362,   368,
   376,   381,   388,   396,   398,   402,   405,   406,   409,   411,
   415,   417,   421,   424,   425,   428,   430,   434,   436,   440,
   442,   444,   446,   448,   450,   452,   454,   456,   458,   460,
   462,   464,   466,   468,   470,   472,   474,   476,   478,   480,
   482,   484,   486,   488,   490,   492,   494,   496,   498,   500,
   502,   504,   510,   517,   518,   521,   523,   526,   530,   531,
   535,   541,   545,   551,   552,   554,   556,   560,   562,   566,
   570,   573,   575,   579,   580,   582,   584,   588,   591,   596,
   601,   607,   611,   616,   617,   620,   622,   626,   627,   629,
   631,   633,   635,   638,   640,   643,   645,   647,   650,   653,
   655,   658,   660,   662,   664,   666,   668,   670,   672,   674,
   676,   678,   681,   683,   685,   687,   689,   691,   693,   695,
   697,   699,   701,   703
};

static const short yyrhs[] = {    52,
     0,    53,     0,    24,    65,     0,     0,    52,    54,     0,
    55,     0,    53,    55,     0,   115,    57,    40,    58,    60,
    41,     0,   115,    42,    56,    43,    57,    40,    58,    60,
    41,     0,    33,   115,    40,    60,    41,     0,     0,   114,
     0,     0,    25,   115,     0,     0,    58,    59,     0,    13,
   103,    44,     0,    11,   103,    44,     0,     0,    60,    61,
     0,   114,    40,    96,    93,    67,    66,    41,     0,    32,
   114,    40,    96,    93,    67,    66,    41,     0,   126,    40,
    96,    93,    67,    66,    41,     0,    32,   126,    40,    96,
    93,    67,    66,    41,     0,     0,    44,     0,     0,    45,
     0,    69,     0,    79,    69,     0,    46,    94,    64,    47,
     0,    94,    64,     0,    64,     0,    68,     0,    79,    68,
     0,     0,   116,    62,     0,     0,    48,    77,    62,     0,
     0,    48,    77,    62,     0,    88,     0,    70,    88,     0,
     0,    70,     0,   114,    70,     0,   114,    46,    81,    84,
    47,    71,     0,    77,    37,    46,    82,    47,    71,     0,
    77,    37,   114,    46,    82,    47,    71,     0,    77,    37,
    46,    81,    84,    47,    71,     0,    77,    37,   114,    46,
    81,    84,    47,    71,     0,    77,    37,   114,    71,     0,
    90,     0,    88,     0,    89,     0,    72,     0,    46,    79,
    47,     0,    49,   114,     0,    42,    80,    43,     0,    46,
    76,    47,     0,    46,   102,    47,     0,   125,     0,   115,
    46,    82,    47,     0,   115,    46,    81,    84,    47,     0,
   115,    42,    80,    43,     0,    73,    42,    81,    43,     0,
    74,     0,    73,    42,    79,    21,    43,     0,    73,    42,
    21,    79,    43,     0,    73,    42,    79,    21,    79,    43,
     0,    73,    42,    79,    45,    79,    21,    43,     0,    73,
    42,    79,    45,    79,    21,    79,    43,     0,    77,    37,
    42,    79,    21,    43,     0,    77,    37,    42,    21,    79,
    43,     0,    77,    37,    42,    79,    21,    79,    43,     0,
    77,    37,    42,    79,    45,    79,    21,    43,     0,    77,
    37,    42,    79,    45,    79,    21,    79,    43,     0,    79,
    21,    79,     0,    79,    45,    79,    21,    79,     0,    73,
     0,    75,     0,    77,    37,    42,    81,    43,     0,   115,
     0,    38,    77,     0,    77,   126,    77,     0,    77,   127,
    77,     0,   114,    26,    77,     0,    49,   114,    26,    77,
     0,    77,    37,   114,    26,    77,     0,   114,    46,    81,
    84,    47,    26,    77,     0,    50,    85,    26,    77,     0,
    73,    42,    81,    43,    26,    77,     0,    77,    37,    42,
    81,    43,    26,    77,     0,    77,     0,    78,    44,    77,
     0,    78,    62,     0,     0,    81,    63,     0,    79,     0,
    81,    45,    79,     0,    83,     0,    82,    45,    83,     0,
   127,    79,     0,     0,    45,    82,     0,    86,     0,    86,
    20,   114,     0,   114,     0,    86,    45,   114,     0,   110,
     0,   113,     0,   121,     0,   123,     0,   122,     0,   117,
     0,   118,     0,   119,     0,   120,     0,   105,     0,    92,
     0,   114,     0,   110,     0,   113,     0,   121,     0,   123,
     0,   122,     0,   117,     0,   118,     0,   119,     0,   120,
     0,   105,     0,   110,     0,   113,     0,   121,     0,   123,
     0,   122,     0,   117,     0,   118,     0,   119,     0,   120,
     0,   106,     0,    40,    96,    93,    64,    41,     0,    50,
    40,    96,    93,    64,    41,     0,     0,    93,    95,     0,
    95,     0,    94,    95,     0,    11,    98,    44,     0,     0,
    12,    98,    44,     0,    12,    97,    20,   114,    44,     0,
    34,    98,    34,     0,    34,    97,    20,   114,    34,     0,
     0,    98,     0,    99,     0,    98,    45,    99,     0,   114,
     0,   114,    26,    87,     0,    77,    25,    77,     0,   127,
    77,     0,   100,     0,   101,    45,   100,     0,     0,   101,
     0,   104,     0,   103,    45,   104,     0,   109,   114,     0,
   109,   114,    26,    87,     0,    50,    42,   107,    43,     0,
    50,   115,    42,   107,    43,     0,    42,   107,    43,     0,
   115,    42,   107,    43,     0,     0,   108,    63,     0,    91,
     0,   108,    45,    91,     0,     0,    30,     0,    35,     0,
    31,     0,     4,     0,    29,     4,     0,     5,     0,    29,
     5,     0,    22,     0,   111,     0,   111,   112,     0,   110,
   112,     0,   112,     0,    29,   112,     0,     3,     0,    10,
     0,     9,     0,    16,     0,    17,     0,    15,     0,    18,
     0,     8,     0,     6,     0,   124,     0,   123,   124,     0,
     7,     0,    19,     0,    27,     0,    35,     0,    36,     0,
    30,     0,    31,     0,    29,     0,    32,     0,    33,     0,
    34,     0,    28,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    35,    37,    39,    43,    44,    48,    49,    53,    57,    64,
    70,    71,    74,    75,    79,    80,    84,    86,    90,    91,
    95,    98,   101,   104,   109,   110,   113,   114,   117,   118,
   122,   124,   126,   130,   131,   135,   136,   140,   142,   146,
   148,   152,   153,   159,   160,   163,   167,   172,   181,   186,
   199,   205,   211,   212,   213,   214,   215,   217,   227,   229,
   231,   233,   235,   246,   259,   261,   274,   277,   295,   313,
   330,   347,   362,   380,   398,   415,   432,   447,   464,   480,
   481,   482,   495,   497,   511,   516,   521,   525,   536,   541,
   551,   556,   570,   586,   587,   593,   596,   597,   600,   601,
   605,   606,   610,   614,   615,   618,   620,   624,   625,   630,
   631,   632,   633,   634,   635,   636,   637,   638,   639,   642,
   645,   648,   649,   650,   651,   652,   653,   654,   655,   656,
   657,   660,   661,   662,   663,   664,   665,   666,   667,   668,
   669,   672,   675,   680,   681,   685,   686,   690,   694,   695,
   699,   703,   707,   714,   715,   718,   719,   723,   725,   729,
   731,   738,   739,   743,   744,   747,   748,   752,   754,   760,
   762,   766,   768,   772,   773,   776,   777,   781,   782,   784,
   786,   790,   791,   800,   801,   810,   813,   814,   820,   828,
   835,   844,   847,   850,   853,   856,   859,   862,   865,   868,
   871,   872,   898,   901,   904,   905,   906,   907,   908,   909,
   910,   911,   912,   915
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR","ARG","CLASSVAR",
"CONST","NILOBJ","TRUEOBJ","FALSEOBJ","INFINITUMOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BADTOKEN","INTERPRET","':'","'='","BINOP","KEYBINOP","'-'","'<'",
"'>'","'*'","'+'","'|'","READWRITEVAR","DOUBLEEQUAL","'.'","'`'","UMINUS","'{'",
"'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root","classes",
"classextensions","classdef","classextension","optname","superclass","classvardecls",
"classvardecl","methods","methoddef","optsemi","optcomma","funcbody","cmdlinecode",
"methbody","primitive","retval","funretval","blocklist1","blocklist","msgsend",
"expr1","valrangex1","valrangexd","valrange2","expr","exprn","exprseq","arglistc",
"arglist1","keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral",
"blockliteral","pushname","pushliteral","listliteral","block","funcvardecls",
"funcvardecls1","funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef",
"dictslotdef","dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","listlit",
"listlit2","literallistc","literallist1","rwspec","integer","floatr","pie","floatp",
"name","classname","primname","trueobj","falseobj","nilobj","infobj","ascii",
"symbol","string","string1","pseudovar","binop","keybinop", NULL
};
#endif

static const short yyr1[] = {     0,
    51,    51,    51,    52,    52,    53,    53,    54,    54,    55,
    56,    56,    57,    57,    58,    58,    59,    59,    60,    60,
    61,    61,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    66,    66,    67,    67,    68,    68,    69,
    69,    70,    70,    71,    71,    72,    72,    72,    72,    72,
    72,    72,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    74,    74,    74,
    74,    74,    75,    75,    75,    75,    75,    76,    76,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    78,    78,    79,    80,    80,    81,    81,
    82,    82,    83,    84,    84,    85,    85,    86,    86,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,    88,
    89,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    92,    92,    93,    93,    94,    94,    95,    96,    96,
    96,    96,    96,    97,    97,    98,    98,    99,    99,   100,
   100,   101,   101,   102,   102,   103,   103,   104,   104,   105,
   105,   106,   106,   107,   107,   108,   108,   109,   109,   109,
   109,   110,   110,   111,   111,   112,   113,   113,   113,   113,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   123,   124,   125,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   127
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     6,     7,     7,
     8,     4,     1,     1,     1,     1,     3,     2,     3,     3,
     3,     1,     4,     5,     4,     4,     1,     5,     5,     6,
     7,     8,     6,     6,     7,     8,     9,     3,     5,     1,
     1,     5,     1,     2,     3,     3,     3,     4,     5,     7,
     4,     6,     7,     1,     3,     2,     0,     2,     1,     3,
     1,     3,     2,     0,     2,     1,     3,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     5,     6,     0,     2,     1,     2,     3,     0,     3,
     5,     3,     5,     0,     1,     1,     3,     1,     3,     3,
     2,     1,     3,     0,     1,     1,     3,     2,     4,     4,
     5,     3,     4,     0,     2,     1,     3,     0,     1,     1,
     1,     1,     2,     1,     2,     1,     1,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   192,   182,   184,   200,   203,
   199,   193,     0,   197,   195,   196,   198,   204,   186,     0,
     0,   149,    97,   164,     0,     0,     0,    33,     3,    29,
    56,    80,    67,    81,    94,    25,    40,    54,    55,    53,
   120,    40,   146,   131,   122,   187,   190,   123,   121,    83,
   127,   128,   129,   130,   124,   126,   125,   201,    62,     0,
     5,    13,     7,     0,   156,   158,   183,   185,   191,   164,
    84,   154,   154,   144,    99,     0,    27,   214,     0,    94,
     0,    40,   162,   165,     0,     0,    25,    58,   149,   174,
     0,   106,   108,     0,     0,   205,   210,   208,   209,   211,
   212,   213,   206,   207,     0,     0,     0,    26,    96,    30,
    32,   147,   189,   188,     0,     0,     0,    46,    42,    97,
     0,   202,    19,     0,    11,     0,   148,     0,     0,     0,
   155,     0,   155,    40,    59,    28,    98,    60,     0,     0,
     0,    57,     0,     0,    61,   161,    26,    41,     0,   144,
   174,   176,   141,     0,    27,   132,   133,     0,   137,   138,
   139,   140,   134,   136,   135,     0,     0,     0,   174,     0,
    99,     0,     0,     0,    44,    85,    86,    95,    87,   104,
    43,     0,   104,     0,   101,     0,     0,    14,     0,    12,
    15,   157,     0,   159,   119,   110,   111,   115,   116,   117,
   118,   112,   114,   113,     0,   150,     0,   152,     0,   145,
   100,   160,    78,     0,    31,     0,   163,    88,    40,     0,
   170,    28,   175,   174,    91,   107,   109,     0,     0,     0,
     0,    66,     0,     0,    99,     0,   104,     0,     0,     0,
    45,    52,     0,     0,    65,     0,     0,    63,   103,   211,
    10,    20,     0,     0,    13,    19,     0,     0,   142,     0,
     0,   172,   177,     0,   171,    69,    68,     0,     0,     0,
     0,     0,     0,    82,     0,    44,    89,   104,     0,   105,
    44,    64,   102,     0,     0,   149,   149,     0,   178,   178,
    16,     0,   151,   153,    79,   143,   173,    70,     0,    92,
    74,    73,     0,     0,     0,    44,    48,     0,    44,     0,
    47,   149,   149,   144,   144,    15,   179,   181,   180,     0,
   166,     0,     0,     8,    71,     0,    75,     0,    93,    50,
    44,    49,    90,   144,   144,    36,    36,    19,    18,   178,
   168,    17,    72,    76,     0,    51,    36,    36,   194,    38,
    25,    38,     0,   167,     0,    77,    38,    38,     0,     0,
    34,    38,    37,     0,     9,   169,     0,     0,    25,    21,
    35,    23,    22,    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   376,
     3,     4,    61,     5,   189,   126,   256,   291,   187,   252,
   109,   137,    28,    29,   360,   350,   361,    30,   241,   242,
    31,    32,    33,    34,    79,    35,    36,    75,    76,    77,
   184,   185,   244,    91,    92,   194,    38,    39,    40,   152,
    41,   134,    42,   210,    74,   130,    64,    65,    83,    84,
    85,   320,   321,    44,   153,   154,   155,   322,    45,    46,
    47,    48,    49,    50,   351,    51,    52,    53,    54,    55,
    56,    57,    58,    59,   106,   107
};

static const short yypact[] = {   134,
   356,    45,    45,    35,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    25,-32768,-32768,-32768,-32768,-32768,-32768,   194,
   884,     8,   884,   404,   884,    25,    42,-32768,-32768,-32768,
-32768,    31,-32768,-32768,  1020,    65,    94,-32768,-32768,-32768,
-32768,   452,-32768,-32768,   126,   126,-32768,-32768,   161,    -6,
-32768,-32768,-32768,-32768,-32768,-32768,   155,-32768,-32768,   154,
-32768,    89,-32768,   145,-32768,   183,-32768,-32768,-32768,   500,
-32768,    25,    25,-32768,-32768,   185,   189,-32768,   217,  1009,
   159,   452,-32768,   221,   226,   884,   991,   248,     8,   931,
   249,     1,-32768,   235,   548,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    29,   884,   884,   884,-32768,-32768,
-32768,-32768,-32768,-32768,   884,   884,   238,   -24,-32768,   884,
   500,-32768,-32768,    45,    25,   239,-32768,    25,   423,   261,
   205,   262,    57,   452,-32768,   884,-32768,-32768,   884,   884,
   884,-32768,   240,   500,-32768,  1020,-32768,-32768,   884,-32768,
   931,-32768,-32768,   246,   243,   126,-32768,   250,-32768,-32768,
-32768,-32768,-32768,-32768,   155,   884,    25,    25,   931,   884,
   116,    78,   596,   500,   162,   256,   256,  1020,  1020,   252,
-32768,   257,   252,   123,-32768,   884,   302,-32768,   258,-32768,
-32768,-32768,    20,-32768,-32768,   126,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   155,    25,-32768,    25,-32768,   254,-32768,
-32768,  1020,-32768,   278,-32768,  1009,-32768,  1020,   452,   259,
-32768,   931,-32768,   931,  1020,-32768,-32768,   260,   263,   644,
   884,   281,   884,   884,   138,   160,   252,   199,   884,   500,
   -24,-32768,   500,   266,-32768,   268,   280,-32768,-32768,   981,
-32768,-32768,   269,   276,   292,   230,   275,   286,-32768,   884,
   283,-32768,-32768,   279,-32768,-32768,-32768,   285,   300,   884,
   287,   692,   884,   313,   295,   -24,  1020,   252,   208,   299,
   -13,-32768,-32768,   305,   306,     8,     8,   307,   196,   196,
-32768,   947,-32768,-32768,-32768,-32768,-32768,-32768,   740,  1020,
-32768,-32768,   309,   327,   884,   -24,-32768,   308,   -24,   884,
-32768,     8,     8,-32768,-32768,-32768,-32768,-32768,-32768,   213,
-32768,    25,   216,-32768,-32768,   310,-32768,   788,  1020,-32768,
   -24,-32768,  1020,-32768,-32768,   245,   245,   230,-32768,   196,
   328,-32768,-32768,-32768,   315,-32768,   245,   245,-32768,   836,
   282,   836,   960,-32768,   423,-32768,   836,   836,   884,   324,
-32768,   320,-32768,   335,-32768,-32768,   336,   338,   991,-32768,
-32768,-32768,-32768,-32768,-32768,   369,   380,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   377,-32768,   127,    67,-32768,  -239,-32768,
   -84,   229,   -33,-32768,  -323,  -124,    26,   349,   340,  -149,
-32768,-32768,-32768,-32768,-32768,   -19,-32768,    -1,   267,   -62,
  -121,   143,  -161,-32768,-32768,    36,   -41,-32768,-32768,   170,
-32768,  -138,   371,    24,   -65,   326,   190,   265,   253,-32768,
-32768,   110,    61,  -119,-32768,   -95,-32768,-32768,   -86,-32768,
    18,   -79,   -12,   101,-32768,   -72,   -71,   -59,   -51,   -43,
    -5,    15,   -50,-32768,  -143,    71
};


#define	YYLAST		1057


static const short yytable[] = {    37,
    66,    71,   148,   156,    80,    87,   122,   119,   111,   195,
   157,   219,   310,    88,    93,    22,   292,   159,   160,    72,
   167,   246,    81,   150,    43,   117,    22,     6,   364,    12,
   161,     6,   172,   367,   368,   120,   117,    69,   162,   121,
    37,    73,   196,   254,     6,   168,   163,    43,   143,   197,
    80,    12,   238,   180,    12,   220,   198,   199,   183,    66,
    66,    90,   113,   114,   156,   112,   146,     2,    81,   200,
   173,   157,    95,   228,   174,   275,   181,   201,   159,   160,
    37,    89,   156,    90,   164,   202,   176,   177,   178,   157,
   208,   161,   175,   171,    86,   179,   159,   160,   353,   162,
   209,   128,    60,    62,   165,   112,   285,   163,   108,   161,
   236,   237,   190,   124,   122,    66,   308,   162,   279,   212,
   232,   280,   233,   203,   216,   163,   307,    94,   264,   218,
   125,   311,    37,   119,   211,   156,   230,   156,   213,   214,
    86,    25,   157,   204,   157,   164,   225,    19,   254,   159,
   160,   159,   160,   122,   226,   227,   330,     1,   272,   332,
   231,    10,   161,   164,   161,   165,     2,   247,   229,   248,
   162,   235,   162,   113,   253,   336,   337,   278,   163,   140,
   163,   346,   273,   165,   249,   261,   115,   239,   127,   128,
   158,   186,   257,   123,   258,   347,   348,    67,    68,   181,
    22,    22,   274,   141,   233,   142,   116,   240,   129,   254,
   117,   117,   352,   113,    86,    19,   164,    37,   164,   277,
   314,   315,   357,   358,   188,   317,   318,   135,   268,   269,
   319,   211,   271,   136,   119,   195,   165,   284,   165,   119,
   289,   211,   290,   247,   186,   276,   334,   335,   206,   128,
   300,   158,   247,   349,   309,    13,   339,   340,   295,   342,
   340,   131,   133,   138,   119,   144,   363,   119,   196,   158,
   303,   304,   145,   149,   166,   197,   169,    89,   191,   253,
   205,   207,   198,   199,   375,   329,   215,   222,   221,   119,
   333,   224,   105,    94,   259,   200,   243,   326,   260,   245,
   255,   262,   265,   201,     6,   266,   270,    78,   286,   341,
   186,   202,   281,   186,   282,   287,   124,   186,   293,   294,
   299,   297,   158,   296,   158,   147,   345,   298,    96,   301,
    97,    98,    99,   250,   101,   102,   103,   104,   305,   369,
   253,   306,   251,   247,   312,   313,   316,   328,   362,   203,
   362,   327,   343,   355,   331,   362,   362,   356,     6,     7,
     8,     9,    10,    11,   370,    12,    13,   359,   377,   204,
    14,    15,    16,    17,    18,   372,   373,    19,   374,   378,
    63,   288,   338,   223,    20,   110,   182,   371,   118,   283,
   366,   263,   192,    21,    82,    22,   217,    23,   132,   323,
   354,    24,     0,    25,    26,    27,     6,     7,     8,     9,
    10,    11,     0,    12,    13,     0,     0,     0,    14,    15,
    16,    17,    18,     0,     0,    19,     7,     8,     9,    10,
    11,    78,    20,     0,     0,     0,     0,    14,    15,    16,
    17,    21,     0,    22,    19,    23,     0,     0,     0,    70,
     0,    20,    26,    27,     6,     7,     8,     9,    10,    11,
     0,    12,    13,     0,     0,     0,    14,    15,    16,    17,
    18,     0,   193,    19,     0,     0,     0,     0,     0,     0,
    20,     0,     0,     0,     0,     0,     0,     0,     0,    21,
     0,    22,     0,    23,     0,     0,     0,    70,     0,    25,
    26,    27,     6,     7,     8,     9,    10,    11,     0,    12,
     0,     0,     0,     0,    14,    15,    16,    17,    18,     0,
     0,    19,     0,     0,     0,     0,     0,    78,    20,     0,
     0,     0,     0,     0,     0,     0,     0,    21,     0,    22,
     0,    23,     0,     0,     0,    70,     0,     0,    26,    27,
     6,     7,     8,     9,    10,    11,     0,    12,     0,     0,
     0,     0,    14,    15,    16,    17,    18,     0,   170,    19,
     0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
     0,     0,     0,     0,     0,    21,     0,    22,     0,    23,
     0,     0,     0,    70,     0,     0,    26,    27,     6,     7,
     8,     9,    10,    11,     0,    12,     0,     0,     0,     0,
    14,    15,    16,    17,    18,     0,   234,    19,     0,     0,
     0,     0,     0,     0,    20,     0,     0,     0,     0,     0,
     0,     0,     0,    21,     0,    22,     0,    23,     0,     0,
     0,    70,     0,     0,    26,    27,     6,     7,     8,     9,
    10,    11,     0,    12,     0,     0,     0,     0,    14,    15,
    16,    17,    18,     0,     0,    19,     0,     0,     0,     0,
     0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,    22,     0,    23,   267,     0,     0,    70,
     0,     0,    26,    27,     6,     7,     8,     9,    10,    11,
     0,    12,     0,     0,     0,     0,    14,    15,    16,    17,
    18,     0,     0,    19,     0,     0,     0,     0,     0,     0,
    20,     0,     0,     0,     0,     0,     0,     0,     0,    21,
     0,    22,     0,    23,   302,     0,     0,    70,     0,     0,
    26,    27,     6,     7,     8,     9,    10,    11,     0,    12,
     0,     0,     0,     0,    14,    15,    16,    17,    18,     0,
     0,    19,     0,     0,     0,     0,     0,     0,    20,     0,
     0,     0,     0,     0,     0,     0,     0,    21,     0,    22,
     0,    23,   325,     0,     0,    70,     0,     0,    26,    27,
     6,     7,     8,     9,    10,    11,     0,    12,     0,     0,
     0,     0,    14,    15,    16,    17,    18,     0,     0,    19,
     0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
     0,     0,     0,     0,     0,    21,     0,    22,     0,    23,
   344,     0,     0,    70,     0,     0,    26,    27,     6,     7,
     8,     9,    10,    11,     0,    12,     0,     0,     0,     0,
    14,    15,    16,    17,    18,     0,     0,    19,     0,     0,
     0,     0,     0,     0,    20,     0,     0,     0,     0,     0,
     0,     0,     0,    21,     0,    22,     0,    23,     0,     0,
     0,    70,     0,   359,    26,    27,     6,     7,     8,     9,
    10,    11,     0,    12,     0,     0,     0,     0,    14,    15,
    16,    17,    18,     0,     0,    19,     0,     0,     0,     0,
     0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,    22,     0,    23,     0,     0,     0,    70,
     0,     0,    26,    27,     7,     8,     9,    10,    11,     0,
    12,     0,     0,     0,     0,    14,    15,    16,    17,     6,
     0,     0,    19,     0,     0,     0,     0,     0,     0,    20,
     0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   151,    96,     0,    97,    98,    99,   250,   101,
   102,   103,   104,     6,     0,     0,    96,   324,    97,    98,
    99,   250,   101,   102,   103,   104,     0,     0,     0,     0,
   365,     0,     0,     0,     0,     0,     0,    96,     0,    97,
    98,    99,   100,   101,   102,   103,   104,    96,    78,    97,
    98,    99,   100,   101,   102,   103,   104,   105,     0,     0,
     0,     0,     0,   139,   147,    96,    78,    97,    98,    99,
   100,   101,   102,   103,   104,   105,    96,    78,    97,    98,
    99,   100,   101,   102,   103,   104,   105
};

static const short yycheck[] = {     1,
    13,    21,    87,    90,    24,    25,    57,    49,    42,   129,
    90,   150,    26,    26,    27,    40,   256,    90,    90,    12,
    20,   183,    24,    89,     1,    50,    40,     3,   352,    10,
    90,     3,    95,   357,   358,    42,    50,    20,    90,    46,
    42,    34,   129,   187,     3,    45,    90,    24,    82,   129,
    70,    10,   174,   116,    10,   151,   129,   129,   121,    72,
    73,    42,    45,    46,   151,    42,    86,    33,    70,   129,
    42,   151,    42,   169,    46,   237,   118,   129,   151,   151,
    82,    40,   169,    42,    90,   129,   106,   107,   108,   169,
    34,   151,   105,    95,    24,   115,   169,   169,   338,   151,
   134,    45,     2,     3,    90,    82,   250,   151,    44,   169,
   173,   174,   125,    25,   165,   128,   278,   169,   240,   139,
    43,   243,    45,   129,   144,   169,   276,    27,   224,   149,
    42,   281,   134,   175,   136,   222,    21,   224,   140,   141,
    70,    48,   222,   129,   224,   151,   166,    22,   292,   222,
   222,   224,   224,   204,   167,   168,   306,    24,    21,   309,
    45,     7,   222,   169,   224,   151,    33,    45,   170,    47,
   222,   173,   224,   156,   187,   314,   315,   240,   222,    21,
   224,   331,    45,   169,   186,   219,    26,    26,    44,    45,
    90,   121,   205,    40,   207,   334,   335,     4,     5,   241,
    40,    40,    43,    45,    45,    47,    46,    46,    26,   353,
    50,    50,   337,   196,   144,    22,   222,   219,   224,   239,
   286,   287,   347,   348,   124,    30,    31,    43,   230,   231,
    35,   233,   234,    45,   276,   355,   222,   250,   224,   281,
    11,   243,    13,    45,   174,    47,   312,   313,    44,    45,
   270,   151,    45,     9,    47,    11,    44,    45,   260,    44,
    45,    72,    73,    47,   306,    45,   351,   309,   355,   169,
   272,   273,    47,    26,    26,   355,    42,    40,    40,   292,
    20,    20,   355,   355,   369,   305,    47,    45,    43,   331,
   310,    42,    37,   193,    41,   355,    45,   299,    21,    43,
    43,    43,    43,   355,     3,    43,    26,    28,    40,   322,
   240,   355,    47,   243,    47,    40,    25,   247,    44,    34,
    21,    43,   222,    41,   224,    44,   328,    43,    27,    43,
    29,    30,    31,    32,    33,    34,    35,    36,    26,   359,
   353,    47,    41,    45,    40,    40,    40,    21,   350,   355,
   352,    43,    43,    26,    47,   357,   358,    43,     3,     4,
     5,     6,     7,     8,    41,    10,    11,    48,     0,   355,
    15,    16,    17,    18,    19,    41,    41,    22,    41,     0,
     4,   255,   316,   155,    29,    37,   120,   362,    49,   247,
   355,   222,   128,    38,    24,    40,   144,    42,    73,   290,
   340,    46,    -1,    48,    49,    50,     3,     4,     5,     6,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    15,    16,
    17,    18,    19,    -1,    -1,    22,     4,     5,     6,     7,
     8,    28,    29,    -1,    -1,    -1,    -1,    15,    16,    17,
    18,    38,    -1,    40,    22,    42,    -1,    -1,    -1,    46,
    -1,    29,    49,    50,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    -1,    -1,    -1,    15,    16,    17,    18,
    19,    -1,    50,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
    -1,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    48,
    49,    50,     3,     4,     5,     6,     7,     8,    -1,    10,
    -1,    -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,
    -1,    22,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,
    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    49,    50,
     3,     4,     5,     6,     7,     8,    -1,    10,    -1,    -1,
    -1,    -1,    15,    16,    17,    18,    19,    -1,    21,    22,
    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,
    -1,    -1,    -1,    46,    -1,    -1,    49,    50,     3,     4,
     5,     6,     7,     8,    -1,    10,    -1,    -1,    -1,    -1,
    15,    16,    17,    18,    19,    -1,    21,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,    -1,
    -1,    46,    -1,    -1,    49,    50,     3,     4,     5,     6,
     7,     8,    -1,    10,    -1,    -1,    -1,    -1,    15,    16,
    17,    18,    19,    -1,    -1,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    38,    -1,    40,    -1,    42,    43,    -1,    -1,    46,
    -1,    -1,    49,    50,     3,     4,     5,     6,     7,     8,
    -1,    10,    -1,    -1,    -1,    -1,    15,    16,    17,    18,
    19,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
    -1,    40,    -1,    42,    43,    -1,    -1,    46,    -1,    -1,
    49,    50,     3,     4,     5,     6,     7,     8,    -1,    10,
    -1,    -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,
    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,
    -1,    42,    43,    -1,    -1,    46,    -1,    -1,    49,    50,
     3,     4,     5,     6,     7,     8,    -1,    10,    -1,    -1,
    -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,    22,
    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,
    43,    -1,    -1,    46,    -1,    -1,    49,    50,     3,     4,
     5,     6,     7,     8,    -1,    10,    -1,    -1,    -1,    -1,
    15,    16,    17,    18,    19,    -1,    -1,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,    -1,
    -1,    46,    -1,    48,    49,    50,     3,     4,     5,     6,
     7,     8,    -1,    10,    -1,    -1,    -1,    -1,    15,    16,
    17,    18,    19,    -1,    -1,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    38,    -1,    40,    -1,    42,    -1,    -1,    -1,    46,
    -1,    -1,    49,    50,     4,     5,     6,     7,     8,    -1,
    10,    -1,    -1,    -1,    -1,    15,    16,    17,    18,     3,
    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    29,
    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    27,    -1,    29,    30,    31,    32,    33,
    34,    35,    36,     3,    -1,    -1,    27,    41,    29,    30,
    31,    32,    33,    34,    35,    36,    -1,    -1,    -1,    -1,
    41,    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    29,
    30,    31,    32,    33,    34,    35,    36,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    -1,    -1,
    -1,    -1,    -1,    25,    44,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 36 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 38 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 40 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 43 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 45 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 54 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 58 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 65 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 70 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 74 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 76 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 81 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 85 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 87 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 90 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 92 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 96 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 99 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 102 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 105 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 119 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 123 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 125 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 127 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 132 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 135 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 137 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 141 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 143 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 147 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 149 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 154 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 159 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 164 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 168 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 173 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 49:
#line 182 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 187 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 200 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 206 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 216 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 58:
#line 218 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 59:
#line 228 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 60:
#line 230 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 232 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 62:
#line 234 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 63:
#line 236 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 64:
#line 247 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 65:
#line 260 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 66:
#line 262 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 68:
#line 278 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, nilnode1);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 69:
#line 296 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 70:
#line 314 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 71:
#line 331 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 348 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 363 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, nilnode1);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 381 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 399 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 416 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 433 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 448 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 465 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 483 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 496 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 84:
#line 498 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 85:
#line 512 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 86:
#line 517 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 87:
#line 522 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 88:
#line 526 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 89:
#line 537 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 90:
#line 542 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 91:
#line 552 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 92:
#line 557 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 93:
#line 571 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 95:
#line 588 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 97:
#line 596 "lang11d"
{ yyval = 0; ;
    break;}
case 100:
#line 602 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 102:
#line 607 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 103:
#line 611 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 104:
#line 614 "lang11d"
{ yyval = 0; ;
    break;}
case 105:
#line 615 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 106:
#line 619 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 107:
#line 621 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 109:
#line 626 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 110:
#line 630 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 111:
#line 631 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 112:
#line 632 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 113:
#line 633 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 114:
#line 634 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 115:
#line 635 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 116:
#line 636 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 117:
#line 637 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 118:
#line 638 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 119:
#line 639 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 120:
#line 642 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 121:
#line 645 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 122:
#line 648 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 123:
#line 649 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 124:
#line 650 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 125:
#line 651 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 126:
#line 652 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 653 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 128:
#line 654 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 129:
#line 655 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 656 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 657 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 132:
#line 660 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 661 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 662 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 663 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 664 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 665 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 138:
#line 666 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 139:
#line 667 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 140:
#line 668 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 141:
#line 669 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 142:
#line 673 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 143:
#line 676 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 144:
#line 680 "lang11d"
{ yyval = 0; ;
    break;}
case 145:
#line 682 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 147:
#line 687 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 148:
#line 691 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 149:
#line 694 "lang11d"
{ yyval = 0; ;
    break;}
case 150:
#line 696 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 151:
#line 700 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 152:
#line 704 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 153:
#line 708 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 154:
#line 714 "lang11d"
{ yyval = 0; ;
    break;}
case 157:
#line 720 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 158:
#line 724 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 159:
#line 726 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 160:
#line 730 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 161:
#line 732 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 163:
#line 740 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 743 "lang11d"
{ yyval = 0; ;
    break;}
case 167:
#line 749 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 168:
#line 753 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 169:
#line 755 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 170:
#line 761 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 171:
#line 763 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 172:
#line 767 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 173:
#line 769 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 174:
#line 772 "lang11d"
{ yyval = 0; ;
    break;}
case 177:
#line 778 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 178:
#line 781 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 179:
#line 783 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 180:
#line 785 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 181:
#line 787 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 182:
#line 790 "lang11d"
{ yyval = zzval; ;
    break;}
case 183:
#line 792 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 184:
#line 800 "lang11d"
{ yyval = zzval; ;
    break;}
case 185:
#line 802 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 186:
#line 810 "lang11d"
{ yyval = zzval; ;
    break;}
case 188:
#line 815 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 189:
#line 821 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 190:
#line 829 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 191:
#line 836 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 192:
#line 844 "lang11d"
{ yyval = zzval; ;
    break;}
case 193:
#line 847 "lang11d"
{ yyval = zzval; ;
    break;}
case 194:
#line 850 "lang11d"
{ yyval = zzval; ;
    break;}
case 195:
#line 853 "lang11d"
{ yyval = zzval; ;
    break;}
case 196:
#line 856 "lang11d"
{ yyval = zzval; ;
    break;}
case 197:
#line 859 "lang11d"
{ yyval = zzval; ;
    break;}
case 198:
#line 862 "lang11d"
{ yyval = zzval; ;
    break;}
case 199:
#line 865 "lang11d"
{ yyval = zzval; ;
    break;}
case 200:
#line 868 "lang11d"
{ yyval = zzval; ;
    break;}
case 202:
#line 873 "lang11d"
{
					PyrSlotNode	*node1, *node2, *node3;
					PyrSlot slot;
					PyrString *string;
					char *str;
					long len1, len2, len3;
					
					node1 = (PyrSlotNode*)yyvsp[-1];
					node2 = (PyrSlotNode*)yyvsp[0];
					len1 = node1->slot.uo->size;
					len2 = node2->slot.uo->size;
					len3 = len1 + len2;
					string = newPyrStringN(NULL, len3, obj_permanent | obj_immutable, false);
					memcpy(string->s,        node1->slot.uos->s, len1);
					memcpy(string->s + len1, node2->slot.uos->s, len2);
					
					pyr_pool_runtime->Free(node1->slot.uo);
					pyr_pool_runtime->Free(node2->slot.uo);
					
					SetObject(&slot, string);
					node3 = newPyrSlotNode(&slot);
					yyval = (long)node3;
				;
    break;}
case 203:
#line 898 "lang11d"
{ yyval = zzval; ;
    break;}
case 204:
#line 901 "lang11d"
{ yyval = zzval; ;
    break;}
case 205:
#line 904 "lang11d"
{ yyval = zzval; ;
    break;}
case 206:
#line 905 "lang11d"
{ yyval = zzval; ;
    break;}
case 207:
#line 906 "lang11d"
{ yyval = zzval; ;
    break;}
case 208:
#line 907 "lang11d"
{ yyval = zzval; ;
    break;}
case 209:
#line 908 "lang11d"
{ yyval = zzval; ;
    break;}
case 210:
#line 909 "lang11d"
{ yyval = zzval; ;
    break;}
case 211:
#line 910 "lang11d"
{ yyval = zzval; ;
    break;}
case 212:
#line 911 "lang11d"
{ yyval = zzval; ;
    break;}
case 213:
#line 912 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 915 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 918 "lang11d"
