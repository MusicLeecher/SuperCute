
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	VAR	266
#define	ARG	267
#define	CLASSVAR	268
#define	CONST	269
#define	NILOBJ	270
#define	TRUEOBJ	271
#define	FALSEOBJ	272
#define	INFINITUMOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BADTOKEN	278
#define	INTERPRET	279
#define	BINOP	280
#define	KEYBINOP	281
#define	READWRITEVAR	282
#define	DOUBLEEQUAL	283
#define	UMINUS	284

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		380
#define	YYFLAG		-32768
#define	YYNTBASE	52

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 130)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    51,     2,     2,     2,     2,    47,
    48,    33,    34,    46,    30,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    26,    45,    31,
    27,    32,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    43,     2,    44,    49,     2,    39,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    41,    35,    42,    50,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    28,
    29,    36,    37,    40
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   161,   169,
   177,   186,   191,   193,   195,   197,   199,   203,   206,   210,
   214,   218,   220,   225,   231,   236,   241,   243,   249,   255,
   262,   270,   278,   287,   294,   301,   309,   318,   327,   337,
   340,   344,   350,   352,   354,   356,   362,   364,   367,   371,
   375,   379,   384,   390,   398,   403,   410,   418,   420,   424,
   427,   428,   431,   433,   437,   439,   443,   446,   447,   450,
   452,   456,   458,   462,   464,   466,   468,   470,   472,   474,
   476,   478,   480,   482,   484,   486,   488,   490,   492,   494,
   496,   498,   500,   502,   504,   506,   508,   510,   512,   514,
   516,   518,   520,   522,   524,   526,   532,   539,   540,   543,
   545,   548,   552,   553,   557,   563,   567,   573,   574,   576,
   578,   582,   584,   588,   592,   595,   597,   601,   602,   604,
   606,   610,   613,   618,   623,   629,   633,   638,   639,   642,
   644,   648,   649,   651,   653,   655,   657,   660,   662,   665,
   667,   670,   672,   674,   676,   679,   682,   684,   687,   689,
   691,   693,   695,   697,   699,   701,   703,   705,   707,   709,
   711,   713,   715,   717,   719,   721,   723,   725,   727
};

static const short yyrhs[] = {    53,
     0,    54,     0,    25,    66,     0,     0,    53,    55,     0,
    56,     0,    54,    56,     0,   118,    58,    41,    59,    61,
    42,     0,   118,    43,    57,    44,    58,    41,    59,    61,
    42,     0,    34,   118,    41,    61,    42,     0,     0,   117,
     0,     0,    26,   118,     0,     0,    59,    60,     0,    14,
   105,    45,     0,    12,   105,    45,     0,     0,    61,    62,
     0,   117,    41,    98,    95,    68,    67,    42,     0,    33,
   117,    41,    98,    95,    68,    67,    42,     0,   128,    41,
    98,    95,    68,    67,    42,     0,    33,   128,    41,    98,
    95,    68,    67,    42,     0,     0,    45,     0,     0,    46,
     0,    70,     0,    81,    70,     0,    47,    96,    65,    48,
     0,    96,    65,     0,    65,     0,    69,     0,    81,    69,
     0,     0,   119,    63,     0,     0,    49,    79,    63,     0,
     0,    49,    79,    63,     0,    90,     0,    71,    90,     0,
     0,    71,     0,   117,    71,     0,   117,    47,    83,    86,
    48,    72,     0,    79,    38,    47,    84,    48,    72,     0,
    79,    38,   117,    47,    84,    48,    72,     0,    79,    38,
    47,    83,    86,    48,    72,     0,    79,    38,   117,    47,
    83,    86,    48,    72,     0,    79,    38,   117,    72,     0,
    92,     0,    90,     0,    91,     0,    73,     0,    47,    81,
    48,     0,    50,   117,     0,    43,    82,    44,     0,    47,
    78,    48,     0,    47,   104,    48,     0,   127,     0,   118,
    47,    84,    48,     0,   118,    47,    83,    86,    48,     0,
   118,    43,    82,    44,     0,    74,    43,    83,    44,     0,
    75,     0,    74,    43,    83,    22,    44,     0,    74,    43,
    22,    81,    44,     0,    74,    43,    83,    22,    81,    44,
     0,    74,    43,    83,    22,    44,    27,    79,     0,    74,
    43,    22,    81,    44,    27,    79,     0,    74,    43,    83,
    22,    81,    44,    27,    79,     0,    79,    38,    43,    83,
    22,    44,     0,    79,    38,    43,    22,    81,    44,     0,
    79,    38,    43,    83,    22,    81,    44,     0,    79,    38,
    43,    83,    22,    44,    27,    79,     0,    79,    38,    43,
    22,    81,    44,    27,    79,     0,    79,    38,    43,    83,
    22,    81,    44,    27,    79,     0,    22,    81,     0,    81,
    22,    81,     0,    81,    46,    81,    22,    81,     0,    74,
     0,    77,     0,    76,     0,    79,    38,    43,    83,    44,
     0,   118,     0,    39,    79,     0,    79,   128,    79,     0,
    79,   129,    79,     0,   117,    27,    79,     0,    50,   117,
    27,    79,     0,    79,    38,   117,    27,    79,     0,   117,
    47,    83,    86,    48,    27,    79,     0,    51,    87,    27,
    79,     0,    74,    43,    83,    44,    27,    79,     0,    79,
    38,    43,    83,    44,    27,    79,     0,    79,     0,    80,
    45,    79,     0,    80,    63,     0,     0,    83,    64,     0,
    81,     0,    83,    46,    81,     0,    85,     0,    84,    46,
    85,     0,   129,    81,     0,     0,    46,    84,     0,    88,
     0,    88,    21,   117,     0,   117,     0,    88,    46,   117,
     0,   112,     0,   116,     0,   124,     0,   126,     0,   125,
     0,   120,     0,   121,     0,   122,     0,   123,     0,   107,
     0,    94,     0,   117,     0,   112,     0,   116,     0,   124,
     0,   126,     0,   125,     0,   120,     0,   121,     0,   122,
     0,   123,     0,   107,     0,   112,     0,   116,     0,   124,
     0,   126,     0,   125,     0,   120,     0,   121,     0,   122,
     0,   123,     0,   108,     0,    41,    98,    95,    65,    42,
     0,    51,    41,    98,    95,    65,    42,     0,     0,    95,
    97,     0,    97,     0,    96,    97,     0,    12,   100,    45,
     0,     0,    13,   100,    45,     0,    13,    99,    21,   117,
    45,     0,    35,   100,    35,     0,    35,    99,    21,   117,
    35,     0,     0,   100,     0,   101,     0,   100,    46,   101,
     0,   117,     0,   117,    27,    89,     0,    79,    26,    79,
     0,   129,    79,     0,   102,     0,   103,    46,   102,     0,
     0,   103,     0,   106,     0,   105,    46,   106,     0,   111,
   117,     0,   111,   117,    27,    89,     0,    51,    43,   109,
    44,     0,    51,   118,    43,   109,    44,     0,    43,   109,
    44,     0,   118,    43,   109,    44,     0,     0,   110,    64,
     0,    93,     0,   110,    46,    93,     0,     0,    31,     0,
    36,     0,    32,     0,     4,     0,    30,     4,     0,     5,
     0,    30,     5,     0,     6,     0,    30,     6,     0,    23,
     0,   113,     0,   114,     0,   113,   115,     0,   112,   115,
     0,   115,     0,    30,   115,     0,     3,     0,    11,     0,
    10,     0,    17,     0,    18,     0,    16,     0,    19,     0,
     9,     0,     7,     0,     8,     0,    20,     0,    28,     0,
    36,     0,    37,     0,    31,     0,    32,     0,    30,     0,
    33,     0,    34,     0,    35,     0,    29,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   182,   187,
   200,   206,   212,   213,   214,   215,   216,   218,   228,   230,
   232,   234,   236,   247,   260,   262,   275,   278,   305,   323,
   350,   378,   397,   425,   452,   470,   495,   523,   542,   570,
   589,   606,   622,   623,   624,   625,   638,   640,   654,   659,
   664,   668,   679,   684,   694,   699,   713,   729,   730,   736,
   739,   740,   743,   744,   748,   749,   753,   757,   758,   761,
   763,   767,   768,   773,   774,   775,   776,   777,   778,   779,
   780,   781,   782,   785,   788,   791,   792,   793,   794,   795,
   796,   797,   798,   799,   800,   803,   804,   805,   806,   807,
   808,   809,   810,   811,   812,   815,   818,   823,   824,   828,
   829,   833,   837,   838,   842,   846,   850,   857,   858,   861,
   862,   866,   868,   872,   874,   881,   882,   886,   887,   890,
   891,   895,   897,   903,   905,   909,   911,   915,   916,   919,
   920,   924,   925,   927,   929,   933,   934,   943,   944,   953,
   954,   965,   968,   969,   970,   976,   984,   991,  1000,  1003,
  1006,  1009,  1012,  1015,  1018,  1021,  1024,  1027,  1030,  1033,
  1034,  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1044
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR",
"ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","INFINITUMOBJ","PSEUDOVAR",
"ELLIPSIS","DOTDOT","PIE","BADTOKEN","INTERPRET","':'","'='","BINOP","KEYBINOP",
"'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","DOUBLEEQUAL","'.'","'`'",
"UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root",
"classes","classextensions","classdef","classextension","optname","superclass",
"classvardecls","classvardecl","methods","methoddef","optsemi","optcomma","funcbody",
"cmdlinecode","methbody","primitive","retval","funretval","blocklist1","blocklist",
"msgsend","expr1","valrangex1","valrangeassign","valrangexd","valrange2","expr",
"exprn","exprseq","arglistc","arglist1","keyarglist1","keyarg","optkeyarglist",
"mavars","mavarlist","slotliteral","blockliteral","pushname","pushliteral","listliteral",
"block","funcvardecls","funcvardecls1","funcvardecl","argdecls","slotdeflist0",
"slotdeflist","slotdef","dictslotdef","dictslotlist1","dictslotlist","rwslotdeflist",
"rwslotdef","listlit","listlit2","literallistc","literallist1","rwspec","integer",
"floatr","accidental","pie","floatp","name","classname","primname","trueobj",
"falseobj","nilobj","infobj","ascii","symbol","string","pseudovar","binop","keybinop", NULL
};
#endif

static const short yyr1[] = {     0,
    52,    52,    52,    53,    53,    54,    54,    55,    55,    56,
    57,    57,    58,    58,    59,    59,    60,    60,    61,    61,
    62,    62,    62,    62,    63,    63,    64,    64,    65,    65,
    66,    66,    66,    67,    67,    68,    68,    69,    69,    70,
    70,    71,    71,    72,    72,    73,    73,    73,    73,    73,
    73,    73,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    75,    75,    75,
    76,    76,    76,    77,    77,    77,    77,    77,    77,    78,
    78,    78,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    80,    80,    81,
    82,    82,    83,    83,    84,    84,    85,    86,    86,    87,
    87,    88,    88,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    90,    91,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    94,    94,    95,    95,    96,
    96,    97,    98,    98,    98,    98,    98,    99,    99,   100,
   100,   101,   101,   102,   102,   103,   103,   104,   104,   105,
   105,   106,   106,   107,   107,   108,   108,   109,   109,   110,
   110,   111,   111,   111,   111,   112,   112,   113,   113,   114,
   114,   115,   116,   116,   116,   116,   116,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   129
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     6,     7,     7,
     8,     4,     1,     1,     1,     1,     3,     2,     3,     3,
     3,     1,     4,     5,     4,     4,     1,     5,     5,     6,
     7,     7,     8,     6,     6,     7,     8,     8,     9,     2,
     3,     5,     1,     1,     1,     5,     1,     2,     3,     3,
     3,     4,     5,     7,     4,     6,     7,     1,     3,     2,
     0,     2,     1,     3,     1,     3,     2,     0,     2,     1,
     3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     5,     6,     0,     2,     1,
     2,     3,     0,     3,     5,     3,     5,     0,     1,     1,
     3,     1,     3,     3,     2,     1,     3,     0,     1,     1,
     3,     2,     4,     4,     5,     3,     4,     0,     2,     1,
     3,     0,     1,     1,     1,     1,     2,     1,     2,     1,
     2,     1,     1,     1,     2,     2,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   199,   186,   188,   190,   207,
   208,   206,   200,     0,   204,   202,   203,   205,   209,   192,
     0,     0,   153,   101,   168,     0,     0,     0,    33,     3,
    29,    56,    83,    67,    85,    84,    98,    25,    40,    54,
    55,    53,   124,    40,   150,   135,   126,   193,   194,   197,
   127,   125,    87,   131,   132,   133,   134,   128,   130,   129,
    62,     0,     5,    13,     7,     0,   160,   162,   187,   189,
   191,   198,   168,    88,   158,   158,   148,   103,     0,    27,
     0,   219,     0,    98,     0,    40,   166,   169,     0,     0,
    25,    58,   153,   178,     0,   110,   112,     0,     0,   210,
   215,   213,   214,   216,   217,   218,   211,   212,     0,     0,
     0,    26,   100,    30,    32,   151,   196,   195,     0,     0,
     0,    46,    42,   101,     0,    19,     0,    11,     0,   152,
     0,     0,     0,   159,     0,   159,    40,    59,    28,   102,
    80,    60,     0,     0,     0,    57,     0,     0,    61,   165,
    26,    41,     0,   148,   178,   180,   145,     0,    27,   136,
   137,     0,   141,   142,   143,   144,   138,   140,   139,     0,
     0,     0,   178,     0,     0,     0,     0,    44,    89,    90,
    99,    91,   108,    43,     0,   108,     0,   105,     0,     0,
    14,     0,    12,    15,   161,     0,   163,   123,   114,   115,
   119,   120,   121,   122,   116,   118,   117,     0,   154,     0,
   156,     0,   149,   104,   164,    81,     0,    31,     0,   167,
    92,    40,     0,   174,    28,   179,   178,    95,   111,   113,
     0,     0,     0,    66,     0,     0,     0,   108,     0,     0,
     0,    45,    52,     0,     0,    65,     0,     0,    63,   107,
   216,    10,    20,     0,     0,    13,    19,     0,     0,   146,
     0,     0,   176,   181,     0,   175,    69,    68,     0,     0,
     0,     0,    86,     0,    44,    93,   108,     0,   109,    44,
    64,   106,     0,     0,   153,   153,     0,   182,   182,    16,
     0,   155,   157,    82,   147,   177,     0,     0,    70,    96,
    75,    74,     0,     0,    44,    48,     0,    44,     0,    47,
   153,   153,   148,   148,    15,   183,   185,   184,     0,   170,
     0,     0,     8,    72,    71,     0,     0,     0,    76,    97,
    50,    44,    49,    94,   148,   148,    36,    36,    19,    18,
   182,   172,    17,    73,    78,    77,     0,    51,    36,    36,
   201,    38,    25,    38,     0,   171,     0,    79,    38,    38,
     0,     0,    34,    38,    37,     0,     9,   173,     0,     0,
    25,    21,    35,    23,    22,    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   378,
     3,     4,    63,     5,   192,   129,   257,   290,   190,   253,
   113,   140,    29,    30,   362,   352,   363,    31,   242,   243,
    32,    33,    34,    35,    36,    83,    37,    38,    78,    79,
    80,   187,   188,   245,    95,    96,   197,    40,    41,    42,
   156,    43,   137,    44,   213,    77,   133,    66,    67,    87,
    88,    89,   319,   320,    46,   157,   158,   159,   321,    47,
    48,    49,    50,    51,    52,    53,   353,    54,    55,    56,
    57,    58,    59,    60,    61,   110,   111
};

static const short yypact[] = {    98,
   406,     8,     8,   -28,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    29,-32768,-32768,-32768,-32768,-32768,-32768,
   247,   847,    14,   847,   357,   847,    29,    84,-32768,-32768,
-32768,-32768,    -3,-32768,-32768,-32768,   984,     0,    17,-32768,
-32768,-32768,-32768,   455,-32768,-32768,    36,    36,-32768,-32768,
-32768,    59,   182,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    40,-32768,     3,-32768,   216,-32768,    66,-32768,-32768,
-32768,-32768,   504,-32768,    29,    29,-32768,-32768,    64,    65,
   847,-32768,    78,   973,   162,   455,-32768,    87,   105,   847,
   955,   148,    14,   915,   153,   -10,-32768,   155,   553,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    10,   847,
   847,   847,-32768,-32768,-32768,-32768,-32768,-32768,   847,   847,
   175,    63,-32768,   847,   602,-32768,     8,    29,   186,-32768,
    29,   895,   180,   223,   220,    32,   455,-32768,   847,-32768,
-32768,-32768,   847,   847,   847,-32768,   185,   602,-32768,   984,
-32768,-32768,   847,-32768,   915,-32768,-32768,   193,   217,    36,
-32768,   215,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   847,
    29,    29,   915,   847,    -5,   651,   602,   195,   237,   237,
   984,   984,   231,-32768,   236,   231,    12,-32768,   847,   291,
-32768,   246,-32768,-32768,-32768,     5,-32768,-32768,    36,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    29,-32768,    29,
-32768,   249,-32768,-32768,   984,-32768,   267,-32768,   973,-32768,
   984,   455,   253,-32768,   915,-32768,   915,   984,-32768,-32768,
   254,   257,   700,   275,   847,   847,   125,   231,    93,   847,
   602,    63,-32768,   602,   255,-32768,   256,   276,-32768,-32768,
   945,-32768,-32768,   268,   269,   285,   160,   272,   277,-32768,
   847,   278,-32768,-32768,   270,-32768,   302,   303,   287,   847,
   290,   749,   311,   292,    63,   984,   231,   199,   293,   164,
-32768,-32768,   316,   326,    14,    14,   330,   158,   158,-32768,
   313,-32768,-32768,-32768,-32768,-32768,   847,   847,   325,   984,
   327,   345,   334,   847,    63,-32768,   333,    63,   847,-32768,
    14,    14,-32768,-32768,-32768,-32768,-32768,-32768,   228,-32768,
    29,   239,-32768,   984,   984,   847,   847,   847,   355,   984,
-32768,    63,-32768,   984,-32768,-32768,   245,   245,   160,-32768,
   158,   356,-32768,   984,   984,   984,   847,-32768,   245,   245,
-32768,   798,   339,   798,   932,-32768,   895,   984,   798,   798,
   847,   343,-32768,   340,-32768,   346,-32768,-32768,   348,   349,
   955,-32768,-32768,-32768,-32768,-32768,-32768,   392,   393,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   390,-32768,   139,    82,-32768,  -250,-32768,
   -89,   240,   -36,-32768,  -136,   -84,    37,   363,   351,   -88,
-32768,-32768,-32768,-32768,-32768,-32768,     9,-32768,    -1,   281,
    35,  -167,   168,  -174,-32768,-32768,    49,   -49,-32768,-32768,
   194,-32768,  -132,   395,   121,   -72,   352,   212,   296,   273,
-32768,-32768,   141,    90,  -127,-32768,  -135,-32768,-32768,   -90,
-32768,-32768,     7,   -85,   -13,    23,-32768,   -76,   -71,   -64,
   -61,   -57,   -42,   -25,-32768,  -146,    51
};


#define	YYLAST		1022


static const short yytable[] = {    39,
    68,   152,   123,   160,   198,     2,   291,   115,   161,   239,
   171,   247,     6,    92,    97,    13,   233,   163,    13,   223,
   154,   222,   164,    85,    62,    64,    75,    72,   127,   165,
    74,     6,   166,    84,    91,   172,   167,   231,   234,    99,
   235,   199,    39,   255,   112,   128,   200,    94,    76,   147,
    98,   168,   176,   117,   118,   201,   177,   248,    20,   249,
   202,    68,    68,   274,   160,    26,   211,   203,   169,   161,
   204,    85,   184,   278,   205,    90,   279,   131,   163,   141,
   126,    84,   160,   164,    39,   119,     6,   161,   355,   206,
   165,   265,   132,   166,    13,   178,   163,   167,   150,    23,
   212,   164,   307,    23,   284,   120,   207,   138,   165,   121,
   139,   166,   168,   121,   193,   167,   162,    68,   179,   180,
   181,    45,     1,    90,    93,   142,    94,   182,   123,   169,
   168,     2,   148,   175,   160,    39,   160,   214,   248,   161,
   275,   161,   216,   217,   255,    45,   272,   169,   163,   191,
   163,   215,   149,   164,   183,   164,   219,   229,   230,   186,
   165,   221,   165,   166,   116,   166,   117,   167,   273,   167,
   235,   288,   232,   289,   153,   189,   254,   162,   228,   170,
   337,   338,   168,   144,   168,   262,   306,   250,   316,   317,
   309,   310,   184,   318,   258,   162,   259,   173,    90,   169,
   208,   169,   349,   350,    23,   117,   116,   145,   255,   146,
   237,   238,   313,   314,   121,    93,   331,   366,    98,   333,
    39,   240,   369,   370,   124,   123,   194,   189,   125,   198,
   123,   269,   218,   214,   271,    23,   224,   283,   335,   336,
   210,   241,   214,   348,   248,   121,   308,   162,   276,   162,
    69,    70,    71,   354,   351,   123,    14,   227,   123,   294,
   130,   131,   225,   365,   359,   360,   199,   209,   131,    20,
   303,   200,   340,   341,   109,   277,   244,   254,   300,   246,
   201,   377,   123,   343,   341,   202,   134,   136,   261,   256,
   260,   189,   203,     6,   189,   204,   263,   266,   189,   205,
   267,   270,   280,   281,    82,   324,   325,   342,   285,   286,
   127,   293,   330,   296,   206,     6,   292,   334,   100,   295,
   101,   102,   103,   251,   105,   106,   107,   108,   297,   298,
   299,   207,   252,   301,   344,   345,   346,   304,   248,   305,
   100,   254,   101,   102,   103,   251,   105,   106,   107,   108,
   364,   326,   364,   327,   323,   358,   311,   364,   364,     6,
     7,     8,     9,    10,    11,    12,   312,    13,    14,   371,
   315,   328,    15,    16,    17,    18,    19,   329,    81,    20,
   332,   347,   357,   151,   372,    82,    21,   374,   361,   375,
   376,   379,   380,    65,   287,    22,   339,    23,   226,    24,
   373,   114,   122,    73,   185,   368,    27,    28,     6,     7,
     8,     9,    10,    11,    12,   282,    13,    14,   264,    86,
   220,    15,    16,    17,    18,    19,   195,   135,    20,   322,
   356,     0,     0,     0,     0,    21,     0,     0,     0,     0,
     0,     0,     0,     0,    22,     0,    23,     0,    24,     0,
     0,     0,    25,     0,    26,    27,    28,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
    15,    16,    17,    18,    19,     0,     0,    20,     0,     0,
     0,     0,     0,     0,    21,     0,     0,     0,     0,     0,
     0,     0,     0,    22,     0,    23,     0,    24,     0,     0,
     0,    73,     0,    26,    27,    28,     6,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,    15,
    16,    17,    18,    19,     0,    81,    20,     0,     0,     0,
     0,     0,    82,    21,     0,     0,     0,     0,     0,     0,
     0,     0,    22,     0,    23,     0,    24,     0,     0,     0,
    73,     0,     0,    27,    28,     6,     7,     8,     9,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,    16,
    17,    18,    19,     0,   174,    20,     0,     0,     0,     0,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,    22,     0,    23,     0,    24,     0,     0,     0,    73,
     0,     0,    27,    28,     6,     7,     8,     9,    10,    11,
    12,     0,    13,     0,     0,     0,     0,    15,    16,    17,
    18,    19,     0,     0,    20,     0,     0,     0,     0,     0,
    82,    21,     0,     0,     0,     0,     0,     0,     0,     0,
    22,     0,    23,     0,    24,     0,     0,     0,    73,     0,
     0,    27,    28,     6,     7,     8,     9,    10,    11,    12,
     0,    13,     0,     0,     0,     0,    15,    16,    17,    18,
    19,     0,   236,    20,     0,     0,     0,     0,     0,     0,
    21,     0,     0,     0,     0,     0,     0,     0,     0,    22,
     0,    23,     0,    24,     0,     0,     0,    73,     0,     0,
    27,    28,     6,     7,     8,     9,    10,    11,    12,     0,
    13,     0,     0,     0,     0,    15,    16,    17,    18,    19,
     0,     0,    20,     0,     0,     0,     0,     0,     0,    21,
     0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
    23,     0,    24,   268,     0,     0,    73,     0,     0,    27,
    28,     6,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,    15,    16,    17,    18,    19,     0,
     0,    20,     0,     0,     0,     0,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,     0,    22,     0,    23,
     0,    24,   302,     0,     0,    73,     0,     0,    27,    28,
     6,     7,     8,     9,    10,    11,    12,     0,    13,     0,
     0,     0,     0,    15,    16,    17,    18,    19,     0,     0,
    20,     0,     0,     0,     0,     0,     0,    21,     0,     0,
     0,     0,     0,     0,     0,     0,    22,     0,    23,     0,
    24,     0,     0,     0,    73,     0,   361,    27,    28,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
     0,     0,     0,     0,     0,     0,    21,     0,     0,     0,
     0,     0,     0,     0,     0,    22,     0,    23,     0,    24,
     0,     0,     0,    73,     0,     0,    27,    28,     7,     8,
     9,    10,    11,    12,     0,     0,     0,     0,     0,     0,
    15,    16,    17,    18,     0,     0,     0,    20,     7,     8,
     9,    10,    11,    12,    21,    13,     0,     0,     0,     0,
    15,    16,    17,    18,     6,     0,     0,    20,     0,     0,
     0,     0,     0,     0,    21,   196,     0,     6,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   155,     0,   100,
     0,   101,   102,   103,   251,   105,   106,   107,   108,     0,
     0,     0,   100,   367,   101,   102,   103,   104,   105,   106,
   107,   108,   100,    82,   101,   102,   103,   104,   105,   106,
   107,   108,   109,     0,     0,     0,     0,     0,   143,   151,
   100,    82,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   100,    82,   101,   102,   103,   104,   105,   106,   107,
   108,   109
};

static const short yycheck[] = {     1,
    14,    91,    52,    94,   132,    34,   257,    44,    94,   177,
    21,   186,     3,    27,    28,    11,    22,    94,    11,   155,
    93,   154,    94,    25,     2,     3,    13,    21,    26,    94,
    22,     3,    94,    25,    26,    46,    94,   173,    44,    43,
    46,   132,    44,   190,    45,    43,   132,    43,    35,    86,
    28,    94,    43,    47,    48,   132,    47,    46,    23,    48,
   132,    75,    76,   238,   155,    49,    35,   132,    94,   155,
   132,    73,   122,   241,   132,    25,   244,    46,   155,    81,
    41,    73,   173,   155,    86,    27,     3,   173,   339,   132,
   155,   227,    27,   155,    11,   109,   173,   155,    90,    41,
   137,   173,   277,    41,   251,    47,   132,    44,   173,    51,
    46,   173,   155,    51,   128,   173,    94,   131,   110,   111,
   112,     1,    25,    73,    41,    48,    43,   119,   178,   155,
   173,    34,    46,    99,   225,   137,   227,   139,    46,   225,
    48,   227,   144,   145,   291,    25,    22,   173,   225,   127,
   227,   143,    48,   225,   120,   227,   148,   171,   172,   125,
   225,   153,   227,   225,    44,   227,   160,   225,    44,   227,
    46,    12,   174,    14,    27,   125,   190,   155,   170,    27,
   313,   314,   225,    22,   227,   222,   275,   189,    31,    32,
    27,   280,   242,    36,   208,   173,   210,    43,   148,   225,
    21,   227,   335,   336,    41,   199,    86,    46,   355,    48,
   176,   177,   285,   286,    51,    41,   305,   354,   196,   308,
   222,    27,   359,   360,    43,   275,    41,   177,    47,   357,
   280,   233,    48,   235,   236,    41,    44,   251,   311,   312,
    21,    47,   244,   332,    46,    51,    48,   225,   240,   227,
     4,     5,     6,   338,    10,   305,    12,    43,   308,   261,
    45,    46,    46,   353,   349,   350,   357,    45,    46,    23,
   272,   357,    45,    46,    38,   241,    46,   291,   270,    44,
   357,   371,   332,    45,    46,   357,    75,    76,    22,    44,
    42,   241,   357,     3,   244,   357,    44,    44,   248,   357,
    44,    27,    48,    48,    29,   297,   298,   321,    41,    41,
    26,    35,   304,    44,   357,     3,    45,   309,    28,    42,
    30,    31,    32,    33,    34,    35,    36,    37,    27,    27,
    44,   357,    42,    44,   326,   327,   328,    27,    46,    48,
    28,   355,    30,    31,    32,    33,    34,    35,    36,    37,
   352,    27,   354,    27,    42,   347,    41,   359,   360,     3,
     4,     5,     6,     7,     8,     9,    41,    11,    12,   361,
    41,    27,    16,    17,    18,    19,    20,    44,    22,    23,
    48,    27,    27,    45,    42,    29,    30,    42,    49,    42,
    42,     0,     0,     4,   256,    39,   315,    41,   159,    43,
   364,    39,    52,    47,   124,   357,    50,    51,     3,     4,
     5,     6,     7,     8,     9,   248,    11,    12,   225,    25,
   148,    16,    17,    18,    19,    20,   131,    76,    23,   289,
   341,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,
    -1,    -1,    47,    -1,    49,    50,    51,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    16,    17,    18,    19,    20,    -1,    -1,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    49,    50,    51,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,
    17,    18,    19,    20,    -1,    22,    23,    -1,    -1,    -1,
    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,
    47,    -1,    -1,    50,    51,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
    18,    19,    20,    -1,    22,    23,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,
    -1,    -1,    50,    51,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
    19,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,
    -1,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
    20,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    30,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,
    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,
    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    -1,
    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,
    23,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,
    43,    -1,    -1,    -1,    47,    -1,    49,    50,    51,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,
    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     4,     5,
     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,    -1,    -1,    -1,    23,     4,     5,
     6,     7,     8,     9,    30,    11,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,     3,    -1,    -1,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    51,    -1,     3,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    28,
    -1,    30,    31,    32,    33,    34,    35,    36,    37,    -1,
    -1,    -1,    28,    42,    30,    31,    32,    33,    34,    35,
    36,    37,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    26,    45,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 49:
#line 183 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 188 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 201 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 207 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 217 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 58:
#line 219 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 59:
#line 229 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 60:
#line 231 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 233 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 62:
#line 235 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 63:
#line 237 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 64:
#line 248 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 65:
#line 261 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 66:
#line 263 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 68:
#line 279 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 69:
#line 306 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 70:
#line 324 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 71:
#line 351 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 379 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 398 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 426 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 453 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 471 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 496 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 524 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 543 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 571 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 590 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 607 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 626 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 87:
#line 639 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 88:
#line 641 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 89:
#line 655 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 90:
#line 660 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-1], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 91:
#line 665 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 92:
#line 669 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 93:
#line 680 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 94:
#line 685 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 95:
#line 695 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 96:
#line 700 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 714 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 99:
#line 731 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 101:
#line 739 "lang11d"
{ yyval = 0; ;
    break;}
case 104:
#line 745 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 106:
#line 750 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 107:
#line 754 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 108:
#line 757 "lang11d"
{ yyval = 0; ;
    break;}
case 109:
#line 758 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 110:
#line 762 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 111:
#line 764 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 113:
#line 769 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 114:
#line 773 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 115:
#line 774 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 116:
#line 775 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 117:
#line 776 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 118:
#line 777 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 119:
#line 778 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 120:
#line 779 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 121:
#line 780 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 122:
#line 781 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 123:
#line 782 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 124:
#line 785 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 125:
#line 788 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 126:
#line 791 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 792 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 128:
#line 793 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 129:
#line 794 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 795 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 796 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 797 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 798 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 799 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 800 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 136:
#line 803 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 804 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 138:
#line 805 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 139:
#line 806 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 140:
#line 807 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 141:
#line 808 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 142:
#line 809 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 810 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 811 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 812 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 146:
#line 816 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 147:
#line 819 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 148:
#line 823 "lang11d"
{ yyval = 0; ;
    break;}
case 149:
#line 825 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 151:
#line 830 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 152:
#line 834 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 153:
#line 837 "lang11d"
{ yyval = 0; ;
    break;}
case 154:
#line 839 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 155:
#line 843 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 156:
#line 847 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 157:
#line 851 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 158:
#line 857 "lang11d"
{ yyval = 0; ;
    break;}
case 161:
#line 863 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 162:
#line 867 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 163:
#line 869 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 164:
#line 873 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 165:
#line 875 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 167:
#line 883 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 168:
#line 886 "lang11d"
{ yyval = 0; ;
    break;}
case 171:
#line 892 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 172:
#line 896 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 173:
#line 898 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 174:
#line 904 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 175:
#line 906 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 176:
#line 910 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 177:
#line 912 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 178:
#line 915 "lang11d"
{ yyval = 0; ;
    break;}
case 181:
#line 921 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 182:
#line 924 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 183:
#line 926 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 184:
#line 928 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 185:
#line 930 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 186:
#line 933 "lang11d"
{ yyval = zzval; ;
    break;}
case 187:
#line 935 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 188:
#line 943 "lang11d"
{ yyval = zzval; ;
    break;}
case 189:
#line 945 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 190:
#line 953 "lang11d"
{ yyval = zzval; ;
    break;}
case 191:
#line 955 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->slot.uf + 0.5);
					fracval = node->slot.uf - intval;
					node->slot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 192:
#line 965 "lang11d"
{ yyval = zzval; ;
    break;}
case 195:
#line 971 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 196:
#line 977 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 197:
#line 985 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 198:
#line 992 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 199:
#line 1000 "lang11d"
{ yyval = zzval; ;
    break;}
case 200:
#line 1003 "lang11d"
{ yyval = zzval; ;
    break;}
case 201:
#line 1006 "lang11d"
{ yyval = zzval; ;
    break;}
case 202:
#line 1009 "lang11d"
{ yyval = zzval; ;
    break;}
case 203:
#line 1012 "lang11d"
{ yyval = zzval; ;
    break;}
case 204:
#line 1015 "lang11d"
{ yyval = zzval; ;
    break;}
case 205:
#line 1018 "lang11d"
{ yyval = zzval; ;
    break;}
case 206:
#line 1021 "lang11d"
{ yyval = zzval; ;
    break;}
case 207:
#line 1024 "lang11d"
{ yyval = zzval; ;
    break;}
case 208:
#line 1027 "lang11d"
{ yyval = zzval; ;
    break;}
case 209:
#line 1030 "lang11d"
{ yyval = zzval; ;
    break;}
case 210:
#line 1033 "lang11d"
{ yyval = zzval; ;
    break;}
case 211:
#line 1034 "lang11d"
{ yyval = zzval; ;
    break;}
case 212:
#line 1035 "lang11d"
{ yyval = zzval; ;
    break;}
case 213:
#line 1036 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 1037 "lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1038 "lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1039 "lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1040 "lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1041 "lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1044 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1047 "lang11d"
