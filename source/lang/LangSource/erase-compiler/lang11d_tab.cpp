
/*  A Bison parser, made from source/lang/LangSource/erase-compiler/lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	VAR	266
#define	ARG	267
#define	CLASSVAR	268
#define	CONST	269
#define	NILOBJ	270
#define	TRUEOBJ	271
#define	FALSEOBJ	272
#define	INFINITUMOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BINOP	281
#define	KEYBINOP	282
#define	READWRITEVAR	283
#define	UMINUS	284

#line 15 "source/lang/LangSource/erase-compiler/lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		412
#define	YYFLAG		-32768
#define	YYNTBASE	52

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 134)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    51,     2,     2,     2,     2,    47,
    48,    34,    35,    46,    31,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    27,    45,    32,
    28,    33,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    43,     2,    44,    49,     2,    39,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    41,    36,    42,    50,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    29,    30,    37,    40
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   160,   167,
   175,   183,   190,   199,   207,   212,   214,   216,   218,   220,
   224,   227,   231,   235,   239,   241,   246,   252,   258,   263,
   268,   270,   276,   282,   289,   297,   305,   314,   321,   328,
   336,   345,   354,   364,   367,   371,   377,   379,   381,   383,
   389,   391,   394,   399,   403,   408,   414,   422,   427,   434,
   442,   443,   446,   449,   454,   456,   460,   463,   464,   467,
   469,   473,   476,   480,   485,   491,   493,   497,   500,   505,
   507,   511,   514,   515,   518,   520,   524,   526,   530,   532,
   534,   536,   538,   540,   542,   544,   546,   548,   550,   552,
   554,   556,   558,   560,   562,   564,   566,   568,   570,   572,
   574,   576,   578,   580,   582,   584,   586,   588,   590,   592,
   594,   600,   606,   607,   610,   612,   615,   619,   620,   624,
   630,   634,   640,   641,   643,   645,   649,   651,   655,   659,
   662,   664,   668,   669,   671,   673,   677,   680,   685,   690,
   696,   700,   705,   706,   709,   711,   715,   716,   718,   720,
   722,   724,   727,   729,   732,   734,   737,   739,   741,   743,
   746,   749,   751,   754,   756,   758,   760,   762,   764,   766,
   768,   770,   772,   774,   776,   778,   780,   782,   784,   786,
   788,   790,   792,   794,   796
};

static const short yyrhs[] = {    53,
     0,    54,     0,    26,    66,     0,     0,    53,    55,     0,
    56,     0,    54,    56,     0,   121,    58,    41,    59,    61,
    42,     0,   121,    43,    57,    44,    58,    41,    59,    61,
    42,     0,    35,   121,    41,    61,    42,     0,     0,   120,
     0,     0,    27,   121,     0,     0,    59,    60,     0,    14,
   108,    45,     0,    12,   108,    45,     0,     0,    61,    62,
     0,   120,    41,   101,    98,    68,    67,    42,     0,    34,
   120,    41,   101,    98,    68,    67,    42,     0,   131,    41,
   101,    98,    68,    67,    42,     0,    34,   131,    41,   101,
    98,    68,    67,    42,     0,     0,    45,     0,     0,    46,
     0,    70,     0,    82,    70,     0,    47,    99,    65,    48,
     0,    99,    65,     0,    65,     0,    69,     0,    82,    69,
     0,     0,   122,    63,     0,     0,    49,    79,    63,     0,
     0,    49,    79,    63,     0,    93,     0,    71,    93,     0,
     0,    71,     0,   120,    71,     0,   120,    47,    85,    89,
    48,    72,     0,   120,    47,    86,    89,    48,     0,    79,
    38,    47,    87,    48,    72,     0,    79,    38,   120,    47,
    87,    48,    72,     0,    79,    38,    47,    85,    89,    48,
    72,     0,    79,    38,    47,    86,    89,    48,     0,    79,
    38,   120,    47,    85,    89,    48,    72,     0,    79,    38,
   120,    47,    86,    89,    48,     0,    79,    38,   120,    72,
     0,    95,     0,    93,     0,    94,     0,    73,     0,    47,
    82,    48,     0,    50,   120,     0,    43,    83,    44,     0,
    47,    78,    48,     0,    47,   107,    48,     0,   130,     0,
   121,    47,    87,    48,     0,   121,    47,    85,    89,    48,
     0,   121,    47,    86,    89,    48,     0,   121,    43,    83,
    44,     0,    74,    43,    85,    44,     0,    75,     0,    74,
    43,    85,    22,    44,     0,    74,    43,    22,    82,    44,
     0,    74,    43,    85,    22,    82,    44,     0,    74,    43,
    85,    22,    44,    28,    79,     0,    74,    43,    22,    82,
    44,    28,    79,     0,    74,    43,    85,    22,    82,    44,
    28,    79,     0,    79,    38,    43,    85,    22,    44,     0,
    79,    38,    43,    22,    82,    44,     0,    79,    38,    43,
    85,    22,    82,    44,     0,    79,    38,    43,    85,    22,
    44,    28,    79,     0,    79,    38,    43,    22,    82,    44,
    28,    79,     0,    79,    38,    43,    85,    22,    82,    44,
    28,    79,     0,    22,    82,     0,    82,    22,    82,     0,
    82,    46,    82,    22,    82,     0,    74,     0,    77,     0,
    76,     0,    79,    38,    43,    85,    44,     0,   121,     0,
    39,    79,     0,    79,   133,    80,    79,     0,   120,    28,
    79,     0,    50,   120,    28,    79,     0,    79,    38,   120,
    28,    79,     0,   120,    47,    85,    89,    48,    28,    79,
     0,    51,    90,    28,    79,     0,    74,    43,    85,    44,
    28,    79,     0,    79,    38,    43,    85,    44,    28,    79,
     0,     0,    38,   120,     0,    38,   115,     0,    38,    47,
    82,    48,     0,    79,     0,    81,    45,    79,     0,    81,
    63,     0,     0,    84,    64,     0,    82,     0,    82,    27,
    82,     0,   132,    82,     0,    84,    46,    82,     0,    84,
    46,   132,    82,     0,    84,    46,    82,    27,    82,     0,
    82,     0,    85,    46,    82,     0,    34,    82,     0,    85,
    46,    34,    82,     0,    88,     0,    87,    46,    88,     0,
   132,    82,     0,     0,    46,    87,     0,    91,     0,    91,
    21,   120,     0,   120,     0,    91,    46,   120,     0,   115,
     0,   119,     0,   127,     0,   129,     0,   128,     0,   123,
     0,   124,     0,   125,     0,   126,     0,   110,     0,    97,
     0,   120,     0,   115,     0,   119,     0,   127,     0,   129,
     0,   128,     0,   123,     0,   124,     0,   125,     0,   126,
     0,   110,     0,   115,     0,   119,     0,   127,     0,   129,
     0,   128,     0,   123,     0,   124,     0,   125,     0,   126,
     0,   111,     0,    41,   101,    98,    65,    42,     0,    24,
   101,    98,    65,    42,     0,     0,    98,   100,     0,   100,
     0,    99,   100,     0,    12,   103,    45,     0,     0,    13,
   103,    45,     0,    13,   102,    21,   120,    45,     0,    36,
   103,    36,     0,    36,   102,    21,   120,    36,     0,     0,
   103,     0,   104,     0,   103,    46,   104,     0,   120,     0,
   120,    28,    92,     0,    82,    27,    82,     0,   132,    82,
     0,   105,     0,   106,    46,   105,     0,     0,   106,     0,
   109,     0,   108,    46,   109,     0,   114,   120,     0,   114,
   120,    28,    92,     0,    51,    43,   112,    44,     0,    51,
   121,    43,   112,    44,     0,    43,   112,    44,     0,   121,
    43,   112,    44,     0,     0,   113,    64,     0,    96,     0,
   113,    46,    96,     0,     0,    32,     0,    37,     0,    33,
     0,     4,     0,    31,     4,     0,     5,     0,    31,     5,
     0,     6,     0,    31,     6,     0,    23,     0,   116,     0,
   117,     0,   116,   118,     0,   115,   118,     0,   118,     0,
    31,   118,     0,     3,     0,    11,     0,    10,     0,    17,
     0,    18,     0,    16,     0,    19,     0,     9,     0,     7,
     0,     8,     0,    20,     0,    29,     0,    37,     0,    32,
     0,    33,     0,    31,     0,    34,     0,    35,     0,    36,
     0,    30,     0,   131,     0,   132,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   192,   201,
   206,   219,   240,   246,   265,   271,   272,   273,   274,   275,
   277,   287,   289,   291,   293,   295,   306,   319,   341,   343,
   356,   359,   386,   404,   431,   459,   478,   506,   533,   551,
   576,   604,   623,   651,   670,   687,   703,   704,   705,   706,
   719,   721,   735,   740,   744,   755,   760,   770,   775,   789,
   805,   806,   807,   808,   811,   812,   818,   821,   822,   826,
   827,   829,   834,   836,   843,   851,   852,   856,   858,   862,
   863,   867,   871,   872,   875,   877,   881,   882,   887,   888,
   889,   890,   891,   892,   893,   894,   895,   896,   899,   902,
   905,   906,   907,   908,   909,   910,   911,   912,   913,   914,
   917,   918,   919,   920,   921,   922,   923,   924,   925,   926,
   929,   932,   937,   938,   942,   943,   947,   951,   952,   956,
   960,   964,   971,   972,   975,   976,   980,   982,   986,   988,
   995,   996,  1000,  1001,  1004,  1005,  1009,  1011,  1017,  1019,
  1023,  1025,  1029,  1030,  1033,  1034,  1038,  1039,  1041,  1043,
  1047,  1048,  1057,  1058,  1067,  1068,  1079,  1082,  1083,  1084,
  1090,  1098,  1105,  1114,  1117,  1120,  1123,  1126,  1129,  1132,
  1135,  1138,  1141,  1144,  1147,  1148,  1149,  1150,  1151,  1152,
  1153,  1154,  1157,  1160,  1161
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR",
"ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","INFINITUMOBJ","PSEUDOVAR",
"ELLIPSIS","DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","':'","'='",
"BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","'.'",
"'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'",
"root","classes","classextensions","classdef","classextension","optname","superclass",
"classvardecls","classvardecl","methods","methoddef","optsemi","optcomma","funcbody",
"cmdlinecode","methbody","primitive","retval","funretval","blocklist1","blocklist",
"msgsend","expr1","valrangex1","valrangeassign","valrangexd","valrange2","expr",
"adverb","exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1",
"keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral",
"pushname","pushliteral","listliteral","block","funcvardecls","funcvardecls1",
"funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef",
"dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","listlit","listlit2",
"literallistc","literallist1","rwspec","integer","floatr","accidental","pie",
"floatp","name","classname","primname","trueobj","falseobj","nilobj","infobj",
"ascii","symbol","string","pseudovar","binop","keybinop","binop2", NULL
};
#endif

static const short yyr1[] = {     0,
    52,    52,    52,    53,    53,    54,    54,    55,    55,    56,
    57,    57,    58,    58,    59,    59,    60,    60,    61,    61,
    62,    62,    62,    62,    63,    63,    64,    64,    65,    65,
    66,    66,    66,    67,    67,    68,    68,    69,    69,    70,
    70,    71,    71,    72,    72,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    75,    75,    75,    76,    76,    76,    77,    77,    77,
    77,    77,    77,    78,    78,    78,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    80,    80,    80,    80,    81,    81,    82,    83,    83,    84,
    84,    84,    84,    84,    84,    85,    85,    86,    86,    87,
    87,    88,    89,    89,    90,    90,    91,    91,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    93,    94,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
    97,    97,    98,    98,    99,    99,   100,   101,   101,   101,
   101,   101,   102,   102,   103,   103,   104,   104,   105,   105,
   106,   106,   107,   107,   108,   108,   109,   109,   110,   110,
   111,   111,   112,   112,   113,   113,   114,   114,   114,   114,
   115,   115,   116,   116,   117,   117,   118,   119,   119,   119,
   119,   119,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   131,   131,   131,   131,   131,
   131,   131,   132,   133,   133
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     5,     6,     7,
     7,     6,     8,     7,     4,     1,     1,     1,     1,     3,
     2,     3,     3,     3,     1,     4,     5,     5,     4,     4,
     1,     5,     5,     6,     7,     7,     8,     6,     6,     7,
     8,     8,     9,     2,     3,     5,     1,     1,     1,     5,
     1,     2,     4,     3,     4,     5,     7,     4,     6,     7,
     0,     2,     2,     4,     1,     3,     2,     0,     2,     1,
     3,     2,     3,     4,     5,     1,     3,     2,     4,     1,
     3,     2,     0,     2,     1,     3,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     5,     0,     2,     1,     2,     3,     0,     3,     5,
     3,     5,     0,     1,     1,     3,     1,     3,     3,     2,
     1,     3,     0,     1,     1,     3,     2,     4,     4,     5,
     3,     4,     0,     2,     1,     3,     0,     1,     1,     1,
     1,     2,     1,     2,     1,     2,     1,     1,     1,     2,
     2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   214,   201,   203,   205,   222,
   223,   221,   215,     0,   219,   217,   218,   220,   224,   207,
   168,     0,     0,   168,   108,   183,     0,     0,     0,    33,
     3,    29,    59,    87,    71,    89,    88,   105,    25,    40,
    57,    58,    56,   139,    40,   165,   150,   141,   208,   209,
   212,   142,   140,    91,   146,   147,   148,   149,   143,   145,
   144,    65,     0,     5,    13,     7,     0,   175,   177,   173,
   173,   163,   202,   204,   206,   213,   183,    92,   163,   233,
   110,     0,    27,     0,     0,     0,     0,    40,   181,   184,
     0,     0,    25,    61,   193,     0,   125,   127,     0,     0,
   225,   229,   227,   228,   230,   231,   232,   226,     0,   234,
   235,   101,    26,   107,    30,    32,   166,   211,   210,     0,
     0,    46,    42,   108,     0,    19,     0,    11,     0,   167,
     0,     0,     0,   174,     0,   174,    40,    40,     0,    62,
    28,   109,   112,    84,    63,     0,     0,     0,    60,     0,
     0,    64,   180,    26,    41,     0,   193,   195,   160,     0,
    27,   151,   152,     0,   156,   157,   158,   159,   153,   155,
   154,     0,     0,     0,   193,     0,   116,     0,     0,     0,
    44,     0,     0,   106,    94,     0,   123,   123,    43,     0,
   123,   123,     0,   120,     0,     0,    14,     0,    12,    15,
   176,     0,   178,   138,   129,   130,   134,   135,   136,   137,
   131,   133,   132,     0,   169,     0,   171,     0,   164,     0,
   111,   113,     0,    85,   179,     0,    31,     0,   182,    95,
     0,   189,    28,   194,   193,    98,   126,   128,     0,     0,
     0,    70,     0,     0,     0,   123,   123,     0,     0,     0,
    45,    55,     0,     0,   103,   102,    93,   118,     0,     0,
     0,     0,    69,     0,     0,     0,    66,   122,   230,    10,
    20,     0,     0,    13,    19,     0,     0,   162,   161,     0,
   114,     0,   191,   196,     0,   190,    73,    72,     0,     0,
   117,     0,     0,    90,     0,     0,    44,    96,   123,   123,
     0,     0,     0,   124,    44,    48,    67,    68,   121,     0,
     0,   168,   168,     0,   197,   197,    16,     0,   170,   172,
   115,    86,   192,     0,     0,    74,    99,    79,    78,     0,
     0,    44,    52,    49,     0,     0,    44,   104,   119,     0,
    47,   168,   168,   163,   163,    15,   198,   200,   199,     0,
   185,     0,     0,     8,    76,    75,     0,     0,     0,    80,
   100,    51,    44,    54,    50,    97,   163,   163,    36,    36,
    19,    18,   197,   187,    17,    77,    82,    81,     0,    53,
    36,    36,   216,    38,    25,    38,     0,   186,     0,    83,
    38,    38,     0,     0,    34,    38,    37,     0,     9,   188,
     0,     0,    25,    21,    35,    23,    22,    24,    39,     0,
     0,     0
};

static const short yydefgoto[] = {   410,
     3,     4,    64,     5,   198,   129,   275,   317,   196,   271,
   114,   142,    30,    31,   394,   384,   395,    32,   251,   252,
    33,    34,    35,    36,    37,    86,    38,   183,    39,   177,
    82,    83,   178,   188,   304,   194,   260,    96,    97,   203,
    41,    42,    43,   158,    44,   137,    45,   219,    72,   133,
    67,    68,    89,    90,    91,   350,   351,    47,   159,   160,
   161,   352,    48,    49,    50,    51,    52,    53,    54,   385,
    55,    56,    57,    58,    59,    60,    61,    62,   110,   111,
   112
};

static const short yypact[] = {   128,
   439,    56,    56,    -5,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    72,-32768,-32768,-32768,-32768,-32768,-32768,
    24,   260,  1027,    24,   684,   390,  1027,    72,     7,-32768,
-32768,-32768,-32768,    39,-32768,-32768,-32768,  1100,    48,    52,
-32768,-32768,-32768,-32768,   488,-32768,-32768,    85,    85,-32768,
-32768,-32768,   205,     8,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    73,-32768,    16,-32768,   -23,-32768,    91,    72,
    72,-32768,-32768,-32768,-32768,-32768,   537,-32768,-32768,-32768,
   106,    97,   113,  1027,  1027,   154,    20,   488,-32768,   165,
   179,  1027,  1146,   204,  1096,   207,     6,-32768,   196,   733,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    18,-32768,
-32768,   234,  1027,-32768,-32768,-32768,-32768,-32768,-32768,  1027,
   782,   141,-32768,   684,   586,-32768,    56,    72,   235,-32768,
    72,  1075,   224,   122,   256,    81,   488,   488,  1027,-32768,
   684,-32768,-32768,-32768,-32768,  1027,  1027,  1027,-32768,   239,
   684,-32768,-32768,-32768,-32768,  1027,  1096,-32768,-32768,   245,
   255,    85,-32768,   248,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1027,    72,    72,  1096,  1027,-32768,    78,   831,   586,
   220,    25,  1027,  1100,  1100,  1027,   261,   262,-32768,   265,
   261,   262,   211,-32768,  1027,   181,-32768,   268,-32768,-32768,
-32768,     3,-32768,-32768,    85,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    72,-32768,    72,-32768,   264,-32768,   271,
-32768,   288,  1027,-32768,-32768,   294,-32768,   291,-32768,  1100,
   278,-32768,  1096,-32768,  1096,  1100,-32768,-32768,   281,   284,
   880,   301,  1027,  1027,   112,   261,   262,   222,  1027,   586,
   141,-32768,   327,  1027,-32768,-32768,   295,-32768,   635,   292,
   302,   293,-32768,   296,   297,   302,-32768,-32768,  1137,-32768,
-32768,   305,   307,   322,   259,   306,   316,-32768,-32768,  1027,
-32768,  1027,-32768,-32768,   309,-32768,   326,   328,   311,  1027,
-32768,   313,   929,   332,   314,   315,   141,  1100,   261,   262,
   236,   319,  1027,   318,   206,-32768,-32768,-32768,-32768,   329,
   330,    24,    24,   334,   217,   217,-32768,  1113,-32768,-32768,
-32768,-32768,-32768,  1027,  1027,   340,  1100,   341,   345,   333,
  1027,   141,-32768,-32768,   331,   336,   141,-32768,-32768,  1027,
-32768,    24,    24,-32768,-32768,-32768,-32768,-32768,-32768,   145,
-32768,    72,   175,-32768,  1100,  1100,  1027,  1027,  1027,   348,
  1100,-32768,   141,-32768,-32768,  1100,-32768,-32768,   276,   276,
   259,-32768,   217,   350,-32768,  1100,  1100,  1100,  1027,-32768,
   276,   276,-32768,   978,   335,   978,  1125,-32768,  1075,  1100,
   978,   978,  1027,   339,-32768,   337,-32768,   346,-32768,-32768,
   347,   358,  1146,-32768,-32768,-32768,-32768,-32768,-32768,   382,
   387,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   399,-32768,   130,    59,-32768,  -262,-32768,
   -89,   250,    60,-32768,  -186,  -144,    21,   375,   363,  -101,
-32768,-32768,-32768,-32768,-32768,-32768,   -21,-32768,-32768,    -1,
   298,-32768,    28,  -118,  -106,   152,  -157,-32768,-32768,    30,
   -42,-32768,-32768,   191,-32768,   -70,   400,    19,   -19,   356,
   229,   299,   277,-32768,-32768,   116,    61,  -129,-32768,  -104,
-32768,-32768,   -78,-32768,-32768,   -10,   -69,   -13,   190,-32768,
   -63,   -62,   -59,   -55,   -54,   -47,   -46,-32768,  -188,   100,
-32768
};


#define	YYLAST		1191


static const short yytable[] = {    40,
    69,    78,   204,   155,    79,    93,   192,   273,   138,     6,
   123,    76,   318,    13,    94,    98,   162,    13,   193,    46,
     6,   130,   131,    81,    87,   163,   173,     6,     7,     2,
   262,   165,   166,   264,   265,   167,    70,   118,   119,   168,
   169,   146,   127,    40,    46,    95,   147,   170,   171,    95,
   124,   174,   231,   205,   125,   253,    69,    69,   128,    71,
   179,   247,   206,   117,   180,   148,    13,   149,   207,   208,
   239,   254,   209,   248,     6,    87,   210,   211,   162,   189,
   311,   100,   143,   144,   212,   213,    40,   163,   295,   296,
   153,   184,   113,   165,   166,   181,   162,   167,   185,   241,
    27,   168,   169,   255,   116,   163,   117,    20,   387,   170,
   171,   165,   166,   126,   199,   167,   217,    69,   132,   168,
   169,   242,    81,   243,    84,    92,   131,   170,   171,   273,
   285,   300,   139,   293,   230,    40,    40,   221,   123,   222,
   140,   335,   336,   301,   224,   225,   226,   150,   187,   228,
   236,   118,   191,     1,   162,   294,   162,   243,   141,   237,
   238,   257,     2,   163,    21,   163,   215,   131,   256,   165,
   166,   165,   166,   167,   240,   167,    92,   168,   169,   168,
   169,    24,   272,     6,   258,   170,   171,   170,   171,   372,
   373,    63,    65,   268,   118,   334,   218,   220,   273,   398,
   276,   145,   277,   341,   401,   402,   245,   246,   189,   101,
   151,   102,   103,   104,   269,   106,   107,   108,    99,   375,
   373,   281,   270,    84,   195,   386,   152,   298,    21,    21,
   362,   156,   120,   340,   172,   365,   391,   392,   175,   289,
   223,   291,   292,    21,   214,    24,    24,   249,   347,   348,
    92,   121,   302,   349,   123,   310,   266,   291,   267,   204,
    24,   380,   123,    73,    74,    75,   250,   266,   327,   297,
   315,   182,   316,   369,   370,   200,   216,   299,   321,   195,
   322,   266,    20,   337,   164,   383,   227,    14,   232,   123,
   235,   330,   344,   345,   123,   397,   381,   382,   134,   136,
   233,   339,   355,   356,   272,   278,   259,   261,   263,   361,
   205,   274,   279,   409,   280,   282,   197,   147,   366,   206,
   123,   283,   367,   368,   286,   207,   208,   287,   290,   209,
    73,    80,   109,   210,   211,   376,   377,   378,   374,   305,
   306,   212,   213,   307,   308,   312,   164,   313,   127,   195,
   319,   320,   323,   324,   326,   325,   328,   390,   195,   331,
   195,   332,   333,   266,   164,   195,   338,   357,   358,   342,
   343,   403,   359,   272,   346,   379,   360,   389,   363,   154,
   404,   411,   396,   364,   396,   393,   412,   406,   407,   396,
   396,    99,     6,     7,     8,     9,    10,    11,    12,   408,
    13,    14,    66,   314,   371,    15,    16,    17,    18,    19,
   234,    85,    20,    21,   115,   122,   405,   309,   400,    80,
    22,   190,   164,   284,   164,    88,   135,   229,    23,   201,
    24,   353,    25,   388,     0,     0,    77,     0,     0,    28,
    29,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,    15,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,     0,     0,    22,
     0,     0,     0,     0,     0,     0,     0,    23,     0,    24,
     0,    25,     0,     0,     0,    26,     0,    27,    28,    29,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,    15,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,    27,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,    85,    20,
    21,     0,     0,     0,     0,     0,    80,    22,     0,     0,
     0,     0,     0,     0,     0,    23,     0,    24,     0,    25,
     0,     0,     0,    77,     0,     0,    28,    29,     6,     7,
     8,     9,    10,    11,    12,     0,    13,     0,     0,     0,
     0,    15,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,     0,    80,    22,     0,     0,   186,
     0,     0,     0,     0,    23,     0,    24,     0,    25,     0,
     0,     0,    77,     0,     0,    28,    29,     6,     7,     8,
     9,    10,    11,    12,     0,    13,     0,     0,     0,     0,
    15,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,     0,    80,    22,     0,     0,   303,     0,
     0,     0,     0,    23,     0,    24,     0,    25,     0,     0,
     0,    77,     0,     0,    28,    29,     6,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,    15,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,     0,    80,    22,     0,     0,     0,     0,     0,
     0,     0,    23,     0,    24,     0,    25,     0,     0,     0,
    77,     0,     0,    28,    29,     6,     7,     8,     9,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,    16,
    17,    18,    19,     0,   176,    20,    21,     0,     0,     0,
     0,     0,     0,    22,     0,     0,     0,     0,     0,     0,
     0,    23,     0,    24,     0,    25,     0,     0,     0,    77,
     0,     0,    28,    29,     6,     7,     8,     9,    10,    11,
    12,     0,    13,     0,     0,     0,     0,    15,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
     0,     0,    22,     0,     0,   186,     0,     0,     0,     0,
    23,     0,    24,     0,    25,     0,     0,     0,    77,     0,
     0,    28,    29,     6,     7,     8,     9,    10,    11,    12,
     0,    13,     0,     0,     0,     0,    15,    16,    17,    18,
    19,     0,   244,    20,    21,     0,     0,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,     0,    23,
     0,    24,     0,    25,     0,     0,     0,    77,     0,     0,
    28,    29,     6,     7,     8,     9,    10,    11,    12,     0,
    13,     0,     0,     0,     0,    15,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
    22,     0,     0,     0,     0,     0,     0,     0,    23,     0,
    24,     0,    25,   288,     0,     0,    77,     0,     0,    28,
    29,     6,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,    15,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,     0,     0,    22,
     0,     0,     0,     0,     0,     0,     0,    23,     0,    24,
     0,    25,   329,     0,     0,    77,     0,     0,    28,    29,
     6,     7,     8,     9,    10,    11,    12,     0,    13,     0,
     0,     0,     0,    15,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,   393,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,    23,     0,    24,     0,    25,
     0,     0,     0,    77,     0,     0,    28,    29,     7,     8,
     9,    10,    11,    12,     0,     0,     0,     0,     0,     0,
    15,    16,    17,    18,     0,     0,     0,    20,     0,     7,
     8,     9,    10,    11,    12,    22,    13,     0,     0,     0,
     0,    15,    16,    17,    18,     6,     0,     0,    20,     0,
     0,     0,     0,     0,     0,   202,    22,     6,   101,    80,
   102,   103,   104,   105,   106,   107,   108,   109,   157,     6,
     0,   101,     0,   102,   103,   104,   269,   106,   107,   108,
     0,     0,     0,   101,   354,   102,   103,   104,   269,   106,
   107,   108,     0,     0,     0,   101,   399,   102,   103,   104,
   105,   106,   107,   108,   101,    80,   102,   103,   104,   105,
   106,   107,   108,   109,     0,     0,     0,     0,     0,     0,
   154
};

static const short yycheck[] = {     1,
    14,    23,   132,    93,    24,    27,   125,   196,    79,     3,
    53,    22,   275,    11,    28,    29,    95,    11,   125,     1,
     3,    45,    46,    25,    26,    95,    21,     3,     4,    35,
   188,    95,    95,   191,   192,    95,    13,    48,    49,    95,
    95,    22,    27,    45,    26,    43,    27,    95,    95,    43,
    43,    46,   157,   132,    47,    31,    70,    71,    43,    36,
    43,   180,   132,    45,    47,    46,    11,    48,   132,   132,
   175,    47,   132,   180,     3,    77,   132,   132,   157,   122,
   269,    43,    84,    85,   132,   132,    88,   157,   246,   247,
    92,   113,    45,   157,   157,   109,   175,   157,   120,    22,
    49,   157,   157,   182,    45,   175,    88,    23,   371,   157,
   157,   175,   175,    41,   128,   175,    36,   131,    28,   175,
   175,    44,   124,    46,    25,    26,    46,   175,   175,   318,
   235,   250,    27,    22,   156,   137,   138,   139,   181,   141,
    44,   299,   300,   250,   146,   147,   148,    88,   121,   151,
   172,   162,   125,    26,   233,    44,   235,    46,    46,   173,
   174,   183,    35,   233,    24,   235,    45,    46,   182,   233,
   233,   235,   235,   233,   176,   235,    77,   233,   233,   235,
   235,    41,   196,     3,   186,   233,   233,   235,   235,    45,
    46,     2,     3,   195,   205,   297,   137,   138,   387,   386,
   214,    48,   216,   305,   391,   392,   179,   180,   251,    29,
    46,    31,    32,    33,    34,    35,    36,    37,    29,    45,
    46,   223,    42,   124,   125,   370,    48,   249,    24,    24,
   332,    28,    28,    28,    28,   337,   381,   382,    43,   241,
   141,   243,   244,    24,    21,    41,    41,    28,    32,    33,
   151,    47,   254,    37,   297,   269,    46,   259,    48,   389,
    41,   363,   305,     4,     5,     6,    47,    46,   290,    48,
    12,    38,    14,   344,   345,    41,    21,   250,   280,   180,
   282,    46,    23,    48,    95,    10,    48,    12,    44,   332,
    43,   293,   312,   313,   337,   385,   367,   368,    70,    71,
    46,   303,   324,   325,   318,    42,    46,    46,    44,   331,
   389,    44,    42,   403,    27,    22,   127,    27,   340,   389,
   363,    44,   342,   343,    44,   389,   389,    44,    28,   389,
     4,    30,    38,   389,   389,   357,   358,   359,   352,    48,
    48,   389,   389,    48,    48,    41,   157,    41,    27,   250,
    45,    36,    44,    28,    44,    28,    44,   379,   259,    28,
   261,    48,    48,    46,   175,   266,    48,    28,    28,    41,
    41,   393,    28,   387,    41,    28,    44,    28,    48,    45,
    42,     0,   384,    48,   386,    49,     0,    42,    42,   391,
   392,   202,     3,     4,     5,     6,     7,     8,     9,    42,
    11,    12,     4,   274,   346,    16,    17,    18,    19,    20,
   161,    22,    23,    24,    40,    53,   396,   266,   389,    30,
    31,   124,   233,   233,   235,    26,    71,   151,    39,   131,
    41,   316,    43,   373,    -1,    -1,    47,    -1,    -1,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,
    -1,    43,    -1,    -1,    -1,    47,    -1,    49,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,
    43,    -1,    -1,    -1,    47,    -1,    49,    50,    51,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,
    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,    -1,
    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,
    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,    30,    31,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    -1,    50,    51,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,
    47,    -1,    -1,    50,    51,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,
    -1,    -1,    50,    51,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,
    -1,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,
    -1,    43,    44,    -1,    -1,    47,    -1,    -1,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    -1,
    -1,    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,
    43,    -1,    -1,    -1,    47,    -1,    49,    50,    51,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,
    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     4,     5,
     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,    -1,    -1,    -1,    23,    -1,     4,
     5,     6,     7,     8,     9,    31,    11,    -1,    -1,    -1,
    -1,    16,    17,    18,    19,     3,    -1,    -1,    23,    -1,
    -1,    -1,    -1,    -1,    -1,    51,    31,     3,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    43,     3,
    -1,    29,    -1,    31,    32,    33,    34,    35,    36,    37,
    -1,    -1,    -1,    29,    42,    31,    32,    33,    34,    35,
    36,    37,    -1,    -1,    -1,    29,    42,    31,    32,    33,
    34,    35,    36,    37,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,
    45
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "source/lang/LangSource/erase-compiler/lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "source/lang/LangSource/erase-compiler/lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "source/lang/LangSource/erase-compiler/lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "source/lang/LangSource/erase-compiler/lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "source/lang/LangSource/erase-compiler/lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}

				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 49:
#line 193 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 202 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 207 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 220 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}

				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 53:
#line 241 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 247 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}

				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 55:
#line 266 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 276 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 278 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 62:
#line 288 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 63:
#line 290 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 64:
#line 292 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 65:
#line 294 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 66:
#line 296 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 67:
#line 307 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 68:
#line 320 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}

				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 69:
#line 342 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 70:
#line 344 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 360 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 387 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 405 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 432 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 460 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 479 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 507 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 534 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 552 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 577 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 605 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 624 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 84:
#line 652 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 671 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 688 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 90:
#line 707 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 720 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 92:
#line 722 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 93:
#line 736 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 94:
#line 741 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 95:
#line 745 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 756 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 97:
#line 761 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 98:
#line 771 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 99:
#line 776 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 790 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 805 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 102:
#line 806 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 103:
#line 807 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 104:
#line 808 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 106:
#line 813 "source/lang/LangSource/erase-compiler/lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 108:
#line 821 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 109:
#line 823 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 111:
#line 828 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 112:
#line 830 "source/lang/LangSource/erase-compiler/lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 113:
#line 835 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 114:
#line 837 "source/lang/LangSource/erase-compiler/lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 115:
#line 844 "source/lang/LangSource/erase-compiler/lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 117:
#line 853 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 118:
#line 857 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 119:
#line 859 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 121:
#line 864 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 122:
#line 868 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 123:
#line 871 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 124:
#line 872 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 125:
#line 876 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 126:
#line 878 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 128:
#line 883 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 129:
#line 887 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 888 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 889 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 890 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 891 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 892 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 893 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 894 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 895 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 138:
#line 896 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 139:
#line 899 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 140:
#line 902 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 141:
#line 905 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 142:
#line 906 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 907 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 908 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 909 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 146:
#line 910 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 147:
#line 911 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 148:
#line 912 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 149:
#line 913 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 150:
#line 914 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 151:
#line 917 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 918 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 919 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 920 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 921 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 922 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 923 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 924 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 159:
#line 925 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 160:
#line 926 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 161:
#line 930 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 162:
#line 933 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 163:
#line 937 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 164:
#line 939 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 166:
#line 944 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 167:
#line 948 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 168:
#line 951 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 169:
#line 953 "source/lang/LangSource/erase-compiler/lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 170:
#line 957 "source/lang/LangSource/erase-compiler/lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 171:
#line 961 "source/lang/LangSource/erase-compiler/lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 172:
#line 965 "source/lang/LangSource/erase-compiler/lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 173:
#line 971 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 176:
#line 977 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 177:
#line 981 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 178:
#line 983 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 179:
#line 987 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 180:
#line 989 "source/lang/LangSource/erase-compiler/lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 182:
#line 997 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 183:
#line 1000 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 186:
#line 1006 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 187:
#line 1010 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 188:
#line 1012 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 189:
#line 1018 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 190:
#line 1020 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 191:
#line 1024 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 192:
#line 1026 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 193:
#line 1029 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = 0; ;
    break;}
case 196:
#line 1035 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 197:
#line 1038 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = rwPrivate; ;
    break;}
case 198:
#line 1040 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 199:
#line 1042 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 200:
#line 1044 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 201:
#line 1047 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 202:
#line 1049 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 203:
#line 1057 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 204:
#line 1059 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 205:
#line 1067 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 206:
#line 1069 "source/lang/LangSource/erase-compiler/lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->slot.uf + 0.5);
					fracval = node->slot.uf - intval;
					node->slot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 207:
#line 1079 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 210:
#line 1085 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 211:
#line 1091 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 212:
#line 1099 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 213:
#line 1106 "source/lang/LangSource/erase-compiler/lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 214:
#line 1114 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1117 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1120 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1123 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1126 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1129 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 220:
#line 1132 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 221:
#line 1135 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 222:
#line 1138 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 223:
#line 1141 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 224:
#line 1144 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 225:
#line 1147 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 226:
#line 1148 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 227:
#line 1149 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 228:
#line 1150 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 229:
#line 1151 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 230:
#line 1152 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 231:
#line 1153 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 232:
#line 1154 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
case 233:
#line 1157 "source/lang/LangSource/erase-compiler/lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1164 "source/lang/LangSource/erase-compiler/lang11d"
