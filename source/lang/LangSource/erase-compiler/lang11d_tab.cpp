
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BINOP	281
#define	KEYBINOP	282
#define	READWRITEVAR	283
#define	UMINUS	284

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		410
#define	YYFLAG		-32768
#define	YYNTBASE	52

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 134)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    51,     2,     2,     2,     2,    47,
    48,    34,    35,    46,    31,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    27,    45,    32,
    28,    33,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    43,     2,    44,    49,     2,    39,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    41,    36,    42,    50,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    29,    30,    37,    40
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   160,   167,
   175,   183,   190,   199,   207,   212,   214,   216,   218,   220,
   222,   226,   229,   233,   237,   241,   243,   248,   254,   260,
   265,   270,   272,   278,   284,   291,   299,   307,   316,   323,
   330,   338,   347,   356,   366,   369,   373,   379,   381,   383,
   385,   391,   393,   396,   401,   405,   410,   416,   424,   429,
   436,   444,   445,   448,   451,   456,   458,   462,   465,   466,
   469,   471,   475,   478,   482,   487,   493,   495,   499,   502,
   507,   509,   513,   516,   517,   520,   522,   526,   528,   532,
   534,   536,   538,   540,   542,   544,   546,   548,   550,   552,
   554,   556,   558,   560,   562,   564,   566,   568,   570,   572,
   574,   576,   578,   580,   582,   584,   586,   588,   590,   596,
   602,   603,   606,   608,   611,   615,   616,   620,   626,   630,
   636,   637,   639,   641,   645,   647,   651,   655,   658,   660,
   664,   665,   667,   669,   673,   676,   681,   686,   692,   696,
   701,   702,   705,   707,   711,   712,   714,   716,   718,   720,
   723,   725,   728,   730,   733,   735,   737,   739,   742,   745,
   747,   750,   752,   754,   756,   758,   760,   762,   764,   766,
   768,   770,   772,   774,   776,   778,   780,   782,   784,   786,
   788,   790,   792
};

static const short yyrhs[] = {    53,
     0,    54,     0,    26,    66,     0,     0,    53,    55,     0,
    56,     0,    54,    56,     0,   121,    58,    41,    59,    61,
    42,     0,   121,    43,    57,    44,    58,    41,    59,    61,
    42,     0,    35,   121,    41,    61,    42,     0,     0,   120,
     0,     0,    27,   121,     0,     0,    59,    60,     0,    15,
   108,    45,     0,    13,   108,    45,     0,     0,    61,    62,
     0,   120,    41,   101,    98,    68,    67,    42,     0,    34,
   120,    41,   101,    98,    68,    67,    42,     0,   130,    41,
   101,    98,    68,    67,    42,     0,    34,   130,    41,   101,
    98,    68,    67,    42,     0,     0,    45,     0,     0,    46,
     0,    70,     0,    82,    70,     0,    47,    99,    65,    48,
     0,    99,    65,     0,    65,     0,    69,     0,    82,    69,
     0,     0,   122,    63,     0,     0,    49,    79,    63,     0,
     0,    49,    79,    63,     0,    93,     0,    71,    93,     0,
     0,    71,     0,   120,    71,     0,   120,    47,    85,    89,
    48,    72,     0,   120,    47,    86,    89,    48,     0,    79,
    38,    47,    87,    48,    72,     0,    79,    38,   120,    47,
    87,    48,    72,     0,    79,    38,    47,    85,    89,    48,
    72,     0,    79,    38,    47,    86,    89,    48,     0,    79,
    38,   120,    47,    85,    89,    48,    72,     0,    79,    38,
   120,    47,    86,    89,    48,     0,    79,    38,   120,    72,
     0,    95,     0,    93,     0,    94,     0,   133,     0,    73,
     0,    47,    82,    48,     0,    50,   120,     0,    43,    83,
    44,     0,    47,    78,    48,     0,    47,   107,    48,     0,
   129,     0,   121,    47,    87,    48,     0,   121,    47,    85,
    89,    48,     0,   121,    47,    86,    89,    48,     0,   121,
    43,    83,    44,     0,    74,    43,    85,    44,     0,    75,
     0,    74,    43,    85,    22,    44,     0,    74,    43,    22,
    82,    44,     0,    74,    43,    85,    22,    82,    44,     0,
    74,    43,    85,    22,    44,    28,    79,     0,    74,    43,
    22,    82,    44,    28,    79,     0,    74,    43,    85,    22,
    82,    44,    28,    79,     0,    79,    38,    43,    85,    22,
    44,     0,    79,    38,    43,    22,    82,    44,     0,    79,
    38,    43,    85,    22,    82,    44,     0,    79,    38,    43,
    85,    22,    44,    28,    79,     0,    79,    38,    43,    22,
    82,    44,    28,    79,     0,    79,    38,    43,    85,    22,
    82,    44,    28,    79,     0,    22,    82,     0,    82,    22,
    82,     0,    82,    46,    82,    22,    82,     0,    74,     0,
    77,     0,    76,     0,    79,    38,    43,    85,    44,     0,
   121,     0,    39,    79,     0,    79,   132,    80,    79,     0,
   120,    28,    79,     0,    50,   120,    28,    79,     0,    79,
    38,   120,    28,    79,     0,   120,    47,    85,    89,    48,
    28,    79,     0,    51,    90,    28,    79,     0,    74,    43,
    85,    44,    28,    79,     0,    79,    38,    43,    85,    44,
    28,    79,     0,     0,    38,   120,     0,    38,   115,     0,
    38,    47,    82,    48,     0,    79,     0,    81,    45,    79,
     0,    81,    63,     0,     0,    84,    64,     0,    82,     0,
    82,    27,    82,     0,   131,    82,     0,    84,    46,    82,
     0,    84,    46,   131,    82,     0,    84,    46,    82,    27,
    82,     0,    82,     0,    85,    46,    82,     0,    34,    82,
     0,    85,    46,    34,    82,     0,    88,     0,    87,    46,
    88,     0,   131,    82,     0,     0,    46,    87,     0,    91,
     0,    91,    21,   120,     0,   120,     0,    91,    46,   120,
     0,   115,     0,   119,     0,   126,     0,   128,     0,   127,
     0,   123,     0,   124,     0,   125,     0,   110,     0,    97,
     0,   120,     0,   115,     0,   119,     0,   126,     0,   128,
     0,   127,     0,   123,     0,   124,     0,   125,     0,   110,
     0,   115,     0,   119,     0,   126,     0,   128,     0,   127,
     0,   123,     0,   124,     0,   125,     0,   111,     0,    41,
   101,    98,    65,    42,     0,    24,   101,    98,    65,    42,
     0,     0,    98,   100,     0,   100,     0,    99,   100,     0,
    13,   103,    45,     0,     0,    14,   103,    45,     0,    14,
   102,    21,   120,    45,     0,    36,   103,    36,     0,    36,
   102,    21,   120,    36,     0,     0,   103,     0,   104,     0,
   103,    46,   104,     0,   120,     0,   120,    28,    92,     0,
    82,    27,    82,     0,   131,    82,     0,   105,     0,   106,
    46,   105,     0,     0,   106,     0,   109,     0,   108,    46,
   109,     0,   114,   120,     0,   114,   120,    28,    92,     0,
    51,    43,   112,    44,     0,    51,   121,    43,   112,    44,
     0,    43,   112,    44,     0,   121,    43,   112,    44,     0,
     0,   113,    64,     0,    96,     0,   113,    46,    96,     0,
     0,    32,     0,    37,     0,    33,     0,     4,     0,    31,
     4,     0,     5,     0,    31,     5,     0,     6,     0,    31,
     6,     0,    23,     0,   116,     0,   117,     0,   116,   118,
     0,   115,   118,     0,   118,     0,    31,   118,     0,     3,
     0,    11,     0,    10,     0,    18,     0,    19,     0,    17,
     0,     9,     0,     7,     0,     8,     0,    20,     0,    29,
     0,    37,     0,    32,     0,    33,     0,    31,     0,    34,
     0,    35,     0,    36,     0,    30,     0,   130,     0,   131,
     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   191,   200,
   205,   218,   238,   244,   262,   268,   269,   270,   271,   272,
   273,   275,   285,   287,   289,   291,   293,   304,   317,   338,
   340,   353,   356,   383,   401,   428,   456,   475,   503,   530,
   548,   573,   601,   620,   648,   667,   684,   700,   701,   702,
   703,   716,   718,   732,   737,   741,   752,   757,   767,   772,
   786,   802,   803,   804,   805,   808,   809,   815,   818,   819,
   823,   824,   826,   831,   833,   840,   848,   849,   853,   855,
   859,   860,   864,   868,   869,   872,   874,   878,   879,   884,
   885,   886,   887,   888,   889,   890,   891,   892,   895,   898,
   901,   902,   903,   904,   905,   906,   907,   908,   909,   912,
   913,   914,   915,   916,   917,   918,   919,   920,   923,   926,
   931,   932,   936,   937,   941,   945,   946,   950,   954,   958,
   965,   966,   969,   970,   974,   976,   980,   982,   989,   990,
   994,   995,   998,   999,  1003,  1005,  1011,  1013,  1017,  1019,
  1023,  1024,  1027,  1028,  1032,  1033,  1035,  1037,  1041,  1042,
  1051,  1052,  1061,  1062,  1073,  1076,  1077,  1078,  1084,  1092,
  1099,  1108,  1111,  1114,  1117,  1120,  1123,  1126,  1129,  1132,
  1135,  1138,  1139,  1140,  1141,  1142,  1143,  1144,  1145,  1148,
  1151,  1152,  1155
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","':'","'='","BINOP",
"KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","'.'","'`'","UMINUS",
"'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root","classes",
"classextensions","classdef","classextension","optname","superclass","classvardecls",
"classvardecl","methods","methoddef","optsemi","optcomma","funcbody","cmdlinecode",
"methbody","primitive","retval","funretval","blocklist1","blocklist","msgsend",
"expr1","valrangex1","valrangeassign","valrangexd","valrange2","expr","adverb",
"exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1","keyarglist1",
"keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral","pushname",
"pushliteral","listliteral","block","funcvardecls","funcvardecls1","funcvardecl",
"argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef","dictslotlist1",
"dictslotlist","rwslotdeflist","rwslotdef","listlit","listlit2","literallistc",
"literallist1","rwspec","integer","floatr","accidental","pie","floatp","name",
"classname","primname","trueobj","falseobj","nilobj","ascii","symbol","string",
"pseudovar","binop","keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    52,    52,    52,    53,    53,    54,    54,    55,    55,    56,
    57,    57,    58,    58,    59,    59,    60,    60,    61,    61,
    62,    62,    62,    62,    63,    63,    64,    64,    65,    65,
    66,    66,    66,    67,    67,    68,    68,    69,    69,    70,
    70,    71,    71,    72,    72,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    75,    75,    75,    76,    76,    76,    77,    77,
    77,    77,    77,    77,    78,    78,    78,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    80,    80,    80,    80,    81,    81,    82,    83,    83,
    84,    84,    84,    84,    84,    84,    85,    85,    86,    86,
    87,    87,    88,    89,    89,    90,    90,    91,    91,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    93,    94,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    97,    97,
    98,    98,    99,    99,   100,   101,   101,   101,   101,   101,
   102,   102,   103,   103,   104,   104,   105,   105,   106,   106,
   107,   107,   108,   108,   109,   109,   110,   110,   111,   111,
   112,   112,   113,   113,   114,   114,   114,   114,   115,   115,
   116,   116,   117,   117,   118,   119,   119,   119,   119,   119,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   132,   132,   133
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     5,     6,     7,
     7,     6,     8,     7,     4,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     3,     1,     4,     5,     5,     4,
     4,     1,     5,     5,     6,     7,     7,     8,     6,     6,
     7,     8,     8,     9,     2,     3,     5,     1,     1,     1,
     5,     1,     2,     4,     3,     4,     5,     7,     4,     6,
     7,     0,     2,     2,     4,     1,     3,     2,     0,     2,
     1,     3,     2,     3,     4,     5,     1,     3,     2,     4,
     1,     3,     2,     0,     2,     1,     3,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     5,
     0,     2,     1,     2,     3,     0,     3,     5,     3,     5,
     0,     1,     1,     3,     1,     3,     3,     2,     1,     3,
     0,     1,     1,     3,     2,     4,     4,     5,     3,     4,
     0,     2,     1,     3,     0,     1,     1,     1,     1,     2,
     1,     2,     1,     2,     1,     1,     1,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   212,   199,   201,   203,   219,
   220,   218,   213,   233,     0,   217,   215,   216,   221,   205,
   166,     0,     0,   166,   109,   181,     0,     0,     0,    33,
     3,    29,    60,    88,    72,    90,    89,   106,    25,    40,
    57,    58,    56,   139,    40,   163,   149,   141,   206,   207,
   210,   142,   140,    92,   146,   147,   148,   143,   145,   144,
    66,    59,     0,     5,    13,     7,     0,   173,   175,   171,
   171,   161,   200,   202,   204,   211,   181,    93,   161,   230,
   111,     0,    27,     0,     0,     0,     0,    40,   179,   182,
     0,     0,    25,    62,   191,     0,   126,   128,     0,     0,
   222,   226,   224,   225,   227,   228,   229,   223,     0,   231,
   232,   102,    26,   108,    30,    32,   164,   209,   208,     0,
     0,    46,    42,   109,     0,    19,     0,    11,     0,   165,
     0,     0,     0,   172,     0,   172,    40,    40,     0,    63,
    28,   110,   113,    85,    64,     0,     0,     0,    61,     0,
     0,    65,   178,    26,    41,     0,   191,   193,   158,     0,
    27,   150,   151,     0,   155,   156,   157,   152,   154,   153,
     0,     0,     0,   191,     0,   117,     0,     0,     0,    44,
     0,     0,   107,    95,     0,   124,   124,    43,     0,   124,
   124,     0,   121,     0,     0,    14,     0,    12,    15,   174,
     0,   176,   138,   130,   131,   135,   136,   137,   132,   134,
   133,     0,   167,     0,   169,     0,   162,     0,   112,   114,
     0,    86,   177,     0,    31,     0,   180,    96,     0,   187,
    28,   192,   191,    99,   127,   129,     0,     0,     0,    71,
     0,     0,     0,   124,   124,     0,     0,     0,    45,    55,
     0,     0,   104,   103,    94,   119,     0,     0,     0,     0,
    70,     0,     0,     0,    67,   123,   227,    10,    20,     0,
     0,    13,    19,     0,     0,   160,   159,     0,   115,     0,
   189,   194,     0,   188,    74,    73,     0,     0,   118,     0,
     0,    91,     0,     0,    44,    97,   124,   124,     0,     0,
     0,   125,    44,    48,    68,    69,   122,     0,     0,   166,
   166,     0,   195,   195,    16,     0,   168,   170,   116,    87,
   190,     0,     0,    75,   100,    80,    79,     0,     0,    44,
    52,    49,     0,     0,    44,   105,   120,     0,    47,   166,
   166,   161,   161,    15,   196,   198,   197,     0,   183,     0,
     0,     8,    77,    76,     0,     0,     0,    81,   101,    51,
    44,    54,    50,    98,   161,   161,    36,    36,    19,    18,
   195,   185,    17,    78,    83,    82,     0,    53,    36,    36,
   214,    38,    25,    38,     0,   184,     0,    84,    38,    38,
     0,     0,    34,    38,    37,     0,     9,   186,     0,     0,
    25,    21,    35,    23,    22,    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   408,
     3,     4,    64,     5,   197,   129,   273,   315,   195,   269,
   114,   142,    30,    31,   392,   382,   393,    32,   249,   250,
    33,    34,    35,    36,    37,    86,    38,   182,    39,   176,
    82,    83,   177,   187,   302,   193,   258,    96,    97,   202,
    41,    42,    43,   158,    44,   137,    45,   217,    72,   133,
    67,    68,    89,    90,    91,   348,   349,    47,   159,   160,
   161,   350,    48,    49,    50,    51,    52,    53,    54,   383,
    55,    56,    57,    58,    59,    60,    61,   110,   111,   112,
    62
};

static const short yypact[] = {    54,
   446,     5,     5,     2,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    42,-32768,-32768,-32768,-32768,-32768,
    18,    95,  1034,    18,   691,   388,  1034,    42,    25,-32768,
-32768,-32768,-32768,    65,-32768,-32768,-32768,  1142,    16,    73,
-32768,-32768,-32768,-32768,   495,-32768,-32768,    55,    55,-32768,
-32768,-32768,   211,    86,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   103,-32768,     0,-32768,   111,-32768,   121,    42,
    42,-32768,-32768,-32768,-32768,-32768,   544,-32768,-32768,-32768,
   126,   127,   133,  1034,  1034,   134,     4,   495,-32768,   145,
   163,  1034,  1125,   186,  1082,   191,    -4,-32768,   194,   740,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    38,-32768,
-32768,   189,  1034,-32768,-32768,-32768,-32768,-32768,-32768,  1034,
   789,    10,-32768,   691,   593,-32768,     5,    42,   204,-32768,
    42,   347,   225,   171,   227,    69,   495,   495,  1034,-32768,
   691,-32768,-32768,-32768,-32768,  1034,  1034,  1034,-32768,   201,
   691,-32768,-32768,-32768,-32768,  1034,  1082,-32768,-32768,   206,
   208,    55,-32768,   214,-32768,-32768,-32768,-32768,-32768,-32768,
  1034,    42,    42,  1082,  1034,-32768,   153,   838,   593,   239,
    35,  1034,  1142,  1142,  1034,   218,   219,-32768,   222,   218,
   219,   116,-32768,  1034,  1075,-32768,   224,-32768,-32768,-32768,
    12,-32768,-32768,    55,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    42,-32768,    42,-32768,   228,-32768,   232,-32768,   251,
  1034,-32768,-32768,   259,-32768,   256,-32768,  1142,   240,-32768,
  1082,-32768,  1082,  1142,-32768,-32768,   241,   247,   887,   264,
  1034,  1034,   158,   218,   219,   144,  1034,   593,    10,-32768,
   290,  1034,-32768,-32768,   260,-32768,   642,   249,   273,   262,
-32768,   266,   267,   273,-32768,-32768,   313,-32768,-32768,   263,
   276,   280,   181,   275,   287,-32768,-32768,  1034,-32768,  1034,
-32768,-32768,   282,-32768,   296,   299,   286,  1034,-32768,   289,
   936,   303,   295,   309,    10,  1142,   218,   219,   160,   310,
  1034,   288,    34,-32768,-32768,-32768,-32768,   318,   321,    18,
    18,   326,    88,    88,-32768,  1095,-32768,-32768,-32768,-32768,
-32768,  1034,  1034,   340,  1142,   341,   344,   293,  1034,    10,
-32768,-32768,   325,   327,    10,-32768,-32768,  1034,-32768,    18,
    18,-32768,-32768,-32768,-32768,-32768,-32768,   178,-32768,    42,
   187,-32768,  1142,  1142,  1034,  1034,  1034,   348,  1142,-32768,
    10,-32768,-32768,  1142,-32768,-32768,    97,    97,   181,-32768,
    88,   349,-32768,  1142,  1142,  1142,  1034,-32768,    97,    97,
-32768,   985,   334,   985,  1111,-32768,   347,  1142,   985,   985,
  1034,   338,-32768,   335,-32768,   345,-32768,-32768,   360,   361,
  1125,-32768,-32768,-32768,-32768,-32768,-32768,   386,   404,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   405,-32768,   141,    70,-32768,  -265,-32768,
   -90,   254,   -25,-32768,  -201,  -333,    23,   380,   368,  -282,
-32768,-32768,-32768,-32768,-32768,-32768,   -17,-32768,-32768,    -1,
   298,-32768,  -114,  -107,  -106,   159,    31,-32768,-32768,    37,
   -48,-32768,-32768,   195,-32768,   -70,   399,   125,   -22,   357,
   173,   302,   279,-32768,-32768,   120,    66,  -128,-32768,  -145,
-32768,-32768,   -65,-32768,-32768,    11,   -55,   -14,    68,-32768,
   -46,   -26,    -5,    -2,     3,    29,-32768,  -173,   184,-32768,
-32768
};


#define	YYLAST		1180


static const short yytable[] = {    40,
    69,    79,   155,   203,   123,    78,   186,   316,   138,    93,
   190,   229,   332,    94,    98,    13,   172,   191,   192,   116,
   339,   271,    13,    81,    87,   146,   127,     6,   237,   162,
   147,    70,    76,    21,   384,    13,     2,     6,     7,   163,
     6,   173,   128,    40,     6,   389,   390,   360,   165,   148,
    24,   149,   363,    71,    95,    69,    69,    21,   118,   119,
   113,   338,   150,   243,   244,   251,   204,    95,   166,    63,
    65,   245,   246,   188,    24,    87,   205,    20,   378,     1,
   178,   252,   143,   144,   179,   206,    40,   283,     2,   167,
   153,   162,   168,   309,   180,   183,    99,   169,    73,    74,
    75,   163,   184,   385,   215,   207,   381,   100,   162,    15,
   165,   216,   218,   198,   131,   253,    69,    20,   163,   345,
   346,    27,    81,   170,   347,    46,   208,   165,   124,   209,
   166,   123,   125,   297,   210,    40,    40,   219,   228,   220,
   298,   299,   271,   126,   222,   223,   224,   166,   132,   226,
    46,   167,   139,   234,   168,   130,   131,   235,   236,   169,
   211,   264,   164,   265,   255,   162,   254,   162,   167,   117,
   140,   168,   118,   238,   239,   163,   169,   163,   141,   291,
   270,   145,   396,   256,   165,   170,   165,   399,   400,   264,
   151,   295,   266,   313,   196,   314,   240,   274,   241,   275,
   188,   292,   170,   241,   166,   264,   166,   335,    84,    92,
   152,   271,   117,   156,   118,   213,   131,   260,   171,   279,
   262,   263,   370,   371,   164,   167,   181,   167,   168,   296,
   168,   373,   371,   169,    21,   169,   174,   287,   120,   289,
   290,   164,   134,   136,   199,   212,   123,   214,   225,   230,
   300,    24,   308,   231,   123,   289,   233,   121,   203,   170,
    92,   170,    21,   257,   259,   261,   247,   272,    99,   276,
   325,   367,   368,   277,   293,   294,   319,   278,   320,    24,
   280,   123,   147,   281,   284,   248,   123,   342,   343,   328,
   285,   288,   395,    73,   379,   380,   303,   109,   164,   337,
   164,   270,    80,   310,   353,   354,   127,    84,   194,   304,
   407,   359,   123,   305,   306,     6,   311,   365,   366,   317,
   364,   204,   318,   322,   221,   321,   323,   333,   334,   324,
   329,   205,   326,   264,    92,   372,   358,   374,   375,   376,
   206,   101,   330,   102,   103,   104,   105,   106,   107,   108,
     7,     8,     9,    10,    11,    12,   331,   336,   340,   388,
   207,   341,   194,    16,    17,    18,   344,   355,   356,    20,
   270,   357,   361,   401,   362,   377,   387,    22,   154,   402,
   394,   208,   394,   391,   209,   409,   404,   394,   394,   210,
     6,     7,     8,     9,    10,    11,    12,   201,    13,    14,
    15,   405,   406,   410,    16,    17,    18,    19,    66,    85,
    20,    21,   312,   369,   232,   211,   403,    80,    22,   115,
   122,   189,   307,   398,    88,   282,    23,   135,    24,   227,
    25,   194,   200,   351,    77,     0,   386,    28,    29,     0,
   194,     0,   194,     0,     0,     0,     0,   194,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,    15,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
     0,     0,     0,     0,    23,     0,    24,     0,    25,     0,
     0,     0,    26,     0,    27,    28,    29,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,    15,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,     0,     0,    22,     0,     0,     0,     0,
     0,     0,     0,    23,     0,    24,     0,    25,     0,     0,
     0,    77,     0,    27,    28,    29,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,    85,    20,    21,     0,     0,
     0,     0,     0,    80,    22,     0,     0,     0,     0,     0,
     0,     0,    23,     0,    24,     0,    25,     0,     0,     0,
    77,     0,     0,    28,    29,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,     0,    80,    22,     0,     0,   185,     0,     0,     0,
     0,    23,     0,    24,     0,    25,     0,     0,     0,    77,
     0,     0,    28,    29,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
     0,    80,    22,     0,     0,   301,     0,     0,     0,     0,
    23,     0,    24,     0,    25,     0,     0,     0,    77,     0,
     0,    28,    29,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,     0,
    80,    22,     0,     0,     0,     0,     0,     0,     0,    23,
     0,    24,     0,    25,     0,     0,     0,    77,     0,     0,
    28,    29,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,   175,    20,    21,     0,     0,     0,     0,     0,     0,
    22,     0,     0,     0,     0,     0,     0,     0,    23,     0,
    24,     0,    25,     0,     0,     0,    77,     0,     0,    28,
    29,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,     0,     0,    22,
     0,     0,   185,     0,     0,     0,     0,    23,     0,    24,
     0,    25,     0,     0,     0,    77,     0,     0,    28,    29,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,   242,
    20,    21,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,     0,     0,     0,     0,    23,     0,    24,     0,
    25,     0,     0,     0,    77,     0,     0,    28,    29,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    22,     0,     0,
     0,     0,     0,     0,     0,    23,     0,    24,     0,    25,
   286,     0,     0,    77,     0,     0,    28,    29,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
     0,     0,     0,     0,    23,     0,    24,     0,    25,   327,
     0,     0,    77,     0,     0,    28,    29,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,     0,     0,    22,     0,     0,     0,     0,
     0,     0,     0,    23,     0,    24,     0,    25,     0,     0,
     0,    77,     0,   391,    28,    29,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,     0,     0,    22,     0,     0,     0,     0,     0,
     0,     0,    23,     0,    24,     0,    25,     6,     0,     0,
    77,     0,     0,    28,    29,     7,     8,     9,    10,    11,
    12,     0,    13,     0,     0,     0,     0,     6,    16,    17,
    18,     0,     0,   101,    20,   102,   103,   104,   267,   106,
   107,   108,    22,     6,     0,     0,   268,     0,     0,     0,
     0,     0,     0,   101,   157,   102,   103,   104,   267,   106,
   107,   108,     0,     0,     0,     0,   352,     0,     0,   101,
     0,   102,   103,   104,   267,   106,   107,   108,     0,     0,
     0,     0,   397,   101,    80,   102,   103,   104,   105,   106,
   107,   108,   109,     0,     0,     0,     0,     0,     0,   154,
   101,    80,   102,   103,   104,   105,   106,   107,   108,   109
};

static const short yycheck[] = {     1,
    15,    24,    93,   132,    53,    23,   121,   273,    79,    27,
   125,   157,   295,    28,    29,    11,    21,   125,   125,    45,
   303,   195,    11,    25,    26,    22,    27,     3,   174,    95,
    27,    14,    22,    24,   368,    11,    35,     3,     4,    95,
     3,    46,    43,    45,     3,   379,   380,   330,    95,    46,
    41,    48,   335,    36,    43,    70,    71,    24,    48,    49,
    45,    28,    88,   178,   179,    31,   132,    43,    95,     2,
     3,   179,   179,   122,    41,    77,   132,    23,   361,    26,
    43,    47,    84,    85,    47,   132,    88,   233,    35,    95,
    92,   157,    95,   267,   109,   113,    29,    95,     4,     5,
     6,   157,   120,   369,    36,   132,    10,    43,   174,    13,
   157,   137,   138,   128,    46,   181,   131,    23,   174,    32,
    33,    49,   124,    95,    37,     1,   132,   174,    43,   132,
   157,   180,    47,   248,   132,   137,   138,   139,   156,   141,
   248,   248,   316,    41,   146,   147,   148,   174,    28,   151,
    26,   157,    27,   171,   157,    45,    46,   172,   173,   157,
   132,    46,    95,    48,   182,   231,   181,   233,   174,    45,
    44,   174,   162,   175,    22,   231,   174,   233,    46,    22,
   195,    48,   384,   185,   231,   157,   233,   389,   390,    46,
    46,    48,   194,    13,   127,    15,    44,   212,    46,   214,
   249,    44,   174,    46,   231,    46,   233,    48,    25,    26,
    48,   385,    88,    28,   204,    45,    46,   187,    28,   221,
   190,   191,    45,    46,   157,   231,    38,   233,   231,   247,
   233,    45,    46,   231,    24,   233,    43,   239,    28,   241,
   242,   174,    70,    71,    41,    21,   295,    21,    48,    44,
   252,    41,   267,    46,   303,   257,    43,    47,   387,   231,
    77,   233,    24,    46,    46,    44,    28,    44,   201,    42,
   288,   342,   343,    42,   244,   245,   278,    27,   280,    41,
    22,   330,    27,    44,    44,    47,   335,   310,   311,   291,
    44,    28,   383,     4,   365,   366,    48,    38,   231,   301,
   233,   316,    30,    41,   322,   323,    27,   124,   125,    48,
   401,   329,   361,    48,    48,     3,    41,   340,   341,    45,
   338,   387,    36,    28,   141,    44,    28,   297,   298,    44,
    28,   387,    44,    46,   151,   350,    44,   355,   356,   357,
   387,    29,    48,    31,    32,    33,    34,    35,    36,    37,
     4,     5,     6,     7,     8,     9,    48,    48,    41,   377,
   387,    41,   179,    17,    18,    19,    41,    28,    28,    23,
   385,    28,    48,   391,    48,    28,    28,    31,    45,    42,
   382,   387,   384,    49,   387,     0,    42,   389,   390,   387,
     3,     4,     5,     6,     7,     8,     9,    51,    11,    12,
    13,    42,    42,     0,    17,    18,    19,    20,     4,    22,
    23,    24,   272,   344,   161,   387,   394,    30,    31,    40,
    53,   124,   264,   387,    26,   231,    39,    71,    41,   151,
    43,   248,   131,   314,    47,    -1,   371,    50,    51,    -1,
   257,    -1,   259,    -1,    -1,    -1,    -1,   264,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    13,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,
    -1,    -1,    47,    -1,    49,    50,    51,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    49,    50,    51,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,
    -1,    -1,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,
    47,    -1,    -1,    50,    51,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    -1,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,
    -1,    -1,    50,    51,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    -1,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    39,    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,
    -1,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,
    41,    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    39,    -1,    41,
    -1,    43,    -1,    -1,    -1,    47,    -1,    -1,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,
    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,
    43,    -1,    -1,    -1,    47,    -1,    -1,    50,    51,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,
    44,    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    44,
    -1,    -1,    47,    -1,    -1,    50,    51,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    49,    50,    51,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    41,    -1,    43,     3,    -1,    -1,
    47,    -1,    -1,    50,    51,     4,     5,     6,     7,     8,
     9,    -1,    11,    -1,    -1,    -1,    -1,     3,    17,    18,
    19,    -1,    -1,    29,    23,    31,    32,    33,    34,    35,
    36,    37,    31,     3,    -1,    -1,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    29,    43,    31,    32,    33,    34,    35,
    36,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    29,
    -1,    31,    32,    33,    34,    35,    36,    37,    -1,    -1,
    -1,    -1,    42,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    45,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 49:
#line 192 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 201 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 206 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 219 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 53:
#line 239 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 245 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 55:
#line 263 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 61:
#line 274 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 62:
#line 276 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 63:
#line 286 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 64:
#line 288 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 65:
#line 290 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 66:
#line 292 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 67:
#line 294 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 68:
#line 305 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 69:
#line 318 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 70:
#line 339 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 71:
#line 341 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 357 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 384 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 402 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 429 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 457 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 476 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 504 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 531 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 549 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 574 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 602 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 84:
#line 621 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 649 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 668 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 87:
#line 685 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 704 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 92:
#line 717 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 93:
#line 719 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 94:
#line 733 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 95:
#line 738 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 96:
#line 742 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 753 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 98:
#line 758 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 99:
#line 768 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 100:
#line 773 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 787 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 802 "lang11d"
{ yyval = 0; ;
    break;}
case 103:
#line 803 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 104:
#line 804 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 105:
#line 805 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 107:
#line 810 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 109:
#line 818 "lang11d"
{ yyval = 0; ;
    break;}
case 110:
#line 820 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 112:
#line 825 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 113:
#line 827 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 114:
#line 832 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 115:
#line 834 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 116:
#line 841 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 118:
#line 850 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 119:
#line 854 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 120:
#line 856 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 122:
#line 861 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 123:
#line 865 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 124:
#line 868 "lang11d"
{ yyval = 0; ;
    break;}
case 125:
#line 869 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 126:
#line 873 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 875 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 129:
#line 880 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 130:
#line 884 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 885 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 886 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 887 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 888 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 889 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 890 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 891 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 138:
#line 892 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 139:
#line 895 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 140:
#line 898 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 141:
#line 901 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 142:
#line 902 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 903 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 904 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 905 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 146:
#line 906 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 147:
#line 907 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 148:
#line 908 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 149:
#line 909 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 150:
#line 912 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 151:
#line 913 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 914 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 915 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 916 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 917 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 918 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 919 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 920 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 159:
#line 924 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 160:
#line 927 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 161:
#line 931 "lang11d"
{ yyval = 0; ;
    break;}
case 162:
#line 933 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 938 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 165:
#line 942 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 166:
#line 945 "lang11d"
{ yyval = 0; ;
    break;}
case 167:
#line 947 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 168:
#line 951 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 169:
#line 955 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 170:
#line 959 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 171:
#line 965 "lang11d"
{ yyval = 0; ;
    break;}
case 174:
#line 971 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 175:
#line 975 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 176:
#line 977 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 177:
#line 981 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 178:
#line 983 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 180:
#line 991 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 181:
#line 994 "lang11d"
{ yyval = 0; ;
    break;}
case 184:
#line 1000 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 185:
#line 1004 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 186:
#line 1006 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 187:
#line 1012 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 188:
#line 1014 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 189:
#line 1018 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 190:
#line 1020 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 191:
#line 1023 "lang11d"
{ yyval = 0; ;
    break;}
case 194:
#line 1029 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 195:
#line 1032 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 196:
#line 1034 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 197:
#line 1036 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 198:
#line 1038 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 199:
#line 1041 "lang11d"
{ yyval = zzval; ;
    break;}
case 200:
#line 1043 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 201:
#line 1051 "lang11d"
{ yyval = zzval; ;
    break;}
case 202:
#line 1053 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 203:
#line 1061 "lang11d"
{ yyval = zzval; ;
    break;}
case 204:
#line 1063 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 205:
#line 1073 "lang11d"
{ yyval = zzval; ;
    break;}
case 208:
#line 1079 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 209:
#line 1085 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 210:
#line 1093 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 211:
#line 1100 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 212:
#line 1108 "lang11d"
{ yyval = zzval; ;
    break;}
case 213:
#line 1111 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 1114 "lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1117 "lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1120 "lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1123 "lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1126 "lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1129 "lang11d"
{ yyval = zzval; ;
    break;}
case 220:
#line 1132 "lang11d"
{ yyval = zzval; ;
    break;}
case 221:
#line 1135 "lang11d"
{ yyval = zzval; ;
    break;}
case 222:
#line 1138 "lang11d"
{ yyval = zzval; ;
    break;}
case 223:
#line 1139 "lang11d"
{ yyval = zzval; ;
    break;}
case 224:
#line 1140 "lang11d"
{ yyval = zzval; ;
    break;}
case 225:
#line 1141 "lang11d"
{ yyval = zzval; ;
    break;}
case 226:
#line 1142 "lang11d"
{ yyval = zzval; ;
    break;}
case 227:
#line 1143 "lang11d"
{ yyval = zzval; ;
    break;}
case 228:
#line 1144 "lang11d"
{ yyval = zzval; ;
    break;}
case 229:
#line 1145 "lang11d"
{ yyval = zzval; ;
    break;}
case 230:
#line 1148 "lang11d"
{ yyval = zzval; ;
    break;}
case 233:
#line 1155 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1157 "lang11d"
