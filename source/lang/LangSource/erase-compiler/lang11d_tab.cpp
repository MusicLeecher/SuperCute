
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BEGINGENERATOR	281
#define	LEFTARROW	282
#define	WHILE	283
#define	BINOP	284
#define	KEYBINOP	285
#define	READWRITEVAR	286
#define	UMINUS	287

#line 16 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		496
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 287 ? yytranslate[x] : 149)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    54,     2,     2,     2,     2,    50,
    51,    37,    38,    49,    34,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,    48,    35,
    31,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    46,     2,    47,    52,     2,    42,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    39,    45,    53,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    32,    33,    40,    43
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   143,   145,   146,   148,   151,   156,
   163,   172,   178,   186,   191,   194,   200,   207,   213,   220,
   228,   236,   243,   252,   260,   265,   266,   274,   275,   283,
   284,   287,   292,   298,   304,   307,   312,   317,   319,   321,
   323,   325,   327,   329,   333,   336,   340,   344,   349,   353,
   355,   360,   362,   368,   374,   381,   389,   397,   406,   413,
   420,   428,   437,   446,   456,   459,   463,   469,   472,   475,
   479,   484,   490,   492,   494,   496,   498,   504,   507,   512,
   516,   521,   527,   535,   540,   547,   555,   556,   559,   562,
   567,   569,   573,   576,   577,   580,   582,   586,   589,   593,
   598,   604,   606,   610,   613,   618,   620,   624,   627,   628,
   631,   633,   637,   639,   643,   645,   647,   649,   651,   653,
   655,   657,   659,   661,   663,   665,   667,   669,   671,   673,
   675,   677,   679,   681,   683,   685,   687,   689,   691,   693,
   695,   697,   699,   701,   703,   705,   707,   713,   719,   720,
   723,   725,   728,   732,   733,   737,   743,   747,   753,   754,
   756,   758,   762,   764,   768,   772,   775,   777,   781,   782,
   784,   786,   790,   793,   798,   803,   807,   811,   814,   816,
   820,   821,   823,   828,   834,   838,   843,   844,   847,   849,
   853,   854,   856,   858,   860,   862,   865,   867,   870,   872,
   875,   877,   879,   881,   884,   887,   889,   892,   894,   896,
   898,   900,   902,   904,   906,   908,   910,   912,   914,   916,
   918,   920,   922,   924,   926,   928,   930,   932,   934,   936
};

static const short yyrhs[] = {    56,
     0,    57,     0,    26,    69,     0,     0,    56,    58,     0,
    59,     0,    57,    59,     0,   136,    61,    44,    62,    64,
    45,     0,   136,    46,    60,    47,    61,    44,    62,    64,
    45,     0,    38,   136,    44,    64,    45,     0,     0,   135,
     0,     0,    30,   136,     0,     0,    62,    63,     0,    15,
   118,    48,     0,    13,   118,    48,     0,     0,    64,    65,
     0,   135,    44,   111,   108,    71,    70,    45,     0,    37,
   135,    44,   111,   108,    71,    70,    45,     0,   145,    44,
   111,   108,    71,    70,    45,     0,    37,   145,    44,   111,
   108,    71,    70,    45,     0,     0,    48,     0,     0,    49,
     0,    73,     0,    92,    73,     0,    50,   109,    68,    51,
     0,   109,    68,     0,    68,     0,    72,     0,    92,    72,
     0,     0,   137,    66,     0,     0,    52,    89,    66,     0,
     0,    52,    89,    66,     0,    75,     0,    74,    75,     0,
   103,     0,    78,     0,     0,    74,     0,   135,    74,     0,
    50,   147,    51,    74,     0,   135,    50,    95,    99,    51,
    76,     0,    50,   147,    51,    50,    95,    99,    51,    76,
     0,   135,    50,    96,    99,    51,     0,    50,   147,    51,
    50,    96,    99,    51,     0,   136,    46,    93,    47,     0,
   136,    74,     0,   136,    50,    97,    51,    76,     0,   136,
    50,    95,    99,    51,    76,     0,   136,    50,    96,    99,
    51,     0,    89,    41,    50,    97,    51,    76,     0,    89,
    41,   135,    50,    97,    51,    76,     0,    89,    41,    50,
    95,    99,    51,    76,     0,    89,    41,    50,    96,    99,
    51,     0,    89,    41,   135,    50,    95,    99,    51,    76,
     0,    89,    41,   135,    50,    96,    99,    51,     0,    89,
    41,   135,    76,     0,     0,    44,    30,    92,    79,    49,
    82,    45,     0,     0,    44,    48,    92,    80,    49,    82,
    45,     0,     0,    49,    82,     0,   135,    28,    92,    81,
     0,   135,   135,    28,    92,    81,     0,    13,   135,    31,
    92,    81,     0,    92,    81,     0,    30,    30,    92,    81,
     0,    30,    29,    92,    81,     0,   105,     0,   103,     0,
    78,     0,   104,     0,   148,     0,    77,     0,    50,    92,
    51,     0,    53,   135,     0,    46,    93,    47,     0,    50,
    87,    51,     0,    50,    30,    88,    51,     0,    50,   117,
    51,     0,   144,     0,    83,    46,    95,    47,     0,    84,
     0,    83,    46,    95,    22,    47,     0,    83,    46,    22,
    92,    47,     0,    83,    46,    95,    22,    92,    47,     0,
    83,    46,    95,    22,    47,    31,    89,     0,    83,    46,
    22,    92,    47,    31,    89,     0,    83,    46,    95,    22,
    92,    47,    31,    89,     0,    89,    41,    46,    95,    22,
    47,     0,    89,    41,    46,    22,    92,    47,     0,    89,
    41,    46,    95,    22,    92,    47,     0,    89,    41,    46,
    95,    22,    47,    31,    89,     0,    89,    41,    46,    22,
    92,    47,    31,    89,     0,    89,    41,    46,    95,    22,
    92,    47,    31,    89,     0,    22,    92,     0,    92,    22,
    92,     0,    92,    49,    92,    22,    92,     0,    22,    92,
     0,    92,    22,     0,    92,    22,    92,     0,    92,    49,
    92,    22,     0,    92,    49,    92,    22,    92,     0,    83,
     0,    86,     0,    85,     0,   136,     0,    89,    41,    46,
    95,    47,     0,    42,    89,     0,    89,   147,    90,    89,
     0,   135,    31,    89,     0,    53,   135,    31,    89,     0,
    89,    41,   135,    31,    89,     0,   135,    50,    95,    99,
    51,    31,    89,     0,    54,   100,    31,    89,     0,    83,
    46,    95,    47,    31,    89,     0,    89,    41,    46,    95,
    47,    31,    89,     0,     0,    41,   135,     0,    41,   130,
     0,    41,    50,    92,    51,     0,    89,     0,    91,    48,
    89,     0,    91,    66,     0,     0,    94,    67,     0,    92,
     0,    92,    30,    92,     0,   146,    92,     0,    94,    49,
    92,     0,    94,    49,   146,    92,     0,    94,    49,    92,
    30,    92,     0,    92,     0,    95,    49,    92,     0,    37,
    92,     0,    95,    49,    37,    92,     0,    98,     0,    97,
    49,    98,     0,   146,    92,     0,     0,    49,    97,     0,
   101,     0,   101,    21,   135,     0,   135,     0,   101,    49,
   135,     0,   130,     0,   134,     0,   141,     0,   143,     0,
   142,     0,   138,     0,   139,     0,   140,     0,   125,     0,
   120,     0,   107,     0,   135,     0,   130,     0,   134,     0,
   141,     0,   143,     0,   142,     0,   138,     0,   139,     0,
   140,     0,   125,     0,   120,     0,   130,     0,   134,     0,
   141,     0,   143,     0,   142,     0,   138,     0,   139,     0,
   140,     0,   126,     0,   121,     0,    44,   111,   108,    68,
    45,     0,    24,   111,   108,    68,    45,     0,     0,   108,
   110,     0,   110,     0,   109,   110,     0,    13,   113,    48,
     0,     0,    14,   113,    48,     0,    14,   112,    21,   135,
    48,     0,    39,   113,    39,     0,    39,   112,    21,   135,
    39,     0,     0,   113,     0,   114,     0,   113,    49,   114,
     0,   135,     0,   135,    31,   102,     0,    92,    30,    92,
     0,   146,    92,     0,   115,     0,   116,    49,   115,     0,
     0,   116,     0,   119,     0,   118,    49,   119,     0,   129,
   135,     0,   129,   135,    31,   102,     0,    54,    50,   124,
    51,     0,    50,   124,    51,     0,   106,    30,   106,     0,
   146,   106,     0,   122,     0,   123,    49,   122,     0,     0,
   123,     0,    54,    46,   127,    47,     0,    54,   136,    46,
   127,    47,     0,    46,   127,    47,     0,   136,    46,   127,
    47,     0,     0,   128,    67,     0,   106,     0,   128,    49,
   106,     0,     0,    35,     0,    40,     0,    36,     0,     4,
     0,    34,     4,     0,     5,     0,    34,     5,     0,     6,
     0,    34,     6,     0,    23,     0,   131,     0,   132,     0,
   131,   133,     0,   130,   133,     0,   133,     0,    34,   133,
     0,     3,     0,    29,     0,    11,     0,    10,     0,    18,
     0,    19,     0,    17,     0,     9,     0,     7,     0,     8,
     0,    20,     0,    32,     0,    40,     0,    35,     0,    36,
     0,    34,     0,    37,     0,    38,     0,    39,     0,    33,
     0,   145,     0,   146,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    40,    42,    44,    48,    49,    53,    54,    58,    62,    69,
    75,    76,    79,    80,    84,    85,    89,    91,    95,    96,
   100,   103,   106,   109,   114,   115,   118,   119,   122,   123,
   127,   129,   131,   135,   136,   140,   141,   145,   147,   151,
   153,   157,   158,   164,   165,   168,   169,   172,   176,   180,
   185,   190,   208,   221,   223,   234,   245,   258,   279,   288,
   293,   306,   326,   332,   350,   356,   356,   366,   366,   372,
   394,   398,   432,   470,   484,   495,   499,   524,   525,   526,
   527,   528,   529,   530,   532,   542,   544,   546,   548,   550,
   552,   565,   568,   595,   613,   640,   668,   687,   715,   742,
   760,   785,   813,   832,   860,   879,   896,   912,   931,   949,
   966,   982,   998,   999,  1000,  1001,  1002,  1015,  1029,  1034,
  1038,  1049,  1054,  1064,  1069,  1083,  1099,  1100,  1101,  1102,
  1105,  1106,  1112,  1115,  1116,  1120,  1121,  1123,  1128,  1130,
  1137,  1145,  1146,  1150,  1152,  1156,  1157,  1161,  1165,  1166,
  1169,  1171,  1175,  1176,  1181,  1182,  1183,  1184,  1185,  1186,
  1187,  1188,  1189,  1190,  1193,  1196,  1199,  1200,  1201,  1202,
  1203,  1204,  1205,  1206,  1207,  1208,  1211,  1212,  1213,  1214,
  1215,  1216,  1217,  1218,  1219,  1220,  1223,  1226,  1231,  1232,
  1236,  1237,  1241,  1245,  1246,  1250,  1254,  1258,  1265,  1266,
  1269,  1270,  1274,  1276,  1280,  1282,  1289,  1290,  1294,  1295,
  1298,  1299,  1303,  1305,  1309,  1313,  1317,  1319,  1326,  1327,
  1331,  1332,  1337,  1339,  1343,  1345,  1349,  1350,  1353,  1354,
  1358,  1359,  1361,  1363,  1367,  1368,  1377,  1378,  1387,  1388,
  1399,  1402,  1403,  1404,  1410,  1418,  1425,  1434,  1435,  1438,
  1441,  1444,  1447,  1450,  1453,  1456,  1459,  1462,  1465,  1466,
  1467,  1468,  1469,  1470,  1471,  1472,  1475,  1478,  1479,  1482
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","BEGINGENERATOR","LEFTARROW",
"WHILE","':'","'='","BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR",
"'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'",
"'#'","root","classes","classextensions","classdef","classextension","optname",
"superclass","classvardecls","classvardecl","methods","methoddef","optsemi",
"optcomma","funcbody","cmdlinecode","methbody","primitive","retval","funretval",
"blocklist1","blocklistitem","blocklist","msgsend","generator","@1","@2","nextqual",
"qual","expr1","valrangex1","valrangeassign","valrangexd","valrange2","valrange3",
"expr","adverb","exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1",
"keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral",
"pushname","pushliteral","listliteral","block","funcvardecls","funcvardecls1",
"funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef",
"dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","dictlit","dictlit2",
"litdictslotdef","litdictslotlist1","litdictslotlist","listlit","listlit2","literallistc",
"literallist1","rwspec","integer","floatr","accidental","pie","floatp","name",
"classname","primname","trueobj","falseobj","nilobj","ascii","symbol","string",
"pseudovar","binop","keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    55,    55,    55,    56,    56,    57,    57,    58,    58,    59,
    60,    60,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    65,    66,    66,    67,    67,    68,    68,
    69,    69,    69,    70,    70,    71,    71,    72,    72,    73,
    73,    74,    74,    75,    75,    76,    76,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    79,    78,    80,    78,    81,
    81,    82,    82,    82,    82,    82,    82,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    84,    84,    84,    85,    85,    85,    86,    86,
    86,    86,    86,    86,    87,    87,    87,    88,    88,    88,
    88,    88,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    90,    90,    90,    90,
    91,    91,    92,    93,    93,    94,    94,    94,    94,    94,
    94,    95,    95,    96,    96,    97,    97,    98,    99,    99,
   100,   100,   101,   101,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   103,   104,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   107,   107,   108,   108,
   109,   109,   110,   111,   111,   111,   111,   111,   112,   112,
   113,   113,   114,   114,   115,   115,   116,   116,   117,   117,
   118,   118,   119,   119,   120,   121,   122,   122,   123,   123,
   124,   124,   125,   125,   126,   126,   127,   127,   128,   128,
   129,   129,   129,   129,   130,   130,   131,   131,   132,   132,
   133,   134,   134,   134,   134,   134,   134,   135,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   145,
   145,   145,   145,   145,   145,   145,   146,   147,   147,   148
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     1,     1,     0,     1,     2,     4,     6,
     8,     5,     7,     4,     2,     5,     6,     5,     6,     7,
     7,     6,     8,     7,     4,     0,     7,     0,     7,     0,
     2,     4,     5,     5,     2,     4,     4,     1,     1,     1,
     1,     1,     1,     3,     2,     3,     3,     4,     3,     1,
     4,     1,     5,     5,     6,     7,     7,     8,     6,     6,
     7,     8,     8,     9,     2,     3,     5,     2,     2,     3,
     4,     5,     1,     1,     1,     1,     5,     2,     4,     3,
     4,     5,     7,     4,     6,     7,     0,     2,     2,     4,
     1,     3,     2,     0,     2,     1,     3,     2,     3,     4,
     5,     1,     3,     2,     4,     1,     3,     2,     0,     2,
     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     5,     0,     2,
     1,     2,     3,     0,     3,     5,     3,     5,     0,     1,
     1,     3,     1,     3,     3,     2,     1,     3,     0,     1,
     1,     3,     2,     4,     4,     3,     3,     2,     1,     3,
     0,     1,     4,     5,     3,     4,     0,     2,     1,     3,
     0,     1,     1,     1,     1,     2,     1,     2,     1,     2,
     1,     1,     1,     2,     2,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   248,   235,   237,   239,   256,
   257,   255,   250,   270,     0,   254,   252,   253,   258,   241,
   194,   249,     0,     0,   194,   134,   209,     0,     0,     0,
    33,     3,    29,    83,    80,   113,    92,   115,   114,   131,
    25,    40,    79,    81,    78,   165,    40,   191,   176,   175,
   167,   242,   243,   246,   168,   166,   116,   172,   173,   174,
   169,   171,   170,    90,    82,     0,     5,    13,     7,     0,
   201,   203,   199,   199,   189,   236,   238,   240,   247,   209,
   118,     0,     0,   189,   267,   136,     0,    27,     0,     0,
     0,   259,   263,   261,   262,   264,   265,   266,   260,     0,
     0,    40,   207,   210,     0,   268,   269,     0,    25,    85,
   227,   221,     0,   151,   153,     0,     0,   263,     0,   269,
   127,    26,   133,    30,    32,   192,   245,   244,     0,     0,
    48,    42,    45,    44,   134,     0,    55,    19,     0,    11,
     0,   193,     0,     0,     0,   200,     0,   200,    40,    66,
    68,    40,     0,    86,    28,   135,   138,   105,     0,     0,
     0,    87,     0,     0,     0,    84,     0,     0,    89,   206,
     0,    26,    41,     0,   227,   221,   229,   186,   185,     0,
    27,   177,   178,     0,   182,   183,   184,   179,   181,   180,
     0,   219,   222,     0,     0,     0,     0,     0,   227,     0,
   142,     0,     0,     0,    46,     0,     0,   132,   120,     0,
   149,   149,    43,     0,   149,   149,     0,   146,     0,     0,
    14,     0,    12,    15,   202,     0,   204,   164,   163,   155,
   156,   160,   161,   162,   157,   159,   158,     0,   195,     0,
   197,     0,   190,     0,     0,     0,   137,   139,     0,   108,
    88,   109,     0,   106,   205,     0,    31,     0,   208,     0,
     0,    49,   121,     0,     0,   223,    28,   228,   227,     0,
     0,   215,   218,   124,   152,   154,     0,     0,     0,    91,
     0,     0,     0,   149,   149,     0,     0,     0,    47,    65,
     0,     0,   129,   128,   119,   144,     0,     0,     0,     0,
    54,     0,     0,     0,    46,   148,   264,    10,    20,     0,
     0,    13,    19,     0,     0,   188,     0,     0,   187,     0,
   140,   110,     0,     0,   149,   149,   225,   216,   230,     0,
   217,   220,   224,    94,    93,     0,     0,   143,     0,     0,
   117,     0,     0,    46,   122,   149,   149,     0,     0,     0,
   150,    46,    52,    46,    58,   147,    56,     0,     0,   194,
   194,     0,   231,   231,    16,     0,   196,   198,     0,     0,
     0,    70,   166,     0,   141,   111,   107,     0,     0,   226,
     0,     0,    95,   125,   100,    99,     0,     0,    46,    62,
    59,     0,     0,    46,   130,   145,     0,    50,    57,   194,
   194,   189,   189,    15,   232,   234,   233,     0,   211,     0,
     0,     8,     0,     0,     0,    67,     0,    75,     0,     0,
    69,   112,    46,    53,    97,    96,     0,     0,     0,   101,
   126,    61,    46,    64,    60,   123,   189,   189,    36,    36,
    19,    18,   231,   213,    17,     0,    70,    70,    71,    70,
     0,    51,    98,   103,   102,     0,    63,    36,    36,   251,
    38,    25,    38,     0,   212,     0,    70,    77,    76,    72,
    70,   104,    38,    38,     0,     0,    34,    38,    37,     0,
     9,   214,    74,    73,     0,     0,    25,    21,    35,    23,
    22,    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   494,
     3,     4,    67,     5,   222,   141,   313,   365,   220,   309,
   123,   156,    31,    32,   476,   461,   477,    33,   289,   132,
   290,    34,    35,   244,   245,   418,   371,    36,    37,    38,
    39,   100,   160,    40,   207,    41,   201,    87,    88,   202,
   212,   351,   218,   298,   113,   114,   227,    43,    44,    45,
   177,    46,   149,    47,   243,    75,   145,    70,    71,   103,
   104,   105,   408,   409,    49,   178,   192,   193,   194,    50,
   179,   180,   181,   410,    51,    52,    53,    54,    55,    56,
    57,   462,    58,    59,    60,    61,    62,    63,    64,   106,
   120,   121,    65
};

static const short yypact[] = {    74,
   777,    13,    13,    -6,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    42,-32768,-32768,-32768,-32768,-32768,
    53,-32768,   218,  1453,    63,  1037,   629,  1453,    42,   167,
-32768,-32768,-32768,-32768,-32768,    14,-32768,-32768,-32768,   508,
    46,    32,-32768,-32768,-32768,-32768,   829,-32768,-32768,-32768,
    40,    40,-32768,-32768,-32768,   453,   225,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    55,-32768,    50,-32768,    89,
-32768,    77,    42,    42,-32768,-32768,-32768,-32768,-32768,   718,
-32768,  1453,  1453,-32768,-32768,    94,    96,   101,  1453,  1453,
  1089,-32768,   218,-32768,-32768,-32768,-32768,-32768,-32768,    95,
   280,   829,-32768,   104,   106,-32768,  1453,   114,  1571,   130,
  1524,  1504,   142,    26,-32768,   135,  1141,-32768,    45,-32768,
   143,  1453,-32768,-32768,-32768,-32768,-32768,-32768,  1453,  1193,
     9,-32768,-32768,-32768,  1037,   881,     9,-32768,    13,    42,
   145,-32768,    42,   238,   171,   245,   179,    27,   829,-32768,
-32768,   829,  1453,-32768,  1037,-32768,-32768,-32768,  1453,   153,
     0,-32768,  1453,  1453,  1453,-32768,   156,  1037,-32768,-32768,
   116,-32768,-32768,  1453,  1524,  1504,-32768,-32768,-32768,   172,
   182,    40,-32768,   193,-32768,-32768,-32768,-32768,-32768,-32768,
   220,-32768,   204,   207,  1524,  1453,    42,    42,  1524,  1453,
-32768,    83,  1245,   881,   461,    36,  1453,   508,   508,  1453,
   214,   240,-32768,   232,   214,   240,   213,-32768,  1453,   565,
-32768,   251,-32768,-32768,-32768,    18,-32768,-32768,-32768,    40,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    42,-32768,    42,
-32768,   267,-32768,   255,   271,   276,-32768,   297,  1453,-32768,
-32768,  1453,  1453,-32768,-32768,   303,-32768,   304,-32768,  1453,
  1193,     9,   508,   286,   284,-32768,  1524,-32768,  1524,  1524,
  1504,-32768,-32768,   508,-32768,-32768,   291,   296,  1297,   314,
  1453,  1453,    98,   214,   240,   239,  1453,   881,     9,-32768,
   340,  1453,-32768,-32768,   307,-32768,   933,   302,   323,   319,
-32768,   322,   328,   323,     9,-32768,   198,-32768,-32768,   330,
   339,   354,   110,   338,   349,-32768,   985,   985,-32768,  1453,
-32768,-32768,   368,  1453,   214,   240,-32768,-32768,-32768,   346,
-32768,-32768,-32768,   365,   366,   352,  1453,-32768,   353,  1349,
   372,   361,   364,     9,   508,   214,   240,   262,   375,  1453,
   355,    -8,-32768,     9,-32768,-32768,-32768,   373,   384,    53,
    53,   389,   230,   230,-32768,  1543,-32768,-32768,    42,   186,
   393,   391,    28,   398,-32768,  1453,-32768,   397,   402,-32768,
  1453,  1453,   413,   508,   423,   424,   416,  1453,     9,-32768,
-32768,   415,   418,     9,-32768,-32768,  1453,-32768,-32768,    53,
    53,-32768,-32768,-32768,-32768,-32768,-32768,   259,-32768,    42,
   266,-32768,   443,  1453,  1453,-32768,   985,-32768,  1453,   447,
-32768,-32768,     9,-32768,   508,   508,  1453,  1453,  1453,   445,
   508,-32768,     9,-32768,-32768,   508,-32768,-32768,   123,   123,
   110,-32768,   230,   448,-32768,  1453,   391,   391,-32768,   391,
  1453,-32768,   508,   508,   508,  1453,-32768,   123,   123,-32768,
  1401,   432,  1401,  1557,-32768,   238,   391,-32768,-32768,-32768,
   391,   508,  1401,  1401,  1453,   442,-32768,   441,-32768,   450,
-32768,-32768,-32768,-32768,   454,   456,  1571,-32768,-32768,-32768,
-32768,-32768,-32768,   498,   502,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   500,-32768,   194,   103,-32768,  -302,-32768,
  -107,   329,   -33,-32768,  -276,  -247,    31,   471,   -49,   -94,
    97,-32768,   -22,-32768,-32768,   -82,  -303,-32768,-32768,-32768,
-32768,-32768,-32768,   -19,-32768,-32768,    -1,   386,-32768,   -86,
  -117,  -106,   215,   249,-32768,-32768,    56,    -2,-32768,-32768,
   -91,-32768,   -56,   496,    11,   -24,   451,   200,   381,   358,
-32768,-32768,   163,    92,  -140,-32768,   265,-32768,   383,  -138,
-32768,  -148,-32768,-32768,    15,-32768,-32768,   -10,    30,   -12,
   417,-32768,   165,   247,   283,   295,   313,   356,-32768,  -210,
   403,    -7,-32768
};


#define	YYLAST		1619


static const short yytable[] = {    42,
    84,   173,    72,   228,    81,   229,   131,   137,   109,   311,
   366,    48,    79,   125,   374,    21,   110,   115,   216,   108,
   191,   252,   397,    13,    86,   101,   264,   152,    13,   217,
     6,     2,    21,   133,   133,    25,   213,    48,     6,     7,
   127,   128,   213,   211,     6,    42,   197,     6,   253,   215,
   277,    21,    25,   134,   134,   419,    22,   126,   129,   117,
    72,    72,    20,   111,    22,   241,    73,   112,   167,   291,
    22,    25,   108,    22,   198,   143,    73,   130,   101,   139,
   150,   151,    79,    28,   191,   292,   285,   157,   158,   161,
   203,    74,    82,   122,   204,   140,   359,   286,   138,     1,
    42,    74,   208,   273,   279,   170,   205,   144,   133,   209,
    83,     2,   126,   449,   133,   242,   283,   284,   246,   340,
   330,   262,   363,   153,   364,   182,   182,   223,   134,   280,
    72,   281,   460,    86,   134,    15,   142,   143,   464,    21,
   183,   183,   154,   326,   341,   162,   281,    42,   133,   155,
    42,   247,   168,   248,   263,   311,   169,   250,   230,    25,
   174,   254,   255,   256,   171,   261,   258,   213,   134,     6,
   347,   127,   196,   231,   325,   329,   274,    13,   331,   191,
   199,   348,   133,   206,   275,   276,   480,   295,   224,   182,
   182,   238,   463,   294,   213,    22,   485,   486,   278,   240,
     6,   346,   134,   251,   183,   183,   257,   310,   296,   182,
   473,   474,   111,   182,   414,   415,   112,   306,   266,   127,
   293,    76,    77,    78,   183,   314,    22,   315,   183,    92,
   267,   118,    94,    95,    96,    97,    98,    99,   269,   133,
    20,     7,     8,     9,    10,    11,    12,   321,    21,   270,
   322,   323,   271,   311,    16,    17,    18,   272,   170,   134,
    20,   304,   297,   305,   405,   406,   133,   345,    25,   407,
   135,    23,   146,   148,   136,   185,   185,   336,   301,   338,
   339,   182,   133,   182,   182,   182,   134,   304,   299,   344,
   349,   226,   239,   143,   358,   338,   183,   312,   183,   183,
   183,   163,   134,   317,   373,   373,   442,   443,   232,   164,
   304,   316,   394,   445,   443,   372,   372,   384,   375,   318,
   319,   133,   377,   131,   324,   228,   320,   229,   165,   133,
   166,   133,   327,   164,   328,   402,   403,   333,   387,   185,
   185,   134,   334,    76,   337,   439,   440,   119,   396,   134,
   133,   134,   352,   310,   479,    85,   413,   186,   186,   185,
   420,   425,   426,   185,   468,   469,   133,   470,   431,   353,
   134,   133,   354,   360,   422,   437,   438,   436,   355,   493,
   458,   459,   361,   139,   483,   367,   134,   368,   484,   376,
   233,   134,   380,   187,   187,   381,   382,   444,   383,   385,
   133,   357,   388,   304,   373,   188,   188,   453,   454,   455,
   133,   389,   447,   448,   390,   372,   400,   450,    66,    68,
   134,   186,   186,   189,   189,   395,   234,   401,    89,   107,
   134,   185,   404,   185,   185,   185,   472,   416,   235,   417,
   391,   186,   421,   427,   467,   186,   116,   423,   398,   471,
   399,   310,   424,   428,   429,   487,   236,   187,   187,   478,
   300,   478,   430,   302,   303,   433,   190,   190,   434,   188,
   188,   478,   478,   446,   451,   456,    21,   187,   466,   172,
   230,   187,   107,   129,    21,   432,   488,   189,   189,   188,
   435,   287,   475,   188,   490,   231,    25,   495,   491,   237,
   492,   496,   130,    69,    25,   362,   441,   189,   489,   268,
   288,   189,   124,   186,   195,   186,   186,   186,   356,   452,
   214,   482,   102,   225,   147,   259,   411,   184,   184,   457,
   190,   190,   342,   343,   465,   332,     0,    89,   219,    92,
    85,   118,    94,    95,    96,    97,    98,    99,   119,   187,
   190,   187,   187,   187,   190,   221,     0,   249,   265,     0,
     0,   188,     0,   188,   188,   188,     0,     6,     0,     0,
   260,     0,     0,   378,   379,     0,     0,     0,   195,   189,
     0,   189,   189,   189,     0,     0,     0,     0,     0,     0,
     0,   184,   184,    22,   392,   393,    92,     0,   118,    94,
    95,   307,    97,    98,    99,     0,   219,     0,     0,   308,
     0,   184,     0,     0,     0,   184,     0,     0,     0,     0,
     0,     0,   190,     0,   190,   190,   190,     0,     0,     0,
   232,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,    15,   116,     0,     0,    16,    17,    18,    19,     0,
    90,    20,    21,     0,     0,     0,     0,    22,    91,     0,
    92,    85,    93,    94,    95,    96,    97,    98,    99,     0,
    24,     0,    25,   195,    26,     0,     0,     0,    80,     0,
     0,    29,    30,   184,     0,   184,   184,   184,     0,     0,
   219,     0,     0,     0,     0,     0,     0,     0,     0,   219,
     0,   219,     0,     0,     0,     0,   219,     0,     0,     0,
     0,     0,   233,     0,     0,     0,     0,     0,     0,     0,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,    90,
    20,    21,     0,     0,     0,     0,    22,    91,   234,    92,
    85,    93,    94,    95,    96,    97,    98,    99,     0,    24,
   235,    25,     0,    26,     0,     0,     0,    80,     0,     0,
    29,    30,     0,     0,     0,     0,     0,     0,   236,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,    15,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,   237,    26,     0,     0,     0,    27,     0,    28,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,    15,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
    28,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,    85,    23,     0,     0,   210,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,    85,    23,     0,     0,   350,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,   369,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,    22,   370,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,    85,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
   159,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,   200,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,     0,    23,     0,     0,   210,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,   282,    20,    21,     0,
     0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,   335,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,   386,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,   475,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,     0,    23,     0,     0,     0,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,     0,
    16,    17,    18,     0,     0,     0,    20,     7,     8,     9,
    10,    11,    12,     0,    13,     0,    85,    23,     0,     0,
    16,    17,    18,     0,     0,     6,    20,     0,     0,   175,
     0,     0,     0,   176,     0,     0,     0,    23,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   175,
     0,    22,     0,   176,    92,     0,   118,    94,    95,   307,
    97,    98,    99,     0,     0,    22,     0,   412,    92,     0,
   118,    94,    95,   307,    97,    98,    99,     0,     0,     0,
     0,   481,    92,    85,   118,    94,    95,    96,    97,    98,
    99,   119,     0,     0,     0,     0,     0,     0,   172
};

static const short yycheck[] = {     1,
    25,   109,    15,   144,    24,   144,    56,    57,    28,   220,
   313,     1,    23,    47,   318,    24,    29,    30,   136,    27,
   112,    22,    31,    11,    26,    27,   175,    84,    11,   136,
     3,    38,    24,    56,    57,    44,   131,    27,     3,     4,
    51,    52,   137,   130,     3,    47,    21,     3,    49,   136,
   199,    24,    44,    56,    57,    28,    29,    47,    31,    46,
    73,    74,    23,    46,    29,    39,    14,    50,   102,    34,
    29,    44,    80,    29,    49,    49,    14,    50,    80,    30,
    82,    83,    93,    52,   176,    50,   204,    89,    90,    91,
    46,    39,    30,    48,    50,    46,   307,   204,    44,    26,
   102,    39,   122,   195,    22,   107,   119,    31,   131,   129,
    48,    38,   102,   417,   137,   149,   203,   204,   152,    22,
   269,   171,    13,    30,    15,   111,   112,   140,   131,    47,
   143,    49,    10,   135,   137,    13,    48,    49,   441,    24,
   111,   112,    47,   261,    47,    51,    49,   149,   171,    49,
   152,   153,    49,   155,   174,   366,    51,   159,   144,    44,
    31,   163,   164,   165,    51,    50,   168,   262,   171,     3,
   288,   182,    31,   144,   261,   267,   196,    11,   270,   271,
    46,   288,   205,    41,   197,   198,   463,   207,    44,   175,
   176,    21,   440,   206,   289,    29,   473,   474,   200,    21,
     3,   288,   205,    51,   175,   176,    51,   220,   210,   195,
   458,   459,    46,   199,    29,    30,    50,   219,    47,   230,
   206,     4,     5,     6,   195,   238,    29,   240,   199,    32,
    49,    34,    35,    36,    37,    38,    39,    40,    46,   262,
    23,     4,     5,     6,     7,     8,     9,   249,    24,    30,
   252,   253,    49,   464,    17,    18,    19,    51,   260,   262,
    23,    49,    49,    51,    35,    36,   289,   287,    44,    40,
    46,    34,    73,    74,    50,   111,   112,   279,    47,   281,
   282,   267,   305,   269,   270,   271,   289,    49,    49,    51,
   292,    54,    48,    49,   307,   297,   267,    47,   269,   270,
   271,    22,   305,    49,   317,   318,    48,    49,   144,    30,
    49,    45,    51,    48,    49,   317,   318,   337,   320,    49,
    45,   344,   324,   373,    22,   466,    30,   466,    49,   352,
    51,   354,    47,    30,    51,   360,   361,    47,   340,   175,
   176,   344,    47,     4,    31,   402,   403,    41,   350,   352,
   373,   354,    51,   366,   462,    33,   369,   111,   112,   195,
   373,   381,   382,   199,   447,   448,   389,   450,   388,    51,
   373,   394,    51,    44,   376,   400,   401,   397,    51,   487,
   437,   438,    44,    30,   467,    48,   389,    39,   471,    22,
   144,   394,    47,   111,   112,    31,    31,   410,    47,    47,
   423,   305,    31,    49,   417,   111,   112,   427,   428,   429,
   433,    51,   414,   415,    51,   417,    44,   419,     2,     3,
   423,   175,   176,   111,   112,    51,   144,    44,    26,    27,
   433,   267,    44,   269,   270,   271,   456,    45,   144,    49,
   344,   195,    45,    31,   446,   199,    30,    51,   352,   451,
   354,   464,    51,    31,    31,   475,   144,   175,   176,   461,
   212,   463,    47,   215,   216,    51,   111,   112,    51,   175,
   176,   473,   474,    31,    28,    31,    24,   195,    31,    48,
   466,   199,    80,    31,    24,   389,    45,   175,   176,   195,
   394,    31,    52,   199,    45,   466,    44,     0,    45,   144,
    45,     0,    50,     4,    44,   312,   404,   195,   478,   181,
    50,   199,    42,   267,   112,   269,   270,   271,   304,   423,
   135,   466,    27,   143,    74,   168,   364,   111,   112,   433,
   175,   176,   284,   285,   443,   271,    -1,   135,   136,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,   267,
   195,   269,   270,   271,   199,   139,    -1,   155,   176,    -1,
    -1,   267,    -1,   269,   270,   271,    -1,     3,    -1,    -1,
   168,    -1,    -1,   325,   326,    -1,    -1,    -1,   176,   267,
    -1,   269,   270,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   175,   176,    29,   346,   347,    32,    -1,    34,    35,
    36,    37,    38,    39,    40,    -1,   204,    -1,    -1,    45,
    -1,   195,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
    -1,    -1,   267,    -1,   269,   270,   271,    -1,    -1,    -1,
   466,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    13,   226,    -1,    -1,    17,    18,    19,    20,    -1,
    22,    23,    24,    -1,    -1,    -1,    -1,    29,    30,    -1,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
    42,    -1,    44,   271,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,   267,    -1,   269,   270,   271,    -1,    -1,
   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,
    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
    -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,
    23,    24,    -1,    -1,    -1,    -1,    29,    30,   466,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
   466,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,   466,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    13,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,   466,    46,    -1,    -1,    -1,    50,    -1,    52,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    13,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    52,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    33,    34,    -1,    -1,    37,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    22,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    47,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    52,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
    17,    18,    19,    -1,    -1,    -1,    23,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    33,    34,    -1,    -1,
    17,    18,    19,    -1,    -1,     3,    23,    -1,    -1,    46,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    34,    -1,     3,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    -1,    29,    -1,    50,    32,    -1,    34,    35,    36,    37,
    38,    39,    40,    -1,    -1,    29,    -1,    45,    32,    -1,
    34,    35,    36,    37,    38,    39,    40,    -1,    -1,    -1,
    -1,    45,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 43 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 45 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 48 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 55 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 63 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 70 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 81 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 84 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 86 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 90 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 92 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 95 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 97 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 101 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 104 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 107 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 110 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 124 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 130 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 132 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 137 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 140 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 142 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 146 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 148 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 152 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 154 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 159 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 46:
#line 168 "lang11d"
{ yyval = 0; ;
    break;}
case 48:
#line 173 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 49:
#line 177 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 50:
#line 181 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 186 "lang11d"
{
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 191 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 53:
#line 209 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-5], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 54:
#line 222 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 55:
#line 224 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 56:
#line 235 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 246 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 58:
#line 259 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 59:
#line 280 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 289 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 61:
#line 294 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 62:
#line 307 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 63:
#line 327 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 64:
#line 333 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 65:
#line 351 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 66:
#line 356 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 1); ;
    break;}
case 67:
#line 357 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[-1], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0); 
			;
    break;}
case 68:
#line 366 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 2); ;
    break;}
case 69:
#line 367 "lang11d"
{
				yyval = yyvsp[-1];
			;
    break;}
case 70:
#line 373 "lang11d"
{ 
					// innermost part
					int action = popls(&generatorStack); 
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);
					
					switch (action) 
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);
					
							yyval = (long)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							yyval = (long)expr;
						} break;
					}
				;
    break;}
case 71:
#line 395 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 72:
#line 399 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 73:
#line 433 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 74:
#line 471 "lang11d"
{ 
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)yyvsp[-1]);
				
				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 75:
#line 485 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit);

				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 76:
#line 496 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 77:
#line 500 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);
				
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);
				
				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);
				
				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0); 
				
				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				yyval = (long)newPyrCallNode(selectornode2, args3, 0, 0); 
			;
    break;}
case 84:
#line 531 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 85:
#line 533 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 86:
#line 543 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 87:
#line 545 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 88:
#line 547 "lang11d"
{ yyval = yyvsp[-2]; ;
    break;}
case 89:
#line 549 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 90:
#line 551 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 91:
#line 553 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 93:
#line 569 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 94:
#line 596 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 95:
#line 614 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 641 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 669 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 98:
#line 688 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 99:
#line 716 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 743 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 761 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 786 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 814 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 104:
#line 833 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 105:
#line 861 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 106:
#line 880 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 107:
#line 897 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 108:
#line 913 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 109:
#line 932 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 110:
#line 950 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 111:
#line 967 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 112:
#line 983 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 116:
#line 1001 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 117:
#line 1003 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 118:
#line 1016 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 119:
#line 1030 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 120:
#line 1035 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 121:
#line 1039 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 122:
#line 1050 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 123:
#line 1055 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 124:
#line 1065 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 125:
#line 1070 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 126:
#line 1084 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 127:
#line 1099 "lang11d"
{ yyval = 0; ;
    break;}
case 128:
#line 1100 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 129:
#line 1101 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 1102 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 132:
#line 1107 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 134:
#line 1115 "lang11d"
{ yyval = 0; ;
    break;}
case 135:
#line 1117 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 137:
#line 1122 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 138:
#line 1124 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 139:
#line 1129 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 140:
#line 1131 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 141:
#line 1138 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 143:
#line 1147 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 144:
#line 1151 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 145:
#line 1153 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 147:
#line 1158 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 148:
#line 1162 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 149:
#line 1165 "lang11d"
{ yyval = 0; ;
    break;}
case 150:
#line 1166 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 151:
#line 1170 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 1172 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 154:
#line 1177 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 155:
#line 1181 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 1182 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 1183 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 1184 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 159:
#line 1185 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 160:
#line 1186 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 161:
#line 1187 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 162:
#line 1188 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 163:
#line 1189 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 1190 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 165:
#line 1193 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 166:
#line 1196 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 167:
#line 1199 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 168:
#line 1200 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 169:
#line 1201 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 170:
#line 1202 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 171:
#line 1203 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 172:
#line 1204 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 173:
#line 1205 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 174:
#line 1206 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 175:
#line 1207 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 176:
#line 1208 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 177:
#line 1211 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 178:
#line 1212 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 179:
#line 1213 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 180:
#line 1214 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 181:
#line 1215 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 182:
#line 1216 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 183:
#line 1217 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 184:
#line 1218 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 185:
#line 1219 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 186:
#line 1220 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 187:
#line 1224 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 188:
#line 1227 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 189:
#line 1231 "lang11d"
{ yyval = 0; ;
    break;}
case 190:
#line 1233 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 192:
#line 1238 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 193:
#line 1242 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 194:
#line 1245 "lang11d"
{ yyval = 0; ;
    break;}
case 195:
#line 1247 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 196:
#line 1251 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 197:
#line 1255 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 198:
#line 1259 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 199:
#line 1265 "lang11d"
{ yyval = 0; ;
    break;}
case 202:
#line 1271 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 203:
#line 1275 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 204:
#line 1277 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 205:
#line 1281 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 206:
#line 1283 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 208:
#line 1291 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 209:
#line 1294 "lang11d"
{ yyval = 0; ;
    break;}
case 212:
#line 1300 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 213:
#line 1304 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 214:
#line 1306 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 215:
#line 1310 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 216:
#line 1314 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 217:
#line 1318 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 218:
#line 1320 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 220:
#line 1328 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 221:
#line 1331 "lang11d"
{ yyval = 0; ;
    break;}
case 223:
#line 1338 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 224:
#line 1340 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 225:
#line 1344 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 226:
#line 1346 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 227:
#line 1349 "lang11d"
{ yyval = 0; ;
    break;}
case 230:
#line 1355 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 231:
#line 1358 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 232:
#line 1360 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 233:
#line 1362 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 234:
#line 1364 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 235:
#line 1367 "lang11d"
{ yyval = zzval; ;
    break;}
case 236:
#line 1369 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 237:
#line 1377 "lang11d"
{ yyval = zzval; ;
    break;}
case 238:
#line 1379 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 239:
#line 1387 "lang11d"
{ yyval = zzval; ;
    break;}
case 240:
#line 1389 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 241:
#line 1399 "lang11d"
{ yyval = zzval; ;
    break;}
case 244:
#line 1405 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 245:
#line 1411 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 246:
#line 1419 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 247:
#line 1426 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 248:
#line 1434 "lang11d"
{ yyval = zzval; ;
    break;}
case 249:
#line 1435 "lang11d"
{ yyval = zzval; ;
    break;}
case 250:
#line 1438 "lang11d"
{ yyval = zzval; ;
    break;}
case 251:
#line 1441 "lang11d"
{ yyval = zzval; ;
    break;}
case 252:
#line 1444 "lang11d"
{ yyval = zzval; ;
    break;}
case 253:
#line 1447 "lang11d"
{ yyval = zzval; ;
    break;}
case 254:
#line 1450 "lang11d"
{ yyval = zzval; ;
    break;}
case 255:
#line 1453 "lang11d"
{ yyval = zzval; ;
    break;}
case 256:
#line 1456 "lang11d"
{ yyval = zzval; ;
    break;}
case 257:
#line 1459 "lang11d"
{ yyval = zzval; ;
    break;}
case 258:
#line 1462 "lang11d"
{ yyval = zzval; ;
    break;}
case 259:
#line 1465 "lang11d"
{ yyval = zzval; ;
    break;}
case 260:
#line 1466 "lang11d"
{ yyval = zzval; ;
    break;}
case 261:
#line 1467 "lang11d"
{ yyval = zzval; ;
    break;}
case 262:
#line 1468 "lang11d"
{ yyval = zzval; ;
    break;}
case 263:
#line 1469 "lang11d"
{ yyval = zzval; ;
    break;}
case 264:
#line 1470 "lang11d"
{ yyval = zzval; ;
    break;}
case 265:
#line 1471 "lang11d"
{ yyval = zzval; ;
    break;}
case 266:
#line 1472 "lang11d"
{ yyval = zzval; ;
    break;}
case 267:
#line 1475 "lang11d"
{ yyval = zzval; ;
    break;}
case 270:
#line 1482 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1484 "lang11d"
