
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	VAR	266
#define	ARG	267
#define	CLASSVAR	268
#define	CONST	269
#define	NILOBJ	270
#define	TRUEOBJ	271
#define	FALSEOBJ	272
#define	PSEUDOVAR	273
#define	ELLIPSIS	274
#define	DOTDOT	275
#define	PIE	276
#define	BEGINCLOSEDFUNC	277
#define	BADTOKEN	278
#define	INTERPRET	279
#define	BINOP	280
#define	KEYBINOP	281
#define	READWRITEVAR	282
#define	UMINUS	283

#line 15 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		408
#define	YYFLAG		-32768
#define	YYNTBASE	51

#define YYTRANSLATE(x) ((unsigned)(x) <= 283 ? yytranslate[x] : 132)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    50,     2,     2,     2,     2,    46,
    47,    33,    34,    45,    30,    37,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    26,    44,    31,
    27,    32,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    42,     2,    43,    48,     2,    38,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    40,    35,    41,    49,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    28,
    29,    36,    39
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   142,   144,   147,   154,   160,   167,
   175,   183,   190,   199,   207,   212,   214,   216,   218,   220,
   224,   227,   231,   235,   239,   241,   246,   252,   258,   263,
   268,   270,   276,   282,   289,   297,   305,   314,   321,   328,
   336,   345,   354,   364,   367,   371,   377,   379,   381,   383,
   389,   391,   394,   399,   403,   408,   414,   422,   427,   434,
   442,   443,   446,   449,   454,   456,   460,   463,   464,   467,
   469,   473,   476,   480,   485,   491,   493,   497,   500,   505,
   507,   511,   514,   515,   518,   520,   524,   526,   530,   532,
   534,   536,   538,   540,   542,   544,   546,   548,   550,   552,
   554,   556,   558,   560,   562,   564,   566,   568,   570,   572,
   574,   576,   578,   580,   582,   584,   586,   588,   594,   600,
   601,   604,   606,   609,   613,   614,   618,   624,   628,   634,
   635,   637,   639,   643,   645,   649,   653,   656,   658,   662,
   663,   665,   667,   671,   674,   679,   684,   690,   694,   699,
   700,   703,   705,   709,   710,   712,   714,   716,   718,   721,
   723,   726,   728,   731,   733,   735,   737,   740,   743,   745,
   748,   750,   752,   754,   756,   758,   760,   762,   764,   766,
   768,   770,   772,   774,   776,   778,   780,   782,   784,   786,
   788
};

static const short yyrhs[] = {    52,
     0,    53,     0,    25,    65,     0,     0,    52,    54,     0,
    55,     0,    53,    55,     0,   120,    57,    40,    58,    60,
    41,     0,   120,    42,    56,    43,    57,    40,    58,    60,
    41,     0,    34,   120,    40,    60,    41,     0,     0,   119,
     0,     0,    26,   120,     0,     0,    58,    59,     0,    14,
   107,    44,     0,    12,   107,    44,     0,     0,    60,    61,
     0,   119,    40,   100,    97,    67,    66,    41,     0,    33,
   119,    40,   100,    97,    67,    66,    41,     0,   129,    40,
   100,    97,    67,    66,    41,     0,    33,   129,    40,   100,
    97,    67,    66,    41,     0,     0,    44,     0,     0,    45,
     0,    69,     0,    81,    69,     0,    46,    98,    64,    47,
     0,    98,    64,     0,    64,     0,    68,     0,    81,    68,
     0,     0,   121,    62,     0,     0,    48,    78,    62,     0,
     0,    48,    78,    62,     0,    92,     0,    70,    92,     0,
     0,    70,     0,   119,    70,     0,   119,    46,    84,    88,
    47,    71,     0,   119,    46,    85,    88,    47,     0,    78,
    37,    46,    86,    47,    71,     0,    78,    37,   119,    46,
    86,    47,    71,     0,    78,    37,    46,    84,    88,    47,
    71,     0,    78,    37,    46,    85,    88,    47,     0,    78,
    37,   119,    46,    84,    88,    47,    71,     0,    78,    37,
   119,    46,    85,    88,    47,     0,    78,    37,   119,    71,
     0,    94,     0,    92,     0,    93,     0,    72,     0,    46,
    81,    47,     0,    49,   119,     0,    42,    82,    43,     0,
    46,    77,    47,     0,    46,   106,    47,     0,   128,     0,
   120,    46,    86,    47,     0,   120,    46,    84,    88,    47,
     0,   120,    46,    85,    88,    47,     0,   120,    42,    82,
    43,     0,    73,    42,    84,    43,     0,    74,     0,    73,
    42,    84,    21,    43,     0,    73,    42,    21,    81,    43,
     0,    73,    42,    84,    21,    81,    43,     0,    73,    42,
    84,    21,    43,    27,    78,     0,    73,    42,    21,    81,
    43,    27,    78,     0,    73,    42,    84,    21,    81,    43,
    27,    78,     0,    78,    37,    42,    84,    21,    43,     0,
    78,    37,    42,    21,    81,    43,     0,    78,    37,    42,
    84,    21,    81,    43,     0,    78,    37,    42,    84,    21,
    43,    27,    78,     0,    78,    37,    42,    21,    81,    43,
    27,    78,     0,    78,    37,    42,    84,    21,    81,    43,
    27,    78,     0,    21,    81,     0,    81,    21,    81,     0,
    81,    45,    81,    21,    81,     0,    73,     0,    76,     0,
    75,     0,    78,    37,    42,    84,    43,     0,   120,     0,
    38,    78,     0,    78,   131,    79,    78,     0,   119,    27,
    78,     0,    49,   119,    27,    78,     0,    78,    37,   119,
    27,    78,     0,   119,    46,    84,    88,    47,    27,    78,
     0,    50,    89,    27,    78,     0,    73,    42,    84,    43,
    27,    78,     0,    78,    37,    42,    84,    43,    27,    78,
     0,     0,    37,   119,     0,    37,   114,     0,    37,    46,
    81,    47,     0,    78,     0,    80,    44,    78,     0,    80,
    62,     0,     0,    83,    63,     0,    81,     0,    81,    26,
    81,     0,   130,    81,     0,    83,    45,    81,     0,    83,
    45,   130,    81,     0,    83,    45,    81,    26,    81,     0,
    81,     0,    84,    45,    81,     0,    33,    81,     0,    84,
    45,    33,    81,     0,    87,     0,    86,    45,    87,     0,
   130,    81,     0,     0,    45,    86,     0,    90,     0,    90,
    20,   119,     0,   119,     0,    90,    45,   119,     0,   114,
     0,   118,     0,   125,     0,   127,     0,   126,     0,   122,
     0,   123,     0,   124,     0,   109,     0,    96,     0,   119,
     0,   114,     0,   118,     0,   125,     0,   127,     0,   126,
     0,   122,     0,   123,     0,   124,     0,   109,     0,   114,
     0,   118,     0,   125,     0,   127,     0,   126,     0,   122,
     0,   123,     0,   124,     0,   110,     0,    40,   100,    97,
    64,    41,     0,    23,   100,    97,    64,    41,     0,     0,
    97,    99,     0,    99,     0,    98,    99,     0,    12,   102,
    44,     0,     0,    13,   102,    44,     0,    13,   101,    20,
   119,    44,     0,    35,   102,    35,     0,    35,   101,    20,
   119,    35,     0,     0,   102,     0,   103,     0,   102,    45,
   103,     0,   119,     0,   119,    27,    91,     0,    81,    26,
    81,     0,   130,    81,     0,   104,     0,   105,    45,   104,
     0,     0,   105,     0,   108,     0,   107,    45,   108,     0,
   113,   119,     0,   113,   119,    27,    91,     0,    50,    42,
   111,    43,     0,    50,   120,    42,   111,    43,     0,    42,
   111,    43,     0,   120,    42,   111,    43,     0,     0,   112,
    63,     0,    95,     0,   112,    45,    95,     0,     0,    31,
     0,    36,     0,    32,     0,     4,     0,    30,     4,     0,
     5,     0,    30,     5,     0,     6,     0,    30,     6,     0,
    22,     0,   115,     0,   116,     0,   115,   117,     0,   114,
   117,     0,   117,     0,    30,   117,     0,     3,     0,    11,
     0,    10,     0,    17,     0,    18,     0,    16,     0,     9,
     0,     7,     0,     8,     0,    19,     0,    28,     0,    36,
     0,    31,     0,    32,     0,    30,     0,    33,     0,    34,
     0,    35,     0,    29,     0,   129,     0,   130,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    36,    38,    40,    44,    45,    49,    50,    54,    58,    65,
    71,    72,    75,    76,    80,    81,    85,    87,    91,    92,
    96,    99,   102,   105,   110,   111,   114,   115,   118,   119,
   123,   125,   127,   131,   132,   136,   137,   141,   143,   147,
   149,   153,   154,   160,   161,   164,   168,   173,   191,   200,
   205,   218,   238,   244,   262,   268,   269,   270,   271,   272,
   274,   284,   286,   288,   290,   292,   303,   316,   337,   339,
   352,   355,   382,   400,   427,   455,   474,   502,   529,   547,
   572,   600,   619,   647,   666,   683,   699,   700,   701,   702,
   715,   717,   731,   736,   740,   751,   756,   766,   771,   785,
   801,   802,   803,   804,   807,   808,   814,   817,   818,   822,
   823,   825,   830,   832,   839,   847,   848,   852,   854,   858,
   859,   863,   867,   868,   871,   873,   877,   878,   883,   884,
   885,   886,   887,   888,   889,   890,   891,   894,   897,   900,
   901,   902,   903,   904,   905,   906,   907,   908,   911,   912,
   913,   914,   915,   916,   917,   918,   919,   922,   925,   930,
   931,   935,   936,   940,   944,   945,   949,   953,   957,   964,
   965,   968,   969,   973,   975,   979,   981,   988,   989,   993,
   994,   997,   998,  1002,  1004,  1010,  1012,  1016,  1018,  1022,
  1023,  1026,  1027,  1031,  1032,  1034,  1036,  1040,  1041,  1050,
  1051,  1060,  1061,  1072,  1075,  1076,  1077,  1083,  1091,  1098,
  1107,  1110,  1113,  1116,  1119,  1122,  1125,  1128,  1131,  1134,
  1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,  1147,  1150,
  1151
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","VAR",
"ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","':'","'='","BINOP",
"KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR","'.'","'`'","UMINUS",
"'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'","'#'","root","classes",
"classextensions","classdef","classextension","optname","superclass","classvardecls",
"classvardecl","methods","methoddef","optsemi","optcomma","funcbody","cmdlinecode",
"methbody","primitive","retval","funretval","blocklist1","blocklist","msgsend",
"expr1","valrangex1","valrangeassign","valrangexd","valrange2","expr","adverb",
"exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1","keyarglist1",
"keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral","pushname",
"pushliteral","listliteral","block","funcvardecls","funcvardecls1","funcvardecl",
"argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef","dictslotlist1",
"dictslotlist","rwslotdeflist","rwslotdef","listlit","listlit2","literallistc",
"literallist1","rwspec","integer","floatr","accidental","pie","floatp","name",
"classname","primname","trueobj","falseobj","nilobj","ascii","symbol","string",
"pseudovar","binop","keybinop","binop2", NULL
};
#endif

static const short yyr1[] = {     0,
    51,    51,    51,    52,    52,    53,    53,    54,    54,    55,
    56,    56,    57,    57,    58,    58,    59,    59,    60,    60,
    61,    61,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    66,    66,    67,    67,    68,    68,    69,
    69,    70,    70,    71,    71,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    74,    74,    74,    75,    75,    75,    76,    76,    76,
    76,    76,    76,    77,    77,    77,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    79,    79,    79,    79,    80,    80,    81,    82,    82,    83,
    83,    83,    83,    83,    83,    84,    84,    85,    85,    86,
    86,    87,    88,    88,    89,    89,    90,    90,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    92,    93,    94,
    94,    94,    94,    94,    94,    94,    94,    94,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    96,    96,    97,
    97,    98,    98,    99,   100,   100,   100,   100,   100,   101,
   101,   102,   102,   103,   103,   104,   104,   105,   105,   106,
   106,   107,   107,   108,   108,   109,   109,   110,   110,   111,
   111,   112,   112,   113,   113,   113,   113,   114,   114,   115,
   115,   116,   116,   117,   118,   118,   118,   118,   118,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   129,   129,   129,   129,   129,   129,   129,   130,   131,
   131
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     0,     1,     2,     6,     5,     6,     7,
     7,     6,     8,     7,     4,     1,     1,     1,     1,     3,
     2,     3,     3,     3,     1,     4,     5,     5,     4,     4,
     1,     5,     5,     6,     7,     7,     8,     6,     6,     7,
     8,     8,     9,     2,     3,     5,     1,     1,     1,     5,
     1,     2,     4,     3,     4,     5,     7,     4,     6,     7,
     0,     2,     2,     4,     1,     3,     2,     0,     2,     1,
     3,     2,     3,     4,     5,     1,     3,     2,     4,     1,
     3,     2,     0,     2,     1,     3,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     5,     0,
     2,     1,     2,     3,     0,     3,     5,     3,     5,     0,
     1,     1,     3,     1,     3,     3,     2,     1,     3,     0,
     1,     1,     3,     2,     4,     4,     5,     3,     4,     0,
     2,     1,     3,     0,     1,     1,     1,     1,     2,     1,
     2,     1,     2,     1,     1,     1,     2,     2,     1,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   211,   198,   200,   202,   218,
   219,   217,   212,     0,   216,   214,   215,   220,   204,   165,
     0,     0,   165,   108,   180,     0,     0,     0,    33,     3,
    29,    59,    87,    71,    89,    88,   105,    25,    40,    57,
    58,    56,   138,    40,   162,   148,   140,   205,   206,   209,
   141,   139,    91,   145,   146,   147,   142,   144,   143,    65,
     0,     5,    13,     7,     0,   172,   174,   170,   170,   160,
   199,   201,   203,   210,   180,    92,   160,   229,   110,     0,
    27,     0,     0,     0,     0,    40,   178,   181,     0,     0,
    25,    61,   190,     0,   125,   127,     0,     0,   221,   225,
   223,   224,   226,   227,   228,   222,     0,   230,   231,   101,
    26,   107,    30,    32,   163,   208,   207,     0,     0,    46,
    42,   108,     0,    19,     0,    11,     0,   164,     0,     0,
     0,   171,     0,   171,    40,    40,     0,    62,    28,   109,
   112,    84,    63,     0,     0,     0,    60,     0,     0,    64,
   177,    26,    41,     0,   190,   192,   157,     0,    27,   149,
   150,     0,   154,   155,   156,   151,   153,   152,     0,     0,
     0,   190,     0,   116,     0,     0,     0,    44,     0,     0,
   106,    94,     0,   123,   123,    43,     0,   123,   123,     0,
   120,     0,     0,    14,     0,    12,    15,   173,     0,   175,
   137,   129,   130,   134,   135,   136,   131,   133,   132,     0,
   166,     0,   168,     0,   161,     0,   111,   113,     0,    85,
   176,     0,    31,     0,   179,    95,     0,   186,    28,   191,
   190,    98,   126,   128,     0,     0,     0,    70,     0,     0,
     0,   123,   123,     0,     0,     0,    45,    55,     0,     0,
   103,   102,    93,   118,     0,     0,     0,     0,    69,     0,
     0,     0,    66,   122,   226,    10,    20,     0,     0,    13,
    19,     0,     0,   159,   158,     0,   114,     0,   188,   193,
     0,   187,    73,    72,     0,     0,   117,     0,     0,    90,
     0,     0,    44,    96,   123,   123,     0,     0,     0,   124,
    44,    48,    67,    68,   121,     0,     0,   165,   165,     0,
   194,   194,    16,     0,   167,   169,   115,    86,   189,     0,
     0,    74,    99,    79,    78,     0,     0,    44,    52,    49,
     0,     0,    44,   104,   119,     0,    47,   165,   165,   160,
   160,    15,   195,   197,   196,     0,   182,     0,     0,     8,
    76,    75,     0,     0,     0,    80,   100,    51,    44,    54,
    50,    97,   160,   160,    36,    36,    19,    18,   194,   184,
    17,    77,    82,    81,     0,    53,    36,    36,   213,    38,
    25,    38,     0,   183,     0,    83,    38,    38,     0,     0,
    34,    38,    37,     0,     9,   185,     0,     0,    25,    21,
    35,    23,    22,    24,    39,     0,     0,     0
};

static const short yydefgoto[] = {   406,
     3,     4,    62,     5,   195,   127,   271,   313,   193,   267,
   112,   140,    29,    30,   390,   380,   391,    31,   247,   248,
    32,    33,    34,    35,    36,    84,    37,   180,    38,   174,
    80,    81,   175,   185,   300,   191,   256,    94,    95,   200,
    40,    41,    42,   156,    43,   135,    44,   215,    70,   131,
    65,    66,    87,    88,    89,   346,   347,    46,   157,   158,
   159,   348,    47,    48,    49,    50,    51,    52,    53,   381,
    54,    55,    56,    57,    58,    59,    60,   108,   109,   110
};

static const short yypact[] = {    81,
   433,    11,    11,    19,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    61,-32768,-32768,-32768,-32768,-32768,    -5,
   215,  1009,    -5,   673,   385,  1009,    61,     9,-32768,-32768,
-32768,-32768,    48,-32768,-32768,-32768,  1086,    34,    76,-32768,
-32768,-32768,-32768,   481,-32768,-32768,    87,    87,-32768,-32768,
-32768,   177,    85,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    90,-32768,    -8,-32768,   140,-32768,   110,    61,    61,-32768,
-32768,-32768,-32768,-32768,   529,-32768,-32768,-32768,   120,   113,
   114,  1009,  1009,   143,   167,   481,-32768,   151,   158,  1009,
  1113,   183,  1083,   197,    -3,-32768,   189,   721,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    37,-32768,-32768,   198,
  1009,-32768,-32768,-32768,-32768,-32768,-32768,  1009,   769,    44,
-32768,   673,   577,-32768,    11,    61,   207,-32768,    61,  1056,
   236,   171,   240,    24,   481,   481,  1009,-32768,   673,-32768,
-32768,-32768,-32768,  1009,  1009,  1009,-32768,   226,   673,-32768,
-32768,-32768,-32768,  1009,  1083,-32768,-32768,   244,   234,    87,
-32768,   249,-32768,-32768,-32768,-32768,-32768,-32768,  1009,    61,
    61,  1083,  1009,-32768,   149,   817,   577,   205,     6,  1009,
  1086,  1086,  1009,   237,   252,-32768,   256,   237,   252,    78,
-32768,  1009,   231,-32768,   257,-32768,-32768,-32768,     2,-32768,
-32768,    87,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    61,
-32768,    61,-32768,   261,-32768,   263,-32768,   281,  1009,-32768,
-32768,   288,-32768,   285,-32768,  1086,   272,-32768,  1083,-32768,
  1083,  1086,-32768,-32768,   279,   282,   865,   297,  1009,  1009,
   168,   237,   252,   156,  1009,   577,    44,-32768,   322,  1009,
-32768,-32768,   291,-32768,   625,   286,   300,   295,-32768,   304,
   305,   300,-32768,-32768,  1049,-32768,-32768,   292,   315,   327,
   230,   312,   323,-32768,-32768,  1009,-32768,  1009,-32768,-32768,
   314,-32768,   337,   338,   324,  1009,-32768,   325,   913,   342,
   326,   328,    44,  1086,   237,   252,   203,   329,  1009,   332,
   206,-32768,-32768,-32768,-32768,   331,   340,    -5,    -5,   343,
   238,   238,-32768,   313,-32768,-32768,-32768,-32768,-32768,  1009,
  1009,   345,  1086,   351,   355,   341,  1009,    44,-32768,-32768,
   348,   352,    44,-32768,-32768,  1009,-32768,    -5,    -5,-32768,
-32768,-32768,-32768,-32768,-32768,   239,-32768,    61,   241,-32768,
  1086,  1086,  1009,  1009,  1009,   358,  1086,-32768,    44,-32768,
-32768,  1086,-32768,-32768,   268,   268,   230,-32768,   238,   371,
-32768,  1086,  1086,  1086,  1009,-32768,   268,   268,-32768,   961,
   356,   961,  1099,-32768,  1056,  1086,   961,   961,  1009,   364,
-32768,   361,-32768,   369,-32768,-32768,   370,   372,  1113,-32768,
-32768,-32768,-32768,-32768,-32768,   412,   416,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   413,-32768,   148,    77,-32768,  -265,-32768,
   -89,   262,     5,-32768,  -322,  -320,    28,   383,   374,  -181,
-32768,-32768,-32768,-32768,-32768,-32768,   -15,-32768,-32768,    -1,
   302,-32768,   -78,  -104,   -91,   166,    -2,-32768,-32768,    45,
   -25,-32768,-32768,   200,-32768,   -27,   407,    36,   -19,   377,
   227,   318,   284,-32768,-32768,   131,    79,  -127,-32768,  -139,
-32768,-32768,   -68,-32768,-32768,     0,   -67,   -13,    26,-32768,
   -62,   -58,   -55,   -54,   -23,   -22,-32768,  -188,   104,-32768
};


#define	YYLAST		1157


static const short yytable[] = {    39,
    67,   153,   201,    77,   269,   314,    76,    68,     6,     7,
    91,     6,    13,    92,    96,   227,   170,   125,   189,    13,
    74,    13,    79,    85,   160,   161,   121,    61,    63,    69,
   163,   190,   235,   126,   164,   249,    45,   165,   166,     6,
   184,   171,    39,    93,   188,   382,   116,   117,   114,   136,
    93,   250,     2,    97,    67,    67,   387,   388,   213,   394,
    45,   202,   203,     6,   397,   398,    20,   204,   129,   167,
   168,   205,   243,    85,   206,   207,   307,   111,   176,   115,
   141,   142,   177,    23,    39,   244,   160,   161,   151,    98,
   148,   281,   163,   178,   186,   181,   164,   241,   242,   165,
   166,   383,   182,   160,   161,     1,   208,   209,    19,   163,
   251,   330,   196,   164,     2,    67,   165,   166,   162,   337,
    79,   115,   262,    26,   263,   269,   122,    82,    90,   124,
   123,   167,   168,    39,    39,   217,   130,   218,   226,   214,
   216,   296,   220,   221,   222,   137,   358,   224,   167,   168,
   194,   361,   121,   232,   297,   138,   233,   234,   139,   116,
   160,   161,   160,   161,   253,   252,   163,   295,   163,   237,
   164,   236,   164,   165,   166,   165,   166,   376,    90,   268,
   162,   254,   258,   128,   129,   260,   261,   144,   289,   143,
   264,   238,   145,   239,   269,   149,   272,   162,   273,    20,
   262,   116,   293,   118,   150,   167,   168,   167,   168,   154,
   290,   146,   239,   147,   211,   129,    23,   277,    71,    72,
    73,   186,   119,   169,    97,    82,   192,    20,    20,   294,
   172,   245,   336,     6,   179,   285,    19,   287,   288,   291,
   292,   311,   219,   312,    23,    23,   197,   262,   298,   333,
   246,   306,    90,   287,   162,   210,   162,   201,    99,   212,
   100,   101,   102,   265,   104,   105,   106,   121,   343,   344,
   323,   266,   223,   345,   317,   121,   318,   379,   229,    14,
   192,   255,   368,   369,   371,   369,   228,   326,   340,   341,
   231,   393,   331,   332,   132,   134,   257,   335,   259,   270,
   268,   274,   121,   275,   351,   352,   276,   121,   278,   405,
   145,   357,   365,   366,   279,     6,   202,   203,   363,   364,
   362,   282,   204,   286,   283,    71,   205,   107,    78,   206,
   207,   308,   301,   121,   370,   377,   378,   372,   373,   374,
    99,   302,   100,   101,   102,   265,   104,   105,   106,   192,
   303,   304,   125,   350,   309,   315,   319,   316,   192,   386,
   192,   208,   209,   320,   321,   192,   322,   324,   327,   268,
   338,   353,   328,   399,   329,   334,   262,   354,   392,   339,
   392,   355,   342,   356,   375,   392,   392,     6,     7,     8,
     9,    10,    11,    12,   359,    13,    14,   385,   360,   152,
    15,    16,    17,    18,   400,    83,    19,    20,   389,   402,
   403,   407,   404,    78,    21,   408,    64,   310,   367,   401,
   230,   113,    22,   187,    23,   120,    24,   305,   280,   396,
    75,    86,   225,    27,    28,     6,     7,     8,     9,    10,
    11,    12,   349,    13,    14,   133,   198,   384,    15,    16,
    17,    18,     0,     0,    19,    20,     0,     0,     0,     0,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
    22,     0,    23,     0,    24,     0,     0,     0,    25,     0,
    26,    27,    28,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,    15,    16,    17,    18,
     0,     0,    19,    20,     0,     0,     0,     0,     0,     0,
    21,     0,     0,     0,     0,     0,     0,     0,    22,     0,
    23,     0,    24,     0,     0,     0,    75,     0,    26,    27,
    28,     6,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,    15,    16,    17,    18,     0,    83,
    19,    20,     0,     0,     0,     0,     0,    78,    21,     0,
     0,     0,     0,     0,     0,     0,    22,     0,    23,     0,
    24,     0,     0,     0,    75,     0,     0,    27,    28,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,     0,     0,    19,    20,
     0,     0,     0,     0,     0,    78,    21,     0,     0,   183,
     0,     0,     0,     0,    22,     0,    23,     0,    24,     0,
     0,     0,    75,     0,     0,    27,    28,     6,     7,     8,
     9,    10,    11,    12,     0,    13,     0,     0,     0,     0,
    15,    16,    17,    18,     0,     0,    19,    20,     0,     0,
     0,     0,     0,    78,    21,     0,     0,   299,     0,     0,
     0,     0,    22,     0,    23,     0,    24,     0,     0,     0,
    75,     0,     0,    27,    28,     6,     7,     8,     9,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,    16,
    17,    18,     0,     0,    19,    20,     0,     0,     0,     0,
     0,    78,    21,     0,     0,     0,     0,     0,     0,     0,
    22,     0,    23,     0,    24,     0,     0,     0,    75,     0,
     0,    27,    28,     6,     7,     8,     9,    10,    11,    12,
     0,    13,     0,     0,     0,     0,    15,    16,    17,    18,
     0,   173,    19,    20,     0,     0,     0,     0,     0,     0,
    21,     0,     0,     0,     0,     0,     0,     0,    22,     0,
    23,     0,    24,     0,     0,     0,    75,     0,     0,    27,
    28,     6,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,    15,    16,    17,    18,     0,     0,
    19,    20,     0,     0,     0,     0,     0,     0,    21,     0,
     0,   183,     0,     0,     0,     0,    22,     0,    23,     0,
    24,     0,     0,     0,    75,     0,     0,    27,    28,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,     0,
     0,     0,    15,    16,    17,    18,     0,   240,    19,    20,
     0,     0,     0,     0,     0,     0,    21,     0,     0,     0,
     0,     0,     0,     0,    22,     0,    23,     0,    24,     0,
     0,     0,    75,     0,     0,    27,    28,     6,     7,     8,
     9,    10,    11,    12,     0,    13,     0,     0,     0,     0,
    15,    16,    17,    18,     0,     0,    19,    20,     0,     0,
     0,     0,     0,     0,    21,     0,     0,     0,     0,     0,
     0,     0,    22,     0,    23,     0,    24,   284,     0,     0,
    75,     0,     0,    27,    28,     6,     7,     8,     9,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,    16,
    17,    18,     0,     0,    19,    20,     0,     0,     0,     0,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
    22,     0,    23,     0,    24,   325,     0,     0,    75,     0,
     0,    27,    28,     6,     7,     8,     9,    10,    11,    12,
     0,    13,     0,     0,     0,     0,    15,    16,    17,    18,
     0,     0,    19,    20,     0,     0,     0,     0,     0,     0,
    21,     0,     0,     0,     0,     0,     0,     0,    22,     0,
    23,     0,    24,     0,     0,     0,    75,     0,   389,    27,
    28,     6,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,    15,    16,    17,    18,     0,     0,
    19,    20,     0,     0,     0,     0,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,    22,     0,    23,     0,
    24,     6,     0,     0,    75,     0,     0,    27,    28,     7,
     8,     9,    10,    11,    12,     0,     0,     0,     0,     0,
     0,    15,    16,    17,     0,     0,    99,    19,   100,   101,
   102,   103,   104,   105,   106,    21,     7,     8,     9,    10,
    11,    12,     0,    13,     0,     0,     0,     0,    15,    16,
    17,     6,     0,     0,    19,   199,     0,     0,     0,     0,
     0,     0,    21,    99,    78,   100,   101,   102,   103,   104,
   105,   106,   107,     0,   155,     0,    99,     0,   100,   101,
   102,   265,   104,   105,   106,     0,     0,     0,     0,   395,
    99,    78,   100,   101,   102,   103,   104,   105,   106,   107,
     0,     0,     0,     0,     0,     0,   152
};

static const short yycheck[] = {     1,
    14,    91,   130,    23,   193,   271,    22,    13,     3,     4,
    26,     3,    11,    27,    28,   155,    20,    26,   123,    11,
    21,    11,    24,    25,    93,    93,    52,     2,     3,    35,
    93,   123,   172,    42,    93,    30,     1,    93,    93,     3,
   119,    45,    44,    42,   123,   366,    47,    48,    44,    77,
    42,    46,    34,    28,    68,    69,   377,   378,    35,   382,
    25,   130,   130,     3,   387,   388,    23,   130,    45,    93,
    93,   130,   177,    75,   130,   130,   265,    44,    42,    44,
    82,    83,    46,    40,    86,   177,   155,   155,    90,    42,
    86,   231,   155,   107,   120,   111,   155,   176,   177,   155,
   155,   367,   118,   172,   172,    25,   130,   130,    22,   172,
   179,   293,   126,   172,    34,   129,   172,   172,    93,   301,
   122,    86,    45,    48,    47,   314,    42,    24,    25,    40,
    46,   155,   155,   135,   136,   137,    27,   139,   154,   135,
   136,   246,   144,   145,   146,    26,   328,   149,   172,   172,
   125,   333,   178,   169,   246,    43,   170,   171,    45,   160,
   229,   229,   231,   231,   180,   179,   229,   246,   231,    21,
   229,   173,   231,   229,   229,   231,   231,   359,    75,   193,
   155,   183,   185,    44,    45,   188,   189,    21,    21,    47,
   192,    43,    26,    45,   383,    45,   210,   172,   212,    23,
    45,   202,    47,    27,    47,   229,   229,   231,   231,    27,
    43,    45,    45,    47,    44,    45,    40,   219,     4,     5,
     6,   247,    46,    27,   199,   122,   123,    23,    23,   245,
    42,    27,    27,     3,    37,   237,    22,   239,   240,   242,
   243,    12,   139,    14,    40,    40,    40,    45,   250,    47,
    46,   265,   149,   255,   229,    20,   231,   385,    28,    20,
    30,    31,    32,    33,    34,    35,    36,   293,    31,    32,
   286,    41,    47,    36,   276,   301,   278,    10,    45,    12,
   177,    45,    44,    45,    44,    45,    43,   289,   308,   309,
    42,   381,   295,   296,    68,    69,    45,   299,    43,    43,
   314,    41,   328,    41,   320,   321,    26,   333,    21,   399,
    26,   327,   340,   341,    43,     3,   385,   385,   338,   339,
   336,    43,   385,    27,    43,     4,   385,    37,    29,   385,
   385,    40,    47,   359,   348,   363,   364,   353,   354,   355,
    28,    47,    30,    31,    32,    33,    34,    35,    36,   246,
    47,    47,    26,    41,    40,    44,    43,    35,   255,   375,
   257,   385,   385,    27,    27,   262,    43,    43,    27,   383,
    40,    27,    47,   389,    47,    47,    45,    27,   380,    40,
   382,    27,    40,    43,    27,   387,   388,     3,     4,     5,
     6,     7,     8,     9,    47,    11,    12,    27,    47,    44,
    16,    17,    18,    19,    41,    21,    22,    23,    48,    41,
    41,     0,    41,    29,    30,     0,     4,   270,   342,   392,
   159,    39,    38,   122,    40,    52,    42,   262,   229,   385,
    46,    25,   149,    49,    50,     3,     4,     5,     6,     7,
     8,     9,   312,    11,    12,    69,   129,   369,    16,    17,
    18,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
    48,    49,    50,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    16,    17,    18,    19,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    48,    49,
    50,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    -1,    21,
    22,    23,    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
    42,    -1,    -1,    -1,    46,    -1,    -1,    49,    50,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,    33,
    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,
    -1,    -1,    46,    -1,    -1,    49,    50,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    -1,    29,    30,    -1,    -1,    33,    -1,    -1,
    -1,    -1,    38,    -1,    40,    -1,    42,    -1,    -1,    -1,
    46,    -1,    -1,    49,    50,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
    18,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
    -1,    49,    50,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
    -1,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    49,
    50,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,
    -1,    33,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
    42,    -1,    -1,    -1,    46,    -1,    -1,    49,    50,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    -1,    21,    22,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    -1,
    -1,    -1,    46,    -1,    -1,    49,    50,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,
    16,    17,    18,    19,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    40,    -1,    42,    43,    -1,    -1,
    46,    -1,    -1,    49,    50,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
    18,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    40,    -1,    42,    43,    -1,    -1,    46,    -1,
    -1,    49,    50,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    48,    49,
    50,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
    42,     3,    -1,    -1,    46,    -1,    -1,    49,    50,     4,
     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
    -1,    16,    17,    18,    -1,    -1,    28,    22,    30,    31,
    32,    33,    34,    35,    36,    30,     4,     5,     6,     7,
     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
    18,     3,    -1,    -1,    22,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    -1,    42,    -1,    28,    -1,    30,    31,
    32,    33,    34,    35,    36,    -1,    -1,    -1,    -1,    41,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    -1,    -1,    -1,    -1,    -1,    -1,    44
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 37 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 39 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 44 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 46 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 51 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 55 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 66 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 71 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 77 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 80 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 82 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 86 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 88 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 91 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 93 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 97 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 100 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 120 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 124 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 126 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 133 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 136 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 138 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 142 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 144 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 150 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 155 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = 0; ;
    break;}
case 46:
#line 165 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 47:
#line 169 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 48:
#line 174 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 49:
#line 192 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 201 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 51:
#line 206 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 52:
#line 219 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 53:
#line 239 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 245 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 55:
#line 263 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 273 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 61:
#line 275 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 62:
#line 285 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 63:
#line 287 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 64:
#line 289 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 65:
#line 291 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 66:
#line 293 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 67:
#line 304 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]), 
					(PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 68:
#line 317 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->varName.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 69:
#line 338 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 70:
#line 340 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 72:
#line 356 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 73:
#line 383 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 74:
#line 401 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 75:
#line 428 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 76:
#line 456 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 77:
#line 475 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 78:
#line 503 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 79:
#line 530 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 80:
#line 548 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 81:
#line 573 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 82:
#line 601 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 83:
#line 620 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 84:
#line 648 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 85:
#line 667 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 86:
#line 684 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 90:
#line 703 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 716 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 92:
#line 718 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 93:
#line 732 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 94:
#line 737 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 95:
#line 741 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 752 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 97:
#line 757 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 98:
#line 767 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 99:
#line 772 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 786 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 801 "lang11d"
{ yyval = 0; ;
    break;}
case 102:
#line 802 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 103:
#line 803 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 104:
#line 804 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 106:
#line 809 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 108:
#line 817 "lang11d"
{ yyval = 0; ;
    break;}
case 109:
#line 819 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 111:
#line 824 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 112:
#line 826 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 113:
#line 831 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 114:
#line 833 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 115:
#line 840 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 117:
#line 849 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 118:
#line 853 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 119:
#line 855 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 121:
#line 860 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 122:
#line 864 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 123:
#line 867 "lang11d"
{ yyval = 0; ;
    break;}
case 124:
#line 868 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 125:
#line 872 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 126:
#line 874 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 128:
#line 879 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 129:
#line 883 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 130:
#line 884 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 131:
#line 885 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 132:
#line 886 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 133:
#line 887 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 888 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 889 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 136:
#line 890 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 137:
#line 891 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 138:
#line 894 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 139:
#line 897 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 140:
#line 900 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 141:
#line 901 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 142:
#line 902 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 143:
#line 903 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 144:
#line 904 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 145:
#line 905 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 146:
#line 906 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 147:
#line 907 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 148:
#line 908 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 149:
#line 911 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 150:
#line 912 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 151:
#line 913 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 152:
#line 914 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 915 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 916 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 917 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 918 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 919 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 158:
#line 923 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 159:
#line 926 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 160:
#line 930 "lang11d"
{ yyval = 0; ;
    break;}
case 161:
#line 932 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 163:
#line 937 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 164:
#line 941 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 165:
#line 944 "lang11d"
{ yyval = 0; ;
    break;}
case 166:
#line 946 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 167:
#line 950 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 168:
#line 954 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 169:
#line 958 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 170:
#line 964 "lang11d"
{ yyval = 0; ;
    break;}
case 173:
#line 970 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 174:
#line 974 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 175:
#line 976 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 176:
#line 980 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 177:
#line 982 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 179:
#line 990 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 180:
#line 993 "lang11d"
{ yyval = 0; ;
    break;}
case 183:
#line 999 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 184:
#line 1003 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 185:
#line 1005 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 186:
#line 1011 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 187:
#line 1013 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 188:
#line 1017 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 189:
#line 1019 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 190:
#line 1022 "lang11d"
{ yyval = 0; ;
    break;}
case 193:
#line 1028 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 194:
#line 1031 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 195:
#line 1033 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 196:
#line 1035 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 197:
#line 1037 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 198:
#line 1040 "lang11d"
{ yyval = zzval; ;
    break;}
case 199:
#line 1042 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.ui = -node->slot.ui;
				yyval = zzval;
			;
    break;}
case 200:
#line 1050 "lang11d"
{ yyval = zzval; ;
    break;}
case 201:
#line 1052 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -node->slot.uf;
				yyval = zzval;
			;
    break;}
case 202:
#line 1060 "lang11d"
{ yyval = zzval; ;
    break;}
case 203:
#line 1062 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->slot.uf + 0.5);
					fracval = node->slot.uf - intval;
					node->slot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 204:
#line 1072 "lang11d"
{ yyval = zzval; ;
    break;}
case 207:
#line 1078 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->slot.uf *= pi;
			;
    break;}
case 208:
#line 1084 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->slot.ui;
				node->slot.uf = ival * pi;
			;
    break;}
case 209:
#line 1092 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = pi;
				yyval = zzval;
			;
    break;}
case 210:
#line 1099 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->slot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 211:
#line 1107 "lang11d"
{ yyval = zzval; ;
    break;}
case 212:
#line 1110 "lang11d"
{ yyval = zzval; ;
    break;}
case 213:
#line 1113 "lang11d"
{ yyval = zzval; ;
    break;}
case 214:
#line 1116 "lang11d"
{ yyval = zzval; ;
    break;}
case 215:
#line 1119 "lang11d"
{ yyval = zzval; ;
    break;}
case 216:
#line 1122 "lang11d"
{ yyval = zzval; ;
    break;}
case 217:
#line 1125 "lang11d"
{ yyval = zzval; ;
    break;}
case 218:
#line 1128 "lang11d"
{ yyval = zzval; ;
    break;}
case 219:
#line 1131 "lang11d"
{ yyval = zzval; ;
    break;}
case 220:
#line 1134 "lang11d"
{ yyval = zzval; ;
    break;}
case 221:
#line 1137 "lang11d"
{ yyval = zzval; ;
    break;}
case 222:
#line 1138 "lang11d"
{ yyval = zzval; ;
    break;}
case 223:
#line 1139 "lang11d"
{ yyval = zzval; ;
    break;}
case 224:
#line 1140 "lang11d"
{ yyval = zzval; ;
    break;}
case 225:
#line 1141 "lang11d"
{ yyval = zzval; ;
    break;}
case 226:
#line 1142 "lang11d"
{ yyval = zzval; ;
    break;}
case 227:
#line 1143 "lang11d"
{ yyval = zzval; ;
    break;}
case 228:
#line 1144 "lang11d"
{ yyval = zzval; ;
    break;}
case 229:
#line 1147 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1154 "lang11d"
