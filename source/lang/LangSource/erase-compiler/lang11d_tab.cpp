
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BEGINGENERATOR	281
#define	LEFTARROW	282
#define	WHILE	283
#define	BINOP	284
#define	KEYBINOP	285
#define	READWRITEVAR	286
#define	UMINUS	287

#line 16 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		483
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 287 ? yytranslate[x] : 149)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    54,     2,     2,     2,     2,    50,
    51,    37,    38,    49,    34,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,    48,    35,
    31,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    46,     2,    47,    52,     2,    42,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    39,    45,    53,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    32,    33,    40,    43
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    59,
    62,    70,    79,    87,    96,    97,    99,   100,   102,   104,
   107,   112,   115,   117,   119,   122,   123,   126,   127,   131,
   132,   136,   138,   141,   143,   145,   146,   148,   151,   158,
   164,   169,   172,   178,   185,   191,   198,   206,   214,   221,
   230,   238,   243,   244,   252,   253,   261,   262,   265,   270,
   276,   282,   285,   290,   295,   297,   299,   301,   303,   305,
   307,   311,   314,   318,   322,   327,   331,   333,   338,   340,
   346,   352,   359,   367,   375,   384,   391,   398,   406,   415,
   424,   434,   437,   441,   447,   450,   453,   457,   462,   468,
   470,   472,   474,   476,   482,   485,   490,   494,   499,   505,
   513,   518,   525,   533,   534,   537,   540,   545,   547,   551,
   554,   555,   558,   560,   564,   567,   571,   576,   582,   584,
   588,   591,   596,   598,   602,   605,   606,   609,   611,   615,
   617,   621,   623,   625,   627,   629,   631,   633,   635,   637,
   639,   641,   643,   645,   647,   649,   651,   653,   655,   657,
   659,   661,   663,   665,   667,   669,   671,   673,   675,   677,
   679,   681,   683,   685,   691,   697,   698,   701,   703,   706,
   710,   711,   715,   721,   725,   731,   732,   734,   736,   740,
   742,   746,   750,   753,   755,   759,   760,   762,   764,   768,
   771,   776,   781,   785,   789,   792,   794,   798,   799,   801,
   806,   812,   816,   821,   822,   825,   827,   831,   832,   834,
   836,   838,   840,   843,   845,   848,   850,   853,   855,   857,
   859,   862,   865,   867,   870,   872,   874,   876,   878,   880,
   882,   884,   886,   888,   890,   892,   894,   896,   898,   900,
   902,   904,   906,   908,   910,   912,   914
};

static const short yyrhs[] = {    56,
     0,    57,     0,    26,    69,     0,     0,    56,    58,     0,
    59,     0,    57,    59,     0,   136,    61,    44,    62,    64,
    45,     0,   136,    46,    60,    47,    61,    44,    62,    64,
    45,     0,    38,   136,    44,    64,    45,     0,     0,   135,
     0,     0,    30,   136,     0,     0,    62,    63,     0,    15,
   118,    48,     0,    13,   118,    48,     0,     0,    64,    65,
     0,   135,    44,   111,   108,    71,    70,    45,     0,    37,
   135,    44,   111,   108,    71,    70,    45,     0,   145,    44,
   111,   108,    71,    70,    45,     0,    37,   145,    44,   111,
   108,    71,    70,    45,     0,     0,    48,     0,     0,    49,
     0,    73,     0,    92,    73,     0,    50,   109,    68,    51,
     0,   109,    68,     0,    68,     0,    72,     0,    92,    72,
     0,     0,   137,    66,     0,     0,    52,    89,    66,     0,
     0,    52,    89,    66,     0,    75,     0,    74,    75,     0,
   103,     0,    78,     0,     0,    74,     0,   135,    74,     0,
   135,    50,    95,    99,    51,    76,     0,   135,    50,    96,
    99,    51,     0,   136,    46,    93,    47,     0,   136,    74,
     0,   136,    50,    97,    51,    76,     0,   136,    50,    95,
    99,    51,    76,     0,   136,    50,    96,    99,    51,     0,
    89,    41,    50,    97,    51,    76,     0,    89,    41,   135,
    50,    97,    51,    76,     0,    89,    41,    50,    95,    99,
    51,    76,     0,    89,    41,    50,    96,    99,    51,     0,
    89,    41,   135,    50,    95,    99,    51,    76,     0,    89,
    41,   135,    50,    96,    99,    51,     0,    89,    41,   135,
    76,     0,     0,    44,    30,    92,    79,    49,    82,    45,
     0,     0,    44,    48,    92,    80,    49,    82,    45,     0,
     0,    49,    82,     0,   135,    28,    92,    81,     0,   135,
   135,    28,    92,    81,     0,    13,   135,    31,    92,    81,
     0,    92,    81,     0,    30,    30,    92,    81,     0,    30,
    29,    92,    81,     0,   105,     0,   103,     0,    78,     0,
   104,     0,   148,     0,    77,     0,    50,    92,    51,     0,
    53,   135,     0,    46,    93,    47,     0,    50,    87,    51,
     0,    50,    30,    88,    51,     0,    50,   117,    51,     0,
   144,     0,    83,    46,    95,    47,     0,    84,     0,    83,
    46,    95,    22,    47,     0,    83,    46,    22,    92,    47,
     0,    83,    46,    95,    22,    92,    47,     0,    83,    46,
    95,    22,    47,    31,    89,     0,    83,    46,    22,    92,
    47,    31,    89,     0,    83,    46,    95,    22,    92,    47,
    31,    89,     0,    89,    41,    46,    95,    22,    47,     0,
    89,    41,    46,    22,    92,    47,     0,    89,    41,    46,
    95,    22,    92,    47,     0,    89,    41,    46,    95,    22,
    47,    31,    89,     0,    89,    41,    46,    22,    92,    47,
    31,    89,     0,    89,    41,    46,    95,    22,    92,    47,
    31,    89,     0,    22,    92,     0,    92,    22,    92,     0,
    92,    49,    92,    22,    92,     0,    22,    92,     0,    92,
    22,     0,    92,    22,    92,     0,    92,    49,    92,    22,
     0,    92,    49,    92,    22,    92,     0,    83,     0,    86,
     0,    85,     0,   136,     0,    89,    41,    46,    95,    47,
     0,    42,    89,     0,    89,   147,    90,    89,     0,   135,
    31,    89,     0,    53,   135,    31,    89,     0,    89,    41,
   135,    31,    89,     0,   135,    50,    95,    99,    51,    31,
    89,     0,    54,   100,    31,    89,     0,    83,    46,    95,
    47,    31,    89,     0,    89,    41,    46,    95,    47,    31,
    89,     0,     0,    41,   135,     0,    41,   130,     0,    41,
    50,    92,    51,     0,    89,     0,    91,    48,    89,     0,
    91,    66,     0,     0,    94,    67,     0,    92,     0,    92,
    30,    92,     0,   146,    92,     0,    94,    49,    92,     0,
    94,    49,   146,    92,     0,    94,    49,    92,    30,    92,
     0,    92,     0,    95,    49,    92,     0,    37,    92,     0,
    95,    49,    37,    92,     0,    98,     0,    97,    49,    98,
     0,   146,    92,     0,     0,    49,    97,     0,   101,     0,
   101,    21,   135,     0,   135,     0,   101,    49,   135,     0,
   130,     0,   134,     0,   141,     0,   143,     0,   142,     0,
   138,     0,   139,     0,   140,     0,   125,     0,   120,     0,
   107,     0,   135,     0,   130,     0,   134,     0,   141,     0,
   143,     0,   142,     0,   138,     0,   139,     0,   140,     0,
   125,     0,   120,     0,   130,     0,   134,     0,   141,     0,
   143,     0,   142,     0,   138,     0,   139,     0,   140,     0,
   126,     0,   121,     0,    44,   111,   108,    68,    45,     0,
    24,   111,   108,    68,    45,     0,     0,   108,   110,     0,
   110,     0,   109,   110,     0,    13,   113,    48,     0,     0,
    14,   113,    48,     0,    14,   112,    21,   135,    48,     0,
    39,   113,    39,     0,    39,   112,    21,   135,    39,     0,
     0,   113,     0,   114,     0,   113,    49,   114,     0,   135,
     0,   135,    31,   102,     0,    92,    30,    92,     0,   146,
    92,     0,   115,     0,   116,    49,   115,     0,     0,   116,
     0,   119,     0,   118,    49,   119,     0,   129,   135,     0,
   129,   135,    31,   102,     0,    54,    50,   124,    51,     0,
    50,   124,    51,     0,   106,    30,   106,     0,   146,   106,
     0,   122,     0,   123,    49,   122,     0,     0,   123,     0,
    54,    46,   127,    47,     0,    54,   136,    46,   127,    47,
     0,    46,   127,    47,     0,   136,    46,   127,    47,     0,
     0,   128,    67,     0,   106,     0,   128,    49,   106,     0,
     0,    35,     0,    40,     0,    36,     0,     4,     0,    34,
     4,     0,     5,     0,    34,     5,     0,     6,     0,    34,
     6,     0,    23,     0,   131,     0,   132,     0,   131,   133,
     0,   130,   133,     0,   133,     0,    34,   133,     0,     3,
     0,    29,     0,    11,     0,    10,     0,    18,     0,    19,
     0,    17,     0,     9,     0,     7,     0,     8,     0,    20,
     0,    32,     0,    40,     0,    35,     0,    36,     0,    34,
     0,    37,     0,    38,     0,    39,     0,    33,     0,   145,
     0,   146,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    40,    42,    44,    48,    49,    53,    54,    58,    62,    69,
    75,    76,    79,    80,    84,    85,    89,    91,    95,    96,
   100,   103,   106,   109,   114,   115,   118,   119,   122,   123,
   127,   129,   131,   135,   136,   140,   141,   145,   147,   151,
   153,   157,   158,   164,   165,   168,   169,   172,   176,   181,
   199,   201,   212,   223,   236,   257,   266,   271,   284,   304,
   310,   328,   334,   334,   344,   344,   350,   372,   376,   410,
   448,   462,   473,   477,   502,   503,   504,   505,   506,   507,
   508,   510,   520,   522,   524,   526,   528,   530,   543,   546,
   573,   591,   618,   646,   665,   693,   720,   738,   763,   791,
   810,   838,   857,   874,   890,   909,   927,   944,   960,   976,
   977,   978,   979,   980,   993,  1007,  1012,  1016,  1027,  1032,
  1042,  1047,  1061,  1077,  1078,  1079,  1080,  1083,  1084,  1090,
  1093,  1094,  1098,  1099,  1101,  1106,  1108,  1115,  1123,  1124,
  1128,  1130,  1134,  1135,  1139,  1143,  1144,  1147,  1149,  1153,
  1154,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,
  1168,  1171,  1174,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1189,  1190,  1191,  1192,  1193,  1194,  1195,
  1196,  1197,  1198,  1201,  1204,  1209,  1210,  1214,  1215,  1219,
  1223,  1224,  1228,  1232,  1236,  1243,  1244,  1247,  1248,  1252,
  1254,  1258,  1260,  1267,  1268,  1272,  1273,  1276,  1277,  1281,
  1283,  1287,  1291,  1295,  1297,  1304,  1305,  1309,  1310,  1315,
  1317,  1321,  1323,  1327,  1328,  1331,  1332,  1336,  1337,  1339,
  1341,  1345,  1346,  1355,  1356,  1365,  1366,  1377,  1380,  1381,
  1382,  1388,  1396,  1403,  1412,  1413,  1416,  1419,  1422,  1425,
  1428,  1431,  1434,  1437,  1440,  1443,  1444,  1445,  1446,  1447,
  1448,  1449,  1450,  1453,  1456,  1457,  1460
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","BEGINGENERATOR","LEFTARROW",
"WHILE","':'","'='","BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR",
"'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'",
"'#'","root","classes","classextensions","classdef","classextension","optname",
"superclass","classvardecls","classvardecl","methods","methoddef","optsemi",
"optcomma","funcbody","cmdlinecode","methbody","primitive","retval","funretval",
"blocklist1","blocklistitem","blocklist","msgsend","generator","@1","@2","nextqual",
"qual","expr1","valrangex1","valrangeassign","valrangexd","valrange2","valrange3",
"expr","adverb","exprn","exprseq","arrayelems","arrayelems1","arglist1","arglistv1",
"keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral","blockliteral",
"pushname","pushliteral","listliteral","block","funcvardecls","funcvardecls1",
"funcvardecl","argdecls","slotdeflist0","slotdeflist","slotdef","dictslotdef",
"dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef","dictlit","dictlit2",
"litdictslotdef","litdictslotlist1","litdictslotlist","listlit","listlit2","literallistc",
"literallist1","rwspec","integer","floatr","accidental","pie","floatp","name",
"classname","primname","trueobj","falseobj","nilobj","ascii","symbol","string",
"pseudovar","binop","keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    55,    55,    55,    56,    56,    57,    57,    58,    58,    59,
    60,    60,    61,    61,    62,    62,    63,    63,    64,    64,
    65,    65,    65,    65,    66,    66,    67,    67,    68,    68,
    69,    69,    69,    70,    70,    71,    71,    72,    72,    73,
    73,    74,    74,    75,    75,    76,    76,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    79,    78,    80,    78,    81,    81,    82,    82,
    82,    82,    82,    82,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    84,
    84,    84,    85,    85,    85,    86,    86,    86,    86,    86,
    86,    87,    87,    87,    88,    88,    88,    88,    88,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    90,    90,    90,    90,    91,    91,    92,
    93,    93,    94,    94,    94,    94,    94,    94,    95,    95,
    96,    96,    97,    97,    98,    99,    99,   100,   100,   101,
   101,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   103,   104,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   107,   107,   108,   108,   109,   109,   110,
   111,   111,   111,   111,   111,   112,   112,   113,   113,   114,
   114,   115,   115,   116,   116,   117,   117,   118,   118,   119,
   119,   120,   121,   122,   122,   123,   123,   124,   124,   125,
   125,   126,   126,   127,   127,   128,   128,   129,   129,   129,
   129,   130,   130,   131,   131,   132,   132,   133,   134,   134,
   134,   134,   134,   134,   135,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   145,   145,   145,   145,
   145,   145,   145,   146,   147,   147,   148
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     0,     2,
     7,     8,     7,     8,     0,     1,     0,     1,     1,     2,
     4,     2,     1,     1,     2,     0,     2,     0,     3,     0,
     3,     1,     2,     1,     1,     0,     1,     2,     6,     5,
     4,     2,     5,     6,     5,     6,     7,     7,     6,     8,
     7,     4,     0,     7,     0,     7,     0,     2,     4,     5,
     5,     2,     4,     4,     1,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     4,     3,     1,     4,     1,     5,
     5,     6,     7,     7,     8,     6,     6,     7,     8,     8,
     9,     2,     3,     5,     2,     2,     3,     4,     5,     1,
     1,     1,     1,     5,     2,     4,     3,     4,     5,     7,
     4,     6,     7,     0,     2,     2,     4,     1,     3,     2,
     0,     2,     1,     3,     2,     3,     4,     5,     1,     3,
     2,     4,     1,     3,     2,     0,     2,     1,     3,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     5,     5,     0,     2,     1,     2,     3,
     0,     3,     5,     3,     5,     0,     1,     1,     3,     1,
     3,     3,     2,     1,     3,     0,     1,     1,     3,     2,
     4,     4,     3,     3,     2,     1,     3,     0,     1,     4,
     5,     3,     4,     0,     2,     1,     3,     0,     1,     1,
     1,     1,     2,     1,     2,     1,     2,     1,     1,     1,
     2,     2,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    40,     0,     1,     2,     6,   245,   232,   234,   236,   253,
   254,   252,   247,   267,     0,   251,   249,   250,   255,   238,
   191,   246,     0,     0,   191,   131,   206,     0,     0,     0,
    33,     3,    29,    80,    77,   110,    89,   112,   111,   128,
    25,    40,    76,    78,    75,   162,    40,   188,   173,   172,
   164,   239,   240,   243,   165,   163,   113,   169,   170,   171,
   166,   168,   167,    87,    79,     0,     5,    13,     7,     0,
   198,   200,   196,   196,   186,   233,   235,   237,   244,   206,
   115,     0,     0,   186,   264,   133,     0,    27,     0,     0,
     0,     0,     0,    40,   204,   207,     0,     0,    25,    82,
   224,   218,     0,   148,   150,     0,     0,   256,   260,   258,
   259,   261,   262,   263,   257,     0,   265,   266,   124,    26,
   130,    30,    32,   189,   242,   241,     0,     0,    48,    42,
    45,    44,   131,     0,    52,    19,     0,    11,     0,   190,
     0,     0,     0,   197,     0,   197,    40,    63,    65,    40,
     0,    83,    28,   132,   135,   102,     0,     0,     0,    84,
     0,     0,     0,    81,     0,     0,    86,   203,    26,    41,
     0,   224,   218,   226,   183,   182,     0,    27,   174,   175,
     0,   179,   180,   181,   176,   178,   177,     0,   216,   219,
     0,     0,     0,     0,     0,   224,     0,   139,     0,     0,
     0,    46,     0,     0,   129,   117,     0,   146,   146,    43,
     0,   146,   146,     0,   143,     0,     0,    14,     0,    12,
    15,   199,     0,   201,   161,   160,   152,   153,   157,   158,
   159,   154,   156,   155,     0,   192,     0,   194,     0,   187,
     0,     0,     0,   134,   136,     0,   105,    85,   106,     0,
   103,   202,     0,    31,     0,   205,   118,     0,     0,   220,
    28,   225,   224,     0,     0,   212,   215,   121,   149,   151,
     0,     0,     0,    88,     0,     0,     0,   146,   146,     0,
     0,     0,    47,    62,     0,     0,   126,   125,   116,   141,
     0,     0,     0,     0,    51,     0,     0,     0,    46,   145,
   261,    10,    20,     0,     0,    13,    19,     0,     0,   185,
     0,     0,   184,     0,   137,   107,     0,     0,   222,   213,
   227,     0,   214,   217,   221,    91,    90,     0,     0,   140,
     0,     0,   114,     0,     0,    46,   119,   146,   146,     0,
     0,     0,   147,    46,    50,    46,    55,   144,    53,     0,
     0,   191,   191,     0,   228,   228,    16,     0,   193,   195,
     0,     0,     0,    67,   163,     0,   138,   108,   104,   223,
     0,     0,    92,   122,    97,    96,     0,     0,    46,    59,
    56,     0,     0,    46,   127,   142,     0,    49,    54,   191,
   191,   186,   186,    15,   229,   231,   230,     0,   208,     0,
     0,     8,     0,     0,     0,    64,     0,    72,     0,     0,
    66,   109,    94,    93,     0,     0,     0,    98,   123,    58,
    46,    61,    57,   120,   186,   186,    36,    36,    19,    18,
   228,   210,    17,     0,    67,    67,    68,    67,     0,    95,
   100,    99,     0,    60,    36,    36,   248,    38,    25,    38,
     0,   209,     0,    67,    74,    73,    69,    67,   101,    38,
    38,     0,     0,    34,    38,    37,     0,     9,   211,    71,
    70,     0,     0,    25,    21,    35,    23,    22,    24,    39,
     0,     0,     0
};

static const short yydefgoto[] = {   481,
     3,     4,    67,     5,   219,   139,   307,   357,   217,   303,
   121,   154,    31,    32,   463,   448,   464,    33,   283,   130,
   284,    34,    35,   241,   242,   408,   363,    36,    37,    38,
    39,    92,   158,    40,   204,    41,   198,    87,    88,   199,
   209,   343,   215,   292,   103,   104,   224,    43,    44,    45,
   174,    46,   147,    47,   240,    75,   143,    70,    71,    95,
    96,    97,   398,   399,    49,   175,   189,   190,   191,    50,
   176,   177,   178,   400,    51,    52,    53,    54,    55,    56,
    57,   449,    58,    59,    60,    61,    62,    63,    64,   117,
   118,   119,    65
};

static const short yypact[] = {    57,
   611,     8,     8,    -5,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    26,-32768,-32768,-32768,-32768,-32768,
    24,-32768,   248,  1408,    90,   992,   675,  1408,    26,   205,
-32768,-32768,-32768,-32768,-32768,    15,-32768,-32768,-32768,  1536,
   -26,    33,-32768,-32768,-32768,-32768,   784,-32768,-32768,-32768,
    78,    78,-32768,-32768,-32768,    42,   242,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    36,-32768,    38,-32768,    59,
-32768,    85,    26,    26,-32768,-32768,-32768,-32768,-32768,   732,
-32768,  1408,  1408,-32768,-32768,   107,   104,   108,  1408,  1408,
  1044,   122,   207,   784,-32768,   135,   137,  1408,  1519,   164,
  1459,   562,   170,     9,-32768,   165,  1096,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    28,-32768,-32768,   176,  1408,
-32768,-32768,-32768,-32768,-32768,-32768,  1408,  1148,    74,-32768,
-32768,-32768,   992,   836,    74,-32768,     8,    26,   178,-32768,
    26,   501,   220,   115,   223,    23,   784,-32768,-32768,   784,
  1408,-32768,   992,-32768,-32768,-32768,  1408,   196,    22,-32768,
  1408,  1408,  1408,-32768,   211,   992,-32768,-32768,-32768,-32768,
  1408,  1459,   562,-32768,-32768,-32768,   218,   244,    78,-32768,
   261,-32768,-32768,-32768,-32768,-32768,-32768,   239,-32768,   250,
   257,  1459,  1408,    26,    26,  1459,  1408,-32768,   136,  1200,
   836,   226,   140,  1408,  1536,  1536,  1408,   260,   270,-32768,
   274,   260,   270,    91,-32768,  1408,  1452,-32768,   275,-32768,
-32768,-32768,     2,-32768,-32768,-32768,    78,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    26,-32768,    26,-32768,   284,-32768,
   276,   283,   291,-32768,   307,  1408,-32768,-32768,  1408,  1408,
-32768,-32768,   316,-32768,   318,-32768,  1536,   299,   302,-32768,
  1459,-32768,  1459,  1459,   562,-32768,-32768,  1536,-32768,-32768,
   303,   309,  1252,   326,  1408,  1408,   155,   260,   270,   156,
  1408,   836,    74,-32768,   354,  1408,-32768,-32768,   319,-32768,
   888,   311,   336,   322,-32768,   323,   327,   336,    74,-32768,
  1510,-32768,-32768,   335,   339,   367,   269,   359,   345,-32768,
   940,   940,-32768,  1408,-32768,-32768,   387,  1408,-32768,-32768,
-32768,   368,-32768,-32768,-32768,   383,   386,   371,  1408,-32768,
   372,  1304,   389,   370,   373,    74,  1536,   260,   270,   240,
   374,  1408,   378,   237,-32768,    74,-32768,-32768,-32768,   379,
   385,    24,    24,   388,   195,   195,-32768,  1482,-32768,-32768,
    26,   149,   390,   393,    25,   391,-32768,  1408,-32768,-32768,
  1408,  1408,   408,  1536,   413,   415,   401,  1408,    74,-32768,
-32768,   399,   400,    74,-32768,-32768,  1408,-32768,-32768,    24,
    24,-32768,-32768,-32768,-32768,-32768,-32768,   143,-32768,    26,
   253,-32768,   424,  1408,  1408,-32768,   940,-32768,  1408,   436,
-32768,-32768,  1536,  1536,  1408,  1408,  1408,   434,  1536,-32768,
    74,-32768,-32768,  1536,-32768,-32768,   118,   118,   269,-32768,
   195,   435,-32768,  1408,   393,   393,-32768,   393,  1408,  1536,
  1536,  1536,  1408,-32768,   118,   118,-32768,  1356,   419,  1356,
  1496,-32768,   501,   393,-32768,-32768,-32768,   393,  1536,  1356,
  1356,  1408,   423,-32768,   417,-32768,   425,-32768,-32768,-32768,
-32768,   426,   428,  1519,-32768,-32768,-32768,-32768,-32768,-32768,
   474,   475,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   473,-32768,   172,    88,-32768,  -290,-32768,
   -97,   301,   -24,-32768,  -241,  -203,    18,   442,   -47,  -111,
   144,-32768,   -20,-32768,-32768,  -158,  -307,-32768,-32768,-32768,
-32768,-32768,-32768,   -17,-32768,-32768,    -1,   353,-32768,   -89,
  -114,  -107,   189,   -79,-32768,-32768,    39,   -16,-32768,-32768,
   -67,-32768,   -50,   462,    20,   -19,   422,   232,   350,   331,
-32768,-32768,   142,    62,  -139,-32768,   235,-32768,   340,  -138,
-32768,  -164,-32768,-32768,   -37,-32768,-32768,    -9,   -51,   -14,
   410,-32768,   -25,   131,   193,   238,   280,   289,-32768,  -205,
   361,-32768,-32768
};


#define	YYLAST		1577


static const short yytable[] = {    42,
    72,   170,   225,   226,   366,    84,    81,   258,   129,   135,
    99,   305,    13,    79,   100,   105,   358,   210,    13,   213,
    48,   120,   123,   210,    86,    93,   214,     6,     6,   194,
     6,   271,     2,   150,   188,   131,   131,    73,   208,   132,
   132,   125,   126,   249,   212,    42,    48,   101,    21,   180,
   180,   102,   409,    22,    22,   127,    22,   195,    72,    72,
   107,   238,    74,   179,   179,    21,   124,   137,    25,   165,
   250,   141,   127,   200,   128,   182,   182,   201,    93,   136,
   148,   149,     1,   138,    28,    25,   279,   155,   156,   159,
   228,   128,    42,   280,     2,   351,   168,    21,   322,   437,
    20,   202,   205,    73,   227,   188,   140,   141,   131,   206,
   277,   278,   132,   124,   131,   142,   229,    25,   132,    82,
   180,   180,   239,   220,   267,   243,    72,   447,    74,   294,
    15,    86,   296,   297,   179,   179,   151,    83,   451,   298,
   180,   299,     6,     7,   180,    42,   182,   182,    42,   244,
   152,   245,   305,   257,   179,   247,   153,   273,   179,   251,
   252,   253,   236,   141,   255,   287,   182,   339,    22,   125,
   182,   210,   160,   285,   340,   268,   332,   404,   405,   269,
   270,   131,   274,   166,   275,   132,   289,   167,   288,   286,
   430,   431,   338,   321,   171,   272,   323,   188,   334,   335,
   193,   333,   304,   275,   298,   290,   336,     6,   467,   180,
   196,   180,   180,   180,   300,    13,   203,   125,   472,   473,
   308,   221,   309,   179,   450,   179,   179,   179,   161,   395,
   396,   183,   183,    22,   397,   182,   162,   182,   182,   182,
   235,   460,   461,   237,   315,   305,   248,   316,   317,    21,
   101,    76,    77,    78,   102,   163,   281,   164,   382,   383,
    21,   254,   131,   337,   260,    21,   132,   387,   264,    25,
    20,   328,   230,   330,   331,   282,   455,   456,   131,   457,
    25,   355,   132,   356,   341,    25,   350,   133,   298,   330,
   384,   134,   261,   184,   184,   470,   365,   365,   265,   471,
   433,   431,   183,   183,   144,   146,   263,   266,   291,   364,
   364,   374,   367,   225,   226,   131,   369,   129,   293,   132,
   295,   306,   183,   131,   311,   131,   183,   132,   310,   132,
   377,   312,   392,   393,   231,   313,   314,   318,   185,   185,
   386,   427,   428,   304,   131,   319,   403,   162,   132,   325,
   410,   466,   320,   413,   414,   326,   329,    76,   131,   116,
   419,   344,   132,   131,   184,   184,   412,   132,    85,   424,
   425,   426,   345,   346,   445,   446,   480,   347,   352,   232,
   186,   186,   353,   360,   184,   432,    89,    98,   184,   187,
   187,   183,   365,   183,   183,   183,   137,   440,   441,   442,
   131,   228,   435,   436,   132,   364,   359,   438,   368,   185,
   185,    66,    68,   371,   370,   227,   372,   373,   375,   378,
   379,   233,   390,   380,   385,   459,   298,   229,   391,   185,
   234,   394,   454,   185,   406,   411,   304,   458,   415,   106,
    98,   407,   349,   416,   474,   417,   465,   418,   465,   421,
   422,   186,   186,   184,   434,   184,   184,   184,   465,   465,
   187,   187,   192,   439,   443,   453,   169,   475,   462,   477,
   478,   186,   479,   482,   483,   186,    69,   354,   262,   381,
   187,   429,   476,   122,   187,   211,   348,   388,    94,   389,
   222,   469,   452,    89,   216,   145,   256,   401,   185,   324,
   185,   185,   185,     0,     7,     8,     9,    10,    11,    12,
   181,   181,   259,   246,     0,     0,     0,    16,    17,    18,
     0,     0,   420,    20,     0,     0,    98,   423,     0,     0,
     0,     0,     0,   192,    23,     0,     0,     0,     0,     0,
   186,     0,   186,   186,   186,     0,   218,     0,     0,   187,
     0,   187,   187,   187,   223,     0,     0,     0,     0,     0,
     0,   216,     0,     0,   444,     7,     8,     9,    10,    11,
    12,     0,    13,     0,     0,     0,     0,     0,    16,    17,
    18,   181,   181,   230,    20,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    85,    23,     0,     0,     0,     0,
     0,   181,     0,     0,     0,   181,     0,   172,     0,     0,
     0,   173,     0,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,    15,     0,   192,     0,    16,    17,    18,
    19,     0,   106,    20,    21,     0,     0,     0,     0,    22,
     0,     0,   216,     0,    23,   231,     0,     0,     0,     0,
     0,   216,    24,   216,    25,     0,    26,     0,   216,     0,
    27,     0,    28,    29,    30,     0,     0,     0,     0,     0,
   181,     0,   181,   181,   181,     0,     0,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,    15,     0,     0,
   232,    16,    17,    18,    19,     0,    90,    20,    21,     0,
     0,     0,     0,    22,    91,     0,     0,    85,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     0,
     0,     0,   233,     0,     6,     7,     8,     9,    10,    11,
    12,   234,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,    90,    20,    21,     0,     0,     0,     0,
    22,    91,     0,     0,    85,    23,     0,     0,     0,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,     0,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,    15,     0,     0,     0,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
     0,     0,     0,     0,     0,    24,     0,    25,     0,    26,
     0,     0,     0,    80,     0,    28,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,    22,     0,     0,     0,    85,    23,
     0,     0,   207,     0,     0,     0,     0,    24,     0,    25,
     0,    26,     0,     0,     0,    80,     0,     0,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
    85,    23,     0,     0,   342,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,     0,     0,    80,     0,     0,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,   361,     0,     0,     0,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,    22,   362,
     0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
     0,     0,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,    85,    23,     0,     0,     0,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,     0,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,   157,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
     0,     0,     0,     0,     0,    24,     0,    25,     0,    26,
     0,     0,     0,    80,     0,     0,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,   197,    20,    21,
     0,     0,     0,     0,    22,     0,     0,     0,     0,    23,
     0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
     0,    26,     0,     0,     0,    80,     0,     0,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
     0,    23,     0,     0,   207,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,     0,     0,    80,     0,     0,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,   276,    20,    21,     0,     0,     0,     0,    22,     0,
     0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
     0,     0,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,     0,    23,     0,     0,     0,     0,
     0,     0,     0,    24,     0,    25,     0,    26,   327,     0,
     0,    80,     0,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
     0,     0,     0,     0,     0,    24,     0,    25,     0,    26,
   376,     0,     0,    80,     0,     0,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,    22,     0,     0,     0,     0,    23,
     0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
     0,    26,     0,     0,     0,    80,     0,   462,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
     0,    23,     0,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     6,     0,     0,    80,     0,     0,
    29,    30,     7,     8,     9,    10,    11,    12,     0,    13,
     0,     0,     0,     0,     0,    16,    17,    18,     0,     0,
    22,    20,     0,   108,     6,   109,   110,   111,   301,   113,
   114,   115,    23,     0,     0,     0,   302,     0,     6,     0,
     0,     0,     0,     0,   172,     0,     0,     0,   173,     0,
    22,     0,     6,   108,     0,   109,   110,   111,   301,   113,
   114,   115,     0,     0,    22,     0,   402,   108,     0,   109,
   110,   111,   301,   113,   114,   115,     0,     0,    22,     0,
   468,   108,     0,   109,   110,   111,   112,   113,   114,   115,
   108,    85,   109,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,     0,   169,   108,    85,   109,
   110,   111,   112,   113,   114,   115,   116
};

static const short yycheck[] = {     1,
    15,    99,   142,   142,   312,    25,    24,   172,    56,    57,
    28,   217,    11,    23,    29,    30,   307,   129,    11,   134,
     1,    48,    47,   135,    26,    27,   134,     3,     3,    21,
     3,   196,    38,    84,   102,    56,    57,    14,   128,    56,
    57,    51,    52,    22,   134,    47,    27,    46,    24,   101,
   102,    50,    28,    29,    29,    31,    29,    49,    73,    74,
    46,    39,    39,   101,   102,    24,    47,    30,    44,    94,
    49,    49,    31,    46,    50,   101,   102,    50,    80,    44,
    82,    83,    26,    46,    52,    44,   201,    89,    90,    91,
   142,    50,    94,   201,    38,   301,    98,    24,   263,   407,
    23,   116,   120,    14,   142,   173,    48,    49,   129,   127,
   200,   201,   129,    94,   135,    31,   142,    44,   135,    30,
   172,   173,   147,   138,   192,   150,   141,    10,    39,   209,
    13,   133,   212,   213,   172,   173,    30,    48,   429,    49,
   192,    51,     3,     4,   196,   147,   172,   173,   150,   151,
    47,   153,   358,   171,   192,   157,    49,    22,   196,   161,
   162,   163,    48,    49,   166,   203,   192,   282,    29,   179,
   196,   283,    51,    34,   282,   193,    22,    29,    30,   194,
   195,   202,    47,    49,    49,   202,   204,    51,   203,    50,
    48,    49,   282,   261,    31,   197,   264,   265,   278,   279,
    31,    47,   217,    49,    49,   207,    51,     3,   450,   261,
    46,   263,   264,   265,   216,    11,    41,   227,   460,   461,
   235,    44,   237,   261,   428,   263,   264,   265,    22,    35,
    36,   101,   102,    29,    40,   261,    30,   263,   264,   265,
    21,   445,   446,    21,   246,   451,    51,   249,   250,    24,
    46,     4,     5,     6,    50,    49,    31,    51,   338,   339,
    24,    51,   283,   281,    47,    24,   283,    31,    30,    44,
    23,   273,   142,   275,   276,    50,   435,   436,   299,   438,
    44,    13,   299,    15,   286,    44,   301,    46,    49,   291,
    51,    50,    49,   101,   102,   454,   311,   312,    49,   458,
    48,    49,   172,   173,    73,    74,    46,    51,    49,   311,
   312,   329,   314,   453,   453,   336,   318,   365,    49,   336,
    47,    47,   192,   344,    49,   346,   196,   344,    45,   346,
   332,    49,   352,   353,   142,    45,    30,    22,   101,   102,
   342,   392,   393,   358,   365,    47,   361,    30,   365,    47,
   365,   449,    51,   371,   372,    47,    31,     4,   379,    41,
   378,    51,   379,   384,   172,   173,   368,   384,    33,   387,
   390,   391,    51,    51,   425,   426,   474,    51,    44,   142,
   101,   102,    44,    39,   192,   400,    26,    27,   196,   101,
   102,   261,   407,   263,   264,   265,    30,   415,   416,   417,
   421,   453,   404,   405,   421,   407,    48,   409,    22,   172,
   173,     2,     3,    31,    47,   453,    31,    47,    47,    31,
    51,   142,    44,    51,    51,   443,    49,   453,    44,   192,
   142,    44,   434,   196,    45,    45,   451,   439,    31,    30,
    80,    49,   299,    31,   462,    31,   448,    47,   450,    51,
    51,   172,   173,   261,    31,   263,   264,   265,   460,   461,
   172,   173,   102,    28,    31,    31,    48,    45,    52,    45,
    45,   192,    45,     0,     0,   196,     4,   306,   178,   336,
   192,   394,   465,    42,   196,   133,   298,   344,    27,   346,
   141,   453,   431,   133,   134,    74,   166,   356,   261,   265,
   263,   264,   265,    -1,     4,     5,     6,     7,     8,     9,
   101,   102,   173,   153,    -1,    -1,    -1,    17,    18,    19,
    -1,    -1,   379,    23,    -1,    -1,   166,   384,    -1,    -1,
    -1,    -1,    -1,   173,    34,    -1,    -1,    -1,    -1,    -1,
   261,    -1,   263,   264,   265,    -1,   137,    -1,    -1,   261,
    -1,   263,   264,   265,    54,    -1,    -1,    -1,    -1,    -1,
    -1,   201,    -1,    -1,   421,     4,     5,     6,     7,     8,
     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,
    19,   172,   173,   453,    23,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
    -1,   192,    -1,    -1,    -1,   196,    -1,    46,    -1,    -1,
    -1,    50,    -1,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    13,    -1,   265,    -1,    17,    18,    19,
    20,    -1,   223,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,   282,    -1,    34,   453,    -1,    -1,    -1,    -1,
    -1,   291,    42,   293,    44,    -1,    46,    -1,   298,    -1,
    50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
   261,    -1,   263,   264,   265,    -1,    -1,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,
   453,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
    -1,    -1,    -1,    29,    30,    -1,    -1,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    -1,
    -1,    -1,   453,    -1,     3,     4,     5,     6,     7,     8,
     9,   453,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,
    29,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    -1,    -1,    -1,    50,    -1,    52,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,
    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    33,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    13,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    30,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    -1,    -1,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    -1,    -1,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    47,    -1,
    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    47,    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    -1,    -1,    -1,    50,    -1,    52,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,     3,    -1,    -1,    50,    -1,    -1,
    53,    54,     4,     5,     6,     7,     8,     9,    -1,    11,
    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    -1,    -1,
    29,    23,    -1,    32,     3,    34,    35,    36,    37,    38,
    39,    40,    34,    -1,    -1,    -1,    45,    -1,     3,    -1,
    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,
    29,    -1,     3,    32,    -1,    34,    35,    36,    37,    38,
    39,    40,    -1,    -1,    29,    -1,    45,    32,    -1,    34,
    35,    36,    37,    38,    39,    40,    -1,    -1,    29,    -1,
    45,    32,    -1,    34,    35,    36,    37,    38,    39,    40,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    -1,    -1,    -1,    -1,    -1,    -1,    48,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 43 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 45 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 48 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 55 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 63 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 70 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 81 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 84 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 86 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 90 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 92 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 95 "lang11d"
{ yyval = 0; ;
    break;}
case 20:
#line 97 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 21:
#line 101 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 22:
#line 104 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 23:
#line 107 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 24:
#line 110 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 30:
#line 124 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 31:
#line 128 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 32:
#line 130 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 33:
#line 132 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 35:
#line 137 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 36:
#line 140 "lang11d"
{ yyval = 0; ;
    break;}
case 37:
#line 142 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 38:
#line 146 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 39:
#line 148 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 40:
#line 152 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 41:
#line 154 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 159 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 46:
#line 168 "lang11d"
{ yyval = 0; ;
    break;}
case 48:
#line 173 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 49:
#line 177 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 50:
#line 182 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 51:
#line 200 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 52:
#line 202 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 53:
#line 213 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 224 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 55:
#line 237 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 56:
#line 258 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 267 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 58:
#line 272 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 59:
#line 285 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 60:
#line 305 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 61:
#line 311 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 62:
#line 329 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 63:
#line 334 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 1); ;
    break;}
case 64:
#line 335 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[-1], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0); 
			;
    break;}
case 65:
#line 344 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 2); ;
    break;}
case 66:
#line 345 "lang11d"
{
				yyval = yyvsp[-1];
			;
    break;}
case 67:
#line 351 "lang11d"
{ 
					// innermost part
					int action = popls(&generatorStack); 
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);
					
					switch (action) 
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);
					
							yyval = (long)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							yyval = (long)expr;
						} break;
					}
				;
    break;}
case 68:
#line 373 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 69:
#line 377 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 70:
#line 411 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 71:
#line 449 "lang11d"
{ 
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)yyvsp[-1]);
				
				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 72:
#line 463 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit);

				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 73:
#line 474 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 74:
#line 478 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);
				
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);
				
				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);
				
				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0); 
				
				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				yyval = (long)newPyrCallNode(selectornode2, args3, 0, 0); 
			;
    break;}
case 81:
#line 509 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 82:
#line 511 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 83:
#line 521 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 84:
#line 523 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 85:
#line 525 "lang11d"
{ yyval = yyvsp[-2]; ;
    break;}
case 86:
#line 527 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 87:
#line 529 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 88:
#line 531 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 90:
#line 547 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 91:
#line 574 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 92:
#line 592 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 93:
#line 619 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 94:
#line 647 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 95:
#line 666 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 694 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 721 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 98:
#line 739 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 99:
#line 764 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 792 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 811 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 839 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 858 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 104:
#line 875 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 105:
#line 891 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 106:
#line 910 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 107:
#line 928 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 108:
#line 945 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 109:
#line 961 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 113:
#line 979 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 114:
#line 981 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 115:
#line 994 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 116:
#line 1008 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 117:
#line 1013 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 118:
#line 1017 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 119:
#line 1028 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 120:
#line 1033 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 121:
#line 1043 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 122:
#line 1048 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 123:
#line 1062 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 124:
#line 1077 "lang11d"
{ yyval = 0; ;
    break;}
case 125:
#line 1078 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 126:
#line 1079 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 127:
#line 1080 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 129:
#line 1085 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 131:
#line 1093 "lang11d"
{ yyval = 0; ;
    break;}
case 132:
#line 1095 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 134:
#line 1100 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 135:
#line 1102 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 136:
#line 1107 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 137:
#line 1109 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 138:
#line 1116 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 140:
#line 1125 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 141:
#line 1129 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 142:
#line 1131 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 144:
#line 1136 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 145:
#line 1140 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 146:
#line 1143 "lang11d"
{ yyval = 0; ;
    break;}
case 147:
#line 1144 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 148:
#line 1148 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 149:
#line 1150 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 151:
#line 1155 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 152:
#line 1159 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 153:
#line 1160 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 154:
#line 1161 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 155:
#line 1162 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 156:
#line 1163 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 1164 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 158:
#line 1165 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 159:
#line 1166 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 160:
#line 1167 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 161:
#line 1168 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 162:
#line 1171 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 163:
#line 1174 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 164:
#line 1177 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 165:
#line 1178 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 166:
#line 1179 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 167:
#line 1180 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 168:
#line 1181 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 169:
#line 1182 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 170:
#line 1183 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 171:
#line 1184 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 172:
#line 1185 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 173:
#line 1186 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 174:
#line 1189 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 175:
#line 1190 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 176:
#line 1191 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 177:
#line 1192 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 178:
#line 1193 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 179:
#line 1194 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 180:
#line 1195 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 181:
#line 1196 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 182:
#line 1197 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 183:
#line 1198 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 184:
#line 1202 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 185:
#line 1205 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 186:
#line 1209 "lang11d"
{ yyval = 0; ;
    break;}
case 187:
#line 1211 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 189:
#line 1216 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 190:
#line 1220 "lang11d"
{ yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); ;
    break;}
case 191:
#line 1223 "lang11d"
{ yyval = 0; ;
    break;}
case 192:
#line 1225 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 193:
#line 1229 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 194:
#line 1233 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 195:
#line 1237 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 196:
#line 1243 "lang11d"
{ yyval = 0; ;
    break;}
case 199:
#line 1249 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 200:
#line 1253 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 201:
#line 1255 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], 0); ;
    break;}
case 202:
#line 1259 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 203:
#line 1261 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 205:
#line 1269 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 206:
#line 1272 "lang11d"
{ yyval = 0; ;
    break;}
case 209:
#line 1278 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 210:
#line 1282 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 211:
#line 1284 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrLiteralNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 212:
#line 1288 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 213:
#line 1292 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 214:
#line 1296 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 215:
#line 1298 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 217:
#line 1306 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 218:
#line 1309 "lang11d"
{ yyval = 0; ;
    break;}
case 220:
#line 1316 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 221:
#line 1318 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 222:
#line 1322 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 223:
#line 1324 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 224:
#line 1327 "lang11d"
{ yyval = 0; ;
    break;}
case 227:
#line 1333 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 228:
#line 1336 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 229:
#line 1338 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 230:
#line 1340 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 231:
#line 1342 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 232:
#line 1345 "lang11d"
{ yyval = zzval; ;
    break;}
case 233:
#line 1347 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 234:
#line 1355 "lang11d"
{ yyval = zzval; ;
    break;}
case 235:
#line 1357 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 236:
#line 1365 "lang11d"
{ yyval = zzval; ;
    break;}
case 237:
#line 1367 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 238:
#line 1377 "lang11d"
{ yyval = zzval; ;
    break;}
case 241:
#line 1383 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 242:
#line 1389 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 243:
#line 1397 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 244:
#line 1404 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 245:
#line 1412 "lang11d"
{ yyval = zzval; ;
    break;}
case 246:
#line 1413 "lang11d"
{ yyval = zzval; ;
    break;}
case 247:
#line 1416 "lang11d"
{ yyval = zzval; ;
    break;}
case 248:
#line 1419 "lang11d"
{ yyval = zzval; ;
    break;}
case 249:
#line 1422 "lang11d"
{ yyval = zzval; ;
    break;}
case 250:
#line 1425 "lang11d"
{ yyval = zzval; ;
    break;}
case 251:
#line 1428 "lang11d"
{ yyval = zzval; ;
    break;}
case 252:
#line 1431 "lang11d"
{ yyval = zzval; ;
    break;}
case 253:
#line 1434 "lang11d"
{ yyval = zzval; ;
    break;}
case 254:
#line 1437 "lang11d"
{ yyval = zzval; ;
    break;}
case 255:
#line 1440 "lang11d"
{ yyval = zzval; ;
    break;}
case 256:
#line 1443 "lang11d"
{ yyval = zzval; ;
    break;}
case 257:
#line 1444 "lang11d"
{ yyval = zzval; ;
    break;}
case 258:
#line 1445 "lang11d"
{ yyval = zzval; ;
    break;}
case 259:
#line 1446 "lang11d"
{ yyval = zzval; ;
    break;}
case 260:
#line 1447 "lang11d"
{ yyval = zzval; ;
    break;}
case 261:
#line 1448 "lang11d"
{ yyval = zzval; ;
    break;}
case 262:
#line 1449 "lang11d"
{ yyval = zzval; ;
    break;}
case 263:
#line 1450 "lang11d"
{ yyval = zzval; ;
    break;}
case 264:
#line 1453 "lang11d"
{ yyval = zzval; ;
    break;}
case 267:
#line 1460 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1462 "lang11d"
