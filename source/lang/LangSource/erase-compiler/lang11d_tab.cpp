
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BEGINGENERATOR	281
#define	LEFTARROW	282
#define	WHILE	283
#define	BINOP	284
#define	KEYBINOP	285
#define	READWRITEVAR	286
#define	UMINUS	287

#line 16 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		519
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 287 ? yytranslate[x] : 155)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    54,     2,     2,     2,     2,    50,
    51,    37,    38,    49,    34,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,    48,    35,
    31,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    46,     2,    47,    52,     2,    42,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    39,    45,    53,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    32,    33,    40,    43
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    62,
    63,    66,    74,    83,    91,   100,   101,   103,   104,   106,
   107,   109,   111,   114,   119,   122,   124,   126,   129,   130,
   133,   134,   138,   139,   143,   145,   148,   150,   152,   153,
   155,   158,   163,   170,   179,   185,   193,   198,   201,   207,
   214,   220,   227,   235,   243,   250,   259,   267,   272,   273,
   281,   282,   290,   291,   294,   299,   305,   311,   314,   319,
   324,   326,   328,   330,   332,   334,   336,   340,   343,   347,
   351,   356,   360,   362,   367,   369,   375,   381,   388,   396,
   404,   413,   420,   427,   435,   444,   453,   463,   466,   469,
   473,   479,   484,   487,   490,   494,   499,   505,   507,   509,
   511,   513,   519,   522,   527,   531,   536,   542,   550,   555,
   562,   570,   571,   574,   577,   582,   584,   588,   591,   592,
   595,   597,   601,   604,   608,   613,   619,   621,   625,   628,
   633,   635,   639,   642,   643,   646,   648,   652,   654,   658,
   660,   662,   664,   666,   668,   670,   672,   674,   676,   678,
   680,   682,   684,   686,   688,   690,   692,   694,   696,   698,
   700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
   720,   722,   728,   734,   735,   738,   740,   743,   747,   748,
   752,   758,   762,   768,   770,   774,   778,   779,   781,   783,
   787,   789,   793,   799,   800,   802,   804,   808,   810,   814,
   819,   823,   826,   828,   832,   833,   835,   837,   841,   844,
   849,   854,   858,   862,   865,   867,   871,   872,   874,   879,
   885,   889,   894,   895,   898,   900,   904,   905,   907,   909,
   911,   913,   916,   918,   921,   923,   926,   928,   930,   932,
   935,   938,   940,   943,   945,   947,   949,   951,   953,   955,
   957,   959,   961,   963,   965,   967,   969,   971,   973,   975,
   977,   979,   981,   983,   985,   987
};

static const short yyrhs[] = {    56,
     0,    57,     0,    26,    70,     0,     0,    56,    58,     0,
    59,     0,    57,    59,     0,   142,    61,    44,    62,    64,
    45,     0,   142,    46,    60,    47,    61,    44,    62,    64,
    45,     0,    38,   142,    44,    64,    45,     0,     0,   141,
     0,     0,    30,   142,     0,     0,    62,    63,     0,    15,
   124,    48,     0,    13,   124,    48,     0,    16,   113,    48,
     0,     0,    64,    65,     0,   141,    44,   112,   109,    72,
    71,    45,     0,    37,   141,    44,   112,   109,    72,    71,
    45,     0,   151,    44,   112,   109,    72,    71,    45,     0,
    37,   151,    44,   112,   109,    72,    71,    45,     0,     0,
    48,     0,     0,    49,     0,     0,    31,     0,    74,     0,
    93,    74,     0,    50,   110,    69,    51,     0,   110,    69,
     0,    69,     0,    73,     0,    93,    73,     0,     0,   143,
    66,     0,     0,    52,    90,    66,     0,     0,    52,    90,
    66,     0,    76,     0,    75,    76,     0,   104,     0,    79,
     0,     0,    75,     0,   141,    75,     0,    50,   153,    51,
    75,     0,   141,    50,    96,   100,    51,    77,     0,    50,
   153,    51,    50,    96,   100,    51,    77,     0,   141,    50,
    97,   100,    51,     0,    50,   153,    51,    50,    97,   100,
    51,     0,   142,    46,    94,    47,     0,   142,    75,     0,
   142,    50,    98,    51,    77,     0,   142,    50,    96,   100,
    51,    77,     0,   142,    50,    97,   100,    51,     0,    90,
    41,    50,    98,    51,    77,     0,    90,    41,   141,    50,
    98,    51,    77,     0,    90,    41,    50,    96,   100,    51,
    77,     0,    90,    41,    50,    97,   100,    51,     0,    90,
    41,   141,    50,    96,   100,    51,    77,     0,    90,    41,
   141,    50,    97,   100,    51,     0,    90,    41,   141,    77,
     0,     0,    44,    30,    93,    80,    49,    83,    45,     0,
     0,    44,    48,    93,    81,    49,    83,    45,     0,     0,
    49,    83,     0,   141,    28,    93,    82,     0,   141,   141,
    28,    93,    82,     0,    13,   141,    31,    93,    82,     0,
    93,    82,     0,    30,    30,    93,    82,     0,    30,    29,
    93,    82,     0,   106,     0,   104,     0,    79,     0,   105,
     0,   154,     0,    78,     0,    50,    93,    51,     0,    53,
   141,     0,    46,    94,    47,     0,    50,    88,    51,     0,
    50,    30,    89,    51,     0,    50,   123,    51,     0,   150,
     0,    84,    46,    96,    47,     0,    85,     0,    84,    46,
    96,    22,    47,     0,    84,    46,    22,    93,    47,     0,
    84,    46,    96,    22,    93,    47,     0,    84,    46,    96,
    22,    47,    31,    90,     0,    84,    46,    22,    93,    47,
    31,    90,     0,    84,    46,    96,    22,    93,    47,    31,
    90,     0,    90,    41,    46,    96,    22,    47,     0,    90,
    41,    46,    22,    93,    47,     0,    90,    41,    46,    96,
    22,    93,    47,     0,    90,    41,    46,    96,    22,    47,
    31,    90,     0,    90,    41,    46,    22,    93,    47,    31,
    90,     0,    90,    41,    46,    96,    22,    93,    47,    31,
    90,     0,    93,    22,     0,    22,    93,     0,    93,    22,
    93,     0,    93,    49,    93,    22,    93,     0,    93,    49,
    93,    22,     0,    22,    93,     0,    93,    22,     0,    93,
    22,    93,     0,    93,    49,    93,    22,     0,    93,    49,
    93,    22,    93,     0,    84,     0,    87,     0,    86,     0,
   142,     0,    90,    41,    46,    96,    47,     0,    42,    90,
     0,    90,   153,    91,    90,     0,   141,    31,    90,     0,
    53,   141,    31,    90,     0,    90,    41,   141,    31,    90,
     0,   141,    50,    96,   100,    51,    31,    90,     0,    54,
   101,    31,    90,     0,    84,    46,    96,    47,    31,    90,
     0,    90,    41,    46,    96,    47,    31,    90,     0,     0,
    41,   141,     0,    41,   136,     0,    41,    50,    93,    51,
     0,    90,     0,    92,    48,    90,     0,    92,    66,     0,
     0,    95,    67,     0,    93,     0,    93,    30,    93,     0,
   152,    93,     0,    95,    49,    93,     0,    95,    49,   152,
    93,     0,    95,    49,    93,    30,    93,     0,    93,     0,
    96,    49,    93,     0,    37,    93,     0,    96,    49,    37,
    93,     0,    99,     0,    98,    49,    99,     0,   152,    93,
     0,     0,    49,    98,     0,   102,     0,   102,    21,   141,
     0,   141,     0,   102,    49,   141,     0,   136,     0,   140,
     0,   147,     0,   149,     0,   148,     0,   144,     0,   145,
     0,   146,     0,   131,     0,   126,     0,   108,     0,   141,
     0,   136,     0,   140,     0,   147,     0,   149,     0,   148,
     0,   144,     0,   145,     0,   146,     0,   131,     0,   126,
     0,   136,     0,   140,     0,   147,     0,   149,     0,   148,
     0,   144,     0,   145,     0,   146,     0,   132,     0,   127,
     0,    44,   112,   109,    69,    45,     0,    24,   112,   109,
    69,    45,     0,     0,   109,   111,     0,   111,     0,   110,
   111,     0,    13,   119,    48,     0,     0,    14,   119,    48,
     0,    14,   118,    21,   141,    48,     0,    39,   116,    39,
     0,    39,   115,    21,   141,    39,     0,   114,     0,   113,
    67,   114,     0,   141,    68,   103,     0,     0,   116,     0,
   117,     0,   116,    67,   117,     0,   141,     0,   141,    68,
   103,     0,   141,    68,    50,    93,    51,     0,     0,   119,
     0,   120,     0,   119,    49,   120,     0,   141,     0,   141,
    31,    90,     0,   141,    50,    93,    51,     0,    93,    30,
    93,     0,   152,    93,     0,   121,     0,   122,    49,   121,
     0,     0,   122,     0,   125,     0,   124,    49,   125,     0,
   135,   141,     0,   135,   141,    31,   103,     0,    54,    50,
   130,    51,     0,    50,   130,    51,     0,   107,    30,   107,
     0,   152,   107,     0,   128,     0,   129,    49,   128,     0,
     0,   129,     0,    54,    46,   133,    47,     0,    54,   142,
    46,   133,    47,     0,    46,   133,    47,     0,   142,    46,
   133,    47,     0,     0,   134,    67,     0,   107,     0,   134,
    49,   107,     0,     0,    35,     0,    40,     0,    36,     0,
     4,     0,    34,     4,     0,     5,     0,    34,     5,     0,
     6,     0,    34,     6,     0,    23,     0,   137,     0,   138,
     0,   137,   139,     0,   136,   139,     0,   139,     0,    34,
   139,     0,     3,     0,    29,     0,    11,     0,    10,     0,
    18,     0,    19,     0,    17,     0,     9,     0,     7,     0,
     8,     0,    20,     0,    32,     0,    40,     0,    35,     0,
    36,     0,    34,     0,    37,     0,    38,     0,    39,     0,
    33,     0,   151,     0,   152,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    40,    42,    44,    48,    49,    53,    54,    58,    62,    69,
    75,    76,    79,    80,    84,    85,    89,    91,    93,    97,
    98,   102,   105,   108,   111,   116,   117,   120,   121,   124,
   125,   128,   129,   133,   135,   137,   141,   142,   146,   147,
   151,   153,   157,   159,   163,   164,   170,   171,   174,   175,
   178,   182,   186,   191,   196,   214,   227,   229,   240,   251,
   264,   285,   294,   299,   312,   332,   338,   356,   362,   362,
   372,   372,   378,   400,   404,   438,   476,   490,   501,   505,
   530,   531,   532,   533,   534,   535,   536,   542,   552,   554,
   556,   558,   560,   562,   575,   578,   605,   623,   650,   678,
   697,   725,   752,   770,   795,   823,   842,   870,   889,   908,
   925,   939,   960,   979,   997,  1014,  1030,  1046,  1047,  1048,
  1049,  1050,  1063,  1077,  1082,  1086,  1097,  1102,  1112,  1117,
  1131,  1147,  1148,  1149,  1150,  1153,  1154,  1160,  1163,  1164,
  1168,  1169,  1171,  1176,  1178,  1185,  1193,  1194,  1198,  1200,
  1204,  1205,  1209,  1213,  1214,  1217,  1219,  1223,  1224,  1229,
  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  1241,
  1244,  1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,
  1256,  1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,
  1268,  1271,  1274,  1279,  1280,  1284,  1285,  1289,  1293,  1294,
  1298,  1302,  1306,  1312,  1313,  1317,  1321,  1322,  1325,  1326,
  1330,  1332,  1334,  1342,  1343,  1346,  1347,  1351,  1353,  1355,
  1363,  1365,  1372,  1373,  1377,  1378,  1381,  1382,  1386,  1388,
  1392,  1396,  1400,  1402,  1409,  1410,  1414,  1415,  1420,  1422,
  1426,  1428,  1432,  1433,  1436,  1437,  1441,  1442,  1444,  1446,
  1450,  1451,  1460,  1461,  1470,  1471,  1482,  1485,  1486,  1487,
  1493,  1501,  1508,  1517,  1518,  1521,  1524,  1527,  1530,  1533,
  1536,  1539,  1542,  1545,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1558,  1561,  1562,  1565
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME","CURRYARG",
"VAR","ARG","CLASSVAR","CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR","ELLIPSIS",
"DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","BEGINGENERATOR","LEFTARROW",
"WHILE","':'","'='","BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'","'|'","READWRITEVAR",
"'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','","'('","')'","'^'","'~'",
"'#'","root","classes","classextensions","classdef","classextension","optname",
"superclass","classvardecls","classvardecl","methods","methoddef","optsemi",
"optcomma","optequal","funcbody","cmdlinecode","methbody","primitive","retval",
"funretval","blocklist1","blocklistitem","blocklist","msgsend","generator","@1",
"@2","nextqual","qual","expr1","valrangex1","valrangeassign","valrangexd","valrange2",
"valrange3","expr","adverb","exprn","exprseq","arrayelems","arrayelems1","arglist1",
"arglistv1","keyarglist1","keyarg","optkeyarglist","mavars","mavarlist","slotliteral",
"blockliteral","pushname","pushliteral","listliteral","block","funcvardecls",
"funcvardecls1","funcvardecl","argdecls","constdeflist","constdef","slotdeflist0",
"slotdeflist","slotdef","vardeflist0","vardeflist","vardef","dictslotdef","dictslotlist1",
"dictslotlist","rwslotdeflist","rwslotdef","dictlit","dictlit2","litdictslotdef",
"litdictslotlist1","litdictslotlist","listlit","listlit2","literallistc","literallist1",
"rwspec","integer","floatr","accidental","pie","floatp","name","classname","primname",
"trueobj","falseobj","nilobj","ascii","symbol","string","pseudovar","binop",
"keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    55,    55,    55,    56,    56,    57,    57,    58,    58,    59,
    60,    60,    61,    61,    62,    62,    63,    63,    63,    64,
    64,    65,    65,    65,    65,    66,    66,    67,    67,    68,
    68,    69,    69,    70,    70,    70,    71,    71,    72,    72,
    73,    73,    74,    74,    75,    75,    76,    76,    77,    77,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    80,    79,
    81,    79,    82,    82,    83,    83,    83,    83,    83,    83,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    85,    85,    85,    86,    86,
    86,    87,    87,    87,    87,    87,    87,    88,    88,    88,
    88,    88,    89,    89,    89,    89,    89,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    91,    91,    91,    91,    92,    92,    93,    94,    94,
    95,    95,    95,    95,    95,    95,    96,    96,    97,    97,
    98,    98,    99,   100,   100,   101,   101,   102,   102,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   104,
   105,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   108,   108,   109,   109,   110,   110,   111,   112,   112,
   112,   112,   112,   113,   113,   114,   115,   115,   116,   116,
   117,   117,   117,   118,   118,   119,   119,   120,   120,   120,
   121,   121,   122,   122,   123,   123,   124,   124,   125,   125,
   126,   127,   128,   128,   129,   129,   130,   130,   131,   131,
   132,   132,   133,   133,   134,   134,   135,   135,   135,   135,
   136,   136,   137,   137,   138,   138,   139,   140,   140,   140,
   140,   140,   140,   141,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   151,   151,   151,   151,   151,
   151,   151,   152,   153,   153,   154
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     3,     0,
     2,     7,     8,     7,     8,     0,     1,     0,     1,     0,
     1,     1,     2,     4,     2,     1,     1,     2,     0,     2,
     0,     3,     0,     3,     1,     2,     1,     1,     0,     1,
     2,     4,     6,     8,     5,     7,     4,     2,     5,     6,
     5,     6,     7,     7,     6,     8,     7,     4,     0,     7,
     0,     7,     0,     2,     4,     5,     5,     2,     4,     4,
     1,     1,     1,     1,     1,     1,     3,     2,     3,     3,
     4,     3,     1,     4,     1,     5,     5,     6,     7,     7,
     8,     6,     6,     7,     8,     8,     9,     2,     2,     3,
     5,     4,     2,     2,     3,     4,     5,     1,     1,     1,
     1,     5,     2,     4,     3,     4,     5,     7,     4,     6,
     7,     0,     2,     2,     4,     1,     3,     2,     0,     2,
     1,     3,     2,     3,     4,     5,     1,     3,     2,     4,
     1,     3,     2,     0,     2,     1,     3,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     5,     5,     0,     2,     1,     2,     3,     0,     3,
     5,     3,     5,     1,     3,     3,     0,     1,     1,     3,
     1,     3,     5,     0,     1,     1,     3,     1,     3,     4,
     3,     2,     1,     3,     0,     1,     1,     3,     2,     4,
     4,     3,     3,     2,     1,     3,     0,     1,     4,     5,
     3,     4,     0,     2,     1,     3,     0,     1,     1,     1,
     1,     2,     1,     2,     1,     2,     1,     1,     1,     2,
     2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    43,     0,     1,     2,     6,   264,   251,   253,   255,   272,
   273,   271,   266,   286,     0,   270,   268,   269,   274,   257,
   199,   265,     0,     0,   199,   139,   225,     0,     0,     0,
    36,     3,    32,    86,    83,   118,    95,   120,   119,   136,
    26,    43,    82,    84,    81,   170,    43,   196,   181,   180,
   172,   258,   259,   262,   173,   171,   121,   177,   178,   179,
   174,   176,   175,    93,    85,     0,     5,    13,     7,     0,
   216,   218,   214,   207,   194,   252,   254,   256,   263,   225,
   123,     0,     0,   194,   283,   141,     0,    28,     0,     0,
     0,   275,   279,   277,   278,   280,   281,   282,   276,     0,
     0,    43,   223,   226,     0,   284,   285,     0,    26,    88,
   243,   237,     0,   156,   158,     0,     0,   279,     0,   285,
   132,    27,   138,    33,    35,   197,   261,   260,     0,     0,
    51,    45,    48,    47,   139,     0,    58,    20,     0,    11,
     0,   198,     0,     0,     0,     0,   215,     0,    28,   209,
    30,    43,    69,    71,    43,     0,    89,    29,   140,   143,
   109,     0,     0,     0,    90,   108,     0,     0,    87,     0,
     0,    92,   222,     0,    27,    44,     0,   243,   237,   245,
   191,   190,     0,    28,   182,   183,     0,   187,   188,   189,
   184,   186,   185,     0,   235,   238,     0,     0,     0,     0,
     0,   243,     0,   147,     0,     0,     0,    49,     0,     0,
   137,   125,     0,   154,   154,    46,     0,   154,   154,     0,
   151,     0,     0,    14,     0,    12,    15,   217,   219,     0,
     0,   200,     0,   202,    29,     0,    31,     0,     0,   195,
     0,     0,     0,   142,   144,     0,   113,    91,   114,     0,
   110,   221,     0,    34,     0,   224,     0,     0,    52,   126,
     0,     0,   239,    29,   244,   243,     0,     0,   231,   234,
   129,   157,   159,     0,     0,     0,    94,     0,     0,     0,
   154,   154,     0,     0,     0,    50,    68,     0,     0,   134,
   133,   124,   149,     0,     0,     0,     0,    57,     0,     0,
     0,    49,   153,   280,    10,    21,     0,     0,    13,    20,
   220,     0,     0,   210,     0,     0,   212,   169,   168,   160,
   161,   165,   166,   167,   162,   164,   163,   193,     0,     0,
   192,     0,   145,   115,     0,   112,   154,   154,   241,   232,
   246,     0,   233,   236,   240,    97,    96,     0,     0,   148,
     0,     0,   122,     0,     0,    49,   127,   154,   154,     0,
     0,     0,   155,    49,    55,    49,    61,   152,    59,     0,
     0,   199,   199,     0,   247,   247,     0,    16,     0,   201,
   203,     0,     0,     0,     0,    73,   171,     0,   146,   116,
   111,     0,     0,   242,     0,     0,    98,   130,   103,   102,
     0,     0,    49,    65,    62,     0,     0,    49,   135,   150,
     0,    53,    60,   199,   199,   194,   194,    15,   248,   250,
   249,     0,   227,     0,     0,    28,   204,    30,     8,   213,
     0,     0,     0,    70,     0,    78,     0,     0,    72,   117,
    49,    56,   100,    99,     0,     0,     0,   104,   131,    64,
    49,    67,    63,   128,   194,   194,    39,    39,    20,    18,
   247,   229,    17,    19,     0,     0,     0,    73,    73,    74,
    73,     0,    54,   101,   106,   105,     0,    66,    39,    39,
   267,    41,    26,    41,     0,   228,     0,   205,   206,    73,
    80,    79,    75,    73,   107,    41,    41,     0,     0,    37,
    41,    40,     0,     9,   230,    77,    76,     0,     0,    26,
    22,    38,    24,    23,    25,    42,     0,     0,     0
};

static const short yydefgoto[] = {   517,
     3,     4,    67,     5,   225,   141,   310,   378,   223,   306,
   123,   159,   238,    31,    32,   499,   482,   500,    33,   286,
   132,   287,    34,    35,   241,   242,   436,   385,    36,    37,
    38,    39,   100,   163,    40,   210,    41,   204,    87,    88,
   205,   215,   363,   221,   295,   113,   114,   317,    43,    44,
    45,   180,    46,   152,    47,   240,    75,   426,   427,   148,
   149,   150,   146,    70,    71,   103,   104,   105,   422,   423,
    49,   181,   195,   196,   197,    50,   182,   183,   184,   424,
    51,    52,    53,    54,    55,    56,    57,   483,    58,    59,
    60,    61,    62,    63,    64,   106,   120,   121,    65
};

static const short yypact[] = {   159,
   784,    22,    22,     6,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    37,-32768,-32768,-32768,-32768,-32768,
    58,-32768,   363,  1519,   199,  1103,   719,  1519,    37,    34,
-32768,-32768,-32768,-32768,-32768,     5,-32768,-32768,-32768,  1624,
    25,    43,-32768,-32768,-32768,-32768,   895,-32768,-32768,-32768,
    95,    95,-32768,-32768,-32768,   331,    80,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    61,-32768,    93,-32768,   144,
-32768,    82,    37,    37,-32768,-32768,-32768,-32768,-32768,   843,
-32768,  1519,  1519,-32768,-32768,    99,   135,    97,  1519,  1519,
  1155,-32768,   363,-32768,-32768,-32768,-32768,-32768,-32768,   147,
    45,   895,-32768,   176,   210,-32768,  1519,   216,  1607,   215,
  1570,   631,   245,   -18,-32768,   235,  1207,-32768,   186,-32768,
   246,  1519,-32768,-32768,-32768,-32768,-32768,-32768,  1519,  1259,
   112,-32768,-32768,-32768,  1103,   947,   112,-32768,    22,    37,
   247,-32768,    37,  1519,  1519,   269,   209,   274,    20,-32768,
    21,   895,-32768,-32768,   895,  1519,-32768,  1103,-32768,-32768,
-32768,  1519,   252,    42,-32768,  1519,  1519,  1519,-32768,   257,
  1103,-32768,-32768,   140,-32768,-32768,  1519,  1570,   631,-32768,
-32768,-32768,   280,   267,    95,-32768,   290,-32768,-32768,-32768,
-32768,-32768,-32768,   307,-32768,   289,   293,  1570,  1519,    37,
    37,  1570,  1519,-32768,   177,  1311,   947,   360,    83,  1519,
  1624,  1624,  1519,   298,   301,-32768,   305,   298,   301,   -29,
-32768,  1519,   665,-32768,   312,-32768,-32768,-32768,  1624,   309,
    37,-32768,    37,-32768,-32768,    37,-32768,   292,   318,-32768,
   316,   321,   326,-32768,   352,  1519,-32768,-32768,  1519,  1519,
-32768,-32768,   368,-32768,   355,-32768,  1519,  1259,   112,  1624,
   347,   350,-32768,  1570,-32768,  1570,  1570,   631,-32768,-32768,
  1624,-32768,-32768,   348,   364,  1363,   376,  1519,  1519,   184,
   298,   301,   137,  1519,   947,   112,-32768,   408,  1519,-32768,
-32768,   372,-32768,   999,   367,   381,   371,-32768,   378,   384,
   381,   112,-32768,   234,-32768,-32768,   375,   379,   385,   306,
-32768,   389,   399,-32768,  1519,    12,-32768,-32768,-32768,    95,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1051,  1051,
-32768,  1519,-32768,-32768,   417,  1519,   298,   301,-32768,-32768,
-32768,   398,-32768,-32768,-32768,   415,   416,   401,  1519,-32768,
   402,  1415,   422,   406,   409,   112,  1624,   298,   301,   202,
   413,  1519,   420,   261,-32768,   112,-32768,-32768,-32768,   421,
   428,    58,    58,   430,   204,   204,    37,-32768,  1563,-32768,
-32768,   424,    37,   205,   431,   436,   172,   441,-32768,  1519,
-32768,   437,   439,-32768,  1519,  1519,   456,  1624,   462,   466,
   451,  1519,   112,-32768,-32768,   448,   449,   112,-32768,-32768,
  1519,-32768,-32768,    58,    58,-32768,-32768,-32768,-32768,-32768,
-32768,   264,-32768,    37,   276,   285,-32768,   470,-32768,-32768,
   474,  1519,  1519,-32768,  1051,-32768,  1519,   479,-32768,-32768,
   112,-32768,  1624,  1624,  1519,  1519,  1519,   481,  1624,-32768,
   112,-32768,-32768,  1624,-32768,-32768,   217,   217,   306,-32768,
   204,   482,-32768,-32768,    37,   567,  1519,   436,   436,-32768,
   436,  1519,-32768,  1624,  1624,  1624,  1519,-32768,   217,   217,
-32768,  1467,   468,  1467,  1593,-32768,   567,-32768,-32768,   436,
-32768,-32768,-32768,   436,  1624,  1467,  1467,  1519,   469,-32768,
   465,-32768,   473,-32768,-32768,-32768,-32768,   476,   483,  1607,
-32768,-32768,-32768,-32768,-32768,-32768,   524,   530,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   527,-32768,   227,   120,-32768,  -280,-32768,
  -105,  -137,   111,   -41,-32768,  -349,  -275,    39,   499,   -55,
  -110,  -288,-32768,     0,-32768,-32768,  -151,  -319,-32768,-32768,
-32768,-32768,-32768,-32768,   -19,-32768,-32768,    -1,   414,-32768,
   -98,  -108,  -107,   249,   314,-32768,-32768,  -413,    86,-32768,
-32768,   -96,-32768,   -76,   516,    38,   -15,-32768,    87,-32768,
-32768,   317,-32768,   484,   412,   388,-32768,-32768,   180,   101,
  -225,-32768,   295,-32768,   386,  -223,-32768,  -159,-32768,-32768,
   -57,-32768,-32768,   -16,    16,    19,   517,-32768,   195,   242,
   313,   344,   356,   366,-32768,  -206,   390,    -9,-32768
};


#define	YYLAST		1665


static const short yytable[] = {    42,
   131,   137,   200,   176,    81,   125,    79,   155,   109,    84,
   388,   236,   318,   369,   319,   194,   308,   108,   261,   301,
   216,   302,    13,  -211,    86,   101,   216,   219,   220,   379,
   201,   214,    13,    72,   127,   128,     6,   218,    48,     6,
  -208,  -211,   274,     2,    13,    42,   265,   110,   115,  -211,
   117,   237,   489,   185,   185,   133,   133,   111,   234,  -211,
   170,   112,    22,   249,    48,    22,   166,   405,   235,  -211,
   108,    73,   122,   505,   167,   412,    79,   413,   101,   111,
   153,   154,   194,   112,   126,     6,     7,   160,   161,   164,
   250,    72,   151,   168,    28,   169,    74,   371,   282,   283,
    42,   270,   211,    21,   138,   173,   342,   280,   281,   212,
   239,    22,   144,   243,   450,   470,   288,    20,   259,   453,
   185,   185,   139,    25,   229,   135,   186,   186,   156,   136,
   133,   145,   289,    86,   503,    21,   133,   208,   140,   126,
   185,   134,   134,   230,   185,   158,   508,   509,   216,   338,
    42,   290,   473,    42,   244,    25,   245,   260,   226,   337,
   247,    72,   478,    21,   251,   252,   253,   341,   127,   255,
   343,   194,   308,   133,     6,   216,   359,   360,   485,   271,
   320,   157,   484,    25,     1,   301,   358,   356,     6,   258,
   292,   142,   143,   186,   186,    21,     2,   165,   276,   437,
    22,   275,   129,   496,   497,   352,   185,   133,   185,   185,
   185,   293,    73,   186,    22,    25,   134,   186,   272,   273,
   303,   130,   134,   277,   171,   278,   481,   291,    82,    15,
   353,   206,   278,   432,   433,   207,     6,    74,   419,   420,
   318,   307,   319,   421,   333,   177,    83,   334,   335,   312,
   301,   313,   408,   321,   151,   173,   232,   143,   133,   134,
   172,   318,    22,   319,   357,    92,   174,   118,    94,    95,
    96,    97,    98,    99,   348,   199,   350,   351,   308,   186,
   202,   186,   186,   186,    21,   133,   209,   361,   465,   231,
   227,   411,   350,   134,   233,     7,     8,     9,    10,    11,
    12,   133,   248,   127,    25,   188,   188,   254,    16,    17,
    18,   460,   461,   382,    20,   264,   491,   492,   375,   493,
   376,   377,   370,   463,   461,    23,   263,   386,   386,   398,
   389,   131,   464,   235,   391,   266,   267,   268,   506,   457,
   458,   315,   507,   269,   134,   316,   294,   387,   387,   296,
   401,   298,   189,   189,    21,   133,   416,   417,   309,   311,
   410,   129,   328,   133,   329,   133,    76,    77,    78,   330,
   331,   134,   188,   188,    25,   443,   444,   502,   479,   480,
   130,   332,   449,    21,   167,    20,   133,   134,   440,   336,
   284,   454,   188,   339,   345,   428,   188,   307,   455,   456,
   340,   431,   133,    25,   516,   438,   349,   133,   320,   285,
   346,    76,   119,    85,   139,    89,   107,   364,   372,   189,
   189,   365,   373,   190,   190,   474,   475,   476,   366,   320,
   468,   469,   322,   386,   367,   471,   380,   381,   390,   189,
   133,   134,   462,   189,   394,   395,   396,   397,   399,   134,
   133,   134,   402,   387,   191,   191,   403,   495,   188,   404,
   188,   188,   188,   409,   414,   490,   192,   192,   301,   107,
   494,   415,   134,   418,   430,   434,   193,   193,   510,   323,
   501,   321,   501,   428,   435,   439,   445,   441,   134,   442,
   190,   190,   446,   134,   501,   501,   447,   448,   451,   452,
   237,   198,   321,   307,   467,   189,   472,   189,   189,   189,
   190,   477,   487,   511,   190,   175,   498,   513,    66,    68,
   514,   191,   191,   518,    89,   222,   134,   515,   297,   519,
    69,   299,   300,   192,   192,   374,   134,   459,   466,   512,
   124,   191,   102,   193,   193,   191,   116,   246,   217,   368,
   324,   488,   314,   192,   228,   425,   147,   192,   256,     0,
   257,   486,   344,   193,   262,     0,     0,   193,   198,     0,
     7,     8,     9,    10,    11,    12,   190,     0,   190,   190,
   190,   325,     0,    16,    17,    18,     0,     0,     0,    20,
     0,     0,     0,   326,   354,   355,   222,     0,     0,     0,
    23,     0,     0,   327,     0,     0,     0,   191,     0,   191,
   191,   191,     0,     0,     0,     0,     0,     0,     0,   192,
   316,   192,   192,   192,     0,     0,     0,   187,   187,   193,
     0,   193,   193,   193,     7,     8,     9,    10,    11,    12,
     0,    13,     0,     0,     0,     0,     0,    16,    17,    18,
   392,   393,     0,    20,     0,   224,     0,   198,     0,     0,
   322,     0,     0,    85,    23,     0,     0,     6,     0,     0,
     0,   406,   407,     0,   222,     0,   178,     0,     0,     0,
   179,   322,     0,   222,     0,   222,     0,     0,     0,     0,
   222,     0,     0,    22,   187,   187,    92,     0,   118,    94,
    95,   304,    97,    98,    99,     0,     0,   323,     0,   305,
     0,     0,     0,     0,   187,     0,     0,     0,   187,     0,
     0,     6,     7,     8,     9,    10,    11,    12,   323,    13,
    14,    15,     0,     0,     0,    16,    17,    18,    19,     0,
    90,    20,    21,     0,     0,     0,     0,    22,    91,     0,
    92,    85,    93,    94,    95,    96,    97,    98,    99,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
     0,    29,    30,     0,     0,     0,     0,     0,   324,     0,
   187,     0,   187,   187,   187,     0,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,    15,     0,     0,   324,
    16,    17,    18,    19,     0,     0,    20,    21,     0,   325,
     0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
     0,   326,     0,     0,     0,    24,     0,    25,     0,    26,
   325,   327,   116,    27,     0,    28,    29,    30,     0,     0,
     0,     0,   326,     0,     0,     6,     7,     8,     9,    10,
    11,    12,   327,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,    90,    20,    21,     0,     0,     0,
     0,    22,    91,     0,    92,    85,    93,    94,    95,    96,
    97,    98,    99,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,    15,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,    28,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,    85,
    23,     0,     0,   213,     0,     0,     0,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,    85,    23,     0,     0,   362,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,   383,     0,     0,     0,    16,    17,    18,
    19,     0,     0,    20,    21,     0,     0,     0,     0,    22,
   384,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,    85,    23,     0,     0,     0,
     0,     0,     0,     0,    24,     0,    25,     0,    26,     0,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,   162,    20,    21,     0,
     0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,     0,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,   203,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,     0,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,   213,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     0,     0,     0,    80,     0,
     0,    29,    30,     6,     7,     8,     9,    10,    11,    12,
     0,    13,    14,     0,     0,     0,     0,    16,    17,    18,
    19,     0,   279,    20,    21,     0,     0,     0,     0,    22,
     0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     0,     0,    24,     0,    25,     0,    26,     0,     0,     0,
    80,     0,     0,    29,    30,     6,     7,     8,     9,    10,
    11,    12,     0,    13,    14,     0,     0,     0,     0,    16,
    17,    18,    19,     0,     0,    20,    21,     0,     0,     0,
     0,    22,     0,     0,     0,     0,    23,     0,     0,     0,
     0,     0,     0,     0,    24,     0,    25,     0,    26,   347,
     0,     0,    80,     0,     0,    29,    30,     6,     7,     8,
     9,    10,    11,    12,     0,    13,    14,     0,     0,     0,
     0,    16,    17,    18,    19,     0,     0,    20,    21,     0,
     0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
    26,   400,     0,     0,    80,     0,     0,    29,    30,     6,
     7,     8,     9,    10,    11,    12,     0,    13,    14,     0,
     0,     0,     0,    16,    17,    18,    19,     0,     0,    20,
    21,     0,     0,     0,     0,    22,     0,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,    24,     0,
    25,     0,    26,     0,     0,     0,    80,     0,   498,    29,
    30,     6,     7,     8,     9,    10,    11,    12,     0,    13,
    14,     0,     0,     0,     0,    16,    17,    18,    19,     0,
     0,    20,    21,     0,     0,     0,     0,    22,     0,     0,
     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
    24,     0,    25,     0,    26,     6,     0,     0,    80,     0,
     0,    29,    30,     7,     8,     9,    10,    11,    12,     0,
    13,     0,     0,     0,     0,     0,    16,    17,    18,     0,
     0,    22,    20,     0,    92,     6,   118,    94,    95,   304,
    97,    98,    99,    23,     0,     0,     0,   429,     0,     0,
     0,     0,     0,     0,     0,   178,     0,     0,     0,   179,
     0,    22,     0,     0,    92,     0,   118,    94,    95,   304,
    97,    98,    99,     0,     0,     0,     0,   504,    92,    85,
   118,    94,    95,    96,    97,    98,    99,   119,     0,     0,
     0,     0,     0,     0,   175,    92,    85,   118,    94,    95,
    96,    97,    98,    99,   119
};

static const short yycheck[] = {     1,
    56,    57,    21,   109,    24,    47,    23,    84,    28,    25,
   330,   149,   238,   302,   238,   112,   223,    27,   178,    49,
   131,    51,    11,     3,    26,    27,   137,   136,   136,   310,
    49,   130,    11,    15,    51,    52,     3,   136,     1,     3,
    21,    21,   202,    38,    11,    47,   184,    29,    30,    29,
    46,    31,   466,   111,   112,    56,    57,    46,    39,    39,
   102,    50,    29,    22,    27,    29,    22,   356,    49,    49,
    80,    14,    48,   487,    30,   364,    93,   366,    80,    46,
    82,    83,   179,    50,    47,     3,     4,    89,    90,    91,
    49,    73,    74,    49,    52,    51,    39,   304,   207,   207,
   102,   198,   122,    24,    44,   107,   266,   206,   207,   129,
   152,    29,    31,   155,   403,   435,    34,    23,   174,   408,
   178,   179,    30,    44,   144,    46,   111,   112,    30,    50,
   131,    50,    50,   135,   484,    24,   137,   119,    46,   102,
   198,    56,    57,   145,   202,    49,   496,   497,   259,   258,
   152,   209,   441,   155,   156,    44,   158,   177,   140,   258,
   162,   143,   451,    24,   166,   167,   168,   264,   185,   171,
   267,   268,   379,   174,     3,   286,   285,   285,   459,   199,
   238,    47,   458,    44,    26,    49,   285,    51,     3,    50,
   210,    48,    49,   178,   179,    24,    38,    51,    22,    28,
    29,   203,    31,   479,   480,    22,   264,   208,   266,   267,
   268,   213,    14,   198,    29,    44,   131,   202,   200,   201,
   222,    50,   137,    47,    49,    49,    10,   209,    30,    13,
    47,    46,    49,    29,    30,    50,     3,    39,    35,    36,
   466,   223,   466,    40,   246,    31,    48,   249,   250,   231,
    49,   233,    51,   238,   236,   257,    48,    49,   259,   174,
    51,   487,    29,   487,   284,    32,    51,    34,    35,    36,
    37,    38,    39,    40,   276,    31,   278,   279,   485,   264,
    46,   266,   267,   268,    24,   286,    41,   289,   426,    21,
    44,    31,   294,   208,    21,     4,     5,     6,     7,     8,
     9,   302,    51,   320,    44,   111,   112,    51,    17,    18,
    19,    48,    49,   315,    23,    49,   468,   469,    13,   471,
    15,    16,   304,    48,    49,    34,    47,   329,   330,   349,
   332,   387,    48,    49,   336,    46,    30,    49,   490,   416,
   417,    50,   494,    51,   259,    54,    49,   329,   330,    49,
   352,    47,   111,   112,    24,   356,   372,   373,    47,    51,
   362,    31,    45,   364,    49,   366,     4,     5,     6,    49,
    45,   286,   178,   179,    44,   395,   396,   483,   455,   456,
    50,    30,   402,    24,    30,    23,   387,   302,   390,    22,
    31,   411,   198,    47,    47,   377,   202,   379,   414,   415,
    51,   383,   403,    44,   510,   387,    31,   408,   466,    50,
    47,     4,    41,    33,    30,    26,    27,    51,    44,   178,
   179,    51,    44,   111,   112,   445,   446,   447,    51,   487,
   432,   433,   238,   435,    51,   437,    48,    39,    22,   198,
   441,   356,   424,   202,    47,    31,    31,    47,    47,   364,
   451,   366,    31,   435,   111,   112,    51,   477,   264,    51,
   266,   267,   268,    51,    44,   467,   111,   112,    49,    80,
   472,    44,   387,    44,    51,    45,   111,   112,   498,   238,
   482,   466,   484,   465,    49,    45,    31,    51,   403,    51,
   178,   179,    31,   408,   496,   497,    31,    47,    51,    51,
    31,   112,   487,   485,    31,   264,    28,   266,   267,   268,
   198,    31,    31,    45,   202,    48,    52,    45,     2,     3,
    45,   178,   179,     0,   135,   136,   441,    45,   215,     0,
     4,   218,   219,   178,   179,   309,   451,   418,   428,   501,
    42,   198,    27,   178,   179,   202,    30,   158,   135,   301,
   238,   465,   236,   198,   143,   376,    73,   202,   171,    -1,
   171,   461,   268,   198,   179,    -1,    -1,   202,   179,    -1,
     4,     5,     6,     7,     8,     9,   264,    -1,   266,   267,
   268,   238,    -1,    17,    18,    19,    -1,    -1,    -1,    23,
    -1,    -1,    -1,   238,   281,   282,   207,    -1,    -1,    -1,
    34,    -1,    -1,   238,    -1,    -1,    -1,   264,    -1,   266,
   267,   268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
    54,   266,   267,   268,    -1,    -1,    -1,   111,   112,   264,
    -1,   266,   267,   268,     4,     5,     6,     7,     8,     9,
    -1,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,
   337,   338,    -1,    23,    -1,   139,    -1,   268,    -1,    -1,
   466,    -1,    -1,    33,    34,    -1,    -1,     3,    -1,    -1,
    -1,   358,   359,    -1,   285,    -1,    46,    -1,    -1,    -1,
    50,   487,    -1,   294,    -1,   296,    -1,    -1,    -1,    -1,
   301,    -1,    -1,    29,   178,   179,    32,    -1,    34,    35,
    36,    37,    38,    39,    40,    -1,    -1,   466,    -1,    45,
    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   202,    -1,
    -1,     3,     4,     5,     6,     7,     8,     9,   487,    11,
    12,    13,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    22,    23,    24,    -1,    -1,    -1,    -1,    29,    30,    -1,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,   466,    -1,
   264,    -1,   266,   267,   268,    -1,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,   487,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,   466,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,   466,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
   487,   466,   316,    50,    -1,    52,    53,    54,    -1,    -1,
    -1,    -1,   487,    -1,    -1,     3,     4,     5,     6,     7,
     8,     9,   487,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,    -1,
    -1,    29,    30,    -1,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    13,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    52,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    33,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    13,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,     3,     4,     5,     6,     7,     8,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,
    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    29,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,
    50,    -1,    -1,    53,    54,     3,     4,     5,     6,     7,
     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    47,
    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,
     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    46,    47,    -1,    -1,    50,    -1,    -1,    53,    54,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    52,    53,
    54,     3,     4,     5,     6,     7,     8,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    46,     3,    -1,    -1,    50,    -1,
    -1,    53,    54,     4,     5,     6,     7,     8,     9,    -1,
    11,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,    -1,
    -1,    29,    23,    -1,    32,     3,    34,    35,    36,    37,
    38,    39,    40,    34,    -1,    -1,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
    -1,    29,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    38,    39,    40,    -1,    -1,    -1,    -1,    45,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    48,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 43 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 45 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 48 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 55 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 63 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 70 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 81 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 84 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 86 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 90 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 92 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 94 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varConst); ;
    break;}
case 20:
#line 97 "lang11d"
{ yyval = 0; ;
    break;}
case 21:
#line 99 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 22:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 23:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 24:
#line 109 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 25:
#line 112 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 33:
#line 130 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 34:
#line 134 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 35:
#line 136 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 36:
#line 138 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 38:
#line 143 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 39:
#line 146 "lang11d"
{ yyval = 0; ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 41:
#line 152 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 42:
#line 154 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 158 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 46:
#line 165 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 49:
#line 174 "lang11d"
{ yyval = 0; ;
    break;}
case 51:
#line 179 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 52:
#line 183 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 53:
#line 187 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 192 "lang11d"
{
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 55:
#line 197 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 56:
#line 215 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-5], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 57:
#line 228 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 58:
#line 230 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 59:
#line 241 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 60:
#line 252 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 61:
#line 265 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 62:
#line 286 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 63:
#line 295 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 64:
#line 300 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 65:
#line 313 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 66:
#line 333 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 67:
#line 339 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 68:
#line 357 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 69:
#line 362 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 1); ;
    break;}
case 70:
#line 363 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[-1], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0); 
			;
    break;}
case 71:
#line 372 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 2); ;
    break;}
case 72:
#line 373 "lang11d"
{
				yyval = yyvsp[-1];
			;
    break;}
case 73:
#line 379 "lang11d"
{ 
					// innermost part
					int action = popls(&generatorStack); 
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);
					
					switch (action) 
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);
					
							yyval = (long)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							yyval = (long)expr;
						} break;
					}
				;
    break;}
case 74:
#line 401 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 75:
#line 405 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 76:
#line 439 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 77:
#line 477 "lang11d"
{ 
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)yyvsp[-1]);
				
				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 78:
#line 491 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit);

				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 79:
#line 502 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 80:
#line 506 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);
				
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);
				
				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);
				
				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0); 
				
				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				yyval = (long)newPyrCallNode(selectornode2, args3, 0, 0); 
			;
    break;}
case 87:
#line 537 "lang11d"
{ 
				PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
				node->mParens = 1;
				yyval = yyvsp[-1]; 
			;
    break;}
case 88:
#line 543 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 89:
#line 553 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 90:
#line 555 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 91:
#line 557 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 92:
#line 559 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 93:
#line 561 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 94:
#line 563 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 96:
#line 579 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 97:
#line 606 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 98:
#line 624 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 99:
#line 651 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 100:
#line 679 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 698 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 726 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 753 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 104:
#line 771 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 105:
#line 796 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 106:
#line 824 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 107:
#line 843 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 108:
#line 871 "lang11d"
{
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 109:
#line 890 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 110:
#line 909 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 111:
#line 926 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 112:
#line 940 "lang11d"
{ 
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				PyrPushLitNode *nilnode;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 113:
#line 961 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 114:
#line 980 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 115:
#line 998 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 116:
#line 1015 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 117:
#line 1031 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 121:
#line 1049 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 122:
#line 1051 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 123:
#line 1064 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 124:
#line 1078 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 125:
#line 1083 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 126:
#line 1087 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 127:
#line 1098 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 128:
#line 1103 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 129:
#line 1113 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 130:
#line 1118 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 131:
#line 1132 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 132:
#line 1147 "lang11d"
{ yyval = 0; ;
    break;}
case 133:
#line 1148 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 134:
#line 1149 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 135:
#line 1150 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 137:
#line 1155 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 139:
#line 1163 "lang11d"
{ yyval = 0; ;
    break;}
case 140:
#line 1165 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 142:
#line 1170 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 143:
#line 1172 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 144:
#line 1177 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 145:
#line 1179 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 146:
#line 1186 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 148:
#line 1195 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 149:
#line 1199 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 150:
#line 1201 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 152:
#line 1206 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 153:
#line 1210 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 154:
#line 1213 "lang11d"
{ yyval = 0; ;
    break;}
case 155:
#line 1214 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 156:
#line 1218 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 157:
#line 1220 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 159:
#line 1225 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 160:
#line 1229 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 161:
#line 1230 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 162:
#line 1231 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 163:
#line 1232 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 164:
#line 1233 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 165:
#line 1234 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 166:
#line 1235 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 167:
#line 1236 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 168:
#line 1237 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 169:
#line 1238 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 170:
#line 1241 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 171:
#line 1244 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 172:
#line 1247 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 173:
#line 1248 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 174:
#line 1249 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 175:
#line 1250 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 176:
#line 1251 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 177:
#line 1252 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 178:
#line 1253 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 179:
#line 1254 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 180:
#line 1255 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 181:
#line 1256 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 182:
#line 1259 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 183:
#line 1260 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 184:
#line 1261 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 185:
#line 1262 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 186:
#line 1263 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 187:
#line 1264 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 188:
#line 1265 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 189:
#line 1266 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 190:
#line 1267 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 191:
#line 1268 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 192:
#line 1272 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 193:
#line 1275 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 194:
#line 1279 "lang11d"
{ yyval = 0; ;
    break;}
case 195:
#line 1281 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 197:
#line 1286 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 198:
#line 1290 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varLocal); ;
    break;}
case 199:
#line 1293 "lang11d"
{ yyval = 0; ;
    break;}
case 200:
#line 1295 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 201:
#line 1299 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 202:
#line 1303 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 203:
#line 1307 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 205:
#line 1314 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 206:
#line 1318 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 207:
#line 1321 "lang11d"
{ yyval = 0; ;
    break;}
case 210:
#line 1327 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 211:
#line 1331 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 212:
#line 1333 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 213:
#line 1335 "lang11d"
{
					PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
					node->mParens = 1;
					yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], node, 0);
				;
    break;}
case 214:
#line 1342 "lang11d"
{ yyval = 0; ;
    break;}
case 217:
#line 1348 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 218:
#line 1352 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 219:
#line 1354 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 220:
#line 1356 "lang11d"
{ 
									PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
									node->mParens = 1;
									yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], node, 0); 
								;
    break;}
case 221:
#line 1364 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 222:
#line 1366 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 224:
#line 1374 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 225:
#line 1377 "lang11d"
{ yyval = 0; ;
    break;}
case 228:
#line 1383 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 229:
#line 1387 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 230:
#line 1389 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 231:
#line 1393 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 232:
#line 1397 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 233:
#line 1401 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 234:
#line 1403 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 236:
#line 1411 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 237:
#line 1414 "lang11d"
{ yyval = 0; ;
    break;}
case 239:
#line 1421 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 240:
#line 1423 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 241:
#line 1427 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 242:
#line 1429 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 243:
#line 1432 "lang11d"
{ yyval = 0; ;
    break;}
case 246:
#line 1438 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 247:
#line 1441 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 248:
#line 1443 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 249:
#line 1445 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 250:
#line 1447 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 251:
#line 1450 "lang11d"
{ yyval = zzval; ;
    break;}
case 252:
#line 1452 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 253:
#line 1460 "lang11d"
{ yyval = zzval; ;
    break;}
case 254:
#line 1462 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				yyval = zzval;
			;
    break;}
case 255:
#line 1470 "lang11d"
{ yyval = zzval; ;
    break;}
case 256:
#line 1472 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					yyval = zzval;
				;
    break;}
case 257:
#line 1482 "lang11d"
{ yyval = zzval; ;
    break;}
case 260:
#line 1488 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 261:
#line 1494 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
			;
    break;}
case 262:
#line 1502 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				yyval = zzval;
			;
    break;}
case 263:
#line 1509 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				yyval = zzval;
			;
    break;}
case 264:
#line 1517 "lang11d"
{ yyval = zzval; ;
    break;}
case 265:
#line 1518 "lang11d"
{ yyval = zzval; ;
    break;}
case 266:
#line 1521 "lang11d"
{ yyval = zzval; ;
    break;}
case 267:
#line 1524 "lang11d"
{ yyval = zzval; ;
    break;}
case 268:
#line 1527 "lang11d"
{ yyval = zzval; ;
    break;}
case 269:
#line 1530 "lang11d"
{ yyval = zzval; ;
    break;}
case 270:
#line 1533 "lang11d"
{ yyval = zzval; ;
    break;}
case 271:
#line 1536 "lang11d"
{ yyval = zzval; ;
    break;}
case 272:
#line 1539 "lang11d"
{ yyval = zzval; ;
    break;}
case 273:
#line 1542 "lang11d"
{ yyval = zzval; ;
    break;}
case 274:
#line 1545 "lang11d"
{ yyval = zzval; ;
    break;}
case 275:
#line 1548 "lang11d"
{ yyval = zzval; ;
    break;}
case 276:
#line 1549 "lang11d"
{ yyval = zzval; ;
    break;}
case 277:
#line 1550 "lang11d"
{ yyval = zzval; ;
    break;}
case 278:
#line 1551 "lang11d"
{ yyval = zzval; ;
    break;}
case 279:
#line 1552 "lang11d"
{ yyval = zzval; ;
    break;}
case 280:
#line 1553 "lang11d"
{ yyval = zzval; ;
    break;}
case 281:
#line 1554 "lang11d"
{ yyval = zzval; ;
    break;}
case 282:
#line 1555 "lang11d"
{ yyval = zzval; ;
    break;}
case 283:
#line 1558 "lang11d"
{ yyval = zzval; ;
    break;}
case 286:
#line 1565 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1567 "lang11d"
