

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 78 between rule 92 and token BINOP resolved as reduce.
Conflict in state 78 between rule 92 and token KEYBINOP resolved as reduce.
Conflict in state 78 between rule 92 and token '-' resolved as reduce.
Conflict in state 78 between rule 92 and token '<' resolved as reduce.
Conflict in state 78 between rule 92 and token '>' resolved as reduce.
Conflict in state 78 between rule 92 and token '*' resolved as reduce.
Conflict in state 78 between rule 92 and token '+' resolved as reduce.
Conflict in state 78 between rule 92 and token '|' resolved as reduce.
Conflict in state 78 between rule 92 and token READWRITEVAR resolved as reduce.
Conflict in state 78 between rule 92 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 78 between rule 92 and token '.' resolved as reduce.
Conflict in state 179 between rule 93 and token BINOP resolved as reduce.
Conflict in state 179 between rule 93 and token KEYBINOP resolved as reduce.
Conflict in state 179 between rule 93 and token '-' resolved as reduce.
Conflict in state 179 between rule 93 and token '<' resolved as reduce.
Conflict in state 179 between rule 93 and token '>' resolved as reduce.
Conflict in state 179 between rule 93 and token '*' resolved as reduce.
Conflict in state 179 between rule 93 and token '+' resolved as reduce.
Conflict in state 179 between rule 93 and token '|' resolved as reduce.
Conflict in state 179 between rule 93 and token READWRITEVAR resolved as reduce.
Conflict in state 179 between rule 93 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 179 between rule 93 and token '.' resolved as shift.
Conflict in state 180 between rule 94 and token BINOP resolved as reduce.
Conflict in state 180 between rule 94 and token KEYBINOP resolved as reduce.
Conflict in state 180 between rule 94 and token '-' resolved as reduce.
Conflict in state 180 between rule 94 and token '<' resolved as reduce.
Conflict in state 180 between rule 94 and token '>' resolved as reduce.
Conflict in state 180 between rule 94 and token '*' resolved as reduce.
Conflict in state 180 between rule 94 and token '+' resolved as reduce.
Conflict in state 180 between rule 94 and token '|' resolved as reduce.
Conflict in state 180 between rule 94 and token READWRITEVAR resolved as reduce.
Conflict in state 180 between rule 94 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 180 between rule 94 and token '.' resolved as shift.
Conflict in state 182 between rule 95 and token BINOP resolved as shift.
Conflict in state 182 between rule 95 and token KEYBINOP resolved as shift.
Conflict in state 182 between rule 95 and token '-' resolved as shift.
Conflict in state 182 between rule 95 and token '<' resolved as shift.
Conflict in state 182 between rule 95 and token '>' resolved as shift.
Conflict in state 182 between rule 95 and token '*' resolved as shift.
Conflict in state 182 between rule 95 and token '+' resolved as shift.
Conflict in state 182 between rule 95 and token '|' resolved as shift.
Conflict in state 182 between rule 95 and token READWRITEVAR resolved as shift.
Conflict in state 182 between rule 95 and token DOUBLEEQUAL resolved as shift.
Conflict in state 182 between rule 95 and token '.' resolved as shift.
Conflict in state 225 between rule 96 and token BINOP resolved as shift.
Conflict in state 225 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 225 between rule 96 and token '-' resolved as shift.
Conflict in state 225 between rule 96 and token '<' resolved as shift.
Conflict in state 225 between rule 96 and token '>' resolved as shift.
Conflict in state 225 between rule 96 and token '*' resolved as shift.
Conflict in state 225 between rule 96 and token '+' resolved as shift.
Conflict in state 225 between rule 96 and token '|' resolved as shift.
Conflict in state 225 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 225 between rule 96 and token DOUBLEEQUAL resolved as shift.
Conflict in state 225 between rule 96 and token '.' resolved as shift.
Conflict in state 231 between rule 99 and token BINOP resolved as shift.
Conflict in state 231 between rule 99 and token KEYBINOP resolved as shift.
Conflict in state 231 between rule 99 and token '-' resolved as shift.
Conflict in state 231 between rule 99 and token '<' resolved as shift.
Conflict in state 231 between rule 99 and token '>' resolved as shift.
Conflict in state 231 between rule 99 and token '*' resolved as shift.
Conflict in state 231 between rule 99 and token '+' resolved as shift.
Conflict in state 231 between rule 99 and token '|' resolved as shift.
Conflict in state 231 between rule 99 and token READWRITEVAR resolved as shift.
Conflict in state 231 between rule 99 and token DOUBLEEQUAL resolved as shift.
Conflict in state 231 between rule 99 and token '.' resolved as shift.
Conflict in state 285 between rule 97 and token BINOP resolved as shift.
Conflict in state 285 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 285 between rule 97 and token '-' resolved as shift.
Conflict in state 285 between rule 97 and token '<' resolved as shift.
Conflict in state 285 between rule 97 and token '>' resolved as shift.
Conflict in state 285 between rule 97 and token '*' resolved as shift.
Conflict in state 285 between rule 97 and token '+' resolved as shift.
Conflict in state 285 between rule 97 and token '|' resolved as shift.
Conflict in state 285 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 285 between rule 97 and token DOUBLEEQUAL resolved as shift.
Conflict in state 285 between rule 97 and token '.' resolved as shift.
Conflict in state 312 between rule 100 and token BINOP resolved as shift.
Conflict in state 312 between rule 100 and token KEYBINOP resolved as shift.
Conflict in state 312 between rule 100 and token '-' resolved as shift.
Conflict in state 312 between rule 100 and token '<' resolved as shift.
Conflict in state 312 between rule 100 and token '>' resolved as shift.
Conflict in state 312 between rule 100 and token '*' resolved as shift.
Conflict in state 312 between rule 100 and token '+' resolved as shift.
Conflict in state 312 between rule 100 and token '|' resolved as shift.
Conflict in state 312 between rule 100 and token READWRITEVAR resolved as shift.
Conflict in state 312 between rule 100 and token DOUBLEEQUAL resolved as shift.
Conflict in state 312 between rule 100 and token '.' resolved as shift.
Conflict in state 339 between rule 76 and token BINOP resolved as shift.
Conflict in state 339 between rule 76 and token KEYBINOP resolved as shift.
Conflict in state 339 between rule 76 and token '-' resolved as shift.
Conflict in state 339 between rule 76 and token '<' resolved as shift.
Conflict in state 339 between rule 76 and token '>' resolved as shift.
Conflict in state 339 between rule 76 and token '*' resolved as shift.
Conflict in state 339 between rule 76 and token '+' resolved as shift.
Conflict in state 339 between rule 76 and token '|' resolved as shift.
Conflict in state 339 between rule 76 and token READWRITEVAR resolved as shift.
Conflict in state 339 between rule 76 and token DOUBLEEQUAL resolved as shift.
Conflict in state 339 between rule 76 and token '.' resolved as shift.
Conflict in state 340 between rule 75 and token BINOP resolved as shift.
Conflict in state 340 between rule 75 and token KEYBINOP resolved as shift.
Conflict in state 340 between rule 75 and token '-' resolved as shift.
Conflict in state 340 between rule 75 and token '<' resolved as shift.
Conflict in state 340 between rule 75 and token '>' resolved as shift.
Conflict in state 340 between rule 75 and token '*' resolved as shift.
Conflict in state 340 between rule 75 and token '+' resolved as shift.
Conflict in state 340 between rule 75 and token '|' resolved as shift.
Conflict in state 340 between rule 75 and token READWRITEVAR resolved as shift.
Conflict in state 340 between rule 75 and token DOUBLEEQUAL resolved as shift.
Conflict in state 340 between rule 75 and token '.' resolved as shift.
Conflict in state 345 between rule 101 and token BINOP resolved as shift.
Conflict in state 345 between rule 101 and token KEYBINOP resolved as shift.
Conflict in state 345 between rule 101 and token '-' resolved as shift.
Conflict in state 345 between rule 101 and token '<' resolved as shift.
Conflict in state 345 between rule 101 and token '>' resolved as shift.
Conflict in state 345 between rule 101 and token '*' resolved as shift.
Conflict in state 345 between rule 101 and token '+' resolved as shift.
Conflict in state 345 between rule 101 and token '|' resolved as shift.
Conflict in state 345 between rule 101 and token READWRITEVAR resolved as shift.
Conflict in state 345 between rule 101 and token DOUBLEEQUAL resolved as shift.
Conflict in state 345 between rule 101 and token '.' resolved as shift.
Conflict in state 350 between rule 98 and token BINOP resolved as shift.
Conflict in state 350 between rule 98 and token KEYBINOP resolved as shift.
Conflict in state 350 between rule 98 and token '-' resolved as shift.
Conflict in state 350 between rule 98 and token '<' resolved as shift.
Conflict in state 350 between rule 98 and token '>' resolved as shift.
Conflict in state 350 between rule 98 and token '*' resolved as shift.
Conflict in state 350 between rule 98 and token '+' resolved as shift.
Conflict in state 350 between rule 98 and token '|' resolved as shift.
Conflict in state 350 between rule 98 and token READWRITEVAR resolved as shift.
Conflict in state 350 between rule 98 and token DOUBLEEQUAL resolved as shift.
Conflict in state 350 between rule 98 and token '.' resolved as shift.
Conflict in state 360 between rule 77 and token BINOP resolved as shift.
Conflict in state 360 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 360 between rule 77 and token '-' resolved as shift.
Conflict in state 360 between rule 77 and token '<' resolved as shift.
Conflict in state 360 between rule 77 and token '>' resolved as shift.
Conflict in state 360 between rule 77 and token '*' resolved as shift.
Conflict in state 360 between rule 77 and token '+' resolved as shift.
Conflict in state 360 between rule 77 and token '|' resolved as shift.
Conflict in state 360 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 360 between rule 77 and token DOUBLEEQUAL resolved as shift.
Conflict in state 360 between rule 77 and token '.' resolved as shift.
Conflict in state 361 between rule 82 and token BINOP resolved as shift.
Conflict in state 361 between rule 82 and token KEYBINOP resolved as shift.
Conflict in state 361 between rule 82 and token '-' resolved as shift.
Conflict in state 361 between rule 82 and token '<' resolved as shift.
Conflict in state 361 between rule 82 and token '>' resolved as shift.
Conflict in state 361 between rule 82 and token '*' resolved as shift.
Conflict in state 361 between rule 82 and token '+' resolved as shift.
Conflict in state 361 between rule 82 and token '|' resolved as shift.
Conflict in state 361 between rule 82 and token READWRITEVAR resolved as shift.
Conflict in state 361 between rule 82 and token DOUBLEEQUAL resolved as shift.
Conflict in state 361 between rule 82 and token '.' resolved as shift.
Conflict in state 362 between rule 81 and token BINOP resolved as shift.
Conflict in state 362 between rule 81 and token KEYBINOP resolved as shift.
Conflict in state 362 between rule 81 and token '-' resolved as shift.
Conflict in state 362 between rule 81 and token '<' resolved as shift.
Conflict in state 362 between rule 81 and token '>' resolved as shift.
Conflict in state 362 between rule 81 and token '*' resolved as shift.
Conflict in state 362 between rule 81 and token '+' resolved as shift.
Conflict in state 362 between rule 81 and token '|' resolved as shift.
Conflict in state 362 between rule 81 and token READWRITEVAR resolved as shift.
Conflict in state 362 between rule 81 and token DOUBLEEQUAL resolved as shift.
Conflict in state 362 between rule 81 and token '.' resolved as shift.
Conflict in state 374 between rule 83 and token BINOP resolved as shift.
Conflict in state 374 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 374 between rule 83 and token '-' resolved as shift.
Conflict in state 374 between rule 83 and token '<' resolved as shift.
Conflict in state 374 between rule 83 and token '>' resolved as shift.
Conflict in state 374 between rule 83 and token '*' resolved as shift.
Conflict in state 374 between rule 83 and token '+' resolved as shift.
Conflict in state 374 between rule 83 and token '|' resolved as shift.
Conflict in state 374 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 374 between rule 83 and token DOUBLEEQUAL resolved as shift.
Conflict in state 374 between rule 83 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> name '(' arglistv1 optkeyarglist ')'
rule 49   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 51   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' '(' arglistv1 optkeyarglist ')'
rule 53   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 54   msgsend -> expr '.' name '(' arglistv1 optkeyarglist ')'
rule 55   msgsend -> expr '.' name blocklist
rule 56   expr1 -> pushliteral
rule 57   expr1 -> blockliteral
rule 58   expr1 -> pushname
rule 59   expr1 -> msgsend
rule 60   expr1 -> '(' exprseq ')'
rule 61   expr1 -> '~' name
rule 62   expr1 -> '[' arglistc ']'
rule 63   expr1 -> '(' valrange2 ')'
rule 64   expr1 -> '(' dictslotlist ')'
rule 65   expr1 -> pseudovar
rule 66   expr1 -> classname '(' keyarglist1 ')'
rule 67   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 68   expr1 -> classname '(' arglistv1 optkeyarglist ')'
rule 69   expr1 -> classname '[' arglistc ']'
rule 70   expr1 -> expr1 '[' arglist1 ']'
rule 71   expr1 -> valrangex1
rule 72   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 73   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 74   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 75   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 76   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 77   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 78   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 79   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 80   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 81   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 82   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 83   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 84   valrange2 -> DOTDOT exprseq
rule 85   valrange2 -> exprseq DOTDOT exprseq
rule 86   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 87   expr -> expr1
rule 88   expr -> valrangexd
rule 89   expr -> valrangeassign
rule 90   expr -> expr '.' '[' arglist1 ']'
rule 91   expr -> classname
rule 92   expr -> '`' expr
rule 93   expr -> expr binop expr
rule 94   expr -> expr keybinop expr
rule 95   expr -> name '=' expr
rule 96   expr -> '~' name '=' expr
rule 97   expr -> expr '.' name '=' expr
rule 98   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 99   expr -> '#' mavars '=' expr
rule 100  expr -> expr1 '[' arglist1 ']' '=' expr
rule 101  expr -> expr '.' '[' arglist1 ']' '=' expr
rule 102  exprn -> expr
rule 103  exprn -> exprn ';' expr
rule 104  exprseq -> exprn optsemi
rule 105  arglistc ->		/* empty */
rule 106  arglistc -> arglist1 optcomma
rule 107  arglist1 -> exprseq
rule 108  arglist1 -> arglist1 ',' exprseq
rule 109  arglistv1 -> '*' exprseq
rule 110  arglistv1 -> arglist1 ',' '*' exprseq
rule 111  keyarglist1 -> keyarg
rule 112  keyarglist1 -> keyarglist1 ',' keyarg
rule 113  keyarg -> keybinop exprseq
rule 114  optkeyarglist ->		/* empty */
rule 115  optkeyarglist -> ',' keyarglist1
rule 116  mavars -> mavarlist
rule 117  mavars -> mavarlist ELLIPSIS name
rule 118  mavarlist -> name
rule 119  mavarlist -> mavarlist ',' name
rule 120  slotliteral -> integer
rule 121  slotliteral -> floatp
rule 122  slotliteral -> ascii
rule 123  slotliteral -> string
rule 124  slotliteral -> symbol
rule 125  slotliteral -> trueobj
rule 126  slotliteral -> falseobj
rule 127  slotliteral -> nilobj
rule 128  slotliteral -> infobj
rule 129  slotliteral -> listlit
rule 130  blockliteral -> block
rule 131  pushname -> name
rule 132  pushliteral -> integer
rule 133  pushliteral -> floatp
rule 134  pushliteral -> ascii
rule 135  pushliteral -> string
rule 136  pushliteral -> symbol
rule 137  pushliteral -> trueobj
rule 138  pushliteral -> falseobj
rule 139  pushliteral -> nilobj
rule 140  pushliteral -> infobj
rule 141  pushliteral -> listlit
rule 142  listliteral -> integer
rule 143  listliteral -> floatp
rule 144  listliteral -> ascii
rule 145  listliteral -> string
rule 146  listliteral -> symbol
rule 147  listliteral -> trueobj
rule 148  listliteral -> falseobj
rule 149  listliteral -> nilobj
rule 150  listliteral -> infobj
rule 151  listliteral -> listlit2
rule 152  block -> '{' argdecls funcvardecls funcbody '}'
rule 153  block -> BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
rule 154  funcvardecls ->		/* empty */
rule 155  funcvardecls -> funcvardecls funcvardecl
rule 156  funcvardecls1 -> funcvardecl
rule 157  funcvardecls1 -> funcvardecls1 funcvardecl
rule 158  funcvardecl -> VAR slotdeflist ';'
rule 159  argdecls ->		/* empty */
rule 160  argdecls -> ARG slotdeflist ';'
rule 161  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 162  argdecls -> '|' slotdeflist '|'
rule 163  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 164  slotdeflist0 ->		/* empty */
rule 165  slotdeflist0 -> slotdeflist
rule 166  slotdeflist -> slotdef
rule 167  slotdeflist -> slotdeflist ',' slotdef
rule 168  slotdef -> name
rule 169  slotdef -> name '=' slotliteral
rule 170  dictslotdef -> expr ':' expr
rule 171  dictslotdef -> keybinop expr
rule 172  dictslotlist1 -> dictslotdef
rule 173  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 174  dictslotlist ->		/* empty */
rule 175  dictslotlist -> dictslotlist1
rule 176  rwslotdeflist -> rwslotdef
rule 177  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 178  rwslotdef -> rwspec name
rule 179  rwslotdef -> rwspec name '=' slotliteral
rule 180  listlit -> '#' '[' literallistc ']'
rule 181  listlit -> '#' classname '[' literallistc ']'
rule 182  listlit2 -> '[' literallistc ']'
rule 183  listlit2 -> classname '[' literallistc ']'
rule 184  literallistc ->		/* empty */
rule 185  literallistc -> literallist1 optcomma
rule 186  literallist1 -> listliteral
rule 187  literallist1 -> literallist1 ',' listliteral
rule 188  rwspec ->		/* empty */
rule 189  rwspec -> '<'
rule 190  rwspec -> READWRITEVAR
rule 191  rwspec -> '>'
rule 192  integer -> INTEGER
rule 193  integer -> '-' INTEGER
rule 194  floatr -> FLOAT
rule 195  floatr -> '-' FLOAT
rule 196  accidental -> ACCIDENTAL
rule 197  accidental -> '-' ACCIDENTAL
rule 198  pie -> PIE
rule 199  floatp -> floatr
rule 200  floatp -> accidental
rule 201  floatp -> floatr pie
rule 202  floatp -> integer pie
rule 203  floatp -> pie
rule 204  floatp -> '-' pie
rule 205  name -> NAME
rule 206  classname -> CLASSNAME
rule 207  primname -> PRIMITIVENAME
rule 208  trueobj -> TRUEOBJ
rule 209  falseobj -> FALSEOBJ
rule 210  nilobj -> NILOBJ
rule 211  infobj -> INFINITUMOBJ
rule 212  ascii -> ASCII
rule 213  symbol -> SYMBOL
rule 214  string -> STRING
rule 215  pseudovar -> PSEUDOVAR
rule 216  binop -> BINOP
rule 217  binop -> READWRITEVAR
rule 218  binop -> DOUBLEEQUAL
rule 219  binop -> '<'
rule 220  binop -> '>'
rule 221  binop -> '-'
rule 222  binop -> '*'
rule 223  binop -> '+'
rule 224  binop -> '|'
rule 225  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 99 180 181
'(' (40) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 98
')' (41) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 98
'*' (42) 22 24 109 110 222
'+' (43) 10 223
',' (44) 28 86 108 110 112 115 119 167 173 177 187
'-' (45) 193 195 197 204 221
'.' (46) 49 50 51 52 53 54 55 78 79 80 81 82 83 90 97 101
':' (58) 14 170
';' (59) 17 18 26 103 158 160 161
'<' (60) 189 219
'=' (61) 75 76 77 81 82 83 95 96 97 98 99 100 101 169 179
'>' (62) 191 220
'[' (91) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 100 101
    180 181 182 183
']' (93) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 100 101
    180 181 182 183
'^' (94) 39 41
'`' (96) 92
'{' (123) 8 9 10 21 22 23 24 152
'|' (124) 162 163 224
'}' (125) 8 9 10 21 22 23 24 152 153
'~' (126) 61 96
error (256)
NAME (257) 205
INTEGER (258) 192 193
FLOAT (259) 194 195
ACCIDENTAL (260) 196 197
SYMBOL (261) 213
STRING (262) 214
ASCII (263) 212
PRIMITIVENAME (264) 207
CLASSNAME (265) 206
VAR (266) 18 158
ARG (267) 160 161
CLASSVAR (268) 17
CONST (269)
NILOBJ (270) 210
TRUEOBJ (271) 208
FALSEOBJ (272) 209
INFINITUMOBJ (273) 211
PSEUDOVAR (274) 215
ELLIPSIS (275) 117 161 163
DOTDOT (276) 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
PIE (277) 198
BEGINCLOSEDFUNC (278) 153
BADTOKEN (279)
INTERPRET (280) 3
BINOP (281) 216
KEYBINOP (282) 225
READWRITEVAR (283) 190 217
DOUBLEEQUAL (284) 218
UMINUS (285)

Nonterminals, with rules where they appear

root (53)
    on left: 1 2 3
classes (54)
    on left: 4 5, on right: 1 5
classextensions (55)
    on left: 6 7, on right: 2 7
classdef (56)
    on left: 8 9, on right: 5
classextension (57)
    on left: 10, on right: 6 7
optname (58)
    on left: 11 12, on right: 9
superclass (59)
    on left: 13 14, on right: 8 9
classvardecls (60)
    on left: 15 16, on right: 8 9 16
classvardecl (61)
    on left: 17 18, on right: 16
methods (62)
    on left: 19 20, on right: 8 9 10 20
methoddef (63)
    on left: 21 22 23 24, on right: 20
optsemi (64)
    on left: 25 26, on right: 37 39 41 104
optcomma (65)
    on left: 27 28, on right: 106 185
funcbody (66)
    on left: 29 30, on right: 31 32 33 152 153
cmdlinecode (67)
    on left: 31 32 33, on right: 3
methbody (68)
    on left: 34 35, on right: 21 22 23 24
primitive (69)
    on left: 36 37, on right: 21 22 23 24
retval (70)
    on left: 38 39, on right: 34 35
funretval (71)
    on left: 40 41, on right: 29 30
blocklist1 (72)
    on left: 42 43, on right: 43 45 46
blocklist (73)
    on left: 44 45, on right: 47 49 50 51 53 55
msgsend (74)
    on left: 46 47 48 49 50 51 52 53 54 55, on right: 59
expr1 (75)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71,
    on right: 70 72 73 74 75 76 77 87 100
valrangex1 (76)
    on left: 72 73 74, on right: 71
valrangeassign (77)
    on left: 75 76 77, on right: 89
valrangexd (78)
    on left: 78 79 80 81 82 83, on right: 88
valrange2 (79)
    on left: 84 85 86, on right: 63
expr (80)
    on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101,
    on right: 39 41 49 50 51 52 53 54 55 75 76 77 78 79 80 81 82 83
    90 92 93 94 95 96 97 98 99 100 101 102 103 170 171
exprn (81)
    on left: 102 103, on right: 103 104
exprseq (82)
    on left: 104, on right: 30 35 60 73 74 76 77 79 80 82 83 84 85
    86 107 108 109 110 113
arglistc (83)
    on left: 105 106, on right: 62 69
arglist1 (84)
    on left: 107 108, on right: 47 51 53 67 70 72 74 75 77 78 80 81
    83 90 98 100 101 106 108 110
arglistv1 (85)
    on left: 109 110, on right: 48 52 54 68
keyarglist1 (86)
    on left: 111 112, on right: 49 50 66 112 115
keyarg (87)
    on left: 113, on right: 111 112
optkeyarglist (88)
    on left: 114 115, on right: 47 48 51 52 53 54 67 68 98
mavars (89)
    on left: 116 117, on right: 99
mavarlist (90)
    on left: 118 119, on right: 116 117 119
slotliteral (91)
    on left: 120 121 122 123 124 125 126 127 128 129,
    on right: 169 179
blockliteral (92)
    on left: 130, on right: 42 43 57
pushname (93)
    on left: 131, on right: 58
pushliteral (94)
    on left: 132 133 134 135 136 137 138 139 140 141,
    on right: 56
listliteral (95)
    on left: 142 143 144 145 146 147 148 149 150 151,
    on right: 186 187
block (96)
    on left: 152 153, on right: 130
funcvardecls (97)
    on left: 154 155, on right: 21 22 23 24 152 153 155
funcvardecls1 (98)
    on left: 156 157, on right: 31 32 157
funcvardecl (99)
    on left: 158, on right: 155 156 157
argdecls (100)
    on left: 159 160 161 162 163, on right: 21 22 23 24 152 153
slotdeflist0 (101)
    on left: 164 165, on right: 161 163
slotdeflist (102)
    on left: 166 167, on right: 158 160 162 165 167
slotdef (103)
    on left: 168 169, on right: 166 167
dictslotdef (104)
    on left: 170 171, on right: 172 173
dictslotlist1 (105)
    on left: 172 173, on right: 173 175
dictslotlist (106)
    on left: 174 175, on right: 64
rwslotdeflist (107)
    on left: 176 177, on right: 17 18 177
rwslotdef (108)
    on left: 178 179, on right: 176 177
listlit (109)
    on left: 180 181, on right: 129 141
listlit2 (110)
    on left: 182 183, on right: 151
literallistc (111)
    on left: 184 185, on right: 180 181 182 183
literallist1 (112)
    on left: 186 187, on right: 185 187
rwspec (113)
    on left: 188 189 190 191, on right: 178 179
integer (114)
    on left: 192 193, on right: 120 132 142 202
floatr (115)
    on left: 194 195, on right: 199 201
accidental (116)
    on left: 196 197, on right: 200
pie (117)
    on left: 198, on right: 201 202 203 204
floatp (118)
    on left: 199 200 201 202 203 204, on right: 121 133 143
name (119)
    on left: 205, on right: 12 21 22 46 47 48 50 53 54 55 61 95 96
    97 98 117 118 119 131 161 163 168 169 178 179
classname (120)
    on left: 206, on right: 8 9 10 14 66 67 68 69 91 181 183
primname (121)
    on left: 207, on right: 37
trueobj (122)
    on left: 208, on right: 125 137 147
falseobj (123)
    on left: 209, on right: 126 138 148
nilobj (124)
    on left: 210, on right: 127 139 149
infobj (125)
    on left: 211, on right: 128 140 150
ascii (126)
    on left: 212, on right: 122 134 144
symbol (127)
    on left: 213, on right: 124 136 146
string (128)
    on left: 214, on right: 123 135 145
pseudovar (129)
    on left: 215, on right: 65
binop (130)
    on left: 216 217 218 219 220 221 222 223 224, on right: 23 24 93
keybinop (131)
    on left: 225, on right: 94 113 171


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 394
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 26
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 30
    cmdlinecode	go to state 31
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 45
    funcvardecl	go to state 46
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 63



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 64
    classname	go to state 65



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 66



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 205)

    $default	reduce using rule 205 (name)



state 7

    integer  ->  INTEGER .   (rule 192)

    $default	reduce using rule 192 (integer)



state 8

    floatr  ->  FLOAT .   (rule 194)

    $default	reduce using rule 194 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 196)

    $default	reduce using rule 196 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 213)

    $default	reduce using rule 213 (symbol)



state 11

    string  ->  STRING .   (rule 214)

    $default	reduce using rule 214 (string)



state 12

    ascii  ->  ASCII .   (rule 212)

    $default	reduce using rule 212 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 206)

    $default	reduce using rule 206 (classname)



state 14

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 158)

    NAME	shift, and go to state 6

    slotdeflist	go to state 67
    slotdef	go to state 68
    name	go to state 69



state 15

    nilobj  ->  NILOBJ .   (rule 210)

    $default	reduce using rule 210 (nilobj)



state 16

    trueobj  ->  TRUEOBJ .   (rule 208)

    $default	reduce using rule 208 (trueobj)



state 17

    falseobj  ->  FALSEOBJ .   (rule 209)

    $default	reduce using rule 209 (falseobj)



state 18

    infobj  ->  INFINITUMOBJ .   (rule 211)

    $default	reduce using rule 211 (infobj)



state 19

    pseudovar  ->  PSEUDOVAR .   (rule 215)

    $default	reduce using rule 215 (pseudovar)



state 20

    pie  ->  PIE .   (rule 198)

    $default	reduce using rule 198 (pie)



state 21

    block  ->  BEGINCLOSEDFUNC . argdecls funcvardecls funcbody '}'   (rule 153)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 72



state 22

    integer  ->  '-' . INTEGER   (rule 193)
    floatr  ->  '-' . FLOAT   (rule 195)
    accidental  ->  '-' . ACCIDENTAL   (rule 197)
    floatp  ->  '-' . pie   (rule 204)

    INTEGER	shift, and go to state 73
    FLOAT	shift, and go to state 74
    ACCIDENTAL	shift, and go to state 75
    PIE 	shift, and go to state 20

    pie 	go to state 76



state 23

    expr  ->  '`' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 78
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 24

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 152)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 79



state 25

    expr1  ->  '[' . arglistc ']'   (rule 62)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 105 (arglistc)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglistc	go to state 81
    arglist1	go to state 82
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 26

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 83
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 174 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 85
    expr	go to state 86
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 88
    funcvardecl	go to state 46
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 27

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 93
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 28

    expr1  ->  '~' . name   (rule 61)
    expr  ->  '~' . name '=' expr   (rule 96)

    NAME	shift, and go to state 6

    name	go to state 94



state 29

    expr  ->  '#' . mavars '=' expr   (rule 99)
    listlit  ->  '#' . '[' literallistc ']'   (rule 180)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 181)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    mavars	go to state 96
    mavarlist	go to state 97
    name	go to state 98
    classname	go to state 99



state 30

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 31

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 32

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 33

    expr1  ->  msgsend .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 34

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 .   (rule 87)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 100)

    '[' 	shift, and go to state 100

    $default	reduce using rule 87 (expr)



state 35

    expr1  ->  valrangex1 .   (rule 71)

    $default	reduce using rule 71 (expr1)



state 36

    expr  ->  valrangeassign .   (rule 89)

    $default	reduce using rule 89 (expr)



state 37

    expr  ->  valrangexd .   (rule 88)

    $default	reduce using rule 88 (expr)



state 38

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  expr .   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 102 (exprn)

    binop	go to state 111
    keybinop	go to state 112



state 39

    exprn  ->  exprn . ';' expr   (rule 103)
    exprseq  ->  exprn . optsemi   (rule 104)

    ';' 	shift, and go to state 113

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 114



state 40

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funretval	go to state 115



state 41

    expr1  ->  blockliteral .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 42

    expr1  ->  pushname .   (rule 58)

    $default	reduce using rule 58 (expr1)



state 43

    expr1  ->  pushliteral .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 44

    blockliteral  ->  block .   (rule 130)

    $default	reduce using rule 130 (blockliteral)



state 45

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 157)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 116
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 46

    funcvardecls1  ->  funcvardecl .   (rule 156)

    $default	reduce using rule 156 (funcvardecls1)



state 47

    pushliteral  ->  listlit .   (rule 141)

    $default	reduce using rule 141 (pushliteral)



state 48

    pushliteral  ->  integer .   (rule 132)
    floatp  ->  integer . pie   (rule 202)

    PIE 	shift, and go to state 20

    $default	reduce using rule 132 (pushliteral)

    pie 	go to state 118



state 49

    floatp  ->  floatr .   (rule 199)
    floatp  ->  floatr . pie   (rule 201)

    PIE 	shift, and go to state 20

    $default	reduce using rule 199 (floatp)

    pie 	go to state 119



state 50

    floatp  ->  accidental .   (rule 200)

    $default	reduce using rule 200 (floatp)



state 51

    floatp  ->  pie .   (rule 203)

    $default	reduce using rule 203 (floatp)



state 52

    pushliteral  ->  floatp .   (rule 133)

    $default	reduce using rule 133 (pushliteral)



state 53

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name . '(' arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name . '=' expr   (rule 95)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 98)
    pushname  ->  name .   (rule 131)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 120
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 121

    $default	reduce using rule 131 (pushname)

    blocklist1	go to state 122
    blockliteral	go to state 123
    block	go to state 44



state 54

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 66)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname . '(' arglistv1 optkeyarglist ')'   (rule 68)
    expr1  ->  classname . '[' arglistc ']'   (rule 69)
    expr  ->  classname .   (rule 91)

    '[' 	shift, and go to state 124
    '(' 	shift, and go to state 125

    $default	reduce using rule 91 (expr)



state 55

    pushliteral  ->  trueobj .   (rule 137)

    $default	reduce using rule 137 (pushliteral)



state 56

    pushliteral  ->  falseobj .   (rule 138)

    $default	reduce using rule 138 (pushliteral)



state 57

    pushliteral  ->  nilobj .   (rule 139)

    $default	reduce using rule 139 (pushliteral)



state 58

    pushliteral  ->  infobj .   (rule 140)

    $default	reduce using rule 140 (pushliteral)



state 59

    pushliteral  ->  ascii .   (rule 134)

    $default	reduce using rule 134 (pushliteral)



state 60

    pushliteral  ->  symbol .   (rule 136)

    $default	reduce using rule 136 (pushliteral)



state 61

    pushliteral  ->  string .   (rule 135)

    $default	reduce using rule 135 (pushliteral)



state 62

    expr1  ->  pseudovar .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 63

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 126



state 64

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 65

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127
    '[' 	shift, and go to state 128

    $default	reduce using rule 13 (superclass)

    superclass	go to state 129



state 66

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 67

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 158)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 167)

    ';' 	shift, and go to state 130
    ',' 	shift, and go to state 131



state 68

    slotdeflist  ->  slotdef .   (rule 166)

    $default	reduce using rule 166 (slotdeflist)



state 69

    slotdef  ->  name .   (rule 168)
    slotdef  ->  name . '=' slotliteral   (rule 169)

    '=' 	shift, and go to state 132

    $default	reduce using rule 168 (slotdef)



state 70

    argdecls  ->  ARG . slotdeflist ';'   (rule 160)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 161)

    NAME	shift, and go to state 6

    $default	reduce using rule 164 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 68
    name	go to state 69



state 71

    argdecls  ->  '|' . slotdeflist '|'   (rule 162)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 163)

    NAME	shift, and go to state 6

    $default	reduce using rule 164 (slotdeflist0)

    slotdeflist0	go to state 135
    slotdeflist	go to state 136
    slotdef	go to state 68
    name	go to state 69



state 72

    block  ->  BEGINCLOSEDFUNC argdecls . funcvardecls funcbody '}'   (rule 153)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 137



state 73

    integer  ->  '-' INTEGER .   (rule 193)

    $default	reduce using rule 193 (integer)



state 74

    floatr  ->  '-' FLOAT .   (rule 195)

    $default	reduce using rule 195 (floatr)



state 75

    accidental  ->  '-' ACCIDENTAL .   (rule 197)

    $default	reduce using rule 197 (accidental)



state 76

    floatp  ->  '-' pie .   (rule 204)

    $default	reduce using rule 204 (floatp)



state 77

    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 83
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 174 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 85
    expr	go to state 86
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 78

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  '`' expr .   (rule 92)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)


    $default	reduce using rule 92 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 79

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 152)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 138



state 80

    arglist1  ->  exprseq .   (rule 107)

    $default	reduce using rule 107 (arglist1)



state 81

    expr1  ->  '[' arglistc . ']'   (rule 62)

    ']' 	shift, and go to state 139



state 82

    arglistc  ->  arglist1 . optcomma   (rule 106)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)

    ',' 	shift, and go to state 140

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 141



state 83

    valrange2  ->  DOTDOT . exprseq   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 142
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 84

    keybinop  ->  KEYBINOP .   (rule 225)

    $default	reduce using rule 225 (keybinop)



state 85

    expr1  ->  '(' valrange2 . ')'   (rule 63)

    ')' 	shift, and go to state 143



state 86

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  expr .   (rule 102)
    dictslotdef  ->  expr . ':' expr   (rule 170)

    ':' 	shift, and go to state 144
    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 102 (exprn)

    binop	go to state 111
    keybinop	go to state 112



state 87

    expr1  ->  '(' exprseq . ')'   (rule 60)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 85)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 86)

    DOTDOT	shift, and go to state 145
    ',' 	shift, and go to state 146
    ')' 	shift, and go to state 147



state 88

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 157)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 148
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 89

    dictslotlist1  ->  dictslotdef .   (rule 172)

    $default	reduce using rule 172 (dictslotlist1)



state 90

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 173)
    dictslotlist  ->  dictslotlist1 .   (rule 175)

    ',' 	shift, and go to state 149

    $default	reduce using rule 175 (dictslotlist)



state 91

    expr1  ->  '(' dictslotlist . ')'   (rule 64)

    ')' 	shift, and go to state 150



state 92

    dictslotdef  ->  keybinop . expr   (rule 171)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 151
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 93

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110
    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 153
    binop	go to state 111
    keybinop	go to state 112



state 94

    expr1  ->  '~' name .   (rule 61)
    expr  ->  '~' name . '=' expr   (rule 96)

    '=' 	shift, and go to state 154

    $default	reduce using rule 61 (expr1)



state 95

    listlit  ->  '#' '[' . literallistc ']'   (rule 180)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 155

    $default	reduce using rule 184 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 158
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 96

    expr  ->  '#' mavars . '=' expr   (rule 99)

    '=' 	shift, and go to state 170



state 97

    mavars  ->  mavarlist .   (rule 116)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 117)
    mavarlist  ->  mavarlist . ',' name   (rule 119)

    ELLIPSIS	shift, and go to state 171
    ',' 	shift, and go to state 172

    $default	reduce using rule 116 (mavars)



state 98

    mavarlist  ->  name .   (rule 118)

    $default	reduce using rule 118 (mavarlist)



state 99

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 181)

    '[' 	shift, and go to state 173



state 100

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 174
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 175
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 101

    binop  ->  BINOP .   (rule 216)

    $default	reduce using rule 216 (binop)



state 102

    binop  ->  '-' .   (rule 221)

    $default	reduce using rule 221 (binop)



state 103

    binop  ->  '<' .   (rule 219)

    $default	reduce using rule 219 (binop)



state 104

    binop  ->  '>' .   (rule 220)

    $default	reduce using rule 220 (binop)



state 105

    binop  ->  '*' .   (rule 222)

    $default	reduce using rule 222 (binop)



state 106

    binop  ->  '+' .   (rule 223)

    $default	reduce using rule 223 (binop)



state 107

    binop  ->  '|' .   (rule 224)

    $default	reduce using rule 224 (binop)



state 108

    binop  ->  READWRITEVAR .   (rule 217)

    $default	reduce using rule 217 (binop)



state 109

    binop  ->  DOUBLEEQUAL .   (rule 218)

    $default	reduce using rule 218 (binop)



state 110

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' . name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' . name blocklist   (rule 55)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 90)
    expr  ->  expr '.' . name '=' expr   (rule 97)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 176
    '(' 	shift, and go to state 177

    name	go to state 178



state 111

    expr  ->  expr binop . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 179
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 112

    expr  ->  expr keybinop . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 180
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 113

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 103)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 181
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 114

    exprseq  ->  exprn optsemi .   (rule 104)

    $default	reduce using rule 104 (exprseq)



state 115

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 116

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 117

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 157)

    $default	reduce using rule 157 (funcvardecls1)



state 118

    floatp  ->  integer pie .   (rule 202)

    $default	reduce using rule 202 (floatp)



state 119

    floatp  ->  floatr pie .   (rule 201)

    $default	reduce using rule 201 (floatp)



state 120

    expr  ->  name '=' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 182
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 121

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name '(' . arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 184
    arglistv1	go to state 185
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 122

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 186
    block	go to state 44



state 123

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 124

    expr1  ->  classname '[' . arglistc ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 105 (arglistc)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglistc	go to state 187
    arglist1	go to state 82
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 125

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 66)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname '(' . arglistv1 optkeyarglist ')'   (rule 68)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 188
    arglistv1	go to state 189
    keyarglist1	go to state 190
    keyarg	go to state 191
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 192



state 126

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 193



state 127

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 194



state 128

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 195
    name	go to state 196



state 129

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 197



state 130

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 158)

    $default	reduce using rule 158 (funcvardecl)



state 131

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 167)

    NAME	shift, and go to state 6

    slotdef	go to state 198
    name	go to state 69



state 132

    slotdef  ->  name '=' . slotliteral   (rule 169)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 199

    slotliteral	go to state 200
    listlit	go to state 201
    integer	go to state 202
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 203
    trueobj	go to state 204
    falseobj	go to state 205
    nilobj	go to state 206
    infobj	go to state 207
    ascii	go to state 208
    symbol	go to state 209
    string	go to state 210



state 133

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 161)

    ELLIPSIS	shift, and go to state 211



state 134

    argdecls  ->  ARG slotdeflist . ';'   (rule 160)
    slotdeflist0  ->  slotdeflist .   (rule 165)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 167)

    ';' 	shift, and go to state 212
    ',' 	shift, and go to state 131

    $default	reduce using rule 165 (slotdeflist0)



state 135

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 163)

    ELLIPSIS	shift, and go to state 213



state 136

    argdecls  ->  '|' slotdeflist . '|'   (rule 162)
    slotdeflist0  ->  slotdeflist .   (rule 165)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 167)

    '|' 	shift, and go to state 214
    ',' 	shift, and go to state 131

    $default	reduce using rule 165 (slotdeflist0)



state 137

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls . funcbody '}'   (rule 153)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 215
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 216
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 138

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 152)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 217
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 216
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 139

    expr1  ->  '[' arglistc ']' .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 140

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 108)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 218
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 141

    arglistc  ->  arglist1 optcomma .   (rule 106)

    $default	reduce using rule 106 (arglistc)



state 142

    valrange2  ->  DOTDOT exprseq .   (rule 84)

    $default	reduce using rule 84 (valrange2)



state 143

    expr1  ->  '(' valrange2 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 144

    dictslotdef  ->  expr ':' . expr   (rule 170)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 219
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 145

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 220
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 146

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 221
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 147

    expr1  ->  '(' exprseq ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 148

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 222



state 149

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 173)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 223
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 224
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 150

    expr1  ->  '(' dictslotlist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 151

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    dictslotdef  ->  keybinop expr .   (rule 171)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 171 (dictslotdef)

    binop	go to state 111
    keybinop	go to state 112



state 152

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 153

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 154

    expr  ->  '~' name '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 225
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 155

    listlit2  ->  '[' . literallistc ']'   (rule 182)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 155

    $default	reduce using rule 184 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 226
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 156

    literallist1  ->  listliteral .   (rule 186)

    $default	reduce using rule 186 (literallist1)



state 157

    listliteral  ->  listlit2 .   (rule 151)

    $default	reduce using rule 151 (listliteral)



state 158

    listlit  ->  '#' '[' literallistc . ']'   (rule 180)

    ']' 	shift, and go to state 227



state 159

    literallistc  ->  literallist1 . optcomma   (rule 185)
    literallist1  ->  literallist1 . ',' listliteral   (rule 187)

    ',' 	shift, and go to state 228

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 229



state 160

    listliteral  ->  integer .   (rule 142)
    floatp  ->  integer . pie   (rule 202)

    PIE 	shift, and go to state 20

    $default	reduce using rule 142 (listliteral)

    pie 	go to state 118



state 161

    listliteral  ->  floatp .   (rule 143)

    $default	reduce using rule 143 (listliteral)



state 162

    listlit2  ->  classname . '[' literallistc ']'   (rule 183)

    '[' 	shift, and go to state 230



state 163

    listliteral  ->  trueobj .   (rule 147)

    $default	reduce using rule 147 (listliteral)



state 164

    listliteral  ->  falseobj .   (rule 148)

    $default	reduce using rule 148 (listliteral)



state 165

    listliteral  ->  nilobj .   (rule 149)

    $default	reduce using rule 149 (listliteral)



state 166

    listliteral  ->  infobj .   (rule 150)

    $default	reduce using rule 150 (listliteral)



state 167

    listliteral  ->  ascii .   (rule 144)

    $default	reduce using rule 144 (listliteral)



state 168

    listliteral  ->  symbol .   (rule 146)

    $default	reduce using rule 146 (listliteral)



state 169

    listliteral  ->  string .   (rule 145)

    $default	reduce using rule 145 (listliteral)



state 170

    expr  ->  '#' mavars '=' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 231
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 171

    mavars  ->  mavarlist ELLIPSIS . name   (rule 117)

    NAME	shift, and go to state 6

    name	go to state 232



state 172

    mavarlist  ->  mavarlist ',' . name   (rule 119)

    NAME	shift, and go to state 6

    name	go to state 233



state 173

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 181)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 155

    $default	reduce using rule 184 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 234
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 174

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 235
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 175

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 70)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 100)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)

    DOTDOT	shift, and go to state 236
    ']' 	shift, and go to state 237
    ',' 	shift, and go to state 238



state 176

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 90)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 239
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 240
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 177

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' '(' . arglistv1 optkeyarglist ')'   (rule 52)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 241
    arglistv1	go to state 242
    keyarglist1	go to state 243
    keyarg	go to state 191
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 192



state 178

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name . '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' name . blocklist   (rule 55)
    expr  ->  expr '.' name . '=' expr   (rule 97)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 244
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 245

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 247
    blockliteral	go to state 123
    block	go to state 44



state 179

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr binop expr .   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    '.' 	shift, and go to state 110

    $default	reduce using rule 93 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 180

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr keybinop expr .   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    '.' 	shift, and go to state 110

    $default	reduce using rule 94 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 181

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  exprn ';' expr .   (rule 103)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 103 (exprn)

    binop	go to state 111
    keybinop	go to state 112



state 182

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  name '=' expr .   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 95 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 183

    arglistv1  ->  '*' . exprseq   (rule 109)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 248
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 184

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 98)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 110)

    ',' 	shift, and go to state 249

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 250



state 185

    msgsend  ->  name '(' arglistv1 . optkeyarglist ')'   (rule 48)

    ',' 	shift, and go to state 251

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 252



state 186

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 187

    expr1  ->  classname '[' arglistc . ']'   (rule 69)

    ']' 	shift, and go to state 253



state 188

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 67)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 110)

    ',' 	shift, and go to state 249

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 254



state 189

    expr1  ->  classname '(' arglistv1 . optkeyarglist ')'   (rule 68)

    ',' 	shift, and go to state 251

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 255



state 190

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 66)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 112)

    ',' 	shift, and go to state 256
    ')' 	shift, and go to state 257



state 191

    keyarglist1  ->  keyarg .   (rule 111)

    $default	reduce using rule 111 (keyarglist1)



state 192

    keyarg  ->  keybinop . exprseq   (rule 113)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 258
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 193

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 259
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 260

    methoddef	go to state 261
    name	go to state 262
    binop	go to state 263



state 194

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 195

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 264



state 196

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 197

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 265



state 198

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 167)

    $default	reduce using rule 167 (slotdeflist)



state 199

    listlit  ->  '#' . '[' literallistc ']'   (rule 180)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 181)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    classname	go to state 99



state 200

    slotdef  ->  name '=' slotliteral .   (rule 169)

    $default	reduce using rule 169 (slotdef)



state 201

    slotliteral  ->  listlit .   (rule 129)

    $default	reduce using rule 129 (slotliteral)



state 202

    slotliteral  ->  integer .   (rule 120)
    floatp  ->  integer . pie   (rule 202)

    PIE 	shift, and go to state 20

    $default	reduce using rule 120 (slotliteral)

    pie 	go to state 118



state 203

    slotliteral  ->  floatp .   (rule 121)

    $default	reduce using rule 121 (slotliteral)



state 204

    slotliteral  ->  trueobj .   (rule 125)

    $default	reduce using rule 125 (slotliteral)



state 205

    slotliteral  ->  falseobj .   (rule 126)

    $default	reduce using rule 126 (slotliteral)



state 206

    slotliteral  ->  nilobj .   (rule 127)

    $default	reduce using rule 127 (slotliteral)



state 207

    slotliteral  ->  infobj .   (rule 128)

    $default	reduce using rule 128 (slotliteral)



state 208

    slotliteral  ->  ascii .   (rule 122)

    $default	reduce using rule 122 (slotliteral)



state 209

    slotliteral  ->  symbol .   (rule 124)

    $default	reduce using rule 124 (slotliteral)



state 210

    slotliteral  ->  string .   (rule 123)

    $default	reduce using rule 123 (slotliteral)



state 211

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 161)

    NAME	shift, and go to state 6

    name	go to state 266



state 212

    argdecls  ->  ARG slotdeflist ';' .   (rule 160)

    $default	reduce using rule 160 (argdecls)



state 213

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 163)

    NAME	shift, and go to state 6

    name	go to state 267



state 214

    argdecls  ->  '|' slotdeflist '|' .   (rule 162)

    $default	reduce using rule 162 (argdecls)



state 215

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody . '}'   (rule 153)

    '}' 	shift, and go to state 268



state 216

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 155)

    $default	reduce using rule 155 (funcvardecls)



state 217

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 152)

    '}' 	shift, and go to state 269



state 218

    arglist1  ->  arglist1 ',' exprseq .   (rule 108)

    $default	reduce using rule 108 (arglist1)



state 219

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    dictslotdef  ->  expr ':' expr .   (rule 170)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 170 (dictslotdef)

    binop	go to state 111
    keybinop	go to state 112



state 220

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 85)

    $default	reduce using rule 85 (valrange2)



state 221

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 86)

    DOTDOT	shift, and go to state 270



state 222

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 223

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    dictslotdef  ->  expr . ':' expr   (rule 170)

    ':' 	shift, and go to state 144
    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    binop	go to state 111
    keybinop	go to state 112



state 224

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 173)

    $default	reduce using rule 173 (dictslotlist1)



state 225

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  '~' name '=' expr .   (rule 96)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 96 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 226

    listlit2  ->  '[' literallistc . ']'   (rule 182)

    ']' 	shift, and go to state 271



state 227

    listlit  ->  '#' '[' literallistc ']' .   (rule 180)

    $default	reduce using rule 180 (listlit)



state 228

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 187)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 155

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 272
    listlit2	go to state 157
    integer	go to state 160
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 229

    literallistc  ->  literallist1 optcomma .   (rule 185)

    $default	reduce using rule 185 (literallistc)



state 230

    listlit2  ->  classname '[' . literallistc ']'   (rule 183)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 155

    $default	reduce using rule 184 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 273
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 231

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  '#' mavars '=' expr .   (rule 99)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 99 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 232

    mavars  ->  mavarlist ELLIPSIS name .   (rule 117)

    $default	reduce using rule 117 (mavars)



state 233

    mavarlist  ->  mavarlist ',' name .   (rule 119)

    $default	reduce using rule 119 (mavarlist)



state 234

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 181)

    ']' 	shift, and go to state 274



state 235

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 76)

    ']' 	shift, and go to state 275



state 236

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 276
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 277
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 237

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 70)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 100)

    '=' 	shift, and go to state 278

    $default	reduce using rule 70 (expr1)



state 238

    arglist1  ->  arglist1 ',' . exprseq   (rule 108)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 218
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 239

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 279
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 240

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 90)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 101)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)

    DOTDOT	shift, and go to state 280
    ']' 	shift, and go to state 281
    ',' 	shift, and go to state 238



state 241

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 110)

    ',' 	shift, and go to state 249

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 282



state 242

    msgsend  ->  expr '.' '(' arglistv1 . optkeyarglist ')'   (rule 52)

    ',' 	shift, and go to state 251

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 283



state 243

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 112)

    ',' 	shift, and go to state 256
    ')' 	shift, and go to state 284



state 244

    expr  ->  expr '.' name '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 285
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 245

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name '(' . arglistv1 optkeyarglist ')'   (rule 54)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 80
    arglist1	go to state 286
    arglistv1	go to state 287
    keyarglist1	go to state 288
    keyarg	go to state 191
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 192



state 246

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 186
    block	go to state 44



state 247

    msgsend  ->  expr '.' name blocklist .   (rule 55)

    $default	reduce using rule 55 (msgsend)



state 248

    arglistv1  ->  '*' exprseq .   (rule 109)

    $default	reduce using rule 109 (arglistv1)



state 249

    arglist1  ->  arglist1 ',' . exprseq   (rule 108)
    arglistv1  ->  arglist1 ',' . '*' exprseq   (rule 110)
    optkeyarglist  ->  ',' . keyarglist1   (rule 115)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 289
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 218
    keyarglist1	go to state 290
    keyarg	go to state 191
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 192



state 250

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 98)

    ')' 	shift, and go to state 291



state 251

    optkeyarglist  ->  ',' . keyarglist1   (rule 115)

    KEYBINOP	shift, and go to state 84

    keyarglist1	go to state 290
    keyarg	go to state 191
    keybinop	go to state 192



state 252

    msgsend  ->  name '(' arglistv1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 292



state 253

    expr1  ->  classname '[' arglistc ']' .   (rule 69)

    $default	reduce using rule 69 (expr1)



state 254

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 67)

    ')' 	shift, and go to state 293



state 255

    expr1  ->  classname '(' arglistv1 optkeyarglist . ')'   (rule 68)

    ')' 	shift, and go to state 294



state 256

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 112)

    KEYBINOP	shift, and go to state 84

    keyarg	go to state 295
    keybinop	go to state 192



state 257

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 66)

    $default	reduce using rule 66 (expr1)



state 258

    keyarg  ->  keybinop exprseq .   (rule 113)

    $default	reduce using rule 113 (keyarg)



state 259

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 222)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109

    $default	reduce using rule 222 (binop)

    name	go to state 296
    binop	go to state 297



state 260

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 261

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 262

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 298



state 263

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 299



state 264

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127

    $default	reduce using rule 13 (superclass)

    superclass	go to state 300



state 265

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 301
    CLASSVAR	shift, and go to state 302

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 303
    methods	go to state 304



state 266

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 161)

    ';' 	shift, and go to state 305



state 267

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 163)

    '|' 	shift, and go to state 306



state 268

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}' .   (rule 153)

    $default	reduce using rule 153 (block)



state 269

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 152)

    $default	reduce using rule 152 (block)



state 270

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 307
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 271

    listlit2  ->  '[' literallistc ']' .   (rule 182)

    $default	reduce using rule 182 (listlit2)



state 272

    literallist1  ->  literallist1 ',' listliteral .   (rule 187)

    $default	reduce using rule 187 (literallist1)



state 273

    listlit2  ->  classname '[' literallistc . ']'   (rule 183)

    ']' 	shift, and go to state 308



state 274

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 181)

    $default	reduce using rule 181 (listlit)



state 275

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 76)

    '=' 	shift, and go to state 309

    $default	reduce using rule 73 (valrangex1)



state 276

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 72)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 75)

    '=' 	shift, and go to state 310

    $default	reduce using rule 72 (valrangex1)



state 277

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 77)

    ']' 	shift, and go to state 311



state 278

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 312
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 279

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 82)

    ']' 	shift, and go to state 313



state 280

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 314
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 315
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 281

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 90)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 101)

    '=' 	shift, and go to state 316

    $default	reduce using rule 90 (expr)



state 282

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 317



state 283

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist . ')'   (rule 52)

    ')' 	shift, and go to state 318



state 284

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 49)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 319
    blockliteral	go to state 123
    block	go to state 44



state 285

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr '.' name '=' expr .   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 97 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 286

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 53)
    arglist1  ->  arglist1 . ',' exprseq   (rule 108)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 110)

    ',' 	shift, and go to state 249

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 320



state 287

    msgsend  ->  expr '.' name '(' arglistv1 . optkeyarglist ')'   (rule 54)

    ',' 	shift, and go to state 251

    $default	reduce using rule 114 (optkeyarglist)

    optkeyarglist	go to state 321



state 288

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 50)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 112)

    ',' 	shift, and go to state 256
    ')' 	shift, and go to state 322



state 289

    arglistv1  ->  arglist1 ',' '*' . exprseq   (rule 110)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 323
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 290

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 112)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 115)

    ',' 	shift, and go to state 256

    $default	reduce using rule 115 (optkeyarglist)



state 291

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 98)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 324
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 325
    blockliteral	go to state 123
    block	go to state 44



state 292

    msgsend  ->  name '(' arglistv1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 293

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 294

    expr1  ->  classname '(' arglistv1 optkeyarglist ')' .   (rule 68)

    $default	reduce using rule 68 (expr1)



state 295

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 112)

    $default	reduce using rule 112 (keyarglist1)



state 296

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 326



state 297

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 327



state 298

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 328



state 299

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 329



state 300

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 330



state 301

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 331
    '>' 	shift, and go to state 332
    READWRITEVAR	shift, and go to state 333

    $default	reduce using rule 188 (rwspec)

    rwslotdeflist	go to state 334
    rwslotdef	go to state 335
    rwspec	go to state 336



state 302

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 331
    '>' 	shift, and go to state 332
    READWRITEVAR	shift, and go to state 333

    $default	reduce using rule 188 (rwspec)

    rwslotdeflist	go to state 337
    rwslotdef	go to state 335
    rwspec	go to state 336



state 303

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 304

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 259
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 338

    methoddef	go to state 261
    name	go to state 262
    binop	go to state 263



state 305

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 161)

    $default	reduce using rule 161 (argdecls)



state 306

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 163)

    $default	reduce using rule 163 (argdecls)



state 307

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 86)

    $default	reduce using rule 86 (valrange2)



state 308

    listlit2  ->  classname '[' literallistc ']' .   (rule 183)

    $default	reduce using rule 183 (listlit2)



state 309

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 339
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 310

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 340
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 311

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 341

    $default	reduce using rule 74 (valrangex1)



state 312

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 100)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 100 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 313

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 82)

    '=' 	shift, and go to state 342

    $default	reduce using rule 79 (valrangexd)



state 314

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 81)

    '=' 	shift, and go to state 343

    $default	reduce using rule 78 (valrangexd)



state 315

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 83)

    ']' 	shift, and go to state 344



state 316

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 345
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 317

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 346
    blockliteral	go to state 123
    block	go to state 44



state 318

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist ')' .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 319

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 320

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 53)

    ')' 	shift, and go to state 347



state 321

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist . ')'   (rule 54)

    ')' 	shift, and go to state 348



state 322

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 50)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 349
    blockliteral	go to state 123
    block	go to state 44



state 323

    arglistv1  ->  arglist1 ',' '*' exprseq .   (rule 110)

    $default	reduce using rule 110 (arglistv1)



state 324

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 350
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 325

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 326

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 351



state 327

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 159 (argdecls)

    argdecls	go to state 352



state 328

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 353



state 329

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 354



state 330

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 355



state 331

    rwspec  ->  '<' .   (rule 189)

    $default	reduce using rule 189 (rwspec)



state 332

    rwspec  ->  '>' .   (rule 191)

    $default	reduce using rule 191 (rwspec)



state 333

    rwspec  ->  READWRITEVAR .   (rule 190)

    $default	reduce using rule 190 (rwspec)



state 334

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 177)

    ';' 	shift, and go to state 356
    ',' 	shift, and go to state 357



state 335

    rwslotdeflist  ->  rwslotdef .   (rule 176)

    $default	reduce using rule 176 (rwslotdeflist)



state 336

    rwslotdef  ->  rwspec . name   (rule 178)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 179)

    NAME	shift, and go to state 6

    name	go to state 358



state 337

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 177)

    ';' 	shift, and go to state 359
    ',' 	shift, and go to state 357



state 338

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 339

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 76 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 340

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 75 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 341

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 360
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 342

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 361
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 343

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 362
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 344

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 83)

    '=' 	shift, and go to state 363

    $default	reduce using rule 80 (valrangexd)



state 345

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 101 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 346

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 347

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 53)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 246
    blocklist	go to state 364
    blockliteral	go to state 123
    block	go to state 44



state 348

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist ')' .   (rule 54)

    $default	reduce using rule 54 (msgsend)



state 349

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 350

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 98 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 351

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 365



state 352

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 154 (funcvardecls)

    funcvardecls	go to state 366



state 353

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    PRIMITIVENAME	shift, and go to state 367
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 368
    funcvardecl	go to state 216
    primname	go to state 369



state 354

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    PRIMITIVENAME	shift, and go to state 367
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 370
    funcvardecl	go to state 216
    primname	go to state 369



state 355

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 301
    CLASSVAR	shift, and go to state 302

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 303
    methods	go to state 371



state 356

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 357

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 177)

    '<' 	shift, and go to state 331
    '>' 	shift, and go to state 332
    READWRITEVAR	shift, and go to state 333

    $default	reduce using rule 188 (rwspec)

    rwslotdef	go to state 372
    rwspec	go to state 336



state 358

    rwslotdef  ->  rwspec name .   (rule 178)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 179)

    '=' 	shift, and go to state 373

    $default	reduce using rule 178 (rwslotdef)



state 359

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 360

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 77 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 361

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 82 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 362

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 81 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 363

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 374
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 364

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 53)

    $default	reduce using rule 53 (msgsend)



state 365

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    PRIMITIVENAME	shift, and go to state 367
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 375
    funcvardecl	go to state 216
    primname	go to state 369



state 366

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 155)

    PRIMITIVENAME	shift, and go to state 367
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 376
    funcvardecl	go to state 216
    primname	go to state 369



state 367

    primname  ->  PRIMITIVENAME .   (rule 207)

    $default	reduce using rule 207 (primname)



state 368

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 377
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 378
    retval	go to state 379
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 380
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 369

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 381



state 370

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 377
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 382
    retval	go to state 379
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 380
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 371

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 259
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 383

    methoddef	go to state 261
    name	go to state 262
    binop	go to state 263



state 372

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 177)

    $default	reduce using rule 177 (rwslotdeflist)



state 373

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 179)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 199

    slotliteral	go to state 384
    listlit	go to state 201
    integer	go to state 202
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 203
    trueobj	go to state 204
    falseobj	go to state 205
    nilobj	go to state 206
    infobj	go to state 207
    ascii	go to state 208
    symbol	go to state 209
    string	go to state 210



state 374

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 83 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 375

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 377
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 385
    retval	go to state 379
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 380
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 376

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 377
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 386
    retval	go to state 379
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 380
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 377

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 387
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 378

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 388



state 379

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 380

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 377

    $default	reduce using rule 38 (retval)

    retval	go to state 389



state 381

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 382

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 390



state 383

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 384

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 179)

    $default	reduce using rule 179 (rwslotdef)



state 385

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 391



state 386

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 392



state 387

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 84
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110
    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 393
    binop	go to state 111
    keybinop	go to state 112



state 388

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 389

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 390

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 391

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 392

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 393

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 394

    $   	go to state 395



state 395

    $   	go to state 396



state 396

    $default	accept
