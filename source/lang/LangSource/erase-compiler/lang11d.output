

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 78 between rule 94 and token BINOP resolved as reduce.
Conflict in state 78 between rule 94 and token KEYBINOP resolved as reduce.
Conflict in state 78 between rule 94 and token '-' resolved as reduce.
Conflict in state 78 between rule 94 and token '<' resolved as reduce.
Conflict in state 78 between rule 94 and token '>' resolved as reduce.
Conflict in state 78 between rule 94 and token '*' resolved as reduce.
Conflict in state 78 between rule 94 and token '+' resolved as reduce.
Conflict in state 78 between rule 94 and token '|' resolved as reduce.
Conflict in state 78 between rule 94 and token READWRITEVAR resolved as reduce.
Conflict in state 78 between rule 94 and token '.' resolved as reduce.
Conflict in state 185 between rule 96 and token BINOP resolved as shift.
Conflict in state 185 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 185 between rule 96 and token '-' resolved as shift.
Conflict in state 185 between rule 96 and token '<' resolved as shift.
Conflict in state 185 between rule 96 and token '>' resolved as shift.
Conflict in state 185 between rule 96 and token '*' resolved as shift.
Conflict in state 185 between rule 96 and token '+' resolved as shift.
Conflict in state 185 between rule 96 and token '|' resolved as shift.
Conflict in state 185 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 185 between rule 96 and token '.' resolved as shift.
Conflict in state 229 between rule 97 and token BINOP resolved as shift.
Conflict in state 229 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 229 between rule 97 and token '-' resolved as shift.
Conflict in state 229 between rule 97 and token '<' resolved as shift.
Conflict in state 229 between rule 97 and token '>' resolved as shift.
Conflict in state 229 between rule 97 and token '*' resolved as shift.
Conflict in state 229 between rule 97 and token '+' resolved as shift.
Conflict in state 229 between rule 97 and token '|' resolved as shift.
Conflict in state 229 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 229 between rule 97 and token '.' resolved as shift.
Conflict in state 235 between rule 100 and token BINOP resolved as shift.
Conflict in state 235 between rule 100 and token KEYBINOP resolved as shift.
Conflict in state 235 between rule 100 and token '-' resolved as shift.
Conflict in state 235 between rule 100 and token '<' resolved as shift.
Conflict in state 235 between rule 100 and token '>' resolved as shift.
Conflict in state 235 between rule 100 and token '*' resolved as shift.
Conflict in state 235 between rule 100 and token '+' resolved as shift.
Conflict in state 235 between rule 100 and token '|' resolved as shift.
Conflict in state 235 between rule 100 and token READWRITEVAR resolved as shift.
Conflict in state 235 between rule 100 and token '.' resolved as shift.
Conflict in state 256 between rule 95 and token BINOP resolved as reduce.
Conflict in state 256 between rule 95 and token KEYBINOP resolved as reduce.
Conflict in state 256 between rule 95 and token '-' resolved as reduce.
Conflict in state 256 between rule 95 and token '<' resolved as reduce.
Conflict in state 256 between rule 95 and token '>' resolved as reduce.
Conflict in state 256 between rule 95 and token '*' resolved as reduce.
Conflict in state 256 between rule 95 and token '+' resolved as reduce.
Conflict in state 256 between rule 95 and token '|' resolved as reduce.
Conflict in state 256 between rule 95 and token READWRITEVAR resolved as reduce.
Conflict in state 256 between rule 95 and token '.' resolved as shift.
Conflict in state 297 between rule 98 and token BINOP resolved as shift.
Conflict in state 297 between rule 98 and token KEYBINOP resolved as shift.
Conflict in state 297 between rule 98 and token '-' resolved as shift.
Conflict in state 297 between rule 98 and token '<' resolved as shift.
Conflict in state 297 between rule 98 and token '>' resolved as shift.
Conflict in state 297 between rule 98 and token '*' resolved as shift.
Conflict in state 297 between rule 98 and token '+' resolved as shift.
Conflict in state 297 between rule 98 and token '|' resolved as shift.
Conflict in state 297 between rule 98 and token READWRITEVAR resolved as shift.
Conflict in state 297 between rule 98 and token '.' resolved as shift.
Conflict in state 327 between rule 101 and token BINOP resolved as shift.
Conflict in state 327 between rule 101 and token KEYBINOP resolved as shift.
Conflict in state 327 between rule 101 and token '-' resolved as shift.
Conflict in state 327 between rule 101 and token '<' resolved as shift.
Conflict in state 327 between rule 101 and token '>' resolved as shift.
Conflict in state 327 between rule 101 and token '*' resolved as shift.
Conflict in state 327 between rule 101 and token '+' resolved as shift.
Conflict in state 327 between rule 101 and token '|' resolved as shift.
Conflict in state 327 between rule 101 and token READWRITEVAR resolved as shift.
Conflict in state 327 between rule 101 and token '.' resolved as shift.
Conflict in state 356 between rule 78 and token BINOP resolved as shift.
Conflict in state 356 between rule 78 and token KEYBINOP resolved as shift.
Conflict in state 356 between rule 78 and token '-' resolved as shift.
Conflict in state 356 between rule 78 and token '<' resolved as shift.
Conflict in state 356 between rule 78 and token '>' resolved as shift.
Conflict in state 356 between rule 78 and token '*' resolved as shift.
Conflict in state 356 between rule 78 and token '+' resolved as shift.
Conflict in state 356 between rule 78 and token '|' resolved as shift.
Conflict in state 356 between rule 78 and token READWRITEVAR resolved as shift.
Conflict in state 356 between rule 78 and token '.' resolved as shift.
Conflict in state 357 between rule 77 and token BINOP resolved as shift.
Conflict in state 357 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 357 between rule 77 and token '-' resolved as shift.
Conflict in state 357 between rule 77 and token '<' resolved as shift.
Conflict in state 357 between rule 77 and token '>' resolved as shift.
Conflict in state 357 between rule 77 and token '*' resolved as shift.
Conflict in state 357 between rule 77 and token '+' resolved as shift.
Conflict in state 357 between rule 77 and token '|' resolved as shift.
Conflict in state 357 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 357 between rule 77 and token '.' resolved as shift.
Conflict in state 362 between rule 102 and token BINOP resolved as shift.
Conflict in state 362 between rule 102 and token KEYBINOP resolved as shift.
Conflict in state 362 between rule 102 and token '-' resolved as shift.
Conflict in state 362 between rule 102 and token '<' resolved as shift.
Conflict in state 362 between rule 102 and token '>' resolved as shift.
Conflict in state 362 between rule 102 and token '*' resolved as shift.
Conflict in state 362 between rule 102 and token '+' resolved as shift.
Conflict in state 362 between rule 102 and token '|' resolved as shift.
Conflict in state 362 between rule 102 and token READWRITEVAR resolved as shift.
Conflict in state 362 between rule 102 and token '.' resolved as shift.
Conflict in state 367 between rule 99 and token BINOP resolved as shift.
Conflict in state 367 between rule 99 and token KEYBINOP resolved as shift.
Conflict in state 367 between rule 99 and token '-' resolved as shift.
Conflict in state 367 between rule 99 and token '<' resolved as shift.
Conflict in state 367 between rule 99 and token '>' resolved as shift.
Conflict in state 367 between rule 99 and token '*' resolved as shift.
Conflict in state 367 between rule 99 and token '+' resolved as shift.
Conflict in state 367 between rule 99 and token '|' resolved as shift.
Conflict in state 367 between rule 99 and token READWRITEVAR resolved as shift.
Conflict in state 367 between rule 99 and token '.' resolved as shift.
Conflict in state 377 between rule 79 and token BINOP resolved as shift.
Conflict in state 377 between rule 79 and token KEYBINOP resolved as shift.
Conflict in state 377 between rule 79 and token '-' resolved as shift.
Conflict in state 377 between rule 79 and token '<' resolved as shift.
Conflict in state 377 between rule 79 and token '>' resolved as shift.
Conflict in state 377 between rule 79 and token '*' resolved as shift.
Conflict in state 377 between rule 79 and token '+' resolved as shift.
Conflict in state 377 between rule 79 and token '|' resolved as shift.
Conflict in state 377 between rule 79 and token READWRITEVAR resolved as shift.
Conflict in state 377 between rule 79 and token '.' resolved as shift.
Conflict in state 378 between rule 84 and token BINOP resolved as shift.
Conflict in state 378 between rule 84 and token KEYBINOP resolved as shift.
Conflict in state 378 between rule 84 and token '-' resolved as shift.
Conflict in state 378 between rule 84 and token '<' resolved as shift.
Conflict in state 378 between rule 84 and token '>' resolved as shift.
Conflict in state 378 between rule 84 and token '*' resolved as shift.
Conflict in state 378 between rule 84 and token '+' resolved as shift.
Conflict in state 378 between rule 84 and token '|' resolved as shift.
Conflict in state 378 between rule 84 and token READWRITEVAR resolved as shift.
Conflict in state 378 between rule 84 and token '.' resolved as shift.
Conflict in state 379 between rule 83 and token BINOP resolved as shift.
Conflict in state 379 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 379 between rule 83 and token '-' resolved as shift.
Conflict in state 379 between rule 83 and token '<' resolved as shift.
Conflict in state 379 between rule 83 and token '>' resolved as shift.
Conflict in state 379 between rule 83 and token '*' resolved as shift.
Conflict in state 379 between rule 83 and token '+' resolved as shift.
Conflict in state 379 between rule 83 and token '|' resolved as shift.
Conflict in state 379 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 379 between rule 83 and token '.' resolved as shift.
Conflict in state 391 between rule 85 and token BINOP resolved as shift.
Conflict in state 391 between rule 85 and token KEYBINOP resolved as shift.
Conflict in state 391 between rule 85 and token '-' resolved as shift.
Conflict in state 391 between rule 85 and token '<' resolved as shift.
Conflict in state 391 between rule 85 and token '>' resolved as shift.
Conflict in state 391 between rule 85 and token '*' resolved as shift.
Conflict in state 391 between rule 85 and token '+' resolved as shift.
Conflict in state 391 between rule 85 and token '|' resolved as shift.
Conflict in state 391 between rule 85 and token READWRITEVAR resolved as shift.
Conflict in state 391 between rule 85 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> name '(' arglistv1 optkeyarglist ')'
rule 49   msgsend -> classname '[' arrayelems ']'
rule 50   msgsend -> classname blocklist1
rule 51   msgsend -> classname '(' keyarglist1 ')' blocklist
rule 52   msgsend -> classname '(' arglist1 optkeyarglist ')' blocklist
rule 53   msgsend -> classname '(' arglistv1 optkeyarglist ')'
rule 54   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 55   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 56   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 57   msgsend -> expr '.' '(' arglistv1 optkeyarglist ')'
rule 58   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 59   msgsend -> expr '.' name '(' arglistv1 optkeyarglist ')'
rule 60   msgsend -> expr '.' name blocklist
rule 61   expr1 -> pushliteral
rule 62   expr1 -> blockliteral
rule 63   expr1 -> pushname
rule 64   expr1 -> curryarg
rule 65   expr1 -> msgsend
rule 66   expr1 -> '(' exprseq ')'
rule 67   expr1 -> '~' name
rule 68   expr1 -> '[' arrayelems ']'
rule 69   expr1 -> '(' valrange2 ')'
rule 70   expr1 -> '(' dictslotlist ')'
rule 71   expr1 -> pseudovar
rule 72   expr1 -> expr1 '[' arglist1 ']'
rule 73   expr1 -> valrangex1
rule 74   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 75   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 76   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 77   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 78   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 79   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 80   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 81   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 82   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 83   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 84   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 85   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 86   valrange2 -> DOTDOT exprseq
rule 87   valrange2 -> exprseq DOTDOT exprseq
rule 88   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 89   expr -> expr1
rule 90   expr -> valrangexd
rule 91   expr -> valrangeassign
rule 92   expr -> classname
rule 93   expr -> expr '.' '[' arglist1 ']'
rule 94   expr -> '`' expr
rule 95   expr -> expr binop2 adverb expr
rule 96   expr -> name '=' expr
rule 97   expr -> '~' name '=' expr
rule 98   expr -> expr '.' name '=' expr
rule 99   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 100  expr -> '#' mavars '=' expr
rule 101  expr -> expr1 '[' arglist1 ']' '=' expr
rule 102  expr -> expr '.' '[' arglist1 ']' '=' expr
rule 103  adverb ->		/* empty */
rule 104  adverb -> '.' name
rule 105  adverb -> '.' integer
rule 106  adverb -> '.' '(' exprseq ')'
rule 107  exprn -> expr
rule 108  exprn -> exprn ';' expr
rule 109  exprseq -> exprn optsemi
rule 110  arrayelems ->		/* empty */
rule 111  arrayelems -> arrayelems1 optcomma
rule 112  arrayelems1 -> exprseq
rule 113  arrayelems1 -> exprseq ':' exprseq
rule 114  arrayelems1 -> keybinop exprseq
rule 115  arrayelems1 -> arrayelems1 ',' exprseq
rule 116  arrayelems1 -> arrayelems1 ',' keybinop exprseq
rule 117  arrayelems1 -> arrayelems1 ',' exprseq ':' exprseq
rule 118  arglist1 -> exprseq
rule 119  arglist1 -> arglist1 ',' exprseq
rule 120  arglistv1 -> '*' exprseq
rule 121  arglistv1 -> arglist1 ',' '*' exprseq
rule 122  keyarglist1 -> keyarg
rule 123  keyarglist1 -> keyarglist1 ',' keyarg
rule 124  keyarg -> keybinop exprseq
rule 125  optkeyarglist ->		/* empty */
rule 126  optkeyarglist -> ',' keyarglist1
rule 127  mavars -> mavarlist
rule 128  mavars -> mavarlist ELLIPSIS name
rule 129  mavarlist -> name
rule 130  mavarlist -> mavarlist ',' name
rule 131  slotliteral -> integer
rule 132  slotliteral -> floatp
rule 133  slotliteral -> ascii
rule 134  slotliteral -> string
rule 135  slotliteral -> symbol
rule 136  slotliteral -> trueobj
rule 137  slotliteral -> falseobj
rule 138  slotliteral -> nilobj
rule 139  slotliteral -> listlit
rule 140  blockliteral -> block
rule 141  pushname -> name
rule 142  pushliteral -> integer
rule 143  pushliteral -> floatp
rule 144  pushliteral -> ascii
rule 145  pushliteral -> string
rule 146  pushliteral -> symbol
rule 147  pushliteral -> trueobj
rule 148  pushliteral -> falseobj
rule 149  pushliteral -> nilobj
rule 150  pushliteral -> listlit
rule 151  listliteral -> integer
rule 152  listliteral -> floatp
rule 153  listliteral -> ascii
rule 154  listliteral -> string
rule 155  listliteral -> symbol
rule 156  listliteral -> trueobj
rule 157  listliteral -> falseobj
rule 158  listliteral -> nilobj
rule 159  listliteral -> listlit2
rule 160  block -> '{' argdecls funcvardecls funcbody '}'
rule 161  block -> BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
rule 162  funcvardecls ->		/* empty */
rule 163  funcvardecls -> funcvardecls funcvardecl
rule 164  funcvardecls1 -> funcvardecl
rule 165  funcvardecls1 -> funcvardecls1 funcvardecl
rule 166  funcvardecl -> VAR slotdeflist ';'
rule 167  argdecls ->		/* empty */
rule 168  argdecls -> ARG slotdeflist ';'
rule 169  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 170  argdecls -> '|' slotdeflist '|'
rule 171  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 172  slotdeflist0 ->		/* empty */
rule 173  slotdeflist0 -> slotdeflist
rule 174  slotdeflist -> slotdef
rule 175  slotdeflist -> slotdeflist ',' slotdef
rule 176  slotdef -> name
rule 177  slotdef -> name '=' slotliteral
rule 178  dictslotdef -> exprseq ':' exprseq
rule 179  dictslotdef -> keybinop exprseq
rule 180  dictslotlist1 -> dictslotdef
rule 181  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 182  dictslotlist ->		/* empty */
rule 183  dictslotlist -> dictslotlist1
rule 184  rwslotdeflist -> rwslotdef
rule 185  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 186  rwslotdef -> rwspec name
rule 187  rwslotdef -> rwspec name '=' slotliteral
rule 188  listlit -> '#' '[' literallistc ']'
rule 189  listlit -> '#' classname '[' literallistc ']'
rule 190  listlit2 -> '[' literallistc ']'
rule 191  listlit2 -> classname '[' literallistc ']'
rule 192  literallistc ->		/* empty */
rule 193  literallistc -> literallist1 optcomma
rule 194  literallist1 -> listliteral
rule 195  literallist1 -> literallist1 ',' listliteral
rule 196  rwspec ->		/* empty */
rule 197  rwspec -> '<'
rule 198  rwspec -> READWRITEVAR
rule 199  rwspec -> '>'
rule 200  integer -> INTEGER
rule 201  integer -> '-' INTEGER
rule 202  floatr -> FLOAT
rule 203  floatr -> '-' FLOAT
rule 204  accidental -> ACCIDENTAL
rule 205  accidental -> '-' ACCIDENTAL
rule 206  pie -> PIE
rule 207  floatp -> floatr
rule 208  floatp -> accidental
rule 209  floatp -> floatr pie
rule 210  floatp -> integer pie
rule 211  floatp -> pie
rule 212  floatp -> '-' pie
rule 213  name -> NAME
rule 214  classname -> CLASSNAME
rule 215  primname -> PRIMITIVENAME
rule 216  trueobj -> TRUEOBJ
rule 217  falseobj -> FALSEOBJ
rule 218  nilobj -> NILOBJ
rule 219  ascii -> ASCII
rule 220  symbol -> SYMBOL
rule 221  string -> STRING
rule 222  pseudovar -> PSEUDOVAR
rule 223  binop -> BINOP
rule 224  binop -> READWRITEVAR
rule 225  binop -> '<'
rule 226  binop -> '>'
rule 227  binop -> '-'
rule 228  binop -> '*'
rule 229  binop -> '+'
rule 230  binop -> '|'
rule 231  keybinop -> KEYBINOP
rule 232  binop2 -> binop
rule 233  binop2 -> keybinop
rule 234  curryarg -> CURRYARG

Terminals, with rules where they appear

$ (-1)
'#' (35) 100 188 189
'(' (40) 31 47 48 51 52 53 54 55 56 57 58 59 66 69 70 99 106
')' (41) 31 47 48 51 52 53 54 55 56 57 58 59 66 69 70 99 106
'*' (42) 22 24 120 121 228
'+' (43) 10 229
',' (44) 28 88 115 116 117 119 121 123 126 130 175 181 185 195
'-' (45) 201 203 205 212 227
'.' (46) 54 55 56 57 58 59 60 80 81 82 83 84 85 93 98 102 104 105 106
':' (58) 14 113 117 178
';' (59) 17 18 26 108 166 168 169
'<' (60) 197 225
'=' (61) 77 78 79 83 84 85 96 97 98 99 100 101 102 177 187
'>' (62) 199 226
'[' (91) 9 49 68 72 74 75 76 77 78 79 80 81 82 83 84 85 93 101 102
    188 189 190 191
']' (93) 9 49 68 72 74 75 76 77 78 79 80 81 82 83 84 85 93 101 102
    188 189 190 191
'^' (94) 39 41
'`' (96) 94
'{' (123) 8 9 10 21 22 23 24 160
'|' (124) 170 171 230
'}' (125) 8 9 10 21 22 23 24 160 161
'~' (126) 67 97
error (256)
NAME (257) 213
INTEGER (258) 200 201
FLOAT (259) 202 203
ACCIDENTAL (260) 204 205
SYMBOL (261) 220
STRING (262) 221
ASCII (263) 219
PRIMITIVENAME (264) 215
CLASSNAME (265) 214
CURRYARG (266) 234
VAR (267) 18 166
ARG (268) 168 169
CLASSVAR (269) 17
CONST (270)
NILOBJ (271) 218
TRUEOBJ (272) 216
FALSEOBJ (273) 217
PSEUDOVAR (274) 222
ELLIPSIS (275) 128 169 171
DOTDOT (276) 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
PIE (277) 206
BEGINCLOSEDFUNC (278) 161
BADTOKEN (279)
INTERPRET (280) 3
BINOP (281) 223
KEYBINOP (282) 231
READWRITEVAR (283) 198 224
UMINUS (284)

Nonterminals, with rules where they appear

root (52)
    on left: 1 2 3
classes (53)
    on left: 4 5, on right: 1 5
classextensions (54)
    on left: 6 7, on right: 2 7
classdef (55)
    on left: 8 9, on right: 5
classextension (56)
    on left: 10, on right: 6 7
optname (57)
    on left: 11 12, on right: 9
superclass (58)
    on left: 13 14, on right: 8 9
classvardecls (59)
    on left: 15 16, on right: 8 9 16
classvardecl (60)
    on left: 17 18, on right: 16
methods (61)
    on left: 19 20, on right: 8 9 10 20
methoddef (62)
    on left: 21 22 23 24, on right: 20
optsemi (63)
    on left: 25 26, on right: 37 39 41 109
optcomma (64)
    on left: 27 28, on right: 111 193
funcbody (65)
    on left: 29 30, on right: 31 32 33 160 161
cmdlinecode (66)
    on left: 31 32 33, on right: 3
methbody (67)
    on left: 34 35, on right: 21 22 23 24
primitive (68)
    on left: 36 37, on right: 21 22 23 24
retval (69)
    on left: 38 39, on right: 34 35
funretval (70)
    on left: 40 41, on right: 29 30
blocklist1 (71)
    on left: 42 43, on right: 43 45 46 50
blocklist (72)
    on left: 44 45, on right: 47 51 52 54 55 56 58 60
msgsend (73)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60,
    on right: 65
expr1 (74)
    on left: 61 62 63 64 65 66 67 68 69 70 71 72 73,
    on right: 72 74 75 76 77 78 79 89 101
valrangex1 (75)
    on left: 74 75 76, on right: 73
valrangeassign (76)
    on left: 77 78 79, on right: 91
valrangexd (77)
    on left: 80 81 82 83 84 85, on right: 90
valrange2 (78)
    on left: 86 87 88, on right: 69
expr (79)
    on left: 89 90 91 92 93 94 95 96 97 98 99 100 101 102,
    on right: 39 41 54 55 56 57 58 59 60 77 78 79 80 81 82 83 84 85
    93 94 95 96 97 98 99 100 101 102 107 108
adverb (80)
    on left: 103 104 105 106, on right: 95
exprn (81)
    on left: 107 108, on right: 108 109
exprseq (82)
    on left: 109, on right: 30 35 66 75 76 78 79 81 82 84 85 86 87
    88 106 112 113 114 115 116 117 118 119 120 121 124 178 179
arrayelems (83)
    on left: 110 111, on right: 49 68
arrayelems1 (84)
    on left: 112 113 114 115 116 117, on right: 111 115 116 117
arglist1 (85)
    on left: 118 119, on right: 47 52 56 58 72 74 76 77 79 80 82 83
    85 93 99 101 102 119 121
arglistv1 (86)
    on left: 120 121, on right: 48 53 57 59
keyarglist1 (87)
    on left: 122 123, on right: 51 54 55 123 126
keyarg (88)
    on left: 124, on right: 122 123
optkeyarglist (89)
    on left: 125 126, on right: 47 48 52 53 56 57 58 59 99
mavars (90)
    on left: 127 128, on right: 100
mavarlist (91)
    on left: 129 130, on right: 127 128 130
slotliteral (92)
    on left: 131 132 133 134 135 136 137 138 139, on right: 177 187
blockliteral (93)
    on left: 140, on right: 42 43 62
pushname (94)
    on left: 141, on right: 63
pushliteral (95)
    on left: 142 143 144 145 146 147 148 149 150, on right: 61
listliteral (96)
    on left: 151 152 153 154 155 156 157 158 159, on right: 194 195
block (97)
    on left: 160 161, on right: 140
funcvardecls (98)
    on left: 162 163, on right: 21 22 23 24 160 161 163
funcvardecls1 (99)
    on left: 164 165, on right: 31 32 165
funcvardecl (100)
    on left: 166, on right: 163 164 165
argdecls (101)
    on left: 167 168 169 170 171, on right: 21 22 23 24 160 161
slotdeflist0 (102)
    on left: 172 173, on right: 169 171
slotdeflist (103)
    on left: 174 175, on right: 166 168 170 173 175
slotdef (104)
    on left: 176 177, on right: 174 175
dictslotdef (105)
    on left: 178 179, on right: 180 181
dictslotlist1 (106)
    on left: 180 181, on right: 181 183
dictslotlist (107)
    on left: 182 183, on right: 70
rwslotdeflist (108)
    on left: 184 185, on right: 17 18 185
rwslotdef (109)
    on left: 186 187, on right: 184 185
listlit (110)
    on left: 188 189, on right: 139 150
listlit2 (111)
    on left: 190 191, on right: 159
literallistc (112)
    on left: 192 193, on right: 188 189 190 191
literallist1 (113)
    on left: 194 195, on right: 193 195
rwspec (114)
    on left: 196 197 198 199, on right: 186 187
integer (115)
    on left: 200 201, on right: 105 131 142 151 210
floatr (116)
    on left: 202 203, on right: 207 209
accidental (117)
    on left: 204 205, on right: 208
pie (118)
    on left: 206, on right: 209 210 211 212
floatp (119)
    on left: 207 208 209 210 211 212, on right: 132 143 152
name (120)
    on left: 213, on right: 12 21 22 46 47 48 55 58 59 60 67 96 97
    98 99 104 128 129 130 141 169 171 176 177 186 187
classname (121)
    on left: 214, on right: 8 9 10 14 49 50 51 52 53 92 189 191
primname (122)
    on left: 215, on right: 37
trueobj (123)
    on left: 216, on right: 136 147 156
falseobj (124)
    on left: 217, on right: 137 148 157
nilobj (125)
    on left: 218, on right: 138 149 158
ascii (126)
    on left: 219, on right: 133 144 153
symbol (127)
    on left: 220, on right: 135 146 155
string (128)
    on left: 221, on right: 134 145 154
pseudovar (129)
    on left: 222, on right: 71
binop (130)
    on left: 223 224 225 226 227 228 229 230, on right: 23 24 232
keybinop (131)
    on left: 231, on right: 114 116 124 179 233
binop2 (132)
    on left: 232 233, on right: 95
curryarg (133)
    on left: 234, on right: 64


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 411
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 26
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 30
    cmdlinecode	go to state 31
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 45
    funcvardecl	go to state 46
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 63



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 64
    classname	go to state 65



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 66



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 213)

    $default	reduce using rule 213 (name)



state 7

    integer  ->  INTEGER .   (rule 200)

    $default	reduce using rule 200 (integer)



state 8

    floatr  ->  FLOAT .   (rule 202)

    $default	reduce using rule 202 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 204)

    $default	reduce using rule 204 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 220)

    $default	reduce using rule 220 (symbol)



state 11

    string  ->  STRING .   (rule 221)

    $default	reduce using rule 221 (string)



state 12

    ascii  ->  ASCII .   (rule 219)

    $default	reduce using rule 219 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 214)

    $default	reduce using rule 214 (classname)



state 14

    curryarg  ->  CURRYARG .   (rule 234)

    $default	reduce using rule 234 (curryarg)



state 15

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 166)

    NAME	shift, and go to state 6

    slotdeflist	go to state 67
    slotdef	go to state 68
    name	go to state 69



state 16

    nilobj  ->  NILOBJ .   (rule 218)

    $default	reduce using rule 218 (nilobj)



state 17

    trueobj  ->  TRUEOBJ .   (rule 216)

    $default	reduce using rule 216 (trueobj)



state 18

    falseobj  ->  FALSEOBJ .   (rule 217)

    $default	reduce using rule 217 (falseobj)



state 19

    pseudovar  ->  PSEUDOVAR .   (rule 222)

    $default	reduce using rule 222 (pseudovar)



state 20

    pie  ->  PIE .   (rule 206)

    $default	reduce using rule 206 (pie)



state 21

    block  ->  BEGINCLOSEDFUNC . argdecls funcvardecls funcbody '}'   (rule 161)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 72



state 22

    integer  ->  '-' . INTEGER   (rule 201)
    floatr  ->  '-' . FLOAT   (rule 203)
    accidental  ->  '-' . ACCIDENTAL   (rule 205)
    floatp  ->  '-' . pie   (rule 212)

    INTEGER	shift, and go to state 73
    FLOAT	shift, and go to state 74
    ACCIDENTAL	shift, and go to state 75
    PIE 	shift, and go to state 20

    pie 	go to state 76



state 23

    expr  ->  '`' . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 78
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 24

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 160)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 79



state 25

    expr1  ->  '[' . arrayelems ']'   (rule 68)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 110 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 82
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 84
    curryarg	go to state 62



state 26

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 66)
    expr1  ->  '(' . valrange2 ')'   (rule 69)
    expr1  ->  '(' . dictslotlist ')'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 182 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 88
    funcvardecl	go to state 46
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 27

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 93
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 28

    expr1  ->  '~' . name   (rule 67)
    expr  ->  '~' . name '=' expr   (rule 97)

    NAME	shift, and go to state 6

    name	go to state 94



state 29

    expr  ->  '#' . mavars '=' expr   (rule 100)
    listlit  ->  '#' . '[' literallistc ']'   (rule 188)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 189)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    mavars	go to state 96
    mavarlist	go to state 97
    name	go to state 98
    classname	go to state 99



state 30

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 31

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 32

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 33

    expr1  ->  msgsend .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 34

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 72)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 74)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 75)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr1 .   (rule 89)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 101)

    '[' 	shift, and go to state 100

    $default	reduce using rule 89 (expr)



state 35

    expr1  ->  valrangex1 .   (rule 73)

    $default	reduce using rule 73 (expr1)



state 36

    expr  ->  valrangeassign .   (rule 91)

    $default	reduce using rule 91 (expr)



state 37

    expr  ->  valrangexd .   (rule 90)

    $default	reduce using rule 90 (expr)



state 38

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)
    exprn  ->  expr .   (rule 107)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 107 (exprn)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 39

    exprn  ->  exprn . ';' expr   (rule 108)
    exprseq  ->  exprn . optsemi   (rule 109)

    ';' 	shift, and go to state 113

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 114



state 40

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funretval	go to state 115



state 41

    expr1  ->  blockliteral .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 42

    expr1  ->  pushname .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 43

    expr1  ->  pushliteral .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 44

    blockliteral  ->  block .   (rule 140)

    $default	reduce using rule 140 (blockliteral)



state 45

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 165)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 116
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 46

    funcvardecls1  ->  funcvardecl .   (rule 164)

    $default	reduce using rule 164 (funcvardecls1)



state 47

    pushliteral  ->  listlit .   (rule 150)

    $default	reduce using rule 150 (pushliteral)



state 48

    pushliteral  ->  integer .   (rule 142)
    floatp  ->  integer . pie   (rule 210)

    PIE 	shift, and go to state 20

    $default	reduce using rule 142 (pushliteral)

    pie 	go to state 118



state 49

    floatp  ->  floatr .   (rule 207)
    floatp  ->  floatr . pie   (rule 209)

    PIE 	shift, and go to state 20

    $default	reduce using rule 207 (floatp)

    pie 	go to state 119



state 50

    floatp  ->  accidental .   (rule 208)

    $default	reduce using rule 208 (floatp)



state 51

    floatp  ->  pie .   (rule 211)

    $default	reduce using rule 211 (floatp)



state 52

    pushliteral  ->  floatp .   (rule 143)

    $default	reduce using rule 143 (pushliteral)



state 53

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name . '(' arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name . '=' expr   (rule 96)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 99)
    pushname  ->  name .   (rule 141)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 120
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 121

    $default	reduce using rule 141 (pushname)

    blocklist1	go to state 122
    blockliteral	go to state 123
    block	go to state 44



state 54

    msgsend  ->  classname . '[' arrayelems ']'   (rule 49)
    msgsend  ->  classname . blocklist1   (rule 50)
    msgsend  ->  classname . '(' keyarglist1 ')' blocklist   (rule 51)
    msgsend  ->  classname . '(' arglist1 optkeyarglist ')' blocklist   (rule 52)
    msgsend  ->  classname . '(' arglistv1 optkeyarglist ')'   (rule 53)
    expr  ->  classname .   (rule 92)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 124
    '(' 	shift, and go to state 125

    $default	reduce using rule 92 (expr)

    blocklist1	go to state 126
    blockliteral	go to state 123
    block	go to state 44



state 55

    pushliteral  ->  trueobj .   (rule 147)

    $default	reduce using rule 147 (pushliteral)



state 56

    pushliteral  ->  falseobj .   (rule 148)

    $default	reduce using rule 148 (pushliteral)



state 57

    pushliteral  ->  nilobj .   (rule 149)

    $default	reduce using rule 149 (pushliteral)



state 58

    pushliteral  ->  ascii .   (rule 144)

    $default	reduce using rule 144 (pushliteral)



state 59

    pushliteral  ->  symbol .   (rule 146)

    $default	reduce using rule 146 (pushliteral)



state 60

    pushliteral  ->  string .   (rule 145)

    $default	reduce using rule 145 (pushliteral)



state 61

    expr1  ->  pseudovar .   (rule 71)

    $default	reduce using rule 71 (expr1)



state 62

    expr1  ->  curryarg .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 63

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 127



state 64

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 65

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 128
    '[' 	shift, and go to state 129

    $default	reduce using rule 13 (superclass)

    superclass	go to state 130



state 66

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 67

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 166)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 175)

    ';' 	shift, and go to state 131
    ',' 	shift, and go to state 132



state 68

    slotdeflist  ->  slotdef .   (rule 174)

    $default	reduce using rule 174 (slotdeflist)



state 69

    slotdef  ->  name .   (rule 176)
    slotdef  ->  name . '=' slotliteral   (rule 177)

    '=' 	shift, and go to state 133

    $default	reduce using rule 176 (slotdef)



state 70

    argdecls  ->  ARG . slotdeflist ';'   (rule 168)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 169)

    NAME	shift, and go to state 6

    $default	reduce using rule 172 (slotdeflist0)

    slotdeflist0	go to state 134
    slotdeflist	go to state 135
    slotdef	go to state 68
    name	go to state 69



state 71

    argdecls  ->  '|' . slotdeflist '|'   (rule 170)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 171)

    NAME	shift, and go to state 6

    $default	reduce using rule 172 (slotdeflist0)

    slotdeflist0	go to state 136
    slotdeflist	go to state 137
    slotdef	go to state 68
    name	go to state 69



state 72

    block  ->  BEGINCLOSEDFUNC argdecls . funcvardecls funcbody '}'   (rule 161)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 138



state 73

    integer  ->  '-' INTEGER .   (rule 201)

    $default	reduce using rule 201 (integer)



state 74

    floatr  ->  '-' FLOAT .   (rule 203)

    $default	reduce using rule 203 (floatr)



state 75

    accidental  ->  '-' ACCIDENTAL .   (rule 205)

    $default	reduce using rule 205 (accidental)



state 76

    floatp  ->  '-' pie .   (rule 212)

    $default	reduce using rule 212 (floatp)



state 77

    expr1  ->  '(' . exprseq ')'   (rule 66)
    expr1  ->  '(' . valrange2 ')'   (rule 69)
    expr1  ->  '(' . dictslotlist ')'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 182 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 78

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  '`' expr .   (rule 94)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)


    $default	reduce using rule 94 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 79

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 160)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 139



state 80

    keybinop  ->  KEYBINOP .   (rule 231)

    $default	reduce using rule 231 (keybinop)



state 81

    arrayelems1  ->  exprseq .   (rule 112)
    arrayelems1  ->  exprseq . ':' exprseq   (rule 113)

    ':' 	shift, and go to state 140

    $default	reduce using rule 112 (arrayelems1)



state 82

    expr1  ->  '[' arrayelems . ']'   (rule 68)

    ']' 	shift, and go to state 141



state 83

    arrayelems  ->  arrayelems1 . optcomma   (rule 111)
    arrayelems1  ->  arrayelems1 . ',' exprseq   (rule 115)
    arrayelems1  ->  arrayelems1 . ',' keybinop exprseq   (rule 116)
    arrayelems1  ->  arrayelems1 . ',' exprseq ':' exprseq   (rule 117)

    ',' 	shift, and go to state 142

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 143



state 84

    arrayelems1  ->  keybinop . exprseq   (rule 114)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 144
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 85

    valrange2  ->  DOTDOT . exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 145
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 86

    expr1  ->  '(' valrange2 . ')'   (rule 69)

    ')' 	shift, and go to state 146



state 87

    expr1  ->  '(' exprseq . ')'   (rule 66)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 87)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 88)
    dictslotdef  ->  exprseq . ':' exprseq   (rule 178)

    DOTDOT	shift, and go to state 147
    ':' 	shift, and go to state 148
    ',' 	shift, and go to state 149
    ')' 	shift, and go to state 150



state 88

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 165)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 151
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 89

    dictslotlist1  ->  dictslotdef .   (rule 180)

    $default	reduce using rule 180 (dictslotlist1)



state 90

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 181)
    dictslotlist  ->  dictslotlist1 .   (rule 183)

    ',' 	shift, and go to state 152

    $default	reduce using rule 183 (dictslotlist)



state 91

    expr1  ->  '(' dictslotlist . ')'   (rule 70)

    ')' 	shift, and go to state 153



state 92

    dictslotdef  ->  keybinop . exprseq   (rule 179)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 154
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 93

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 155

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 156
    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 94

    expr1  ->  '~' name .   (rule 67)
    expr  ->  '~' name . '=' expr   (rule 97)

    '=' 	shift, and go to state 157

    $default	reduce using rule 67 (expr1)



state 95

    listlit  ->  '#' '[' . literallistc ']'   (rule 188)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 158

    $default	reduce using rule 192 (literallistc)

    listliteral	go to state 159
    listlit2	go to state 160
    literallistc	go to state 161
    literallist1	go to state 162
    integer	go to state 163
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 164
    classname	go to state 165
    trueobj	go to state 166
    falseobj	go to state 167
    nilobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 96

    expr  ->  '#' mavars . '=' expr   (rule 100)

    '=' 	shift, and go to state 172



state 97

    mavars  ->  mavarlist .   (rule 127)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 128)
    mavarlist  ->  mavarlist . ',' name   (rule 130)

    ELLIPSIS	shift, and go to state 173
    ',' 	shift, and go to state 174

    $default	reduce using rule 127 (mavars)



state 98

    mavarlist  ->  name .   (rule 129)

    $default	reduce using rule 129 (mavarlist)



state 99

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 189)

    '[' 	shift, and go to state 175



state 100

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 72)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 74)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 75)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 176
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 178
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 101

    binop  ->  BINOP .   (rule 223)

    $default	reduce using rule 223 (binop)



state 102

    binop  ->  '-' .   (rule 227)

    $default	reduce using rule 227 (binop)



state 103

    binop  ->  '<' .   (rule 225)

    $default	reduce using rule 225 (binop)



state 104

    binop  ->  '>' .   (rule 226)

    $default	reduce using rule 226 (binop)



state 105

    binop  ->  '*' .   (rule 228)

    $default	reduce using rule 228 (binop)



state 106

    binop  ->  '+' .   (rule 229)

    $default	reduce using rule 229 (binop)



state 107

    binop  ->  '|' .   (rule 230)

    $default	reduce using rule 230 (binop)



state 108

    binop  ->  READWRITEVAR .   (rule 224)

    $default	reduce using rule 224 (binop)



state 109

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr '.' . '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr '.' . name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr '.' . name blocklist   (rule 60)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 93)
    expr  ->  expr '.' . name '=' expr   (rule 98)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 102)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 179
    '(' 	shift, and go to state 180

    name	go to state 181



state 110

    binop2  ->  binop .   (rule 232)

    $default	reduce using rule 232 (binop2)



state 111

    binop2  ->  keybinop .   (rule 233)

    $default	reduce using rule 233 (binop2)



state 112

    expr  ->  expr binop2 . adverb expr   (rule 95)

    '.' 	shift, and go to state 182

    $default	reduce using rule 103 (adverb)

    adverb	go to state 183



state 113

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 108)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 184
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 114

    exprseq  ->  exprn optsemi .   (rule 109)

    $default	reduce using rule 109 (exprseq)



state 115

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 116

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 117

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 165)

    $default	reduce using rule 165 (funcvardecls1)



state 118

    floatp  ->  integer pie .   (rule 210)

    $default	reduce using rule 210 (floatp)



state 119

    floatp  ->  floatr pie .   (rule 209)

    $default	reduce using rule 209 (floatp)



state 120

    expr  ->  name '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 185
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 121

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name '(' . arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 187
    arglistv1	go to state 188
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 122

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 189
    block	go to state 44



state 123

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 124

    msgsend  ->  classname '[' . arrayelems ']'   (rule 49)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 110 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 190
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 84
    curryarg	go to state 62



state 125

    msgsend  ->  classname '(' . keyarglist1 ')' blocklist   (rule 51)
    msgsend  ->  classname '(' . arglist1 optkeyarglist ')' blocklist   (rule 52)
    msgsend  ->  classname '(' . arglistv1 optkeyarglist ')'   (rule 53)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 191
    arglistv1	go to state 192
    keyarglist1	go to state 193
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 195
    curryarg	go to state 62



state 126

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  classname blocklist1 .   (rule 50)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 50 (msgsend)

    blockliteral	go to state 189
    block	go to state 44



state 127

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 196



state 128

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 197



state 129

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 198
    name	go to state 199



state 130

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 200



state 131

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 166)

    $default	reduce using rule 166 (funcvardecl)



state 132

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 175)

    NAME	shift, and go to state 6

    slotdef	go to state 201
    name	go to state 69



state 133

    slotdef  ->  name '=' . slotliteral   (rule 177)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 202

    slotliteral	go to state 203
    listlit	go to state 204
    integer	go to state 205
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 206
    trueobj	go to state 207
    falseobj	go to state 208
    nilobj	go to state 209
    ascii	go to state 210
    symbol	go to state 211
    string	go to state 212



state 134

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 169)

    ELLIPSIS	shift, and go to state 213



state 135

    argdecls  ->  ARG slotdeflist . ';'   (rule 168)
    slotdeflist0  ->  slotdeflist .   (rule 173)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 175)

    ';' 	shift, and go to state 214
    ',' 	shift, and go to state 132

    $default	reduce using rule 173 (slotdeflist0)



state 136

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 171)

    ELLIPSIS	shift, and go to state 215



state 137

    argdecls  ->  '|' slotdeflist . '|'   (rule 170)
    slotdeflist0  ->  slotdeflist .   (rule 173)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 175)

    '|' 	shift, and go to state 216
    ',' 	shift, and go to state 132

    $default	reduce using rule 173 (slotdeflist0)



state 138

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls . funcbody '}'   (rule 161)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 217
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 218
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 139

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 160)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 219
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 218
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 140

    arrayelems1  ->  exprseq ':' . exprseq   (rule 113)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 220
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 141

    expr1  ->  '[' arrayelems ']' .   (rule 68)

    $default	reduce using rule 68 (expr1)



state 142

    optcomma  ->  ',' .   (rule 28)
    arrayelems1  ->  arrayelems1 ',' . exprseq   (rule 115)
    arrayelems1  ->  arrayelems1 ',' . keybinop exprseq   (rule 116)
    arrayelems1  ->  arrayelems1 ',' . exprseq ':' exprseq   (rule 117)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 221
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 222
    curryarg	go to state 62



state 143

    arrayelems  ->  arrayelems1 optcomma .   (rule 111)

    $default	reduce using rule 111 (arrayelems)



state 144

    arrayelems1  ->  keybinop exprseq .   (rule 114)

    $default	reduce using rule 114 (arrayelems1)



state 145

    valrange2  ->  DOTDOT exprseq .   (rule 86)

    $default	reduce using rule 86 (valrange2)



state 146

    expr1  ->  '(' valrange2 ')' .   (rule 69)

    $default	reduce using rule 69 (expr1)



state 147

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 223
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 148

    dictslotdef  ->  exprseq ':' . exprseq   (rule 178)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 224
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 149

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 225
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 150

    expr1  ->  '(' exprseq ')' .   (rule 66)

    $default	reduce using rule 66 (expr1)



state 151

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 226



state 152

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 181)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 227
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 228
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 153

    expr1  ->  '(' dictslotlist ')' .   (rule 70)

    $default	reduce using rule 70 (expr1)



state 154

    dictslotdef  ->  keybinop exprseq .   (rule 179)

    $default	reduce using rule 179 (dictslotdef)



state 155

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 156

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 157

    expr  ->  '~' name '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 229
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 158

    listlit2  ->  '[' . literallistc ']'   (rule 190)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 158

    $default	reduce using rule 192 (literallistc)

    listliteral	go to state 159
    listlit2	go to state 160
    literallistc	go to state 230
    literallist1	go to state 162
    integer	go to state 163
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 164
    classname	go to state 165
    trueobj	go to state 166
    falseobj	go to state 167
    nilobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 159

    literallist1  ->  listliteral .   (rule 194)

    $default	reduce using rule 194 (literallist1)



state 160

    listliteral  ->  listlit2 .   (rule 159)

    $default	reduce using rule 159 (listliteral)



state 161

    listlit  ->  '#' '[' literallistc . ']'   (rule 188)

    ']' 	shift, and go to state 231



state 162

    literallistc  ->  literallist1 . optcomma   (rule 193)
    literallist1  ->  literallist1 . ',' listliteral   (rule 195)

    ',' 	shift, and go to state 232

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 233



state 163

    listliteral  ->  integer .   (rule 151)
    floatp  ->  integer . pie   (rule 210)

    PIE 	shift, and go to state 20

    $default	reduce using rule 151 (listliteral)

    pie 	go to state 118



state 164

    listliteral  ->  floatp .   (rule 152)

    $default	reduce using rule 152 (listliteral)



state 165

    listlit2  ->  classname . '[' literallistc ']'   (rule 191)

    '[' 	shift, and go to state 234



state 166

    listliteral  ->  trueobj .   (rule 156)

    $default	reduce using rule 156 (listliteral)



state 167

    listliteral  ->  falseobj .   (rule 157)

    $default	reduce using rule 157 (listliteral)



state 168

    listliteral  ->  nilobj .   (rule 158)

    $default	reduce using rule 158 (listliteral)



state 169

    listliteral  ->  ascii .   (rule 153)

    $default	reduce using rule 153 (listliteral)



state 170

    listliteral  ->  symbol .   (rule 155)

    $default	reduce using rule 155 (listliteral)



state 171

    listliteral  ->  string .   (rule 154)

    $default	reduce using rule 154 (listliteral)



state 172

    expr  ->  '#' mavars '=' . expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 235
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 173

    mavars  ->  mavarlist ELLIPSIS . name   (rule 128)

    NAME	shift, and go to state 6

    name	go to state 236



state 174

    mavarlist  ->  mavarlist ',' . name   (rule 130)

    NAME	shift, and go to state 6

    name	go to state 237



state 175

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 189)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 158

    $default	reduce using rule 192 (literallistc)

    listliteral	go to state 159
    listlit2	go to state 160
    literallistc	go to state 238
    literallist1	go to state 162
    integer	go to state 163
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 164
    classname	go to state 165
    trueobj	go to state 166
    falseobj	go to state 167
    nilobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 176

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 75)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 239
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 177

    arglist1  ->  exprseq .   (rule 118)

    $default	reduce using rule 118 (arglist1)



state 178

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 74)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 101)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)

    DOTDOT	shift, and go to state 240
    ']' 	shift, and go to state 241
    ',' 	shift, and go to state 242



state 179

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 93)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 102)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 243
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 244
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 180

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr '.' '(' . arglistv1 optkeyarglist ')'   (rule 57)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 245
    arglistv1	go to state 246
    keyarglist1	go to state 247
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 195
    curryarg	go to state 62



state 181

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr '.' name . '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr '.' name . blocklist   (rule 60)
    expr  ->  expr '.' name . '=' expr   (rule 98)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 248
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 249

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 251
    blockliteral	go to state 123
    block	go to state 44



state 182

    adverb  ->  '.' . name   (rule 104)
    adverb  ->  '.' . integer   (rule 105)
    adverb  ->  '.' . '(' exprseq ')'   (rule 106)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    '-' 	shift, and go to state 252
    '(' 	shift, and go to state 253

    integer	go to state 254
    name	go to state 255



state 183

    expr  ->  expr binop2 adverb . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 256
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 184

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)
    exprn  ->  exprn ';' expr .   (rule 108)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 108 (exprn)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 185

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  name '=' expr .   (rule 96)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 96 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 186

    arglistv1  ->  '*' . exprseq   (rule 120)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 257
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 187

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 99)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 121)

    ',' 	shift, and go to state 258

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 259



state 188

    msgsend  ->  name '(' arglistv1 . optkeyarglist ')'   (rule 48)

    ',' 	shift, and go to state 260

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 261



state 189

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 190

    msgsend  ->  classname '[' arrayelems . ']'   (rule 49)

    ']' 	shift, and go to state 262



state 191

    msgsend  ->  classname '(' arglist1 . optkeyarglist ')' blocklist   (rule 52)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 121)

    ',' 	shift, and go to state 258

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 263



state 192

    msgsend  ->  classname '(' arglistv1 . optkeyarglist ')'   (rule 53)

    ',' 	shift, and go to state 260

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 264



state 193

    msgsend  ->  classname '(' keyarglist1 . ')' blocklist   (rule 51)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 123)

    ',' 	shift, and go to state 265
    ')' 	shift, and go to state 266



state 194

    keyarglist1  ->  keyarg .   (rule 122)

    $default	reduce using rule 122 (keyarglist1)



state 195

    keyarg  ->  keybinop . exprseq   (rule 124)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 267
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 196

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 268
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 269

    methoddef	go to state 270
    name	go to state 271
    binop	go to state 272



state 197

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 198

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 273



state 199

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 200

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 274



state 201

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 175)

    $default	reduce using rule 175 (slotdeflist)



state 202

    listlit  ->  '#' . '[' literallistc ']'   (rule 188)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 189)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    classname	go to state 99



state 203

    slotdef  ->  name '=' slotliteral .   (rule 177)

    $default	reduce using rule 177 (slotdef)



state 204

    slotliteral  ->  listlit .   (rule 139)

    $default	reduce using rule 139 (slotliteral)



state 205

    slotliteral  ->  integer .   (rule 131)
    floatp  ->  integer . pie   (rule 210)

    PIE 	shift, and go to state 20

    $default	reduce using rule 131 (slotliteral)

    pie 	go to state 118



state 206

    slotliteral  ->  floatp .   (rule 132)

    $default	reduce using rule 132 (slotliteral)



state 207

    slotliteral  ->  trueobj .   (rule 136)

    $default	reduce using rule 136 (slotliteral)



state 208

    slotliteral  ->  falseobj .   (rule 137)

    $default	reduce using rule 137 (slotliteral)



state 209

    slotliteral  ->  nilobj .   (rule 138)

    $default	reduce using rule 138 (slotliteral)



state 210

    slotliteral  ->  ascii .   (rule 133)

    $default	reduce using rule 133 (slotliteral)



state 211

    slotliteral  ->  symbol .   (rule 135)

    $default	reduce using rule 135 (slotliteral)



state 212

    slotliteral  ->  string .   (rule 134)

    $default	reduce using rule 134 (slotliteral)



state 213

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 169)

    NAME	shift, and go to state 6

    name	go to state 275



state 214

    argdecls  ->  ARG slotdeflist ';' .   (rule 168)

    $default	reduce using rule 168 (argdecls)



state 215

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 171)

    NAME	shift, and go to state 6

    name	go to state 276



state 216

    argdecls  ->  '|' slotdeflist '|' .   (rule 170)

    $default	reduce using rule 170 (argdecls)



state 217

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody . '}'   (rule 161)

    '}' 	shift, and go to state 277



state 218

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 163)

    $default	reduce using rule 163 (funcvardecls)



state 219

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 160)

    '}' 	shift, and go to state 278



state 220

    arrayelems1  ->  exprseq ':' exprseq .   (rule 113)

    $default	reduce using rule 113 (arrayelems1)



state 221

    arrayelems1  ->  arrayelems1 ',' exprseq .   (rule 115)
    arrayelems1  ->  arrayelems1 ',' exprseq . ':' exprseq   (rule 117)

    ':' 	shift, and go to state 279

    $default	reduce using rule 115 (arrayelems1)



state 222

    arrayelems1  ->  arrayelems1 ',' keybinop . exprseq   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 280
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 223

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 87)

    $default	reduce using rule 87 (valrange2)



state 224

    dictslotdef  ->  exprseq ':' exprseq .   (rule 178)

    $default	reduce using rule 178 (dictslotdef)



state 225

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 88)

    DOTDOT	shift, and go to state 281



state 226

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 227

    dictslotdef  ->  exprseq . ':' exprseq   (rule 178)

    ':' 	shift, and go to state 148



state 228

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 181)

    $default	reduce using rule 181 (dictslotlist1)



state 229

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  '~' name '=' expr .   (rule 97)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 97 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 230

    listlit2  ->  '[' literallistc . ']'   (rule 190)

    ']' 	shift, and go to state 282



state 231

    listlit  ->  '#' '[' literallistc ']' .   (rule 188)

    $default	reduce using rule 188 (listlit)



state 232

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 195)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 158

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 283
    listlit2	go to state 160
    integer	go to state 163
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 164
    classname	go to state 165
    trueobj	go to state 166
    falseobj	go to state 167
    nilobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 233

    literallistc  ->  literallist1 optcomma .   (rule 193)

    $default	reduce using rule 193 (literallistc)



state 234

    listlit2  ->  classname '[' . literallistc ']'   (rule 191)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 158

    $default	reduce using rule 192 (literallistc)

    listliteral	go to state 159
    listlit2	go to state 160
    literallistc	go to state 284
    literallist1	go to state 162
    integer	go to state 163
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 164
    classname	go to state 165
    trueobj	go to state 166
    falseobj	go to state 167
    nilobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 235

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  '#' mavars '=' expr .   (rule 100)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 100 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 236

    mavars  ->  mavarlist ELLIPSIS name .   (rule 128)

    $default	reduce using rule 128 (mavars)



state 237

    mavarlist  ->  mavarlist ',' name .   (rule 130)

    $default	reduce using rule 130 (mavarlist)



state 238

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 189)

    ']' 	shift, and go to state 285



state 239

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 75)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 78)

    ']' 	shift, and go to state 286



state 240

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 74)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 287
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 288
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 241

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 72)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 101)

    '=' 	shift, and go to state 289

    $default	reduce using rule 72 (expr1)



state 242

    arglist1  ->  arglist1 ',' . exprseq   (rule 119)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 290
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 243

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 291
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 244

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 93)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 102)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)

    DOTDOT	shift, and go to state 292
    ']' 	shift, and go to state 293
    ',' 	shift, and go to state 242



state 245

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 56)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 121)

    ',' 	shift, and go to state 258

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 294



state 246

    msgsend  ->  expr '.' '(' arglistv1 . optkeyarglist ')'   (rule 57)

    ',' 	shift, and go to state 260

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 295



state 247

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 54)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 123)

    ',' 	shift, and go to state 265
    ')' 	shift, and go to state 296



state 248

    expr  ->  expr '.' name '=' . expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 297
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 249

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr '.' name '(' . arglistv1 optkeyarglist ')'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 298
    arglistv1	go to state 299
    keyarglist1	go to state 300
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 195
    curryarg	go to state 62



state 250

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 189
    block	go to state 44



state 251

    msgsend  ->  expr '.' name blocklist .   (rule 60)

    $default	reduce using rule 60 (msgsend)



state 252

    integer  ->  '-' . INTEGER   (rule 201)

    INTEGER	shift, and go to state 73



state 253

    adverb  ->  '.' '(' . exprseq ')'   (rule 106)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 301
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 254

    adverb  ->  '.' integer .   (rule 105)

    $default	reduce using rule 105 (adverb)



state 255

    adverb  ->  '.' name .   (rule 104)

    $default	reduce using rule 104 (adverb)



state 256

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr binop2 adverb expr .   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    '.' 	shift, and go to state 109

    $default	reduce using rule 95 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 257

    arglistv1  ->  '*' exprseq .   (rule 120)

    $default	reduce using rule 120 (arglistv1)



state 258

    arglist1  ->  arglist1 ',' . exprseq   (rule 119)
    arglistv1  ->  arglist1 ',' . '*' exprseq   (rule 121)
    optkeyarglist  ->  ',' . keyarglist1   (rule 126)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 302
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 290
    keyarglist1	go to state 303
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 195
    curryarg	go to state 62



state 259

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 99)

    ')' 	shift, and go to state 304



state 260

    optkeyarglist  ->  ',' . keyarglist1   (rule 126)

    KEYBINOP	shift, and go to state 80

    keyarglist1	go to state 303
    keyarg	go to state 194
    keybinop	go to state 195



state 261

    msgsend  ->  name '(' arglistv1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 305



state 262

    msgsend  ->  classname '[' arrayelems ']' .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 263

    msgsend  ->  classname '(' arglist1 optkeyarglist . ')' blocklist   (rule 52)

    ')' 	shift, and go to state 306



state 264

    msgsend  ->  classname '(' arglistv1 optkeyarglist . ')'   (rule 53)

    ')' 	shift, and go to state 307



state 265

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 123)

    KEYBINOP	shift, and go to state 80

    keyarg	go to state 308
    keybinop	go to state 195



state 266

    msgsend  ->  classname '(' keyarglist1 ')' . blocklist   (rule 51)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 309
    blockliteral	go to state 123
    block	go to state 44



state 267

    keyarg  ->  keybinop exprseq .   (rule 124)

    $default	reduce using rule 124 (keyarg)



state 268

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 228)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108

    $default	reduce using rule 228 (binop)

    name	go to state 310
    binop	go to state 311



state 269

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 270

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 271

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 312



state 272

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 313



state 273

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 128

    $default	reduce using rule 13 (superclass)

    superclass	go to state 314



state 274

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 315
    CLASSVAR	shift, and go to state 316

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 317
    methods	go to state 318



state 275

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 169)

    ';' 	shift, and go to state 319



state 276

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 171)

    '|' 	shift, and go to state 320



state 277

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}' .   (rule 161)

    $default	reduce using rule 161 (block)



state 278

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 160)

    $default	reduce using rule 160 (block)



state 279

    arrayelems1  ->  arrayelems1 ',' exprseq ':' . exprseq   (rule 117)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 321
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 280

    arrayelems1  ->  arrayelems1 ',' keybinop exprseq .   (rule 116)

    $default	reduce using rule 116 (arrayelems1)



state 281

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 322
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 282

    listlit2  ->  '[' literallistc ']' .   (rule 190)

    $default	reduce using rule 190 (listlit2)



state 283

    literallist1  ->  literallist1 ',' listliteral .   (rule 195)

    $default	reduce using rule 195 (literallist1)



state 284

    listlit2  ->  classname '[' literallistc . ']'   (rule 191)

    ']' 	shift, and go to state 323



state 285

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 189)

    $default	reduce using rule 189 (listlit)



state 286

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 75)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 78)

    '=' 	shift, and go to state 324

    $default	reduce using rule 75 (valrangex1)



state 287

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 325

    $default	reduce using rule 74 (valrangex1)



state 288

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 79)

    ']' 	shift, and go to state 326



state 289

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 327
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 290

    arglist1  ->  arglist1 ',' exprseq .   (rule 119)

    $default	reduce using rule 119 (arglist1)



state 291

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 81)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 84)

    ']' 	shift, and go to state 328



state 292

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 329
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 330
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 293

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 93)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 102)

    '=' 	shift, and go to state 331

    $default	reduce using rule 93 (expr)



state 294

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 56)

    ')' 	shift, and go to state 332



state 295

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist . ')'   (rule 57)

    ')' 	shift, and go to state 333



state 296

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 54)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 334
    blockliteral	go to state 123
    block	go to state 44



state 297

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr '.' name '=' expr .   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 98 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 298

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 58)
    arglist1  ->  arglist1 . ',' exprseq   (rule 119)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 121)

    ',' 	shift, and go to state 258

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 335



state 299

    msgsend  ->  expr '.' name '(' arglistv1 . optkeyarglist ')'   (rule 59)

    ',' 	shift, and go to state 260

    $default	reduce using rule 125 (optkeyarglist)

    optkeyarglist	go to state 336



state 300

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 55)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 123)

    ',' 	shift, and go to state 265
    ')' 	shift, and go to state 337



state 301

    adverb  ->  '.' '(' exprseq . ')'   (rule 106)

    ')' 	shift, and go to state 338



state 302

    arglistv1  ->  arglist1 ',' '*' . exprseq   (rule 121)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 339
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 303

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 123)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 126)

    ',' 	shift, and go to state 265

    $default	reduce using rule 126 (optkeyarglist)



state 304

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 99)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 340
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 341
    blockliteral	go to state 123
    block	go to state 44



state 305

    msgsend  ->  name '(' arglistv1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 306

    msgsend  ->  classname '(' arglist1 optkeyarglist ')' . blocklist   (rule 52)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 342
    blockliteral	go to state 123
    block	go to state 44



state 307

    msgsend  ->  classname '(' arglistv1 optkeyarglist ')' .   (rule 53)

    $default	reduce using rule 53 (msgsend)



state 308

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 123)

    $default	reduce using rule 123 (keyarglist1)



state 309

    msgsend  ->  classname '(' keyarglist1 ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 310

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 343



state 311

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 344



state 312

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 345



state 313

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 346



state 314

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 347



state 315

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 348
    '>' 	shift, and go to state 349
    READWRITEVAR	shift, and go to state 350

    $default	reduce using rule 196 (rwspec)

    rwslotdeflist	go to state 351
    rwslotdef	go to state 352
    rwspec	go to state 353



state 316

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 348
    '>' 	shift, and go to state 349
    READWRITEVAR	shift, and go to state 350

    $default	reduce using rule 196 (rwspec)

    rwslotdeflist	go to state 354
    rwslotdef	go to state 352
    rwspec	go to state 353



state 317

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 318

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 268
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 355

    methoddef	go to state 270
    name	go to state 271
    binop	go to state 272



state 319

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 169)

    $default	reduce using rule 169 (argdecls)



state 320

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 171)

    $default	reduce using rule 171 (argdecls)



state 321

    arrayelems1  ->  arrayelems1 ',' exprseq ':' exprseq .   (rule 117)

    $default	reduce using rule 117 (arrayelems1)



state 322

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 88)

    $default	reduce using rule 88 (valrange2)



state 323

    listlit2  ->  classname '[' literallistc ']' .   (rule 191)

    $default	reduce using rule 191 (listlit2)



state 324

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 356
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 325

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 357
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 326

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 79)

    '=' 	shift, and go to state 358

    $default	reduce using rule 76 (valrangex1)



state 327

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 101)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 101 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 328

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 81)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 84)

    '=' 	shift, and go to state 359

    $default	reduce using rule 81 (valrangexd)



state 329

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 83)

    '=' 	shift, and go to state 360

    $default	reduce using rule 80 (valrangexd)



state 330

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 85)

    ']' 	shift, and go to state 361



state 331

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 102)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 362
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 332

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 56)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 363
    blockliteral	go to state 123
    block	go to state 44



state 333

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist ')' .   (rule 57)

    $default	reduce using rule 57 (msgsend)



state 334

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 54)

    $default	reduce using rule 54 (msgsend)



state 335

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 58)

    ')' 	shift, and go to state 364



state 336

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist . ')'   (rule 59)

    ')' 	shift, and go to state 365



state 337

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 55)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 366
    blockliteral	go to state 123
    block	go to state 44



state 338

    adverb  ->  '.' '(' exprseq ')' .   (rule 106)

    $default	reduce using rule 106 (adverb)



state 339

    arglistv1  ->  arglist1 ',' '*' exprseq .   (rule 121)

    $default	reduce using rule 121 (arglistv1)



state 340

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 367
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 341

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 342

    msgsend  ->  classname '(' arglist1 optkeyarglist ')' blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 343

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 368



state 344

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 167 (argdecls)

    argdecls	go to state 369



state 345

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 370



state 346

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 371



state 347

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 372



state 348

    rwspec  ->  '<' .   (rule 197)

    $default	reduce using rule 197 (rwspec)



state 349

    rwspec  ->  '>' .   (rule 199)

    $default	reduce using rule 199 (rwspec)



state 350

    rwspec  ->  READWRITEVAR .   (rule 198)

    $default	reduce using rule 198 (rwspec)



state 351

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 185)

    ';' 	shift, and go to state 373
    ',' 	shift, and go to state 374



state 352

    rwslotdeflist  ->  rwslotdef .   (rule 184)

    $default	reduce using rule 184 (rwslotdeflist)



state 353

    rwslotdef  ->  rwspec . name   (rule 186)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 187)

    NAME	shift, and go to state 6

    name	go to state 375



state 354

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 185)

    ';' 	shift, and go to state 376
    ',' 	shift, and go to state 374



state 355

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 356

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 78 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 357

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 77 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 358

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 377
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 359

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 378
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 360

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 379
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 361

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 85)

    '=' 	shift, and go to state 380

    $default	reduce using rule 82 (valrangexd)



state 362

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 102 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 363

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 56)

    $default	reduce using rule 56 (msgsend)



state 364

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 58)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 250
    blocklist	go to state 381
    blockliteral	go to state 123
    block	go to state 44



state 365

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist ')' .   (rule 59)

    $default	reduce using rule 59 (msgsend)



state 366

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 55)

    $default	reduce using rule 55 (msgsend)



state 367

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 99)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 99 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 368

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 382



state 369

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 162 (funcvardecls)

    funcvardecls	go to state 383



state 370

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    PRIMITIVENAME	shift, and go to state 384
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 385
    funcvardecl	go to state 218
    primname	go to state 386



state 371

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    PRIMITIVENAME	shift, and go to state 384
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 387
    funcvardecl	go to state 218
    primname	go to state 386



state 372

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 315
    CLASSVAR	shift, and go to state 316

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 317
    methods	go to state 388



state 373

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 374

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 185)

    '<' 	shift, and go to state 348
    '>' 	shift, and go to state 349
    READWRITEVAR	shift, and go to state 350

    $default	reduce using rule 196 (rwspec)

    rwslotdef	go to state 389
    rwspec	go to state 353



state 375

    rwslotdef  ->  rwspec name .   (rule 186)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 187)

    '=' 	shift, and go to state 390

    $default	reduce using rule 186 (rwslotdef)



state 376

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 377

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 79 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 378

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 84 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 379

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 83 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 380

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 391
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 381

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 58)

    $default	reduce using rule 58 (msgsend)



state 382

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    PRIMITIVENAME	shift, and go to state 384
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 392
    funcvardecl	go to state 218
    primname	go to state 386



state 383

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 163)

    PRIMITIVENAME	shift, and go to state 384
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 393
    funcvardecl	go to state 218
    primname	go to state 386



state 384

    primname  ->  PRIMITIVENAME .   (rule 215)

    $default	reduce using rule 215 (primname)



state 385

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 394
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 395
    retval	go to state 396
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 397
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 386

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 155

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 398



state 387

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 394
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 399
    retval	go to state 396
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 397
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 388

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 268
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 400

    methoddef	go to state 270
    name	go to state 271
    binop	go to state 272



state 389

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 185)

    $default	reduce using rule 185 (rwslotdeflist)



state 390

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 187)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 202

    slotliteral	go to state 401
    listlit	go to state 204
    integer	go to state 205
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 206
    trueobj	go to state 207
    falseobj	go to state 208
    nilobj	go to state 209
    ascii	go to state 210
    symbol	go to state 211
    string	go to state 212



state 391

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 85 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 392

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 394
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 402
    retval	go to state 396
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 397
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 393

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 394
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 403
    retval	go to state 396
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 397
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 394

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 404
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 395

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 405



state 396

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 397

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 394

    $default	reduce using rule 38 (retval)

    retval	go to state 406



state 398

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 399

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 407



state 400

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 401

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 187)

    $default	reduce using rule 187 (rwslotdef)



state 402

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 408



state 403

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 409



state 404

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 54)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 55)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 56)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 57)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 58)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 59)
    msgsend  ->  expr . '.' name blocklist   (rule 60)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 155

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 410
    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 405

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 406

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 407

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 408

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 409

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 410

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 411

    $   	go to state 412



state 412

    $   	go to state 413



state 413

    $default	accept
