

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 78 between rule 92 and token BINOP resolved as reduce.
Conflict in state 78 between rule 92 and token KEYBINOP resolved as reduce.
Conflict in state 78 between rule 92 and token '-' resolved as reduce.
Conflict in state 78 between rule 92 and token '<' resolved as reduce.
Conflict in state 78 between rule 92 and token '>' resolved as reduce.
Conflict in state 78 between rule 92 and token '*' resolved as reduce.
Conflict in state 78 between rule 92 and token '+' resolved as reduce.
Conflict in state 78 between rule 92 and token '|' resolved as reduce.
Conflict in state 78 between rule 92 and token READWRITEVAR resolved as reduce.
Conflict in state 78 between rule 92 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 78 between rule 92 and token '.' resolved as reduce.
Conflict in state 182 between rule 93 and token BINOP resolved as reduce.
Conflict in state 182 between rule 93 and token KEYBINOP resolved as reduce.
Conflict in state 182 between rule 93 and token '-' resolved as reduce.
Conflict in state 182 between rule 93 and token '<' resolved as reduce.
Conflict in state 182 between rule 93 and token '>' resolved as reduce.
Conflict in state 182 between rule 93 and token '*' resolved as reduce.
Conflict in state 182 between rule 93 and token '+' resolved as reduce.
Conflict in state 182 between rule 93 and token '|' resolved as reduce.
Conflict in state 182 between rule 93 and token READWRITEVAR resolved as reduce.
Conflict in state 182 between rule 93 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 182 between rule 93 and token '.' resolved as shift.
Conflict in state 183 between rule 94 and token BINOP resolved as reduce.
Conflict in state 183 between rule 94 and token KEYBINOP resolved as reduce.
Conflict in state 183 between rule 94 and token '-' resolved as reduce.
Conflict in state 183 between rule 94 and token '<' resolved as reduce.
Conflict in state 183 between rule 94 and token '>' resolved as reduce.
Conflict in state 183 between rule 94 and token '*' resolved as reduce.
Conflict in state 183 between rule 94 and token '+' resolved as reduce.
Conflict in state 183 between rule 94 and token '|' resolved as reduce.
Conflict in state 183 between rule 94 and token READWRITEVAR resolved as reduce.
Conflict in state 183 between rule 94 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 183 between rule 94 and token '.' resolved as shift.
Conflict in state 185 between rule 95 and token BINOP resolved as shift.
Conflict in state 185 between rule 95 and token KEYBINOP resolved as shift.
Conflict in state 185 between rule 95 and token '-' resolved as shift.
Conflict in state 185 between rule 95 and token '<' resolved as shift.
Conflict in state 185 between rule 95 and token '>' resolved as shift.
Conflict in state 185 between rule 95 and token '*' resolved as shift.
Conflict in state 185 between rule 95 and token '+' resolved as shift.
Conflict in state 185 between rule 95 and token '|' resolved as shift.
Conflict in state 185 between rule 95 and token READWRITEVAR resolved as shift.
Conflict in state 185 between rule 95 and token DOUBLEEQUAL resolved as shift.
Conflict in state 185 between rule 95 and token '.' resolved as shift.
Conflict in state 230 between rule 96 and token BINOP resolved as shift.
Conflict in state 230 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 230 between rule 96 and token '-' resolved as shift.
Conflict in state 230 between rule 96 and token '<' resolved as shift.
Conflict in state 230 between rule 96 and token '>' resolved as shift.
Conflict in state 230 between rule 96 and token '*' resolved as shift.
Conflict in state 230 between rule 96 and token '+' resolved as shift.
Conflict in state 230 between rule 96 and token '|' resolved as shift.
Conflict in state 230 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 230 between rule 96 and token DOUBLEEQUAL resolved as shift.
Conflict in state 230 between rule 96 and token '.' resolved as shift.
Conflict in state 236 between rule 99 and token BINOP resolved as shift.
Conflict in state 236 between rule 99 and token KEYBINOP resolved as shift.
Conflict in state 236 between rule 99 and token '-' resolved as shift.
Conflict in state 236 between rule 99 and token '<' resolved as shift.
Conflict in state 236 between rule 99 and token '>' resolved as shift.
Conflict in state 236 between rule 99 and token '*' resolved as shift.
Conflict in state 236 between rule 99 and token '+' resolved as shift.
Conflict in state 236 between rule 99 and token '|' resolved as shift.
Conflict in state 236 between rule 99 and token READWRITEVAR resolved as shift.
Conflict in state 236 between rule 99 and token DOUBLEEQUAL resolved as shift.
Conflict in state 236 between rule 99 and token '.' resolved as shift.
Conflict in state 293 between rule 97 and token BINOP resolved as shift.
Conflict in state 293 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 293 between rule 97 and token '-' resolved as shift.
Conflict in state 293 between rule 97 and token '<' resolved as shift.
Conflict in state 293 between rule 97 and token '>' resolved as shift.
Conflict in state 293 between rule 97 and token '*' resolved as shift.
Conflict in state 293 between rule 97 and token '+' resolved as shift.
Conflict in state 293 between rule 97 and token '|' resolved as shift.
Conflict in state 293 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 293 between rule 97 and token DOUBLEEQUAL resolved as shift.
Conflict in state 293 between rule 97 and token '.' resolved as shift.
Conflict in state 321 between rule 100 and token BINOP resolved as shift.
Conflict in state 321 between rule 100 and token KEYBINOP resolved as shift.
Conflict in state 321 between rule 100 and token '-' resolved as shift.
Conflict in state 321 between rule 100 and token '<' resolved as shift.
Conflict in state 321 between rule 100 and token '>' resolved as shift.
Conflict in state 321 between rule 100 and token '*' resolved as shift.
Conflict in state 321 between rule 100 and token '+' resolved as shift.
Conflict in state 321 between rule 100 and token '|' resolved as shift.
Conflict in state 321 between rule 100 and token READWRITEVAR resolved as shift.
Conflict in state 321 between rule 100 and token DOUBLEEQUAL resolved as shift.
Conflict in state 321 between rule 100 and token '.' resolved as shift.
Conflict in state 348 between rule 76 and token BINOP resolved as shift.
Conflict in state 348 between rule 76 and token KEYBINOP resolved as shift.
Conflict in state 348 between rule 76 and token '-' resolved as shift.
Conflict in state 348 between rule 76 and token '<' resolved as shift.
Conflict in state 348 between rule 76 and token '>' resolved as shift.
Conflict in state 348 between rule 76 and token '*' resolved as shift.
Conflict in state 348 between rule 76 and token '+' resolved as shift.
Conflict in state 348 between rule 76 and token '|' resolved as shift.
Conflict in state 348 between rule 76 and token READWRITEVAR resolved as shift.
Conflict in state 348 between rule 76 and token DOUBLEEQUAL resolved as shift.
Conflict in state 348 between rule 76 and token '.' resolved as shift.
Conflict in state 349 between rule 75 and token BINOP resolved as shift.
Conflict in state 349 between rule 75 and token KEYBINOP resolved as shift.
Conflict in state 349 between rule 75 and token '-' resolved as shift.
Conflict in state 349 between rule 75 and token '<' resolved as shift.
Conflict in state 349 between rule 75 and token '>' resolved as shift.
Conflict in state 349 between rule 75 and token '*' resolved as shift.
Conflict in state 349 between rule 75 and token '+' resolved as shift.
Conflict in state 349 between rule 75 and token '|' resolved as shift.
Conflict in state 349 between rule 75 and token READWRITEVAR resolved as shift.
Conflict in state 349 between rule 75 and token DOUBLEEQUAL resolved as shift.
Conflict in state 349 between rule 75 and token '.' resolved as shift.
Conflict in state 354 between rule 101 and token BINOP resolved as shift.
Conflict in state 354 between rule 101 and token KEYBINOP resolved as shift.
Conflict in state 354 between rule 101 and token '-' resolved as shift.
Conflict in state 354 between rule 101 and token '<' resolved as shift.
Conflict in state 354 between rule 101 and token '>' resolved as shift.
Conflict in state 354 between rule 101 and token '*' resolved as shift.
Conflict in state 354 between rule 101 and token '+' resolved as shift.
Conflict in state 354 between rule 101 and token '|' resolved as shift.
Conflict in state 354 between rule 101 and token READWRITEVAR resolved as shift.
Conflict in state 354 between rule 101 and token DOUBLEEQUAL resolved as shift.
Conflict in state 354 between rule 101 and token '.' resolved as shift.
Conflict in state 359 between rule 98 and token BINOP resolved as shift.
Conflict in state 359 between rule 98 and token KEYBINOP resolved as shift.
Conflict in state 359 between rule 98 and token '-' resolved as shift.
Conflict in state 359 between rule 98 and token '<' resolved as shift.
Conflict in state 359 between rule 98 and token '>' resolved as shift.
Conflict in state 359 between rule 98 and token '*' resolved as shift.
Conflict in state 359 between rule 98 and token '+' resolved as shift.
Conflict in state 359 between rule 98 and token '|' resolved as shift.
Conflict in state 359 between rule 98 and token READWRITEVAR resolved as shift.
Conflict in state 359 between rule 98 and token DOUBLEEQUAL resolved as shift.
Conflict in state 359 between rule 98 and token '.' resolved as shift.
Conflict in state 369 between rule 77 and token BINOP resolved as shift.
Conflict in state 369 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 369 between rule 77 and token '-' resolved as shift.
Conflict in state 369 between rule 77 and token '<' resolved as shift.
Conflict in state 369 between rule 77 and token '>' resolved as shift.
Conflict in state 369 between rule 77 and token '*' resolved as shift.
Conflict in state 369 between rule 77 and token '+' resolved as shift.
Conflict in state 369 between rule 77 and token '|' resolved as shift.
Conflict in state 369 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 369 between rule 77 and token DOUBLEEQUAL resolved as shift.
Conflict in state 369 between rule 77 and token '.' resolved as shift.
Conflict in state 370 between rule 82 and token BINOP resolved as shift.
Conflict in state 370 between rule 82 and token KEYBINOP resolved as shift.
Conflict in state 370 between rule 82 and token '-' resolved as shift.
Conflict in state 370 between rule 82 and token '<' resolved as shift.
Conflict in state 370 between rule 82 and token '>' resolved as shift.
Conflict in state 370 between rule 82 and token '*' resolved as shift.
Conflict in state 370 between rule 82 and token '+' resolved as shift.
Conflict in state 370 between rule 82 and token '|' resolved as shift.
Conflict in state 370 between rule 82 and token READWRITEVAR resolved as shift.
Conflict in state 370 between rule 82 and token DOUBLEEQUAL resolved as shift.
Conflict in state 370 between rule 82 and token '.' resolved as shift.
Conflict in state 371 between rule 81 and token BINOP resolved as shift.
Conflict in state 371 between rule 81 and token KEYBINOP resolved as shift.
Conflict in state 371 between rule 81 and token '-' resolved as shift.
Conflict in state 371 between rule 81 and token '<' resolved as shift.
Conflict in state 371 between rule 81 and token '>' resolved as shift.
Conflict in state 371 between rule 81 and token '*' resolved as shift.
Conflict in state 371 between rule 81 and token '+' resolved as shift.
Conflict in state 371 between rule 81 and token '|' resolved as shift.
Conflict in state 371 between rule 81 and token READWRITEVAR resolved as shift.
Conflict in state 371 between rule 81 and token DOUBLEEQUAL resolved as shift.
Conflict in state 371 between rule 81 and token '.' resolved as shift.
Conflict in state 383 between rule 83 and token BINOP resolved as shift.
Conflict in state 383 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 383 between rule 83 and token '-' resolved as shift.
Conflict in state 383 between rule 83 and token '<' resolved as shift.
Conflict in state 383 between rule 83 and token '>' resolved as shift.
Conflict in state 383 between rule 83 and token '*' resolved as shift.
Conflict in state 383 between rule 83 and token '+' resolved as shift.
Conflict in state 383 between rule 83 and token '|' resolved as shift.
Conflict in state 383 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 383 between rule 83 and token DOUBLEEQUAL resolved as shift.
Conflict in state 383 between rule 83 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> name '(' arglistv1 optkeyarglist ')'
rule 49   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 51   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' '(' arglistv1 optkeyarglist ')'
rule 53   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 54   msgsend -> expr '.' name '(' arglistv1 optkeyarglist ')'
rule 55   msgsend -> expr '.' name blocklist
rule 56   expr1 -> pushliteral
rule 57   expr1 -> blockliteral
rule 58   expr1 -> pushname
rule 59   expr1 -> msgsend
rule 60   expr1 -> '(' exprseq ')'
rule 61   expr1 -> '~' name
rule 62   expr1 -> '[' arrayelems ']'
rule 63   expr1 -> '(' valrange2 ')'
rule 64   expr1 -> '(' dictslotlist ')'
rule 65   expr1 -> pseudovar
rule 66   expr1 -> classname '(' keyarglist1 ')'
rule 67   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 68   expr1 -> classname '(' arglistv1 optkeyarglist ')'
rule 69   expr1 -> classname '[' arrayelems ']'
rule 70   expr1 -> expr1 '[' arglist1 ']'
rule 71   expr1 -> valrangex1
rule 72   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 73   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 74   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 75   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 76   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 77   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 78   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 79   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 80   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 81   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 82   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 83   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 84   valrange2 -> DOTDOT exprseq
rule 85   valrange2 -> exprseq DOTDOT exprseq
rule 86   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 87   expr -> expr1
rule 88   expr -> valrangexd
rule 89   expr -> valrangeassign
rule 90   expr -> expr '.' '[' arglist1 ']'
rule 91   expr -> classname
rule 92   expr -> '`' expr
rule 93   expr -> expr binop expr
rule 94   expr -> expr keybinop expr
rule 95   expr -> name '=' expr
rule 96   expr -> '~' name '=' expr
rule 97   expr -> expr '.' name '=' expr
rule 98   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 99   expr -> '#' mavars '=' expr
rule 100  expr -> expr1 '[' arglist1 ']' '=' expr
rule 101  expr -> expr '.' '[' arglist1 ']' '=' expr
rule 102  exprn -> expr
rule 103  exprn -> exprn ';' expr
rule 104  exprseq -> exprn optsemi
rule 105  arrayelems ->		/* empty */
rule 106  arrayelems -> arrayelems1 optcomma
rule 107  arrayelems1 -> exprseq
rule 108  arrayelems1 -> exprseq ':' exprseq
rule 109  arrayelems1 -> keybinop exprseq
rule 110  arrayelems1 -> arrayelems1 ',' exprseq
rule 111  arrayelems1 -> arrayelems1 ',' keybinop exprseq
rule 112  arrayelems1 -> arrayelems1 ',' exprseq ':' exprseq
rule 113  arglist1 -> exprseq
rule 114  arglist1 -> arglist1 ',' exprseq
rule 115  arglistv1 -> '*' exprseq
rule 116  arglistv1 -> arglist1 ',' '*' exprseq
rule 117  keyarglist1 -> keyarg
rule 118  keyarglist1 -> keyarglist1 ',' keyarg
rule 119  keyarg -> keybinop exprseq
rule 120  optkeyarglist ->		/* empty */
rule 121  optkeyarglist -> ',' keyarglist1
rule 122  mavars -> mavarlist
rule 123  mavars -> mavarlist ELLIPSIS name
rule 124  mavarlist -> name
rule 125  mavarlist -> mavarlist ',' name
rule 126  slotliteral -> integer
rule 127  slotliteral -> floatp
rule 128  slotliteral -> ascii
rule 129  slotliteral -> string
rule 130  slotliteral -> symbol
rule 131  slotliteral -> trueobj
rule 132  slotliteral -> falseobj
rule 133  slotliteral -> nilobj
rule 134  slotliteral -> infobj
rule 135  slotliteral -> listlit
rule 136  blockliteral -> block
rule 137  pushname -> name
rule 138  pushliteral -> integer
rule 139  pushliteral -> floatp
rule 140  pushliteral -> ascii
rule 141  pushliteral -> string
rule 142  pushliteral -> symbol
rule 143  pushliteral -> trueobj
rule 144  pushliteral -> falseobj
rule 145  pushliteral -> nilobj
rule 146  pushliteral -> infobj
rule 147  pushliteral -> listlit
rule 148  listliteral -> integer
rule 149  listliteral -> floatp
rule 150  listliteral -> ascii
rule 151  listliteral -> string
rule 152  listliteral -> symbol
rule 153  listliteral -> trueobj
rule 154  listliteral -> falseobj
rule 155  listliteral -> nilobj
rule 156  listliteral -> infobj
rule 157  listliteral -> listlit2
rule 158  block -> '{' argdecls funcvardecls funcbody '}'
rule 159  block -> BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
rule 160  funcvardecls ->		/* empty */
rule 161  funcvardecls -> funcvardecls funcvardecl
rule 162  funcvardecls1 -> funcvardecl
rule 163  funcvardecls1 -> funcvardecls1 funcvardecl
rule 164  funcvardecl -> VAR slotdeflist ';'
rule 165  argdecls ->		/* empty */
rule 166  argdecls -> ARG slotdeflist ';'
rule 167  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 168  argdecls -> '|' slotdeflist '|'
rule 169  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 170  slotdeflist0 ->		/* empty */
rule 171  slotdeflist0 -> slotdeflist
rule 172  slotdeflist -> slotdef
rule 173  slotdeflist -> slotdeflist ',' slotdef
rule 174  slotdef -> name
rule 175  slotdef -> name '=' slotliteral
rule 176  dictslotdef -> exprseq ':' exprseq
rule 177  dictslotdef -> keybinop exprseq
rule 178  dictslotlist1 -> dictslotdef
rule 179  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 180  dictslotlist ->		/* empty */
rule 181  dictslotlist -> dictslotlist1
rule 182  rwslotdeflist -> rwslotdef
rule 183  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 184  rwslotdef -> rwspec name
rule 185  rwslotdef -> rwspec name '=' slotliteral
rule 186  listlit -> '#' '[' literallistc ']'
rule 187  listlit -> '#' classname '[' literallistc ']'
rule 188  listlit2 -> '[' literallistc ']'
rule 189  listlit2 -> classname '[' literallistc ']'
rule 190  literallistc ->		/* empty */
rule 191  literallistc -> literallist1 optcomma
rule 192  literallist1 -> listliteral
rule 193  literallist1 -> literallist1 ',' listliteral
rule 194  rwspec ->		/* empty */
rule 195  rwspec -> '<'
rule 196  rwspec -> READWRITEVAR
rule 197  rwspec -> '>'
rule 198  integer -> INTEGER
rule 199  integer -> '-' INTEGER
rule 200  floatr -> FLOAT
rule 201  floatr -> '-' FLOAT
rule 202  accidental -> ACCIDENTAL
rule 203  accidental -> '-' ACCIDENTAL
rule 204  pie -> PIE
rule 205  floatp -> floatr
rule 206  floatp -> accidental
rule 207  floatp -> floatr pie
rule 208  floatp -> integer pie
rule 209  floatp -> pie
rule 210  floatp -> '-' pie
rule 211  name -> NAME
rule 212  classname -> CLASSNAME
rule 213  primname -> PRIMITIVENAME
rule 214  trueobj -> TRUEOBJ
rule 215  falseobj -> FALSEOBJ
rule 216  nilobj -> NILOBJ
rule 217  infobj -> INFINITUMOBJ
rule 218  ascii -> ASCII
rule 219  symbol -> SYMBOL
rule 220  string -> STRING
rule 221  pseudovar -> PSEUDOVAR
rule 222  binop -> BINOP
rule 223  binop -> READWRITEVAR
rule 224  binop -> DOUBLEEQUAL
rule 225  binop -> '<'
rule 226  binop -> '>'
rule 227  binop -> '-'
rule 228  binop -> '*'
rule 229  binop -> '+'
rule 230  binop -> '|'
rule 231  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 99 186 187
'(' (40) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 98
')' (41) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 98
'*' (42) 22 24 115 116 228
'+' (43) 10 229
',' (44) 28 86 110 111 112 114 116 118 121 125 173 179 183 193
'-' (45) 199 201 203 210 227
'.' (46) 49 50 51 52 53 54 55 78 79 80 81 82 83 90 97 101
':' (58) 14 108 112 176
';' (59) 17 18 26 103 164 166 167
'<' (60) 195 225
'=' (61) 75 76 77 81 82 83 95 96 97 98 99 100 101 175 185
'>' (62) 197 226
'[' (91) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 100 101
    186 187 188 189
']' (93) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 100 101
    186 187 188 189
'^' (94) 39 41
'`' (96) 92
'{' (123) 8 9 10 21 22 23 24 158
'|' (124) 168 169 230
'}' (125) 8 9 10 21 22 23 24 158 159
'~' (126) 61 96
error (256)
NAME (257) 211
INTEGER (258) 198 199
FLOAT (259) 200 201
ACCIDENTAL (260) 202 203
SYMBOL (261) 219
STRING (262) 220
ASCII (263) 218
PRIMITIVENAME (264) 213
CLASSNAME (265) 212
VAR (266) 18 164
ARG (267) 166 167
CLASSVAR (268) 17
CONST (269)
NILOBJ (270) 216
TRUEOBJ (271) 214
FALSEOBJ (272) 215
INFINITUMOBJ (273) 217
PSEUDOVAR (274) 221
ELLIPSIS (275) 123 167 169
DOTDOT (276) 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
PIE (277) 204
BEGINCLOSEDFUNC (278) 159
BADTOKEN (279)
INTERPRET (280) 3
BINOP (281) 222
KEYBINOP (282) 231
READWRITEVAR (283) 196 223
DOUBLEEQUAL (284) 224
UMINUS (285)

Nonterminals, with rules where they appear

root (53)
    on left: 1 2 3
classes (54)
    on left: 4 5, on right: 1 5
classextensions (55)
    on left: 6 7, on right: 2 7
classdef (56)
    on left: 8 9, on right: 5
classextension (57)
    on left: 10, on right: 6 7
optname (58)
    on left: 11 12, on right: 9
superclass (59)
    on left: 13 14, on right: 8 9
classvardecls (60)
    on left: 15 16, on right: 8 9 16
classvardecl (61)
    on left: 17 18, on right: 16
methods (62)
    on left: 19 20, on right: 8 9 10 20
methoddef (63)
    on left: 21 22 23 24, on right: 20
optsemi (64)
    on left: 25 26, on right: 37 39 41 104
optcomma (65)
    on left: 27 28, on right: 106 191
funcbody (66)
    on left: 29 30, on right: 31 32 33 158 159
cmdlinecode (67)
    on left: 31 32 33, on right: 3
methbody (68)
    on left: 34 35, on right: 21 22 23 24
primitive (69)
    on left: 36 37, on right: 21 22 23 24
retval (70)
    on left: 38 39, on right: 34 35
funretval (71)
    on left: 40 41, on right: 29 30
blocklist1 (72)
    on left: 42 43, on right: 43 45 46
blocklist (73)
    on left: 44 45, on right: 47 49 50 51 53 55
msgsend (74)
    on left: 46 47 48 49 50 51 52 53 54 55, on right: 59
expr1 (75)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71,
    on right: 70 72 73 74 75 76 77 87 100
valrangex1 (76)
    on left: 72 73 74, on right: 71
valrangeassign (77)
    on left: 75 76 77, on right: 89
valrangexd (78)
    on left: 78 79 80 81 82 83, on right: 88
valrange2 (79)
    on left: 84 85 86, on right: 63
expr (80)
    on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101,
    on right: 39 41 49 50 51 52 53 54 55 75 76 77 78 79 80 81 82 83
    90 92 93 94 95 96 97 98 99 100 101 102 103
exprn (81)
    on left: 102 103, on right: 103 104
exprseq (82)
    on left: 104, on right: 30 35 60 73 74 76 77 79 80 82 83 84 85
    86 107 108 109 110 111 112 113 114 115 116 119 176 177
arrayelems (83)
    on left: 105 106, on right: 62 69
arrayelems1 (84)
    on left: 107 108 109 110 111 112, on right: 106 110 111 112
arglist1 (85)
    on left: 113 114, on right: 47 51 53 67 70 72 74 75 77 78 80 81
    83 90 98 100 101 114 116
arglistv1 (86)
    on left: 115 116, on right: 48 52 54 68
keyarglist1 (87)
    on left: 117 118, on right: 49 50 66 118 121
keyarg (88)
    on left: 119, on right: 117 118
optkeyarglist (89)
    on left: 120 121, on right: 47 48 51 52 53 54 67 68 98
mavars (90)
    on left: 122 123, on right: 99
mavarlist (91)
    on left: 124 125, on right: 122 123 125
slotliteral (92)
    on left: 126 127 128 129 130 131 132 133 134 135,
    on right: 175 185
blockliteral (93)
    on left: 136, on right: 42 43 57
pushname (94)
    on left: 137, on right: 58
pushliteral (95)
    on left: 138 139 140 141 142 143 144 145 146 147,
    on right: 56
listliteral (96)
    on left: 148 149 150 151 152 153 154 155 156 157,
    on right: 192 193
block (97)
    on left: 158 159, on right: 136
funcvardecls (98)
    on left: 160 161, on right: 21 22 23 24 158 159 161
funcvardecls1 (99)
    on left: 162 163, on right: 31 32 163
funcvardecl (100)
    on left: 164, on right: 161 162 163
argdecls (101)
    on left: 165 166 167 168 169, on right: 21 22 23 24 158 159
slotdeflist0 (102)
    on left: 170 171, on right: 167 169
slotdeflist (103)
    on left: 172 173, on right: 164 166 168 171 173
slotdef (104)
    on left: 174 175, on right: 172 173
dictslotdef (105)
    on left: 176 177, on right: 178 179
dictslotlist1 (106)
    on left: 178 179, on right: 179 181
dictslotlist (107)
    on left: 180 181, on right: 64
rwslotdeflist (108)
    on left: 182 183, on right: 17 18 183
rwslotdef (109)
    on left: 184 185, on right: 182 183
listlit (110)
    on left: 186 187, on right: 135 147
listlit2 (111)
    on left: 188 189, on right: 157
literallistc (112)
    on left: 190 191, on right: 186 187 188 189
literallist1 (113)
    on left: 192 193, on right: 191 193
rwspec (114)
    on left: 194 195 196 197, on right: 184 185
integer (115)
    on left: 198 199, on right: 126 138 148 208
floatr (116)
    on left: 200 201, on right: 205 207
accidental (117)
    on left: 202 203, on right: 206
pie (118)
    on left: 204, on right: 207 208 209 210
floatp (119)
    on left: 205 206 207 208 209 210, on right: 127 139 149
name (120)
    on left: 211, on right: 12 21 22 46 47 48 50 53 54 55 61 95 96
    97 98 123 124 125 137 167 169 174 175 184 185
classname (121)
    on left: 212, on right: 8 9 10 14 66 67 68 69 91 187 189
primname (122)
    on left: 213, on right: 37
trueobj (123)
    on left: 214, on right: 131 143 153
falseobj (124)
    on left: 215, on right: 132 144 154
nilobj (125)
    on left: 216, on right: 133 145 155
infobj (126)
    on left: 217, on right: 134 146 156
ascii (127)
    on left: 218, on right: 128 140 150
symbol (128)
    on left: 219, on right: 130 142 152
string (129)
    on left: 220, on right: 129 141 151
pseudovar (130)
    on left: 221, on right: 65
binop (131)
    on left: 222 223 224 225 226 227 228 229 230, on right: 23 24 93
keybinop (132)
    on left: 231, on right: 94 109 111 119 177


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 403
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 26
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 30
    cmdlinecode	go to state 31
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 45
    funcvardecl	go to state 46
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 63



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 64
    classname	go to state 65



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 66



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 211)

    $default	reduce using rule 211 (name)



state 7

    integer  ->  INTEGER .   (rule 198)

    $default	reduce using rule 198 (integer)



state 8

    floatr  ->  FLOAT .   (rule 200)

    $default	reduce using rule 200 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 202)

    $default	reduce using rule 202 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 219)

    $default	reduce using rule 219 (symbol)



state 11

    string  ->  STRING .   (rule 220)

    $default	reduce using rule 220 (string)



state 12

    ascii  ->  ASCII .   (rule 218)

    $default	reduce using rule 218 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 212)

    $default	reduce using rule 212 (classname)



state 14

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 164)

    NAME	shift, and go to state 6

    slotdeflist	go to state 67
    slotdef	go to state 68
    name	go to state 69



state 15

    nilobj  ->  NILOBJ .   (rule 216)

    $default	reduce using rule 216 (nilobj)



state 16

    trueobj  ->  TRUEOBJ .   (rule 214)

    $default	reduce using rule 214 (trueobj)



state 17

    falseobj  ->  FALSEOBJ .   (rule 215)

    $default	reduce using rule 215 (falseobj)



state 18

    infobj  ->  INFINITUMOBJ .   (rule 217)

    $default	reduce using rule 217 (infobj)



state 19

    pseudovar  ->  PSEUDOVAR .   (rule 221)

    $default	reduce using rule 221 (pseudovar)



state 20

    pie  ->  PIE .   (rule 204)

    $default	reduce using rule 204 (pie)



state 21

    block  ->  BEGINCLOSEDFUNC . argdecls funcvardecls funcbody '}'   (rule 159)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 72



state 22

    integer  ->  '-' . INTEGER   (rule 199)
    floatr  ->  '-' . FLOAT   (rule 201)
    accidental  ->  '-' . ACCIDENTAL   (rule 203)
    floatp  ->  '-' . pie   (rule 210)

    INTEGER	shift, and go to state 73
    FLOAT	shift, and go to state 74
    ACCIDENTAL	shift, and go to state 75
    PIE 	shift, and go to state 20

    pie 	go to state 76



state 23

    expr  ->  '`' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 78
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 24

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 158)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 79



state 25

    expr1  ->  '[' . arrayelems ']'   (rule 62)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 105 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 82
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 84



state 26

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 180 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 88
    funcvardecl	go to state 46
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 27

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 93
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 28

    expr1  ->  '~' . name   (rule 61)
    expr  ->  '~' . name '=' expr   (rule 96)

    NAME	shift, and go to state 6

    name	go to state 94



state 29

    expr  ->  '#' . mavars '=' expr   (rule 99)
    listlit  ->  '#' . '[' literallistc ']'   (rule 186)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 187)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    mavars	go to state 96
    mavarlist	go to state 97
    name	go to state 98
    classname	go to state 99



state 30

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 31

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 32

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 33

    expr1  ->  msgsend .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 34

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 .   (rule 87)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 100)

    '[' 	shift, and go to state 100

    $default	reduce using rule 87 (expr)



state 35

    expr1  ->  valrangex1 .   (rule 71)

    $default	reduce using rule 71 (expr1)



state 36

    expr  ->  valrangeassign .   (rule 89)

    $default	reduce using rule 89 (expr)



state 37

    expr  ->  valrangexd .   (rule 88)

    $default	reduce using rule 88 (expr)



state 38

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  expr .   (rule 102)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 102 (exprn)

    binop	go to state 111
    keybinop	go to state 112



state 39

    exprn  ->  exprn . ';' expr   (rule 103)
    exprseq  ->  exprn . optsemi   (rule 104)

    ';' 	shift, and go to state 113

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 114



state 40

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funretval	go to state 115



state 41

    expr1  ->  blockliteral .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 42

    expr1  ->  pushname .   (rule 58)

    $default	reduce using rule 58 (expr1)



state 43

    expr1  ->  pushliteral .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 44

    blockliteral  ->  block .   (rule 136)

    $default	reduce using rule 136 (blockliteral)



state 45

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 116
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 46

    funcvardecls1  ->  funcvardecl .   (rule 162)

    $default	reduce using rule 162 (funcvardecls1)



state 47

    pushliteral  ->  listlit .   (rule 147)

    $default	reduce using rule 147 (pushliteral)



state 48

    pushliteral  ->  integer .   (rule 138)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 20

    $default	reduce using rule 138 (pushliteral)

    pie 	go to state 118



state 49

    floatp  ->  floatr .   (rule 205)
    floatp  ->  floatr . pie   (rule 207)

    PIE 	shift, and go to state 20

    $default	reduce using rule 205 (floatp)

    pie 	go to state 119



state 50

    floatp  ->  accidental .   (rule 206)

    $default	reduce using rule 206 (floatp)



state 51

    floatp  ->  pie .   (rule 209)

    $default	reduce using rule 209 (floatp)



state 52

    pushliteral  ->  floatp .   (rule 139)

    $default	reduce using rule 139 (pushliteral)



state 53

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name . '(' arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name . '=' expr   (rule 95)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 98)
    pushname  ->  name .   (rule 137)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 120
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 121

    $default	reduce using rule 137 (pushname)

    blocklist1	go to state 122
    blockliteral	go to state 123
    block	go to state 44



state 54

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 66)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname . '(' arglistv1 optkeyarglist ')'   (rule 68)
    expr1  ->  classname . '[' arrayelems ']'   (rule 69)
    expr  ->  classname .   (rule 91)

    '[' 	shift, and go to state 124
    '(' 	shift, and go to state 125

    $default	reduce using rule 91 (expr)



state 55

    pushliteral  ->  trueobj .   (rule 143)

    $default	reduce using rule 143 (pushliteral)



state 56

    pushliteral  ->  falseobj .   (rule 144)

    $default	reduce using rule 144 (pushliteral)



state 57

    pushliteral  ->  nilobj .   (rule 145)

    $default	reduce using rule 145 (pushliteral)



state 58

    pushliteral  ->  infobj .   (rule 146)

    $default	reduce using rule 146 (pushliteral)



state 59

    pushliteral  ->  ascii .   (rule 140)

    $default	reduce using rule 140 (pushliteral)



state 60

    pushliteral  ->  symbol .   (rule 142)

    $default	reduce using rule 142 (pushliteral)



state 61

    pushliteral  ->  string .   (rule 141)

    $default	reduce using rule 141 (pushliteral)



state 62

    expr1  ->  pseudovar .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 63

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 126



state 64

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 65

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127
    '[' 	shift, and go to state 128

    $default	reduce using rule 13 (superclass)

    superclass	go to state 129



state 66

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 67

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 164)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    ';' 	shift, and go to state 130
    ',' 	shift, and go to state 131



state 68

    slotdeflist  ->  slotdef .   (rule 172)

    $default	reduce using rule 172 (slotdeflist)



state 69

    slotdef  ->  name .   (rule 174)
    slotdef  ->  name . '=' slotliteral   (rule 175)

    '=' 	shift, and go to state 132

    $default	reduce using rule 174 (slotdef)



state 70

    argdecls  ->  ARG . slotdeflist ';'   (rule 166)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 167)

    NAME	shift, and go to state 6

    $default	reduce using rule 170 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 68
    name	go to state 69



state 71

    argdecls  ->  '|' . slotdeflist '|'   (rule 168)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 169)

    NAME	shift, and go to state 6

    $default	reduce using rule 170 (slotdeflist0)

    slotdeflist0	go to state 135
    slotdeflist	go to state 136
    slotdef	go to state 68
    name	go to state 69



state 72

    block  ->  BEGINCLOSEDFUNC argdecls . funcvardecls funcbody '}'   (rule 159)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 137



state 73

    integer  ->  '-' INTEGER .   (rule 199)

    $default	reduce using rule 199 (integer)



state 74

    floatr  ->  '-' FLOAT .   (rule 201)

    $default	reduce using rule 201 (floatr)



state 75

    accidental  ->  '-' ACCIDENTAL .   (rule 203)

    $default	reduce using rule 203 (accidental)



state 76

    floatp  ->  '-' pie .   (rule 210)

    $default	reduce using rule 210 (floatp)



state 77

    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 180 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 78

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  '`' expr .   (rule 92)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)


    $default	reduce using rule 92 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 79

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 158)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 138



state 80

    keybinop  ->  KEYBINOP .   (rule 231)

    $default	reduce using rule 231 (keybinop)



state 81

    arrayelems1  ->  exprseq .   (rule 107)
    arrayelems1  ->  exprseq . ':' exprseq   (rule 108)

    ':' 	shift, and go to state 139

    $default	reduce using rule 107 (arrayelems1)



state 82

    expr1  ->  '[' arrayelems . ']'   (rule 62)

    ']' 	shift, and go to state 140



state 83

    arrayelems  ->  arrayelems1 . optcomma   (rule 106)
    arrayelems1  ->  arrayelems1 . ',' exprseq   (rule 110)
    arrayelems1  ->  arrayelems1 . ',' keybinop exprseq   (rule 111)
    arrayelems1  ->  arrayelems1 . ',' exprseq ':' exprseq   (rule 112)

    ',' 	shift, and go to state 141

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 142



state 84

    arrayelems1  ->  keybinop . exprseq   (rule 109)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 143
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 85

    valrange2  ->  DOTDOT . exprseq   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 144
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 86

    expr1  ->  '(' valrange2 . ')'   (rule 63)

    ')' 	shift, and go to state 145



state 87

    expr1  ->  '(' exprseq . ')'   (rule 60)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 85)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 86)
    dictslotdef  ->  exprseq . ':' exprseq   (rule 176)

    DOTDOT	shift, and go to state 146
    ':' 	shift, and go to state 147
    ',' 	shift, and go to state 148
    ')' 	shift, and go to state 149



state 88

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 150
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 89

    dictslotlist1  ->  dictslotdef .   (rule 178)

    $default	reduce using rule 178 (dictslotlist1)



state 90

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 179)
    dictslotlist  ->  dictslotlist1 .   (rule 181)

    ',' 	shift, and go to state 151

    $default	reduce using rule 181 (dictslotlist)



state 91

    expr1  ->  '(' dictslotlist . ')'   (rule 64)

    ')' 	shift, and go to state 152



state 92

    dictslotdef  ->  keybinop . exprseq   (rule 177)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 153
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 93

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110
    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 155
    binop	go to state 111
    keybinop	go to state 112



state 94

    expr1  ->  '~' name .   (rule 61)
    expr  ->  '~' name . '=' expr   (rule 96)

    '=' 	shift, and go to state 156

    $default	reduce using rule 61 (expr1)



state 95

    listlit  ->  '#' '[' . literallistc ']'   (rule 186)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 160
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 96

    expr  ->  '#' mavars . '=' expr   (rule 99)

    '=' 	shift, and go to state 172



state 97

    mavars  ->  mavarlist .   (rule 122)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 123)
    mavarlist  ->  mavarlist . ',' name   (rule 125)

    ELLIPSIS	shift, and go to state 173
    ',' 	shift, and go to state 174

    $default	reduce using rule 122 (mavars)



state 98

    mavarlist  ->  name .   (rule 124)

    $default	reduce using rule 124 (mavarlist)



state 99

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 187)

    '[' 	shift, and go to state 175



state 100

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 176
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 178
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 101

    binop  ->  BINOP .   (rule 222)

    $default	reduce using rule 222 (binop)



state 102

    binop  ->  '-' .   (rule 227)

    $default	reduce using rule 227 (binop)



state 103

    binop  ->  '<' .   (rule 225)

    $default	reduce using rule 225 (binop)



state 104

    binop  ->  '>' .   (rule 226)

    $default	reduce using rule 226 (binop)



state 105

    binop  ->  '*' .   (rule 228)

    $default	reduce using rule 228 (binop)



state 106

    binop  ->  '+' .   (rule 229)

    $default	reduce using rule 229 (binop)



state 107

    binop  ->  '|' .   (rule 230)

    $default	reduce using rule 230 (binop)



state 108

    binop  ->  READWRITEVAR .   (rule 223)

    $default	reduce using rule 223 (binop)



state 109

    binop  ->  DOUBLEEQUAL .   (rule 224)

    $default	reduce using rule 224 (binop)



state 110

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' . name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' . name blocklist   (rule 55)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 90)
    expr  ->  expr '.' . name '=' expr   (rule 97)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 179
    '(' 	shift, and go to state 180

    name	go to state 181



state 111

    expr  ->  expr binop . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 182
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 112

    expr  ->  expr keybinop . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 183
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 113

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 103)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 184
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 114

    exprseq  ->  exprn optsemi .   (rule 104)

    $default	reduce using rule 104 (exprseq)



state 115

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 116

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 117

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 163)

    $default	reduce using rule 163 (funcvardecls1)



state 118

    floatp  ->  integer pie .   (rule 208)

    $default	reduce using rule 208 (floatp)



state 119

    floatp  ->  floatr pie .   (rule 207)

    $default	reduce using rule 207 (floatp)



state 120

    expr  ->  name '=' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 185
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 121

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name '(' . arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 187
    arglistv1	go to state 188
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 122

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 189
    block	go to state 44



state 123

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 124

    expr1  ->  classname '[' . arrayelems ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 105 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 190
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 84



state 125

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 66)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname '(' . arglistv1 optkeyarglist ')'   (rule 68)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 191
    arglistv1	go to state 192
    keyarglist1	go to state 193
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 195



state 126

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 196



state 127

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 197



state 128

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 198
    name	go to state 199



state 129

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 200



state 130

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 164)

    $default	reduce using rule 164 (funcvardecl)



state 131

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 173)

    NAME	shift, and go to state 6

    slotdef	go to state 201
    name	go to state 69



state 132

    slotdef  ->  name '=' . slotliteral   (rule 175)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 202

    slotliteral	go to state 203
    listlit	go to state 204
    integer	go to state 205
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 206
    trueobj	go to state 207
    falseobj	go to state 208
    nilobj	go to state 209
    infobj	go to state 210
    ascii	go to state 211
    symbol	go to state 212
    string	go to state 213



state 133

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 167)

    ELLIPSIS	shift, and go to state 214



state 134

    argdecls  ->  ARG slotdeflist . ';'   (rule 166)
    slotdeflist0  ->  slotdeflist .   (rule 171)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    ';' 	shift, and go to state 215
    ',' 	shift, and go to state 131

    $default	reduce using rule 171 (slotdeflist0)



state 135

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 169)

    ELLIPSIS	shift, and go to state 216



state 136

    argdecls  ->  '|' slotdeflist . '|'   (rule 168)
    slotdeflist0  ->  slotdeflist .   (rule 171)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    '|' 	shift, and go to state 217
    ',' 	shift, and go to state 131

    $default	reduce using rule 171 (slotdeflist0)



state 137

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls . funcbody '}'   (rule 159)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 218
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 219
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 138

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 158)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 220
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 219
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 139

    arrayelems1  ->  exprseq ':' . exprseq   (rule 108)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 221
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 140

    expr1  ->  '[' arrayelems ']' .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 141

    optcomma  ->  ',' .   (rule 28)
    arrayelems1  ->  arrayelems1 ',' . exprseq   (rule 110)
    arrayelems1  ->  arrayelems1 ',' . keybinop exprseq   (rule 111)
    arrayelems1  ->  arrayelems1 ',' . exprseq ':' exprseq   (rule 112)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 222
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 223



state 142

    arrayelems  ->  arrayelems1 optcomma .   (rule 106)

    $default	reduce using rule 106 (arrayelems)



state 143

    arrayelems1  ->  keybinop exprseq .   (rule 109)

    $default	reduce using rule 109 (arrayelems1)



state 144

    valrange2  ->  DOTDOT exprseq .   (rule 84)

    $default	reduce using rule 84 (valrange2)



state 145

    expr1  ->  '(' valrange2 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 146

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 224
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 147

    dictslotdef  ->  exprseq ':' . exprseq   (rule 176)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 225
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 148

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 226
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 149

    expr1  ->  '(' exprseq ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 150

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 227



state 151

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 179)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 228
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 229
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 92



state 152

    expr1  ->  '(' dictslotlist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 153

    dictslotdef  ->  keybinop exprseq .   (rule 177)

    $default	reduce using rule 177 (dictslotdef)



state 154

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 155

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 156

    expr  ->  '~' name '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 230
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 157

    listlit2  ->  '[' . literallistc ']'   (rule 188)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 231
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 158

    literallist1  ->  listliteral .   (rule 192)

    $default	reduce using rule 192 (literallist1)



state 159

    listliteral  ->  listlit2 .   (rule 157)

    $default	reduce using rule 157 (listliteral)



state 160

    listlit  ->  '#' '[' literallistc . ']'   (rule 186)

    ']' 	shift, and go to state 232



state 161

    literallistc  ->  literallist1 . optcomma   (rule 191)
    literallist1  ->  literallist1 . ',' listliteral   (rule 193)

    ',' 	shift, and go to state 233

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 234



state 162

    listliteral  ->  integer .   (rule 148)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 20

    $default	reduce using rule 148 (listliteral)

    pie 	go to state 118



state 163

    listliteral  ->  floatp .   (rule 149)

    $default	reduce using rule 149 (listliteral)



state 164

    listlit2  ->  classname . '[' literallistc ']'   (rule 189)

    '[' 	shift, and go to state 235



state 165

    listliteral  ->  trueobj .   (rule 153)

    $default	reduce using rule 153 (listliteral)



state 166

    listliteral  ->  falseobj .   (rule 154)

    $default	reduce using rule 154 (listliteral)



state 167

    listliteral  ->  nilobj .   (rule 155)

    $default	reduce using rule 155 (listliteral)



state 168

    listliteral  ->  infobj .   (rule 156)

    $default	reduce using rule 156 (listliteral)



state 169

    listliteral  ->  ascii .   (rule 150)

    $default	reduce using rule 150 (listliteral)



state 170

    listliteral  ->  symbol .   (rule 152)

    $default	reduce using rule 152 (listliteral)



state 171

    listliteral  ->  string .   (rule 151)

    $default	reduce using rule 151 (listliteral)



state 172

    expr  ->  '#' mavars '=' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 236
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 173

    mavars  ->  mavarlist ELLIPSIS . name   (rule 123)

    NAME	shift, and go to state 6

    name	go to state 237



state 174

    mavarlist  ->  mavarlist ',' . name   (rule 125)

    NAME	shift, and go to state 6

    name	go to state 238



state 175

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 187)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 239
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 176

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 240
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 177

    arglist1  ->  exprseq .   (rule 113)

    $default	reduce using rule 113 (arglist1)



state 178

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 70)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 100)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)

    DOTDOT	shift, and go to state 241
    ']' 	shift, and go to state 242
    ',' 	shift, and go to state 243



state 179

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 90)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 244
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 245
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 180

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' '(' . arglistv1 optkeyarglist ')'   (rule 52)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 246
    arglistv1	go to state 247
    keyarglist1	go to state 248
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 195



state 181

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name . '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' name . blocklist   (rule 55)
    expr  ->  expr '.' name . '=' expr   (rule 97)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 249
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 250

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 252
    blockliteral	go to state 123
    block	go to state 44



state 182

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr binop expr .   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    '.' 	shift, and go to state 110

    $default	reduce using rule 93 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 183

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr keybinop expr .   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    '.' 	shift, and go to state 110

    $default	reduce using rule 94 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 184

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  exprn ';' expr .   (rule 103)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 103 (exprn)

    binop	go to state 111
    keybinop	go to state 112



state 185

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  name '=' expr .   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 95 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 186

    arglistv1  ->  '*' . exprseq   (rule 115)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 253
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 187

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 98)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 116)

    ',' 	shift, and go to state 254

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 255



state 188

    msgsend  ->  name '(' arglistv1 . optkeyarglist ')'   (rule 48)

    ',' 	shift, and go to state 256

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 257



state 189

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 190

    expr1  ->  classname '[' arrayelems . ']'   (rule 69)

    ']' 	shift, and go to state 258



state 191

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 67)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 116)

    ',' 	shift, and go to state 254

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 259



state 192

    expr1  ->  classname '(' arglistv1 . optkeyarglist ')'   (rule 68)

    ',' 	shift, and go to state 256

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 260



state 193

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 66)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 118)

    ',' 	shift, and go to state 261
    ')' 	shift, and go to state 262



state 194

    keyarglist1  ->  keyarg .   (rule 117)

    $default	reduce using rule 117 (keyarglist1)



state 195

    keyarg  ->  keybinop . exprseq   (rule 119)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 263
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 196

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 264
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 265

    methoddef	go to state 266
    name	go to state 267
    binop	go to state 268



state 197

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 198

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 269



state 199

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 200

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 270



state 201

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 173)

    $default	reduce using rule 173 (slotdeflist)



state 202

    listlit  ->  '#' . '[' literallistc ']'   (rule 186)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 187)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    classname	go to state 99



state 203

    slotdef  ->  name '=' slotliteral .   (rule 175)

    $default	reduce using rule 175 (slotdef)



state 204

    slotliteral  ->  listlit .   (rule 135)

    $default	reduce using rule 135 (slotliteral)



state 205

    slotliteral  ->  integer .   (rule 126)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 20

    $default	reduce using rule 126 (slotliteral)

    pie 	go to state 118



state 206

    slotliteral  ->  floatp .   (rule 127)

    $default	reduce using rule 127 (slotliteral)



state 207

    slotliteral  ->  trueobj .   (rule 131)

    $default	reduce using rule 131 (slotliteral)



state 208

    slotliteral  ->  falseobj .   (rule 132)

    $default	reduce using rule 132 (slotliteral)



state 209

    slotliteral  ->  nilobj .   (rule 133)

    $default	reduce using rule 133 (slotliteral)



state 210

    slotliteral  ->  infobj .   (rule 134)

    $default	reduce using rule 134 (slotliteral)



state 211

    slotliteral  ->  ascii .   (rule 128)

    $default	reduce using rule 128 (slotliteral)



state 212

    slotliteral  ->  symbol .   (rule 130)

    $default	reduce using rule 130 (slotliteral)



state 213

    slotliteral  ->  string .   (rule 129)

    $default	reduce using rule 129 (slotliteral)



state 214

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 167)

    NAME	shift, and go to state 6

    name	go to state 271



state 215

    argdecls  ->  ARG slotdeflist ';' .   (rule 166)

    $default	reduce using rule 166 (argdecls)



state 216

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 169)

    NAME	shift, and go to state 6

    name	go to state 272



state 217

    argdecls  ->  '|' slotdeflist '|' .   (rule 168)

    $default	reduce using rule 168 (argdecls)



state 218

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody . '}'   (rule 159)

    '}' 	shift, and go to state 273



state 219

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 161)

    $default	reduce using rule 161 (funcvardecls)



state 220

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 158)

    '}' 	shift, and go to state 274



state 221

    arrayelems1  ->  exprseq ':' exprseq .   (rule 108)

    $default	reduce using rule 108 (arrayelems1)



state 222

    arrayelems1  ->  arrayelems1 ',' exprseq .   (rule 110)
    arrayelems1  ->  arrayelems1 ',' exprseq . ':' exprseq   (rule 112)

    ':' 	shift, and go to state 275

    $default	reduce using rule 110 (arrayelems1)



state 223

    arrayelems1  ->  arrayelems1 ',' keybinop . exprseq   (rule 111)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 276
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 224

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 85)

    $default	reduce using rule 85 (valrange2)



state 225

    dictslotdef  ->  exprseq ':' exprseq .   (rule 176)

    $default	reduce using rule 176 (dictslotdef)



state 226

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 86)

    DOTDOT	shift, and go to state 277



state 227

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 228

    dictslotdef  ->  exprseq . ':' exprseq   (rule 176)

    ':' 	shift, and go to state 147



state 229

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 179)

    $default	reduce using rule 179 (dictslotlist1)



state 230

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  '~' name '=' expr .   (rule 96)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 96 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 231

    listlit2  ->  '[' literallistc . ']'   (rule 188)

    ']' 	shift, and go to state 278



state 232

    listlit  ->  '#' '[' literallistc ']' .   (rule 186)

    $default	reduce using rule 186 (listlit)



state 233

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 193)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 279
    listlit2	go to state 159
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 234

    literallistc  ->  literallist1 optcomma .   (rule 191)

    $default	reduce using rule 191 (literallistc)



state 235

    listlit2  ->  classname '[' . literallistc ']'   (rule 189)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 280
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171



state 236

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  '#' mavars '=' expr .   (rule 99)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 99 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 237

    mavars  ->  mavarlist ELLIPSIS name .   (rule 123)

    $default	reduce using rule 123 (mavars)



state 238

    mavarlist  ->  mavarlist ',' name .   (rule 125)

    $default	reduce using rule 125 (mavarlist)



state 239

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 187)

    ']' 	shift, and go to state 281



state 240

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 76)

    ']' 	shift, and go to state 282



state 241

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 283
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 284
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 242

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 70)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 100)

    '=' 	shift, and go to state 285

    $default	reduce using rule 70 (expr1)



state 243

    arglist1  ->  arglist1 ',' . exprseq   (rule 114)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 286
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 244

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 287
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 245

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 90)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 101)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)

    DOTDOT	shift, and go to state 288
    ']' 	shift, and go to state 289
    ',' 	shift, and go to state 243



state 246

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 116)

    ',' 	shift, and go to state 254

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 290



state 247

    msgsend  ->  expr '.' '(' arglistv1 . optkeyarglist ')'   (rule 52)

    ',' 	shift, and go to state 256

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 291



state 248

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 118)

    ',' 	shift, and go to state 261
    ')' 	shift, and go to state 292



state 249

    expr  ->  expr '.' name '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 293
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 250

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name '(' . arglistv1 optkeyarglist ')'   (rule 54)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 186
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 177
    arglist1	go to state 294
    arglistv1	go to state 295
    keyarglist1	go to state 296
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 195



state 251

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 189
    block	go to state 44



state 252

    msgsend  ->  expr '.' name blocklist .   (rule 55)

    $default	reduce using rule 55 (msgsend)



state 253

    arglistv1  ->  '*' exprseq .   (rule 115)

    $default	reduce using rule 115 (arglistv1)



state 254

    arglist1  ->  arglist1 ',' . exprseq   (rule 114)
    arglistv1  ->  arglist1 ',' . '*' exprseq   (rule 116)
    optkeyarglist  ->  ',' . keyarglist1   (rule 121)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 297
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 286
    keyarglist1	go to state 298
    keyarg	go to state 194
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62
    keybinop	go to state 195



state 255

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 98)

    ')' 	shift, and go to state 299



state 256

    optkeyarglist  ->  ',' . keyarglist1   (rule 121)

    KEYBINOP	shift, and go to state 80

    keyarglist1	go to state 298
    keyarg	go to state 194
    keybinop	go to state 195



state 257

    msgsend  ->  name '(' arglistv1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 300



state 258

    expr1  ->  classname '[' arrayelems ']' .   (rule 69)

    $default	reduce using rule 69 (expr1)



state 259

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 67)

    ')' 	shift, and go to state 301



state 260

    expr1  ->  classname '(' arglistv1 optkeyarglist . ')'   (rule 68)

    ')' 	shift, and go to state 302



state 261

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 118)

    KEYBINOP	shift, and go to state 80

    keyarg	go to state 303
    keybinop	go to state 195



state 262

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 66)

    $default	reduce using rule 66 (expr1)



state 263

    keyarg  ->  keybinop exprseq .   (rule 119)

    $default	reduce using rule 119 (keyarg)



state 264

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 228)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109

    $default	reduce using rule 228 (binop)

    name	go to state 304
    binop	go to state 305



state 265

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 266

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 267

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 306



state 268

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 307



state 269

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127

    $default	reduce using rule 13 (superclass)

    superclass	go to state 308



state 270

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 309
    CLASSVAR	shift, and go to state 310

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 311
    methods	go to state 312



state 271

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 167)

    ';' 	shift, and go to state 313



state 272

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 169)

    '|' 	shift, and go to state 314



state 273

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}' .   (rule 159)

    $default	reduce using rule 159 (block)



state 274

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 158)

    $default	reduce using rule 158 (block)



state 275

    arrayelems1  ->  arrayelems1 ',' exprseq ':' . exprseq   (rule 112)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 315
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 276

    arrayelems1  ->  arrayelems1 ',' keybinop exprseq .   (rule 111)

    $default	reduce using rule 111 (arrayelems1)



state 277

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 316
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 278

    listlit2  ->  '[' literallistc ']' .   (rule 188)

    $default	reduce using rule 188 (listlit2)



state 279

    literallist1  ->  literallist1 ',' listliteral .   (rule 193)

    $default	reduce using rule 193 (literallist1)



state 280

    listlit2  ->  classname '[' literallistc . ']'   (rule 189)

    ']' 	shift, and go to state 317



state 281

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 187)

    $default	reduce using rule 187 (listlit)



state 282

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 76)

    '=' 	shift, and go to state 318

    $default	reduce using rule 73 (valrangex1)



state 283

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 72)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 75)

    '=' 	shift, and go to state 319

    $default	reduce using rule 72 (valrangex1)



state 284

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 77)

    ']' 	shift, and go to state 320



state 285

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 321
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 286

    arglist1  ->  arglist1 ',' exprseq .   (rule 114)

    $default	reduce using rule 114 (arglist1)



state 287

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 82)

    ']' 	shift, and go to state 322



state 288

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 323
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 324
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 289

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 90)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 101)

    '=' 	shift, and go to state 325

    $default	reduce using rule 90 (expr)



state 290

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 326



state 291

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist . ')'   (rule 52)

    ')' 	shift, and go to state 327



state 292

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 49)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 328
    blockliteral	go to state 123
    block	go to state 44



state 293

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr '.' name '=' expr .   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 97 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 294

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 53)
    arglist1  ->  arglist1 . ',' exprseq   (rule 114)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 116)

    ',' 	shift, and go to state 254

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 329



state 295

    msgsend  ->  expr '.' name '(' arglistv1 . optkeyarglist ')'   (rule 54)

    ',' 	shift, and go to state 256

    $default	reduce using rule 120 (optkeyarglist)

    optkeyarglist	go to state 330



state 296

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 50)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 118)

    ',' 	shift, and go to state 261
    ')' 	shift, and go to state 331



state 297

    arglistv1  ->  arglist1 ',' '*' . exprseq   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 332
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 298

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 118)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 121)

    ',' 	shift, and go to state 261

    $default	reduce using rule 121 (optkeyarglist)



state 299

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 98)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 333
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 334
    blockliteral	go to state 123
    block	go to state 44



state 300

    msgsend  ->  name '(' arglistv1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 301

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 302

    expr1  ->  classname '(' arglistv1 optkeyarglist ')' .   (rule 68)

    $default	reduce using rule 68 (expr1)



state 303

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 118)

    $default	reduce using rule 118 (keyarglist1)



state 304

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 335



state 305

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 336



state 306

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 337



state 307

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 338



state 308

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 339



state 309

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 340
    '>' 	shift, and go to state 341
    READWRITEVAR	shift, and go to state 342

    $default	reduce using rule 194 (rwspec)

    rwslotdeflist	go to state 343
    rwslotdef	go to state 344
    rwspec	go to state 345



state 310

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 340
    '>' 	shift, and go to state 341
    READWRITEVAR	shift, and go to state 342

    $default	reduce using rule 194 (rwspec)

    rwslotdeflist	go to state 346
    rwslotdef	go to state 344
    rwspec	go to state 345



state 311

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 312

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 264
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 347

    methoddef	go to state 266
    name	go to state 267
    binop	go to state 268



state 313

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 167)

    $default	reduce using rule 167 (argdecls)



state 314

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 169)

    $default	reduce using rule 169 (argdecls)



state 315

    arrayelems1  ->  arrayelems1 ',' exprseq ':' exprseq .   (rule 112)

    $default	reduce using rule 112 (arrayelems1)



state 316

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 86)

    $default	reduce using rule 86 (valrange2)



state 317

    listlit2  ->  classname '[' literallistc ']' .   (rule 189)

    $default	reduce using rule 189 (listlit2)



state 318

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 348
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 319

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 349
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 320

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 350

    $default	reduce using rule 74 (valrangex1)



state 321

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 100)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 100 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 322

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 82)

    '=' 	shift, and go to state 351

    $default	reduce using rule 79 (valrangexd)



state 323

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 81)

    '=' 	shift, and go to state 352

    $default	reduce using rule 78 (valrangexd)



state 324

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 83)

    ']' 	shift, and go to state 353



state 325

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 354
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 326

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 355
    blockliteral	go to state 123
    block	go to state 44



state 327

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist ')' .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 328

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 329

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 53)

    ')' 	shift, and go to state 356



state 330

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist . ')'   (rule 54)

    ')' 	shift, and go to state 357



state 331

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 50)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 358
    blockliteral	go to state 123
    block	go to state 44



state 332

    arglistv1  ->  arglist1 ',' '*' exprseq .   (rule 116)

    $default	reduce using rule 116 (arglistv1)



state 333

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 359
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 334

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 335

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 360



state 336

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 361



state 337

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 362



state 338

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 363



state 339

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 364



state 340

    rwspec  ->  '<' .   (rule 195)

    $default	reduce using rule 195 (rwspec)



state 341

    rwspec  ->  '>' .   (rule 197)

    $default	reduce using rule 197 (rwspec)



state 342

    rwspec  ->  READWRITEVAR .   (rule 196)

    $default	reduce using rule 196 (rwspec)



state 343

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 183)

    ';' 	shift, and go to state 365
    ',' 	shift, and go to state 366



state 344

    rwslotdeflist  ->  rwslotdef .   (rule 182)

    $default	reduce using rule 182 (rwslotdeflist)



state 345

    rwslotdef  ->  rwspec . name   (rule 184)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 185)

    NAME	shift, and go to state 6

    name	go to state 367



state 346

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 183)

    ';' 	shift, and go to state 368
    ',' 	shift, and go to state 366



state 347

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 348

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 76 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 349

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 75 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 350

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 369
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 351

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 370
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 352

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 371
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 353

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 83)

    '=' 	shift, and go to state 372

    $default	reduce using rule 80 (valrangexd)



state 354

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 101 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 355

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 356

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 53)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 251
    blocklist	go to state 373
    blockliteral	go to state 123
    block	go to state 44



state 357

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist ')' .   (rule 54)

    $default	reduce using rule 54 (msgsend)



state 358

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 359

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 98 (expr)

    binop	go to state 111
    keybinop	go to state 112



state 360

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 374



state 361

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 375



state 362

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 376
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 377
    funcvardecl	go to state 219
    primname	go to state 378



state 363

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 376
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 379
    funcvardecl	go to state 219
    primname	go to state 378



state 364

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 309
    CLASSVAR	shift, and go to state 310

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 311
    methods	go to state 380



state 365

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 366

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 183)

    '<' 	shift, and go to state 340
    '>' 	shift, and go to state 341
    READWRITEVAR	shift, and go to state 342

    $default	reduce using rule 194 (rwspec)

    rwslotdef	go to state 381
    rwspec	go to state 345



state 367

    rwslotdef  ->  rwspec name .   (rule 184)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 185)

    '=' 	shift, and go to state 382

    $default	reduce using rule 184 (rwslotdef)



state 368

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 369

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 77 (valrangeassign)

    binop	go to state 111
    keybinop	go to state 112



state 370

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 82 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 371

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 81 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 372

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 383
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 373

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 53)

    $default	reduce using rule 53 (msgsend)



state 374

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 376
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 384
    funcvardecl	go to state 219
    primname	go to state 378



state 375

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 376
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 385
    funcvardecl	go to state 219
    primname	go to state 378



state 376

    primname  ->  PRIMITIVENAME .   (rule 213)

    $default	reduce using rule 213 (primname)



state 377

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 386
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 387
    retval	go to state 388
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 389
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 378

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 390



state 379

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 386
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 391
    retval	go to state 388
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 389
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 380

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 264
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '}' 	shift, and go to state 392

    methoddef	go to state 266
    name	go to state 267
    binop	go to state 268



state 381

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 183)

    $default	reduce using rule 183 (rwslotdeflist)



state 382

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 185)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 202

    slotliteral	go to state 393
    listlit	go to state 204
    integer	go to state 205
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 206
    trueobj	go to state 207
    falseobj	go to state 208
    nilobj	go to state 209
    infobj	go to state 210
    ascii	go to state 211
    symbol	go to state 212
    string	go to state 213



state 383

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110

    $default	reduce using rule 83 (valrangexd)

    binop	go to state 111
    keybinop	go to state 112



state 384

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 386
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 394
    retval	go to state 388
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 389
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 385

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 386
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 395
    retval	go to state 388
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 389
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 386

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 396
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    infobj	go to state 58
    ascii	go to state 59
    symbol	go to state 60
    string	go to state 61
    pseudovar	go to state 62



state 387

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 397



state 388

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 389

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 386

    $default	reduce using rule 38 (retval)

    retval	go to state 398



state 390

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 391

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 399



state 392

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 393

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 185)

    $default	reduce using rule 185 (rwslotdef)



state 394

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 400



state 395

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 401



state 396

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop expr   (rule 93)
    expr  ->  expr . keybinop expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    DOUBLEEQUAL	shift, and go to state 109
    '.' 	shift, and go to state 110
    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 402
    binop	go to state 111
    keybinop	go to state 112



state 397

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 398

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 399

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 400

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 401

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 402

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 403

    $   	go to state 404



state 404

    $   	go to state 405



state 405

    $default	accept
