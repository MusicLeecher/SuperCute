

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 74 between rule 88 and token BINOP resolved as reduce.
Conflict in state 74 between rule 88 and token KEYBINOP resolved as reduce.
Conflict in state 74 between rule 88 and token '-' resolved as reduce.
Conflict in state 74 between rule 88 and token '<' resolved as reduce.
Conflict in state 74 between rule 88 and token '>' resolved as reduce.
Conflict in state 74 between rule 88 and token '*' resolved as reduce.
Conflict in state 74 between rule 88 and token '+' resolved as reduce.
Conflict in state 74 between rule 88 and token '|' resolved as reduce.
Conflict in state 74 between rule 88 and token READWRITEVAR resolved as reduce.
Conflict in state 74 between rule 88 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 74 between rule 88 and token '.' resolved as reduce.
Conflict in state 179 between rule 89 and token BINOP resolved as reduce.
Conflict in state 179 between rule 89 and token KEYBINOP resolved as reduce.
Conflict in state 179 between rule 89 and token '-' resolved as reduce.
Conflict in state 179 between rule 89 and token '<' resolved as reduce.
Conflict in state 179 between rule 89 and token '>' resolved as reduce.
Conflict in state 179 between rule 89 and token '*' resolved as reduce.
Conflict in state 179 between rule 89 and token '+' resolved as reduce.
Conflict in state 179 between rule 89 and token '|' resolved as reduce.
Conflict in state 179 between rule 89 and token READWRITEVAR resolved as reduce.
Conflict in state 179 between rule 89 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 179 between rule 89 and token '.' resolved as shift.
Conflict in state 180 between rule 90 and token BINOP resolved as reduce.
Conflict in state 180 between rule 90 and token KEYBINOP resolved as reduce.
Conflict in state 180 between rule 90 and token '-' resolved as reduce.
Conflict in state 180 between rule 90 and token '<' resolved as reduce.
Conflict in state 180 between rule 90 and token '>' resolved as reduce.
Conflict in state 180 between rule 90 and token '*' resolved as reduce.
Conflict in state 180 between rule 90 and token '+' resolved as reduce.
Conflict in state 180 between rule 90 and token '|' resolved as reduce.
Conflict in state 180 between rule 90 and token READWRITEVAR resolved as reduce.
Conflict in state 180 between rule 90 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 180 between rule 90 and token '.' resolved as shift.
Conflict in state 182 between rule 91 and token BINOP resolved as shift.
Conflict in state 182 between rule 91 and token KEYBINOP resolved as shift.
Conflict in state 182 between rule 91 and token '-' resolved as shift.
Conflict in state 182 between rule 91 and token '<' resolved as shift.
Conflict in state 182 between rule 91 and token '>' resolved as shift.
Conflict in state 182 between rule 91 and token '*' resolved as shift.
Conflict in state 182 between rule 91 and token '+' resolved as shift.
Conflict in state 182 between rule 91 and token '|' resolved as shift.
Conflict in state 182 between rule 91 and token READWRITEVAR resolved as shift.
Conflict in state 182 between rule 91 and token DOUBLEEQUAL resolved as shift.
Conflict in state 182 between rule 91 and token '.' resolved as shift.
Conflict in state 221 between rule 92 and token BINOP resolved as shift.
Conflict in state 221 between rule 92 and token KEYBINOP resolved as shift.
Conflict in state 221 between rule 92 and token '-' resolved as shift.
Conflict in state 221 between rule 92 and token '<' resolved as shift.
Conflict in state 221 between rule 92 and token '>' resolved as shift.
Conflict in state 221 between rule 92 and token '*' resolved as shift.
Conflict in state 221 between rule 92 and token '+' resolved as shift.
Conflict in state 221 between rule 92 and token '|' resolved as shift.
Conflict in state 221 between rule 92 and token READWRITEVAR resolved as shift.
Conflict in state 221 between rule 92 and token DOUBLEEQUAL resolved as shift.
Conflict in state 221 between rule 92 and token '.' resolved as shift.
Conflict in state 228 between rule 95 and token BINOP resolved as shift.
Conflict in state 228 between rule 95 and token KEYBINOP resolved as shift.
Conflict in state 228 between rule 95 and token '-' resolved as shift.
Conflict in state 228 between rule 95 and token '<' resolved as shift.
Conflict in state 228 between rule 95 and token '>' resolved as shift.
Conflict in state 228 between rule 95 and token '*' resolved as shift.
Conflict in state 228 between rule 95 and token '+' resolved as shift.
Conflict in state 228 between rule 95 and token '|' resolved as shift.
Conflict in state 228 between rule 95 and token READWRITEVAR resolved as shift.
Conflict in state 228 between rule 95 and token DOUBLEEQUAL resolved as shift.
Conflict in state 228 between rule 95 and token '.' resolved as shift.
Conflict in state 276 between rule 93 and token BINOP resolved as shift.
Conflict in state 276 between rule 93 and token KEYBINOP resolved as shift.
Conflict in state 276 between rule 93 and token '-' resolved as shift.
Conflict in state 276 between rule 93 and token '<' resolved as shift.
Conflict in state 276 between rule 93 and token '>' resolved as shift.
Conflict in state 276 between rule 93 and token '*' resolved as shift.
Conflict in state 276 between rule 93 and token '+' resolved as shift.
Conflict in state 276 between rule 93 and token '|' resolved as shift.
Conflict in state 276 between rule 93 and token READWRITEVAR resolved as shift.
Conflict in state 276 between rule 93 and token DOUBLEEQUAL resolved as shift.
Conflict in state 276 between rule 93 and token '.' resolved as shift.
Conflict in state 300 between rule 96 and token BINOP resolved as shift.
Conflict in state 300 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 300 between rule 96 and token '-' resolved as shift.
Conflict in state 300 between rule 96 and token '<' resolved as shift.
Conflict in state 300 between rule 96 and token '>' resolved as shift.
Conflict in state 300 between rule 96 and token '*' resolved as shift.
Conflict in state 300 between rule 96 and token '+' resolved as shift.
Conflict in state 300 between rule 96 and token '|' resolved as shift.
Conflict in state 300 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 300 between rule 96 and token DOUBLEEQUAL resolved as shift.
Conflict in state 300 between rule 96 and token '.' resolved as shift.
Conflict in state 324 between rule 72 and token BINOP resolved as shift.
Conflict in state 324 between rule 72 and token KEYBINOP resolved as shift.
Conflict in state 324 between rule 72 and token '-' resolved as shift.
Conflict in state 324 between rule 72 and token '<' resolved as shift.
Conflict in state 324 between rule 72 and token '>' resolved as shift.
Conflict in state 324 between rule 72 and token '*' resolved as shift.
Conflict in state 324 between rule 72 and token '+' resolved as shift.
Conflict in state 324 between rule 72 and token '|' resolved as shift.
Conflict in state 324 between rule 72 and token READWRITEVAR resolved as shift.
Conflict in state 324 between rule 72 and token DOUBLEEQUAL resolved as shift.
Conflict in state 324 between rule 72 and token '.' resolved as shift.
Conflict in state 325 between rule 71 and token BINOP resolved as shift.
Conflict in state 325 between rule 71 and token KEYBINOP resolved as shift.
Conflict in state 325 between rule 71 and token '-' resolved as shift.
Conflict in state 325 between rule 71 and token '<' resolved as shift.
Conflict in state 325 between rule 71 and token '>' resolved as shift.
Conflict in state 325 between rule 71 and token '*' resolved as shift.
Conflict in state 325 between rule 71 and token '+' resolved as shift.
Conflict in state 325 between rule 71 and token '|' resolved as shift.
Conflict in state 325 between rule 71 and token READWRITEVAR resolved as shift.
Conflict in state 325 between rule 71 and token DOUBLEEQUAL resolved as shift.
Conflict in state 325 between rule 71 and token '.' resolved as shift.
Conflict in state 330 between rule 97 and token BINOP resolved as shift.
Conflict in state 330 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 330 between rule 97 and token '-' resolved as shift.
Conflict in state 330 between rule 97 and token '<' resolved as shift.
Conflict in state 330 between rule 97 and token '>' resolved as shift.
Conflict in state 330 between rule 97 and token '*' resolved as shift.
Conflict in state 330 between rule 97 and token '+' resolved as shift.
Conflict in state 330 between rule 97 and token '|' resolved as shift.
Conflict in state 330 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 330 between rule 97 and token DOUBLEEQUAL resolved as shift.
Conflict in state 330 between rule 97 and token '.' resolved as shift.
Conflict in state 334 between rule 94 and token BINOP resolved as shift.
Conflict in state 334 between rule 94 and token KEYBINOP resolved as shift.
Conflict in state 334 between rule 94 and token '-' resolved as shift.
Conflict in state 334 between rule 94 and token '<' resolved as shift.
Conflict in state 334 between rule 94 and token '>' resolved as shift.
Conflict in state 334 between rule 94 and token '*' resolved as shift.
Conflict in state 334 between rule 94 and token '+' resolved as shift.
Conflict in state 334 between rule 94 and token '|' resolved as shift.
Conflict in state 334 between rule 94 and token READWRITEVAR resolved as shift.
Conflict in state 334 between rule 94 and token DOUBLEEQUAL resolved as shift.
Conflict in state 334 between rule 94 and token '.' resolved as shift.
Conflict in state 344 between rule 73 and token BINOP resolved as shift.
Conflict in state 344 between rule 73 and token KEYBINOP resolved as shift.
Conflict in state 344 between rule 73 and token '-' resolved as shift.
Conflict in state 344 between rule 73 and token '<' resolved as shift.
Conflict in state 344 between rule 73 and token '>' resolved as shift.
Conflict in state 344 between rule 73 and token '*' resolved as shift.
Conflict in state 344 between rule 73 and token '+' resolved as shift.
Conflict in state 344 between rule 73 and token '|' resolved as shift.
Conflict in state 344 between rule 73 and token READWRITEVAR resolved as shift.
Conflict in state 344 between rule 73 and token DOUBLEEQUAL resolved as shift.
Conflict in state 344 between rule 73 and token '.' resolved as shift.
Conflict in state 345 between rule 78 and token BINOP resolved as shift.
Conflict in state 345 between rule 78 and token KEYBINOP resolved as shift.
Conflict in state 345 between rule 78 and token '-' resolved as shift.
Conflict in state 345 between rule 78 and token '<' resolved as shift.
Conflict in state 345 between rule 78 and token '>' resolved as shift.
Conflict in state 345 between rule 78 and token '*' resolved as shift.
Conflict in state 345 between rule 78 and token '+' resolved as shift.
Conflict in state 345 between rule 78 and token '|' resolved as shift.
Conflict in state 345 between rule 78 and token READWRITEVAR resolved as shift.
Conflict in state 345 between rule 78 and token DOUBLEEQUAL resolved as shift.
Conflict in state 345 between rule 78 and token '.' resolved as shift.
Conflict in state 346 between rule 77 and token BINOP resolved as shift.
Conflict in state 346 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 346 between rule 77 and token '-' resolved as shift.
Conflict in state 346 between rule 77 and token '<' resolved as shift.
Conflict in state 346 between rule 77 and token '>' resolved as shift.
Conflict in state 346 between rule 77 and token '*' resolved as shift.
Conflict in state 346 between rule 77 and token '+' resolved as shift.
Conflict in state 346 between rule 77 and token '|' resolved as shift.
Conflict in state 346 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 346 between rule 77 and token DOUBLEEQUAL resolved as shift.
Conflict in state 346 between rule 77 and token '.' resolved as shift.
Conflict in state 358 between rule 79 and token BINOP resolved as shift.
Conflict in state 358 between rule 79 and token KEYBINOP resolved as shift.
Conflict in state 358 between rule 79 and token '-' resolved as shift.
Conflict in state 358 between rule 79 and token '<' resolved as shift.
Conflict in state 358 between rule 79 and token '>' resolved as shift.
Conflict in state 358 between rule 79 and token '*' resolved as shift.
Conflict in state 358 between rule 79 and token '+' resolved as shift.
Conflict in state 358 between rule 79 and token '|' resolved as shift.
Conflict in state 358 between rule 79 and token READWRITEVAR resolved as shift.
Conflict in state 358 between rule 79 and token DOUBLEEQUAL resolved as shift.
Conflict in state 358 between rule 79 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 49   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 51   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' name blocklist
rule 53   expr1 -> pushliteral
rule 54   expr1 -> blockliteral
rule 55   expr1 -> pushname
rule 56   expr1 -> msgsend
rule 57   expr1 -> '(' exprseq ')'
rule 58   expr1 -> '~' name
rule 59   expr1 -> '[' arglistc ']'
rule 60   expr1 -> '(' valrange2 ')'
rule 61   expr1 -> '(' dictslotlist ')'
rule 62   expr1 -> pseudovar
rule 63   expr1 -> classname '(' keyarglist1 ')'
rule 64   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 65   expr1 -> classname '[' arglistc ']'
rule 66   expr1 -> expr1 '[' arglist1 ']'
rule 67   expr1 -> valrangex1
rule 68   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 69   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 70   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 71   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 72   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 73   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 74   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 75   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 76   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 77   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 78   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 79   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 80   valrange2 -> DOTDOT exprseq
rule 81   valrange2 -> exprseq DOTDOT exprseq
rule 82   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 83   expr -> expr1
rule 84   expr -> valrangexd
rule 85   expr -> valrangeassign
rule 86   expr -> expr '.' '[' arglist1 ']'
rule 87   expr -> classname
rule 88   expr -> '`' expr
rule 89   expr -> expr binop expr
rule 90   expr -> expr keybinop expr
rule 91   expr -> name '=' expr
rule 92   expr -> '~' name '=' expr
rule 93   expr -> expr '.' name '=' expr
rule 94   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 95   expr -> '#' mavars '=' expr
rule 96   expr -> expr1 '[' arglist1 ']' '=' expr
rule 97   expr -> expr '.' '[' arglist1 ']' '=' expr
rule 98   exprn -> expr
rule 99   exprn -> exprn ';' expr
rule 100  exprseq -> exprn optsemi
rule 101  arglistc ->		/* empty */
rule 102  arglistc -> arglist1 optcomma
rule 103  arglist1 -> exprseq
rule 104  arglist1 -> arglist1 ',' exprseq
rule 105  keyarglist1 -> keyarg
rule 106  keyarglist1 -> keyarglist1 ',' keyarg
rule 107  keyarg -> keybinop exprseq
rule 108  optkeyarglist ->		/* empty */
rule 109  optkeyarglist -> ',' keyarglist1
rule 110  mavars -> mavarlist
rule 111  mavars -> mavarlist ELLIPSIS name
rule 112  mavarlist -> name
rule 113  mavarlist -> mavarlist ',' name
rule 114  slotliteral -> integer
rule 115  slotliteral -> floatp
rule 116  slotliteral -> ascii
rule 117  slotliteral -> string
rule 118  slotliteral -> symbol
rule 119  slotliteral -> trueobj
rule 120  slotliteral -> falseobj
rule 121  slotliteral -> nilobj
rule 122  slotliteral -> infobj
rule 123  slotliteral -> listlit
rule 124  blockliteral -> block
rule 125  pushname -> name
rule 126  pushliteral -> integer
rule 127  pushliteral -> floatp
rule 128  pushliteral -> ascii
rule 129  pushliteral -> string
rule 130  pushliteral -> symbol
rule 131  pushliteral -> trueobj
rule 132  pushliteral -> falseobj
rule 133  pushliteral -> nilobj
rule 134  pushliteral -> infobj
rule 135  pushliteral -> listlit
rule 136  listliteral -> integer
rule 137  listliteral -> floatp
rule 138  listliteral -> ascii
rule 139  listliteral -> string
rule 140  listliteral -> symbol
rule 141  listliteral -> trueobj
rule 142  listliteral -> falseobj
rule 143  listliteral -> nilobj
rule 144  listliteral -> infobj
rule 145  listliteral -> listlit2
rule 146  block -> '{' argdecls funcvardecls funcbody '}'
rule 147  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 148  funcvardecls ->		/* empty */
rule 149  funcvardecls -> funcvardecls funcvardecl
rule 150  funcvardecls1 -> funcvardecl
rule 151  funcvardecls1 -> funcvardecls1 funcvardecl
rule 152  funcvardecl -> VAR slotdeflist ';'
rule 153  argdecls ->		/* empty */
rule 154  argdecls -> ARG slotdeflist ';'
rule 155  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 156  argdecls -> '|' slotdeflist '|'
rule 157  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 158  slotdeflist0 ->		/* empty */
rule 159  slotdeflist0 -> slotdeflist
rule 160  slotdeflist -> slotdef
rule 161  slotdeflist -> slotdeflist ',' slotdef
rule 162  slotdef -> name
rule 163  slotdef -> name '=' slotliteral
rule 164  dictslotdef -> expr ':' expr
rule 165  dictslotdef -> keybinop expr
rule 166  dictslotlist1 -> dictslotdef
rule 167  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 168  dictslotlist ->		/* empty */
rule 169  dictslotlist -> dictslotlist1
rule 170  rwslotdeflist -> rwslotdef
rule 171  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 172  rwslotdef -> rwspec name
rule 173  rwslotdef -> rwspec name '=' slotliteral
rule 174  listlit -> '#' '[' literallistc ']'
rule 175  listlit -> '#' classname '[' literallistc ']'
rule 176  listlit2 -> '[' literallistc ']'
rule 177  listlit2 -> classname '[' literallistc ']'
rule 178  literallistc ->		/* empty */
rule 179  literallistc -> literallist1 optcomma
rule 180  literallist1 -> listliteral
rule 181  literallist1 -> literallist1 ',' listliteral
rule 182  rwspec ->		/* empty */
rule 183  rwspec -> '<'
rule 184  rwspec -> READWRITEVAR
rule 185  rwspec -> '>'
rule 186  integer -> INTEGER
rule 187  integer -> '-' INTEGER
rule 188  floatr -> FLOAT
rule 189  floatr -> '-' FLOAT
rule 190  accidental -> ACCIDENTAL
rule 191  accidental -> '-' ACCIDENTAL
rule 192  pie -> PIE
rule 193  floatp -> floatr
rule 194  floatp -> accidental
rule 195  floatp -> floatr pie
rule 196  floatp -> integer pie
rule 197  floatp -> pie
rule 198  floatp -> '-' pie
rule 199  name -> NAME
rule 200  classname -> CLASSNAME
rule 201  primname -> PRIMITIVENAME
rule 202  trueobj -> TRUEOBJ
rule 203  falseobj -> FALSEOBJ
rule 204  nilobj -> NILOBJ
rule 205  infobj -> INFINITUMOBJ
rule 206  ascii -> ASCII
rule 207  symbol -> SYMBOL
rule 208  string -> STRING
rule 209  pseudovar -> PSEUDOVAR
rule 210  binop -> BINOP
rule 211  binop -> READWRITEVAR
rule 212  binop -> DOUBLEEQUAL
rule 213  binop -> '<'
rule 214  binop -> '>'
rule 215  binop -> '-'
rule 216  binop -> '*'
rule 217  binop -> '+'
rule 218  binop -> '|'
rule 219  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 95 147 174 175
'(' (40) 31 47 48 49 50 51 57 60 61 63 64 94
')' (41) 31 47 48 49 50 51 57 60 61 63 64 94
'*' (42) 22 24 216
'+' (43) 10 217
',' (44) 28 82 104 106 109 113 161 167 171 181
'-' (45) 187 189 191 198 215
'.' (46) 48 49 50 51 52 74 75 76 77 78 79 86 93 97
':' (58) 14 164
';' (59) 17 18 26 99 152 154 155
'<' (60) 183 213
'=' (61) 71 72 73 77 78 79 91 92 93 94 95 96 97 163 173
'>' (62) 185 214
'[' (91) 9 59 65 66 68 69 70 71 72 73 74 75 76 77 78 79 86 96 97 174
    175 176 177
']' (93) 9 59 65 66 68 69 70 71 72 73 74 75 76 77 78 79 86 96 97 174
    175 176 177
'^' (94) 39 41
'`' (96) 88
'{' (123) 8 9 10 21 22 23 24 146 147
'|' (124) 156 157 218
'}' (125) 8 9 10 21 22 23 24 146 147
'~' (126) 58 92
error (256)
NAME (257) 199
INTEGER (258) 186 187
FLOAT (259) 188 189
ACCIDENTAL (260) 190 191
SYMBOL (261) 207
STRING (262) 208
ASCII (263) 206
PRIMITIVENAME (264) 201
CLASSNAME (265) 200
VAR (266) 18 152
ARG (267) 154 155
CLASSVAR (268) 17
CONST (269)
NILOBJ (270) 204
TRUEOBJ (271) 202
FALSEOBJ (272) 203
INFINITUMOBJ (273) 205
PSEUDOVAR (274) 209
ELLIPSIS (275) 111 155 157
DOTDOT (276) 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
PIE (277) 192
BADTOKEN (278)
INTERPRET (279) 3
BINOP (280) 210
KEYBINOP (281) 219
READWRITEVAR (282) 184 211
DOUBLEEQUAL (283) 212
UMINUS (284)

Nonterminals, with rules where they appear

root (52)
    on left: 1 2 3
classes (53)
    on left: 4 5, on right: 1 5
classextensions (54)
    on left: 6 7, on right: 2 7
classdef (55)
    on left: 8 9, on right: 5
classextension (56)
    on left: 10, on right: 6 7
optname (57)
    on left: 11 12, on right: 9
superclass (58)
    on left: 13 14, on right: 8 9
classvardecls (59)
    on left: 15 16, on right: 8 9 16
classvardecl (60)
    on left: 17 18, on right: 16
methods (61)
    on left: 19 20, on right: 8 9 10 20
methoddef (62)
    on left: 21 22 23 24, on right: 20
optsemi (63)
    on left: 25 26, on right: 37 39 41 100
optcomma (64)
    on left: 27 28, on right: 102 179
funcbody (65)
    on left: 29 30, on right: 31 32 33 146 147
cmdlinecode (66)
    on left: 31 32 33, on right: 3
methbody (67)
    on left: 34 35, on right: 21 22 23 24
primitive (68)
    on left: 36 37, on right: 21 22 23 24
retval (69)
    on left: 38 39, on right: 34 35
funretval (70)
    on left: 40 41, on right: 29 30
blocklist1 (71)
    on left: 42 43, on right: 43 45 46
blocklist (72)
    on left: 44 45, on right: 47 48 49 50 51 52
msgsend (73)
    on left: 46 47 48 49 50 51 52, on right: 56
expr1 (74)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 66 68 69 70 71 72 73 83 96
valrangex1 (75)
    on left: 68 69 70, on right: 67
valrangeassign (76)
    on left: 71 72 73, on right: 85
valrangexd (77)
    on left: 74 75 76 77 78 79, on right: 84
valrange2 (78)
    on left: 80 81 82, on right: 60
expr (79)
    on left: 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97,
    on right: 39 41 48 49 50 51 52 71 72 73 74 75 76 77 78 79 86 88
    89 90 91 92 93 94 95 96 97 98 99 164 165
exprn (80)
    on left: 98 99, on right: 99 100
exprseq (81)
    on left: 100, on right: 30 35 57 69 70 72 73 75 76 78 79 80 81
    82 103 104 107
arglistc (82)
    on left: 101 102, on right: 59 65
arglist1 (83)
    on left: 103 104, on right: 47 50 51 64 66 68 70 71 73 74 76 77
    79 86 94 96 97 102 104
keyarglist1 (84)
    on left: 105 106, on right: 48 49 63 106 109
keyarg (85)
    on left: 107, on right: 105 106
optkeyarglist (86)
    on left: 108 109, on right: 47 50 51 64 94
mavars (87)
    on left: 110 111, on right: 95
mavarlist (88)
    on left: 112 113, on right: 110 111 113
slotliteral (89)
    on left: 114 115 116 117 118 119 120 121 122 123,
    on right: 163 173
blockliteral (90)
    on left: 124, on right: 42 43 54
pushname (91)
    on left: 125, on right: 55
pushliteral (92)
    on left: 126 127 128 129 130 131 132 133 134 135,
    on right: 53
listliteral (93)
    on left: 136 137 138 139 140 141 142 143 144 145,
    on right: 180 181
block (94)
    on left: 146 147, on right: 124
funcvardecls (95)
    on left: 148 149, on right: 21 22 23 24 146 147 149
funcvardecls1 (96)
    on left: 150 151, on right: 31 32 151
funcvardecl (97)
    on left: 152, on right: 149 150 151
argdecls (98)
    on left: 153 154 155 156 157, on right: 21 22 23 24 146 147
slotdeflist0 (99)
    on left: 158 159, on right: 155 157
slotdeflist (100)
    on left: 160 161, on right: 152 154 156 159 161
slotdef (101)
    on left: 162 163, on right: 160 161
dictslotdef (102)
    on left: 164 165, on right: 166 167
dictslotlist1 (103)
    on left: 166 167, on right: 167 169
dictslotlist (104)
    on left: 168 169, on right: 61
rwslotdeflist (105)
    on left: 170 171, on right: 17 18 171
rwslotdef (106)
    on left: 172 173, on right: 170 171
listlit (107)
    on left: 174 175, on right: 123 135
listlit2 (108)
    on left: 176 177, on right: 145
literallistc (109)
    on left: 178 179, on right: 174 175 176 177
literallist1 (110)
    on left: 180 181, on right: 179 181
rwspec (111)
    on left: 182 183 184 185, on right: 172 173
integer (112)
    on left: 186 187, on right: 114 126 136 196
floatr (113)
    on left: 188 189, on right: 193 195
accidental (114)
    on left: 190 191, on right: 194
pie (115)
    on left: 192, on right: 195 196 197 198
floatp (116)
    on left: 193 194 195 196 197 198, on right: 115 127 137
name (117)
    on left: 199, on right: 12 21 22 46 47 49 51 52 58 91 92 93 94
    111 112 113 125 155 157 162 163 172 173
classname (118)
    on left: 200, on right: 8 9 10 14 63 64 65 87 175 177
primname (119)
    on left: 201, on right: 37
trueobj (120)
    on left: 202, on right: 119 131 141
falseobj (121)
    on left: 203, on right: 120 132 142
nilobj (122)
    on left: 204, on right: 121 133 143
infobj (123)
    on left: 205, on right: 122 134 144
ascii (124)
    on left: 206, on right: 116 128 138
symbol (125)
    on left: 207, on right: 118 130 140
string (126)
    on left: 208, on right: 117 129 139
pseudovar (127)
    on left: 209, on right: 62
binop (128)
    on left: 210 211 212 213 214 215 216 217 218, on right: 23 24 89
keybinop (129)
    on left: 219, on right: 90 107 165


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 378
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 29
    cmdlinecode	go to state 30
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecls1	go to state 44
    funcvardecl	go to state 45
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 62



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 63
    classname	go to state 64



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 65



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 199)

    $default	reduce using rule 199 (name)



state 7

    integer  ->  INTEGER .   (rule 186)

    $default	reduce using rule 186 (integer)



state 8

    floatr  ->  FLOAT .   (rule 188)

    $default	reduce using rule 188 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 190)

    $default	reduce using rule 190 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 207)

    $default	reduce using rule 207 (symbol)



state 11

    string  ->  STRING .   (rule 208)

    $default	reduce using rule 208 (string)



state 12

    ascii  ->  ASCII .   (rule 206)

    $default	reduce using rule 206 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 200)

    $default	reduce using rule 200 (classname)



state 14

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 152)

    NAME	shift, and go to state 6

    slotdeflist	go to state 66
    slotdef	go to state 67
    name	go to state 68



state 15

    nilobj  ->  NILOBJ .   (rule 204)

    $default	reduce using rule 204 (nilobj)



state 16

    trueobj  ->  TRUEOBJ .   (rule 202)

    $default	reduce using rule 202 (trueobj)



state 17

    falseobj  ->  FALSEOBJ .   (rule 203)

    $default	reduce using rule 203 (falseobj)



state 18

    infobj  ->  INFINITUMOBJ .   (rule 205)

    $default	reduce using rule 205 (infobj)



state 19

    pseudovar  ->  PSEUDOVAR .   (rule 209)

    $default	reduce using rule 209 (pseudovar)



state 20

    pie  ->  PIE .   (rule 192)

    $default	reduce using rule 192 (pie)



state 21

    integer  ->  '-' . INTEGER   (rule 187)
    floatr  ->  '-' . FLOAT   (rule 189)
    accidental  ->  '-' . ACCIDENTAL   (rule 191)
    floatp  ->  '-' . pie   (rule 198)

    INTEGER	shift, and go to state 69
    FLOAT	shift, and go to state 70
    ACCIDENTAL	shift, and go to state 71
    PIE 	shift, and go to state 20

    pie 	go to state 72



state 22

    expr  ->  '`' . expr   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 74
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 23

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 146)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 77



state 24

    expr1  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 101 (arglistc)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglistc	go to state 79
    arglist1	go to state 80
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 25

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 81
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 168 (dictslotlist)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    valrange2	go to state 83
    expr	go to state 84
    exprn	go to state 38
    exprseq	go to state 85
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecls1	go to state 86
    funcvardecl	go to state 45
    dictslotdef	go to state 87
    dictslotlist1	go to state 88
    dictslotlist	go to state 89
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 90



state 26

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 91
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 27

    expr1  ->  '~' . name   (rule 58)
    expr  ->  '~' . name '=' expr   (rule 92)

    NAME	shift, and go to state 6

    name	go to state 92



state 28

    expr  ->  '#' . mavars '=' expr   (rule 95)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 147)
    listlit  ->  '#' . '[' literallistc ']'   (rule 174)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 175)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '{' 	shift, and go to state 93
    '[' 	shift, and go to state 94

    mavars	go to state 95
    mavarlist	go to state 96
    name	go to state 97
    classname	go to state 98



state 29

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 30

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 31

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 32

    expr1  ->  msgsend .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 33

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 70)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 71)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 72)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 73)
    expr  ->  expr1 .   (rule 83)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 96)

    '[' 	shift, and go to state 99

    $default	reduce using rule 83 (expr)



state 34

    expr1  ->  valrangex1 .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 35

    expr  ->  valrangeassign .   (rule 85)

    $default	reduce using rule 85 (expr)



state 36

    expr  ->  valrangexd .   (rule 84)

    $default	reduce using rule 84 (expr)



state 37

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    exprn  ->  expr .   (rule 98)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 98 (exprn)

    binop	go to state 110
    keybinop	go to state 111



state 38

    exprn  ->  exprn . ';' expr   (rule 99)
    exprseq  ->  exprn . optsemi   (rule 100)

    ';' 	shift, and go to state 112

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 113



state 39

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 26

    $default	reduce using rule 40 (funretval)

    funretval	go to state 114



state 40

    expr1  ->  blockliteral .   (rule 54)

    $default	reduce using rule 54 (expr1)



state 41

    expr1  ->  pushname .   (rule 55)

    $default	reduce using rule 55 (expr1)



state 42

    expr1  ->  pushliteral .   (rule 53)

    $default	reduce using rule 53 (expr1)



state 43

    blockliteral  ->  block .   (rule 124)

    $default	reduce using rule 124 (blockliteral)



state 44

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 151)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 115
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 116
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 45

    funcvardecls1  ->  funcvardecl .   (rule 150)

    $default	reduce using rule 150 (funcvardecls1)



state 46

    pushliteral  ->  listlit .   (rule 135)

    $default	reduce using rule 135 (pushliteral)



state 47

    pushliteral  ->  integer .   (rule 126)
    floatp  ->  integer . pie   (rule 196)

    PIE 	shift, and go to state 20

    $default	reduce using rule 126 (pushliteral)

    pie 	go to state 117



state 48

    floatp  ->  floatr .   (rule 193)
    floatp  ->  floatr . pie   (rule 195)

    PIE 	shift, and go to state 20

    $default	reduce using rule 193 (floatp)

    pie 	go to state 118



state 49

    floatp  ->  accidental .   (rule 194)

    $default	reduce using rule 194 (floatp)



state 50

    floatp  ->  pie .   (rule 197)

    $default	reduce using rule 197 (floatp)



state 51

    pushliteral  ->  floatp .   (rule 127)

    $default	reduce using rule 127 (pushliteral)



state 52

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name . '=' expr   (rule 91)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 94)
    pushname  ->  name .   (rule 125)

    '=' 	shift, and go to state 119
    '{' 	shift, and go to state 23
    '(' 	shift, and go to state 120
    '#' 	shift, and go to state 121

    $default	reduce using rule 125 (pushname)

    blocklist1	go to state 122
    blockliteral	go to state 123
    block	go to state 43



state 53

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 63)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 64)
    expr1  ->  classname . '[' arglistc ']'   (rule 65)
    expr  ->  classname .   (rule 87)

    '[' 	shift, and go to state 124
    '(' 	shift, and go to state 125

    $default	reduce using rule 87 (expr)



state 54

    pushliteral  ->  trueobj .   (rule 131)

    $default	reduce using rule 131 (pushliteral)



state 55

    pushliteral  ->  falseobj .   (rule 132)

    $default	reduce using rule 132 (pushliteral)



state 56

    pushliteral  ->  nilobj .   (rule 133)

    $default	reduce using rule 133 (pushliteral)



state 57

    pushliteral  ->  infobj .   (rule 134)

    $default	reduce using rule 134 (pushliteral)



state 58

    pushliteral  ->  ascii .   (rule 128)

    $default	reduce using rule 128 (pushliteral)



state 59

    pushliteral  ->  symbol .   (rule 130)

    $default	reduce using rule 130 (pushliteral)



state 60

    pushliteral  ->  string .   (rule 129)

    $default	reduce using rule 129 (pushliteral)



state 61

    expr1  ->  pseudovar .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 62

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 126



state 63

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 64

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127
    '[' 	shift, and go to state 128

    $default	reduce using rule 13 (superclass)

    superclass	go to state 129



state 65

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 66

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 152)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 161)

    ';' 	shift, and go to state 130
    ',' 	shift, and go to state 131



state 67

    slotdeflist  ->  slotdef .   (rule 160)

    $default	reduce using rule 160 (slotdeflist)



state 68

    slotdef  ->  name .   (rule 162)
    slotdef  ->  name . '=' slotliteral   (rule 163)

    '=' 	shift, and go to state 132

    $default	reduce using rule 162 (slotdef)



state 69

    integer  ->  '-' INTEGER .   (rule 187)

    $default	reduce using rule 187 (integer)



state 70

    floatr  ->  '-' FLOAT .   (rule 189)

    $default	reduce using rule 189 (floatr)



state 71

    accidental  ->  '-' ACCIDENTAL .   (rule 191)

    $default	reduce using rule 191 (accidental)



state 72

    floatp  ->  '-' pie .   (rule 198)

    $default	reduce using rule 198 (floatp)



state 73

    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 81
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 168 (dictslotlist)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    valrange2	go to state 83
    expr	go to state 84
    exprn	go to state 38
    exprseq	go to state 85
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    dictslotdef	go to state 87
    dictslotlist1	go to state 88
    dictslotlist	go to state 89
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 90



state 74

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  '`' expr .   (rule 88)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)


    $default	reduce using rule 88 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 75

    argdecls  ->  ARG . slotdeflist ';'   (rule 154)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 155)

    NAME	shift, and go to state 6

    $default	reduce using rule 158 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 67
    name	go to state 68



state 76

    argdecls  ->  '|' . slotdeflist '|'   (rule 156)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 157)

    NAME	shift, and go to state 6

    $default	reduce using rule 158 (slotdeflist0)

    slotdeflist0	go to state 135
    slotdeflist	go to state 136
    slotdef	go to state 67
    name	go to state 68



state 77

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 146)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 137



state 78

    arglist1  ->  exprseq .   (rule 103)

    $default	reduce using rule 103 (arglist1)



state 79

    expr1  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 138



state 80

    arglistc  ->  arglist1 . optcomma   (rule 102)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    ',' 	shift, and go to state 139

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 140



state 81

    valrange2  ->  DOTDOT . exprseq   (rule 80)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 141
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 82

    keybinop  ->  KEYBINOP .   (rule 219)

    $default	reduce using rule 219 (keybinop)



state 83

    expr1  ->  '(' valrange2 . ')'   (rule 60)

    ')' 	shift, and go to state 142



state 84

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    exprn  ->  expr .   (rule 98)
    dictslotdef  ->  expr . ':' expr   (rule 164)

    ':' 	shift, and go to state 143
    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 98 (exprn)

    binop	go to state 110
    keybinop	go to state 111



state 85

    expr1  ->  '(' exprseq . ')'   (rule 57)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 81)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 82)

    DOTDOT	shift, and go to state 144
    ',' 	shift, and go to state 145
    ')' 	shift, and go to state 146



state 86

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 151)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 147
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 116
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 87

    dictslotlist1  ->  dictslotdef .   (rule 166)

    $default	reduce using rule 166 (dictslotlist1)



state 88

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 167)
    dictslotlist  ->  dictslotlist1 .   (rule 169)

    ',' 	shift, and go to state 148

    $default	reduce using rule 169 (dictslotlist)



state 89

    expr1  ->  '(' dictslotlist . ')'   (rule 61)

    ')' 	shift, and go to state 149



state 90

    dictslotdef  ->  keybinop . expr   (rule 165)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 150
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 91

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 151

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 152
    binop	go to state 110
    keybinop	go to state 111



state 92

    expr1  ->  '~' name .   (rule 58)
    expr  ->  '~' name . '=' expr   (rule 92)

    '=' 	shift, and go to state 153

    $default	reduce using rule 58 (expr1)



state 93

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 147)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 154



state 94

    listlit  ->  '#' '[' . literallistc ']'   (rule 174)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 178 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 158
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 95

    expr  ->  '#' mavars . '=' expr   (rule 95)

    '=' 	shift, and go to state 170



state 96

    mavars  ->  mavarlist .   (rule 110)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 111)
    mavarlist  ->  mavarlist . ',' name   (rule 113)

    ELLIPSIS	shift, and go to state 171
    ',' 	shift, and go to state 172

    $default	reduce using rule 110 (mavars)



state 97

    mavarlist  ->  name .   (rule 112)

    $default	reduce using rule 112 (mavarlist)



state 98

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 175)

    '[' 	shift, and go to state 173



state 99

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 70)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 71)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 72)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 73)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 174
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 175
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 100

    binop  ->  BINOP .   (rule 210)

    $default	reduce using rule 210 (binop)



state 101

    binop  ->  '-' .   (rule 215)

    $default	reduce using rule 215 (binop)



state 102

    binop  ->  '<' .   (rule 213)

    $default	reduce using rule 213 (binop)



state 103

    binop  ->  '>' .   (rule 214)

    $default	reduce using rule 214 (binop)



state 104

    binop  ->  '*' .   (rule 216)

    $default	reduce using rule 216 (binop)



state 105

    binop  ->  '+' .   (rule 217)

    $default	reduce using rule 217 (binop)



state 106

    binop  ->  '|' .   (rule 218)

    $default	reduce using rule 218 (binop)



state 107

    binop  ->  READWRITEVAR .   (rule 211)

    $default	reduce using rule 211 (binop)



state 108

    binop  ->  DOUBLEEQUAL .   (rule 212)

    $default	reduce using rule 212 (binop)



state 109

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . name blocklist   (rule 52)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 86)
    expr  ->  expr '.' . name '=' expr   (rule 93)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 97)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 176
    '(' 	shift, and go to state 177

    name	go to state 178



state 110

    expr  ->  expr binop . expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 179
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 111

    expr  ->  expr keybinop . expr   (rule 90)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 180
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 112

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 181
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 113

    exprseq  ->  exprn optsemi .   (rule 100)

    $default	reduce using rule 100 (exprseq)



state 114

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 115

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 116

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 151)

    $default	reduce using rule 151 (funcvardecls1)



state 117

    floatp  ->  integer pie .   (rule 196)

    $default	reduce using rule 196 (floatp)



state 118

    floatp  ->  floatr pie .   (rule 195)

    $default	reduce using rule 195 (floatp)



state 119

    expr  ->  name '=' . expr   (rule 91)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 182
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 120

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 183
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 121

    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 147)

    '{' 	shift, and go to state 93



state 122

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 184
    block	go to state 43



state 123

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 124

    expr1  ->  classname '[' . arglistc ']'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 101 (arglistc)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglistc	go to state 185
    arglist1	go to state 80
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 125

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 63)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 186
    keyarglist1	go to state 187
    keyarg	go to state 188
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 189



state 126

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 190



state 127

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 191



state 128

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 192
    name	go to state 193



state 129

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 194



state 130

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 152)

    $default	reduce using rule 152 (funcvardecl)



state 131

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 161)

    NAME	shift, and go to state 6

    slotdef	go to state 195
    name	go to state 68



state 132

    slotdef  ->  name '=' . slotliteral   (rule 163)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '#' 	shift, and go to state 196

    slotliteral	go to state 197
    listlit	go to state 198
    integer	go to state 199
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 200
    trueobj	go to state 201
    falseobj	go to state 202
    nilobj	go to state 203
    infobj	go to state 204
    ascii	go to state 205
    symbol	go to state 206
    string	go to state 207



state 133

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 155)

    ELLIPSIS	shift, and go to state 208



state 134

    argdecls  ->  ARG slotdeflist . ';'   (rule 154)
    slotdeflist0  ->  slotdeflist .   (rule 159)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 161)

    ';' 	shift, and go to state 209
    ',' 	shift, and go to state 131

    $default	reduce using rule 159 (slotdeflist0)



state 135

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 157)

    ELLIPSIS	shift, and go to state 210



state 136

    argdecls  ->  '|' slotdeflist . '|'   (rule 156)
    slotdeflist0  ->  slotdeflist .   (rule 159)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 161)

    '|' 	shift, and go to state 211
    ',' 	shift, and go to state 131

    $default	reduce using rule 159 (slotdeflist0)



state 137

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 146)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 212
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 213
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 138

    expr1  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 139

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 104)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 214
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 140

    arglistc  ->  arglist1 optcomma .   (rule 102)

    $default	reduce using rule 102 (arglistc)



state 141

    valrange2  ->  DOTDOT exprseq .   (rule 80)

    $default	reduce using rule 80 (valrange2)



state 142

    expr1  ->  '(' valrange2 ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 143

    dictslotdef  ->  expr ':' . expr   (rule 164)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 215
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 144

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 216
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 145

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 217
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 146

    expr1  ->  '(' exprseq ')' .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 147

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 218



state 148

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 167)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 219
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    dictslotdef	go to state 220
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 90



state 149

    expr1  ->  '(' dictslotlist ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 150

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    dictslotdef  ->  keybinop expr .   (rule 165)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 165 (dictslotdef)

    binop	go to state 110
    keybinop	go to state 111



state 151

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 152

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 153

    expr  ->  '~' name '=' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 221
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 154

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 147)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 222



state 155

    listlit2  ->  '[' . literallistc ']'   (rule 176)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 178 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 223
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 156

    literallist1  ->  listliteral .   (rule 180)

    $default	reduce using rule 180 (literallist1)



state 157

    listliteral  ->  listlit2 .   (rule 145)

    $default	reduce using rule 145 (listliteral)



state 158

    listlit  ->  '#' '[' literallistc . ']'   (rule 174)

    ']' 	shift, and go to state 224



state 159

    literallistc  ->  literallist1 . optcomma   (rule 179)
    literallist1  ->  literallist1 . ',' listliteral   (rule 181)

    ',' 	shift, and go to state 225

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 226



state 160

    listliteral  ->  integer .   (rule 136)
    floatp  ->  integer . pie   (rule 196)

    PIE 	shift, and go to state 20

    $default	reduce using rule 136 (listliteral)

    pie 	go to state 117



state 161

    listliteral  ->  floatp .   (rule 137)

    $default	reduce using rule 137 (listliteral)



state 162

    listlit2  ->  classname . '[' literallistc ']'   (rule 177)

    '[' 	shift, and go to state 227



state 163

    listliteral  ->  trueobj .   (rule 141)

    $default	reduce using rule 141 (listliteral)



state 164

    listliteral  ->  falseobj .   (rule 142)

    $default	reduce using rule 142 (listliteral)



state 165

    listliteral  ->  nilobj .   (rule 143)

    $default	reduce using rule 143 (listliteral)



state 166

    listliteral  ->  infobj .   (rule 144)

    $default	reduce using rule 144 (listliteral)



state 167

    listliteral  ->  ascii .   (rule 138)

    $default	reduce using rule 138 (listliteral)



state 168

    listliteral  ->  symbol .   (rule 140)

    $default	reduce using rule 140 (listliteral)



state 169

    listliteral  ->  string .   (rule 139)

    $default	reduce using rule 139 (listliteral)



state 170

    expr  ->  '#' mavars '=' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 228
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 171

    mavars  ->  mavarlist ELLIPSIS . name   (rule 111)

    NAME	shift, and go to state 6

    name	go to state 229



state 172

    mavarlist  ->  mavarlist ',' . name   (rule 113)

    NAME	shift, and go to state 6

    name	go to state 230



state 173

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 175)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 178 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 231
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 174

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 69)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 232
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 175

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 66)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 70)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 71)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 73)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 96)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    DOTDOT	shift, and go to state 233
    ']' 	shift, and go to state 234
    ',' 	shift, and go to state 235



state 176

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 86)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 236
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 237
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 177

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 238
    keyarglist1	go to state 239
    keyarg	go to state 188
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 189



state 178

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' name . blocklist   (rule 52)
    expr  ->  expr '.' name . '=' expr   (rule 93)

    '=' 	shift, and go to state 240
    '{' 	shift, and go to state 23
    '(' 	shift, and go to state 241
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 243
    blockliteral	go to state 123
    block	go to state 43



state 179

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr binop expr .   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    '.' 	shift, and go to state 109

    $default	reduce using rule 89 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 180

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr keybinop expr .   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    '.' 	shift, and go to state 109

    $default	reduce using rule 90 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 181

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    exprn  ->  exprn ';' expr .   (rule 99)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 99 (exprn)

    binop	go to state 110
    keybinop	go to state 111



state 182

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  name '=' expr .   (rule 91)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 91 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 183

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 94)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    ',' 	shift, and go to state 244

    $default	reduce using rule 108 (optkeyarglist)

    optkeyarglist	go to state 245



state 184

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 185

    expr1  ->  classname '[' arglistc . ']'   (rule 65)

    ']' 	shift, and go to state 246



state 186

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 64)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    ',' 	shift, and go to state 244

    $default	reduce using rule 108 (optkeyarglist)

    optkeyarglist	go to state 247



state 187

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 63)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 106)

    ',' 	shift, and go to state 248
    ')' 	shift, and go to state 249



state 188

    keyarglist1  ->  keyarg .   (rule 105)

    $default	reduce using rule 105 (keyarglist1)



state 189

    keyarg  ->  keybinop . exprseq   (rule 107)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 250
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 190

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 100
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 251
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '}' 	shift, and go to state 252

    methoddef	go to state 253
    name	go to state 254
    binop	go to state 255



state 191

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 192

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 256



state 193

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 194

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 257



state 195

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 161)

    $default	reduce using rule 161 (slotdeflist)



state 196

    listlit  ->  '#' . '[' literallistc ']'   (rule 174)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 175)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 94

    classname	go to state 98



state 197

    slotdef  ->  name '=' slotliteral .   (rule 163)

    $default	reduce using rule 163 (slotdef)



state 198

    slotliteral  ->  listlit .   (rule 123)

    $default	reduce using rule 123 (slotliteral)



state 199

    slotliteral  ->  integer .   (rule 114)
    floatp  ->  integer . pie   (rule 196)

    PIE 	shift, and go to state 20

    $default	reduce using rule 114 (slotliteral)

    pie 	go to state 117



state 200

    slotliteral  ->  floatp .   (rule 115)

    $default	reduce using rule 115 (slotliteral)



state 201

    slotliteral  ->  trueobj .   (rule 119)

    $default	reduce using rule 119 (slotliteral)



state 202

    slotliteral  ->  falseobj .   (rule 120)

    $default	reduce using rule 120 (slotliteral)



state 203

    slotliteral  ->  nilobj .   (rule 121)

    $default	reduce using rule 121 (slotliteral)



state 204

    slotliteral  ->  infobj .   (rule 122)

    $default	reduce using rule 122 (slotliteral)



state 205

    slotliteral  ->  ascii .   (rule 116)

    $default	reduce using rule 116 (slotliteral)



state 206

    slotliteral  ->  symbol .   (rule 118)

    $default	reduce using rule 118 (slotliteral)



state 207

    slotliteral  ->  string .   (rule 117)

    $default	reduce using rule 117 (slotliteral)



state 208

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 155)

    NAME	shift, and go to state 6

    name	go to state 258



state 209

    argdecls  ->  ARG slotdeflist ';' .   (rule 154)

    $default	reduce using rule 154 (argdecls)



state 210

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 157)

    NAME	shift, and go to state 6

    name	go to state 259



state 211

    argdecls  ->  '|' slotdeflist '|' .   (rule 156)

    $default	reduce using rule 156 (argdecls)



state 212

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 146)

    '}' 	shift, and go to state 260



state 213

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 149)

    $default	reduce using rule 149 (funcvardecls)



state 214

    arglist1  ->  arglist1 ',' exprseq .   (rule 104)

    $default	reduce using rule 104 (arglist1)



state 215

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    dictslotdef  ->  expr ':' expr .   (rule 164)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 164 (dictslotdef)

    binop	go to state 110
    keybinop	go to state 111



state 216

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 81)

    $default	reduce using rule 81 (valrange2)



state 217

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 82)

    DOTDOT	shift, and go to state 261



state 218

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 219

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    dictslotdef  ->  expr . ':' expr   (rule 164)

    ':' 	shift, and go to state 143
    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    binop	go to state 110
    keybinop	go to state 111



state 220

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 167)

    $default	reduce using rule 167 (dictslotlist1)



state 221

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  '~' name '=' expr .   (rule 92)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 92 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 222

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 147)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 262
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 213
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 223

    listlit2  ->  '[' literallistc . ']'   (rule 176)

    ']' 	shift, and go to state 263



state 224

    listlit  ->  '#' '[' literallistc ']' .   (rule 174)

    $default	reduce using rule 174 (listlit)



state 225

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 181)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 264
    listlit2	go to state 157
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 226

    literallistc  ->  literallist1 optcomma .   (rule 179)

    $default	reduce using rule 179 (literallistc)



state 227

    listlit2  ->  classname '[' . literallistc ']'   (rule 177)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 178 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 265
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    infobj	go to state 166
    ascii	go to state 167
    symbol	go to state 168
    string	go to state 169



state 228

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  '#' mavars '=' expr .   (rule 95)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 95 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 229

    mavars  ->  mavarlist ELLIPSIS name .   (rule 111)

    $default	reduce using rule 111 (mavars)



state 230

    mavarlist  ->  mavarlist ',' name .   (rule 113)

    $default	reduce using rule 113 (mavarlist)



state 231

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 175)

    ']' 	shift, and go to state 266



state 232

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 69)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 72)

    ']' 	shift, and go to state 267



state 233

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 70)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 71)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 73)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 268
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 269
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 234

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 66)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 96)

    '=' 	shift, and go to state 270

    $default	reduce using rule 66 (expr1)



state 235

    arglist1  ->  arglist1 ',' . exprseq   (rule 104)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 214
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 236

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 271
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 237

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 74)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 86)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 97)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    DOTDOT	shift, and go to state 272
    ']' 	shift, and go to state 273
    ',' 	shift, and go to state 235



state 238

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 50)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    ',' 	shift, and go to state 244

    $default	reduce using rule 108 (optkeyarglist)

    optkeyarglist	go to state 274



state 239

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 48)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 106)

    ',' 	shift, and go to state 248
    ')' 	shift, and go to state 275



state 240

    expr  ->  expr '.' name '=' . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 276
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 241

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 78
    arglist1	go to state 277
    keyarglist1	go to state 278
    keyarg	go to state 188
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 189



state 242

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 184
    block	go to state 43



state 243

    msgsend  ->  expr '.' name blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 244

    arglist1  ->  arglist1 ',' . exprseq   (rule 104)
    optkeyarglist  ->  ',' . keyarglist1   (rule 109)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 214
    keyarglist1	go to state 279
    keyarg	go to state 188
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 189



state 245

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 94)

    ')' 	shift, and go to state 280



state 246

    expr1  ->  classname '[' arglistc ']' .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 247

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 64)

    ')' 	shift, and go to state 281



state 248

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 106)

    KEYBINOP	shift, and go to state 82

    keyarg	go to state 282
    keybinop	go to state 189



state 249

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 250

    keyarg  ->  keybinop exprseq .   (rule 107)

    $default	reduce using rule 107 (keyarg)



state 251

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 216)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 100
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108

    $default	reduce using rule 216 (binop)

    name	go to state 283
    binop	go to state 284



state 252

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 253

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 254

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 285



state 255

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 286



state 256

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127

    $default	reduce using rule 13 (superclass)

    superclass	go to state 287



state 257

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 288
    CLASSVAR	shift, and go to state 289

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 290
    methods	go to state 291



state 258

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 155)

    ';' 	shift, and go to state 292



state 259

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 157)

    '|' 	shift, and go to state 293



state 260

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 146)

    $default	reduce using rule 146 (block)



state 261

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 294
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 262

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 147)

    '}' 	shift, and go to state 295



state 263

    listlit2  ->  '[' literallistc ']' .   (rule 176)

    $default	reduce using rule 176 (listlit2)



state 264

    literallist1  ->  literallist1 ',' listliteral .   (rule 181)

    $default	reduce using rule 181 (literallist1)



state 265

    listlit2  ->  classname '[' literallistc . ']'   (rule 177)

    ']' 	shift, and go to state 296



state 266

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 175)

    $default	reduce using rule 175 (listlit)



state 267

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 69)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 72)

    '=' 	shift, and go to state 297

    $default	reduce using rule 69 (valrangex1)



state 268

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 68)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 71)

    '=' 	shift, and go to state 298

    $default	reduce using rule 68 (valrangex1)



state 269

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 70)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 73)

    ']' 	shift, and go to state 299



state 270

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 300
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 271

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 75)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 78)

    ']' 	shift, and go to state 301



state 272

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 74)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 76)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 77)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 302
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 303
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 273

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 86)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 97)

    '=' 	shift, and go to state 304

    $default	reduce using rule 86 (expr)



state 274

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 50)

    ')' 	shift, and go to state 305



state 275

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 48)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 306
    blockliteral	go to state 123
    block	go to state 43



state 276

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr '.' name '=' expr .   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 93 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 277

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 104)

    ',' 	shift, and go to state 244

    $default	reduce using rule 108 (optkeyarglist)

    optkeyarglist	go to state 307



state 278

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 106)

    ',' 	shift, and go to state 248
    ')' 	shift, and go to state 308



state 279

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 106)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 109)

    ',' 	shift, and go to state 248

    $default	reduce using rule 109 (optkeyarglist)



state 280

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 94)

    '=' 	shift, and go to state 309
    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 310
    blockliteral	go to state 123
    block	go to state 43



state 281

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 282

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 106)

    $default	reduce using rule 106 (keyarglist1)



state 283

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 311



state 284

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 312



state 285

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 313



state 286

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 314



state 287

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 315



state 288

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 316
    '>' 	shift, and go to state 317
    READWRITEVAR	shift, and go to state 318

    $default	reduce using rule 182 (rwspec)

    rwslotdeflist	go to state 319
    rwslotdef	go to state 320
    rwspec	go to state 321



state 289

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 316
    '>' 	shift, and go to state 317
    READWRITEVAR	shift, and go to state 318

    $default	reduce using rule 182 (rwspec)

    rwslotdeflist	go to state 322
    rwslotdef	go to state 320
    rwspec	go to state 321



state 290

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 291

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 100
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 251
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '}' 	shift, and go to state 323

    methoddef	go to state 253
    name	go to state 254
    binop	go to state 255



state 292

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 155)

    $default	reduce using rule 155 (argdecls)



state 293

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 157)

    $default	reduce using rule 157 (argdecls)



state 294

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 82)

    $default	reduce using rule 82 (valrange2)



state 295

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 147)

    $default	reduce using rule 147 (block)



state 296

    listlit2  ->  classname '[' literallistc ']' .   (rule 177)

    $default	reduce using rule 177 (listlit2)



state 297

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 324
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 298

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 71)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 325
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 299

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 70)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 73)

    '=' 	shift, and go to state 326

    $default	reduce using rule 70 (valrangex1)



state 300

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 96 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 301

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 75)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 78)

    '=' 	shift, and go to state 327

    $default	reduce using rule 75 (valrangexd)



state 302

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 74)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 328

    $default	reduce using rule 74 (valrangexd)



state 303

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 76)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 79)

    ']' 	shift, and go to state 329



state 304

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 330
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 305

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 50)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 331
    blockliteral	go to state 123
    block	go to state 43



state 306

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 307

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 332



state 308

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 49)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 333
    blockliteral	go to state 123
    block	go to state 43



state 309

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 334
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 310

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 311

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 335



state 312

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 75
    '|' 	shift, and go to state 76

    $default	reduce using rule 153 (argdecls)

    argdecls	go to state 336



state 313

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 337



state 314

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 338



state 315

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 339



state 316

    rwspec  ->  '<' .   (rule 183)

    $default	reduce using rule 183 (rwspec)



state 317

    rwspec  ->  '>' .   (rule 185)

    $default	reduce using rule 185 (rwspec)



state 318

    rwspec  ->  READWRITEVAR .   (rule 184)

    $default	reduce using rule 184 (rwspec)



state 319

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 171)

    ';' 	shift, and go to state 340
    ',' 	shift, and go to state 341



state 320

    rwslotdeflist  ->  rwslotdef .   (rule 170)

    $default	reduce using rule 170 (rwslotdeflist)



state 321

    rwslotdef  ->  rwspec . name   (rule 172)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 173)

    NAME	shift, and go to state 6

    name	go to state 342



state 322

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 171)

    ';' 	shift, and go to state 343
    ',' 	shift, and go to state 341



state 323

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 324

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 72 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111



state 325

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 71)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 71 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111



state 326

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 73)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 344
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 327

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 345
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 328

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 346
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 329

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 76)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 79)

    '=' 	shift, and go to state 347

    $default	reduce using rule 76 (valrangexd)



state 330

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 97 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 331

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 332

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    '{' 	shift, and go to state 23
    '#' 	shift, and go to state 121

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 242
    blocklist	go to state 348
    blockliteral	go to state 123
    block	go to state 43



state 333

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 334

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 94)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 94 (expr)

    binop	go to state 110
    keybinop	go to state 111



state 335

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 349



state 336

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 148 (funcvardecls)

    funcvardecls	go to state 350



state 337

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    PRIMITIVENAME	shift, and go to state 351
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 352
    funcvardecl	go to state 213
    primname	go to state 353



state 338

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    PRIMITIVENAME	shift, and go to state 351
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 354
    funcvardecl	go to state 213
    primname	go to state 353



state 339

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 288
    CLASSVAR	shift, and go to state 289

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 290
    methods	go to state 355



state 340

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 341

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 171)

    '<' 	shift, and go to state 316
    '>' 	shift, and go to state 317
    READWRITEVAR	shift, and go to state 318

    $default	reduce using rule 182 (rwspec)

    rwslotdef	go to state 356
    rwspec	go to state 321



state 342

    rwslotdef  ->  rwspec name .   (rule 172)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 173)

    '=' 	shift, and go to state 357

    $default	reduce using rule 172 (rwslotdef)



state 343

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 344

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 73)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 73 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111



state 345

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 78 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111



state 346

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 77 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111



state 347

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 358
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 348

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 349

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    PRIMITIVENAME	shift, and go to state 351
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 359
    funcvardecl	go to state 213
    primname	go to state 353



state 350

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 149)

    PRIMITIVENAME	shift, and go to state 351
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 360
    funcvardecl	go to state 213
    primname	go to state 353



state 351

    primname  ->  PRIMITIVENAME .   (rule 201)

    $default	reduce using rule 201 (primname)



state 352

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 361
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 362
    retval	go to state 363
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 364
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 353

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 151

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 365



state 354

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 361
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 366
    retval	go to state 363
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 364
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 355

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 100
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 251
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '}' 	shift, and go to state 367

    methoddef	go to state 253
    name	go to state 254
    binop	go to state 255



state 356

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 171)

    $default	reduce using rule 171 (rwslotdeflist)



state 357

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 173)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '#' 	shift, and go to state 196

    slotliteral	go to state 368
    listlit	go to state 198
    integer	go to state 199
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 200
    trueobj	go to state 201
    falseobj	go to state 202
    nilobj	go to state 203
    infobj	go to state 204
    ascii	go to state 205
    symbol	go to state 206
    string	go to state 207



state 358

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 79 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111



state 359

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 361
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 369
    retval	go to state 363
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 364
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 360

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '^' 	shift, and go to state 361
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 370
    retval	go to state 363
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 364
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 361

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    INFINITUMOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 73
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 371
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    infobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61



state 362

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 372



state 363

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 364

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 361

    $default	reduce using rule 38 (retval)

    retval	go to state 373



state 365

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 366

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 374



state 367

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 368

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 173)

    $default	reduce using rule 173 (rwslotdef)



state 369

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 375



state 370

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 376



state 371

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 77)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 79)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 86)
    expr  ->  expr . binop expr   (rule 89)
    expr  ->  expr . keybinop expr   (rule 90)
    expr  ->  expr . '.' name '=' expr   (rule 93)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 97)

    BINOP	shift, and go to state 100
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 101
    '<' 	shift, and go to state 102
    '>' 	shift, and go to state 103
    '*' 	shift, and go to state 104
    '+' 	shift, and go to state 105
    '|' 	shift, and go to state 106
    READWRITEVAR	shift, and go to state 107
    DOUBLEEQUAL	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 151

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 377
    binop	go to state 110
    keybinop	go to state 111



state 372

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 373

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 374

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 375

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 376

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 377

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 378

    $   	go to state 379



state 379

    $   	go to state 380



state 380

    $default	accept
