

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 71 between rule 80 and token BINOP resolved as reduce.
Conflict in state 71 between rule 80 and token KEYBINOP resolved as reduce.
Conflict in state 71 between rule 80 and token '-' resolved as reduce.
Conflict in state 71 between rule 80 and token '<' resolved as reduce.
Conflict in state 71 between rule 80 and token '>' resolved as reduce.
Conflict in state 71 between rule 80 and token '*' resolved as reduce.
Conflict in state 71 between rule 80 and token '+' resolved as reduce.
Conflict in state 71 between rule 80 and token '|' resolved as reduce.
Conflict in state 71 between rule 80 and token READWRITEVAR resolved as reduce.
Conflict in state 71 between rule 80 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 71 between rule 80 and token '.' resolved as reduce.
Conflict in state 175 between rule 81 and token BINOP resolved as reduce.
Conflict in state 175 between rule 81 and token KEYBINOP resolved as reduce.
Conflict in state 175 between rule 81 and token '-' resolved as reduce.
Conflict in state 175 between rule 81 and token '<' resolved as reduce.
Conflict in state 175 between rule 81 and token '>' resolved as reduce.
Conflict in state 175 between rule 81 and token '*' resolved as reduce.
Conflict in state 175 between rule 81 and token '+' resolved as reduce.
Conflict in state 175 between rule 81 and token '|' resolved as reduce.
Conflict in state 175 between rule 81 and token READWRITEVAR resolved as reduce.
Conflict in state 175 between rule 81 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 175 between rule 81 and token '.' resolved as shift.
Conflict in state 176 between rule 82 and token BINOP resolved as reduce.
Conflict in state 176 between rule 82 and token KEYBINOP resolved as reduce.
Conflict in state 176 between rule 82 and token '-' resolved as reduce.
Conflict in state 176 between rule 82 and token '<' resolved as reduce.
Conflict in state 176 between rule 82 and token '>' resolved as reduce.
Conflict in state 176 between rule 82 and token '*' resolved as reduce.
Conflict in state 176 between rule 82 and token '+' resolved as reduce.
Conflict in state 176 between rule 82 and token '|' resolved as reduce.
Conflict in state 176 between rule 82 and token READWRITEVAR resolved as reduce.
Conflict in state 176 between rule 82 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 176 between rule 82 and token '.' resolved as shift.
Conflict in state 178 between rule 83 and token BINOP resolved as shift.
Conflict in state 178 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 178 between rule 83 and token '-' resolved as shift.
Conflict in state 178 between rule 83 and token '<' resolved as shift.
Conflict in state 178 between rule 83 and token '>' resolved as shift.
Conflict in state 178 between rule 83 and token '*' resolved as shift.
Conflict in state 178 between rule 83 and token '+' resolved as shift.
Conflict in state 178 between rule 83 and token '|' resolved as shift.
Conflict in state 178 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 178 between rule 83 and token DOUBLEEQUAL resolved as shift.
Conflict in state 178 between rule 83 and token '.' resolved as shift.
Conflict in state 217 between rule 84 and token BINOP resolved as shift.
Conflict in state 217 between rule 84 and token KEYBINOP resolved as shift.
Conflict in state 217 between rule 84 and token '-' resolved as shift.
Conflict in state 217 between rule 84 and token '<' resolved as shift.
Conflict in state 217 between rule 84 and token '>' resolved as shift.
Conflict in state 217 between rule 84 and token '*' resolved as shift.
Conflict in state 217 between rule 84 and token '+' resolved as shift.
Conflict in state 217 between rule 84 and token '|' resolved as shift.
Conflict in state 217 between rule 84 and token READWRITEVAR resolved as shift.
Conflict in state 217 between rule 84 and token DOUBLEEQUAL resolved as shift.
Conflict in state 217 between rule 84 and token '.' resolved as shift.
Conflict in state 224 between rule 87 and token BINOP resolved as shift.
Conflict in state 224 between rule 87 and token KEYBINOP resolved as shift.
Conflict in state 224 between rule 87 and token '-' resolved as shift.
Conflict in state 224 between rule 87 and token '<' resolved as shift.
Conflict in state 224 between rule 87 and token '>' resolved as shift.
Conflict in state 224 between rule 87 and token '*' resolved as shift.
Conflict in state 224 between rule 87 and token '+' resolved as shift.
Conflict in state 224 between rule 87 and token '|' resolved as shift.
Conflict in state 224 between rule 87 and token READWRITEVAR resolved as shift.
Conflict in state 224 between rule 87 and token DOUBLEEQUAL resolved as shift.
Conflict in state 224 between rule 87 and token '.' resolved as shift.
Conflict in state 272 between rule 85 and token BINOP resolved as shift.
Conflict in state 272 between rule 85 and token KEYBINOP resolved as shift.
Conflict in state 272 between rule 85 and token '-' resolved as shift.
Conflict in state 272 between rule 85 and token '<' resolved as shift.
Conflict in state 272 between rule 85 and token '>' resolved as shift.
Conflict in state 272 between rule 85 and token '*' resolved as shift.
Conflict in state 272 between rule 85 and token '+' resolved as shift.
Conflict in state 272 between rule 85 and token '|' resolved as shift.
Conflict in state 272 between rule 85 and token READWRITEVAR resolved as shift.
Conflict in state 272 between rule 85 and token DOUBLEEQUAL resolved as shift.
Conflict in state 272 between rule 85 and token '.' resolved as shift.
Conflict in state 294 between rule 88 and token BINOP resolved as shift.
Conflict in state 294 between rule 88 and token KEYBINOP resolved as shift.
Conflict in state 294 between rule 88 and token '-' resolved as shift.
Conflict in state 294 between rule 88 and token '<' resolved as shift.
Conflict in state 294 between rule 88 and token '>' resolved as shift.
Conflict in state 294 between rule 88 and token '*' resolved as shift.
Conflict in state 294 between rule 88 and token '+' resolved as shift.
Conflict in state 294 between rule 88 and token '|' resolved as shift.
Conflict in state 294 between rule 88 and token READWRITEVAR resolved as shift.
Conflict in state 294 between rule 88 and token DOUBLEEQUAL resolved as shift.
Conflict in state 294 between rule 88 and token '.' resolved as shift.
Conflict in state 319 between rule 89 and token BINOP resolved as shift.
Conflict in state 319 between rule 89 and token KEYBINOP resolved as shift.
Conflict in state 319 between rule 89 and token '-' resolved as shift.
Conflict in state 319 between rule 89 and token '<' resolved as shift.
Conflict in state 319 between rule 89 and token '>' resolved as shift.
Conflict in state 319 between rule 89 and token '*' resolved as shift.
Conflict in state 319 between rule 89 and token '+' resolved as shift.
Conflict in state 319 between rule 89 and token '|' resolved as shift.
Conflict in state 319 between rule 89 and token READWRITEVAR resolved as shift.
Conflict in state 319 between rule 89 and token DOUBLEEQUAL resolved as shift.
Conflict in state 319 between rule 89 and token '.' resolved as shift.
Conflict in state 323 between rule 86 and token BINOP resolved as shift.
Conflict in state 323 between rule 86 and token KEYBINOP resolved as shift.
Conflict in state 323 between rule 86 and token '-' resolved as shift.
Conflict in state 323 between rule 86 and token '<' resolved as shift.
Conflict in state 323 between rule 86 and token '>' resolved as shift.
Conflict in state 323 between rule 86 and token '*' resolved as shift.
Conflict in state 323 between rule 86 and token '+' resolved as shift.
Conflict in state 323 between rule 86 and token '|' resolved as shift.
Conflict in state 323 between rule 86 and token READWRITEVAR resolved as shift.
Conflict in state 323 between rule 86 and token DOUBLEEQUAL resolved as shift.
Conflict in state 323 between rule 86 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 49   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 51   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' name blocklist
rule 53   expr1 -> pushliteral
rule 54   expr1 -> blockliteral
rule 55   expr1 -> pushname
rule 56   expr1 -> msgsend
rule 57   expr1 -> '(' exprseq ')'
rule 58   expr1 -> '~' name
rule 59   expr1 -> '[' arglistc ']'
rule 60   expr1 -> '(' valrange2 ')'
rule 61   expr1 -> '(' dictslotlist ')'
rule 62   expr1 -> pseudovar
rule 63   expr1 -> classname '(' keyarglist1 ')'
rule 64   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 65   expr1 -> classname '[' arglistc ']'
rule 66   expr1 -> expr1 '[' arglist1 ']'
rule 67   expr1 -> valrangex1
rule 68   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 69   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 70   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 71   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 72   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 73   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 74   valrange2 -> exprseq DOTDOT exprseq
rule 75   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 76   expr -> expr1
rule 77   expr -> valrangexd
rule 78   expr -> expr '.' '[' arglist1 ']'
rule 79   expr -> classname
rule 80   expr -> '`' expr
rule 81   expr -> expr binop expr
rule 82   expr -> expr keybinop expr
rule 83   expr -> name '=' expr
rule 84   expr -> '~' name '=' expr
rule 85   expr -> expr '.' name '=' expr
rule 86   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 87   expr -> '#' mavars '=' expr
rule 88   expr -> expr1 '[' arglist1 ']' '=' expr
rule 89   expr -> expr '.' '[' arglist1 ']' '=' expr
rule 90   exprn -> expr
rule 91   exprn -> exprn ';' expr
rule 92   exprseq -> exprn optsemi
rule 93   arglistc ->		/* empty */
rule 94   arglistc -> arglist1 optcomma
rule 95   arglist1 -> exprseq
rule 96   arglist1 -> arglist1 ',' exprseq
rule 97   keyarglist1 -> keyarg
rule 98   keyarglist1 -> keyarglist1 ',' keyarg
rule 99   keyarg -> keybinop exprseq
rule 100  optkeyarglist ->		/* empty */
rule 101  optkeyarglist -> ',' keyarglist1
rule 102  mavars -> mavarlist
rule 103  mavars -> mavarlist ELLIPSIS name
rule 104  mavarlist -> name
rule 105  mavarlist -> mavarlist ',' name
rule 106  slotliteral -> integer
rule 107  slotliteral -> floatp
rule 108  slotliteral -> ascii
rule 109  slotliteral -> string
rule 110  slotliteral -> symbol
rule 111  slotliteral -> trueobj
rule 112  slotliteral -> falseobj
rule 113  slotliteral -> nilobj
rule 114  slotliteral -> infobj
rule 115  slotliteral -> listlit
rule 116  blockliteral -> block
rule 117  pushname -> name
rule 118  pushliteral -> integer
rule 119  pushliteral -> floatp
rule 120  pushliteral -> ascii
rule 121  pushliteral -> string
rule 122  pushliteral -> symbol
rule 123  pushliteral -> trueobj
rule 124  pushliteral -> falseobj
rule 125  pushliteral -> nilobj
rule 126  pushliteral -> infobj
rule 127  pushliteral -> listlit
rule 128  listliteral -> integer
rule 129  listliteral -> floatp
rule 130  listliteral -> ascii
rule 131  listliteral -> string
rule 132  listliteral -> symbol
rule 133  listliteral -> trueobj
rule 134  listliteral -> falseobj
rule 135  listliteral -> nilobj
rule 136  listliteral -> infobj
rule 137  listliteral -> listlit2
rule 138  block -> '{' argdecls funcvardecls funcbody '}'
rule 139  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 140  funcvardecls ->		/* empty */
rule 141  funcvardecls -> funcvardecls funcvardecl
rule 142  funcvardecls1 -> funcvardecl
rule 143  funcvardecls1 -> funcvardecls1 funcvardecl
rule 144  funcvardecl -> VAR slotdeflist ';'
rule 145  argdecls ->		/* empty */
rule 146  argdecls -> ARG slotdeflist ';'
rule 147  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 148  argdecls -> '|' slotdeflist '|'
rule 149  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 150  slotdeflist0 ->		/* empty */
rule 151  slotdeflist0 -> slotdeflist
rule 152  slotdeflist -> slotdef
rule 153  slotdeflist -> slotdeflist ',' slotdef
rule 154  slotdef -> name
rule 155  slotdef -> name '=' slotliteral
rule 156  dictslotdef -> expr ':' expr
rule 157  dictslotdef -> keybinop expr
rule 158  dictslotlist1 -> dictslotdef
rule 159  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 160  dictslotlist ->		/* empty */
rule 161  dictslotlist -> dictslotlist1
rule 162  rwslotdeflist -> rwslotdef
rule 163  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 164  rwslotdef -> rwspec name
rule 165  rwslotdef -> rwspec name '=' slotliteral
rule 166  listlit -> '#' '[' literallistc ']'
rule 167  listlit -> '#' classname '[' literallistc ']'
rule 168  listlit2 -> '[' literallistc ']'
rule 169  listlit2 -> classname '[' literallistc ']'
rule 170  literallistc ->		/* empty */
rule 171  literallistc -> literallist1 optcomma
rule 172  literallist1 -> listliteral
rule 173  literallist1 -> literallist1 ',' listliteral
rule 174  rwspec ->		/* empty */
rule 175  rwspec -> '<'
rule 176  rwspec -> READWRITEVAR
rule 177  rwspec -> '>'
rule 178  integer -> INTEGER
rule 179  integer -> '-' INTEGER
rule 180  floatr -> FLOAT
rule 181  floatr -> '-' FLOAT
rule 182  pie -> PIE
rule 183  floatp -> floatr
rule 184  floatp -> floatr pie
rule 185  floatp -> integer pie
rule 186  floatp -> pie
rule 187  floatp -> '-' pie
rule 188  name -> NAME
rule 189  classname -> CLASSNAME
rule 190  primname -> PRIMITIVENAME
rule 191  trueobj -> TRUEOBJ
rule 192  falseobj -> FALSEOBJ
rule 193  nilobj -> NILOBJ
rule 194  infobj -> INFINITUMOBJ
rule 195  ascii -> ASCII
rule 196  symbol -> SYMBOL
rule 197  string -> string1
rule 198  string -> string string1
rule 199  string1 -> STRING
rule 200  pseudovar -> PSEUDOVAR
rule 201  binop -> BINOP
rule 202  binop -> READWRITEVAR
rule 203  binop -> DOUBLEEQUAL
rule 204  binop -> '<'
rule 205  binop -> '>'
rule 206  binop -> '-'
rule 207  binop -> '*'
rule 208  binop -> '+'
rule 209  binop -> '|'
rule 210  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 87 139 166 167
'(' (40) 31 47 48 49 50 51 57 60 61 63 64 86
')' (41) 31 47 48 49 50 51 57 60 61 63 64 86
'*' (42) 22 24 207
'+' (43) 10 208
',' (44) 28 75 96 98 101 105 153 159 163 173
'-' (45) 179 181 187 206
'.' (46) 48 49 50 51 52 71 72 73 78 85 89
':' (58) 14 156
';' (59) 17 18 26 91 144 146 147
'<' (60) 175 204
'=' (61) 83 84 85 86 87 88 89 155 165
'>' (62) 177 205
'[' (91) 9 59 65 66 68 69 70 71 72 73 78 88 89 166 167 168 169
']' (93) 9 59 65 66 68 69 70 71 72 73 78 88 89 166 167 168 169
'^' (94) 39 41
'`' (96) 80
'{' (123) 8 9 10 21 22 23 24 138 139
'|' (124) 148 149 209
'}' (125) 8 9 10 21 22 23 24 138 139
'~' (126) 58 84
error (256)
NAME (257) 188
INTEGER (258) 178 179
FLOAT (259) 180 181
SYMBOL (260) 196
STRING (261) 199
ASCII (262) 195
PRIMITIVENAME (263) 190
CLASSNAME (264) 189
VAR (265) 18 144
ARG (266) 146 147
CLASSVAR (267) 17
CONST (268)
NILOBJ (269) 193
TRUEOBJ (270) 191
FALSEOBJ (271) 192
INFINITUMOBJ (272) 194
PSEUDOVAR (273) 200
ELLIPSIS (274) 103 147 149
DOTDOT (275) 68 69 70 71 72 73 74 75
PIE (276) 182
BADTOKEN (277)
INTERPRET (278) 3
BINOP (279) 201
KEYBINOP (280) 210
READWRITEVAR (281) 176 202
DOUBLEEQUAL (282) 203
UMINUS (283)

Nonterminals, with rules where they appear

root (51)
    on left: 1 2 3
classes (52)
    on left: 4 5, on right: 1 5
classextensions (53)
    on left: 6 7, on right: 2 7
classdef (54)
    on left: 8 9, on right: 5
classextension (55)
    on left: 10, on right: 6 7
optname (56)
    on left: 11 12, on right: 9
superclass (57)
    on left: 13 14, on right: 8 9
classvardecls (58)
    on left: 15 16, on right: 8 9 16
classvardecl (59)
    on left: 17 18, on right: 16
methods (60)
    on left: 19 20, on right: 8 9 10 20
methoddef (61)
    on left: 21 22 23 24, on right: 20
optsemi (62)
    on left: 25 26, on right: 37 39 41 92
optcomma (63)
    on left: 27 28, on right: 94 171
funcbody (64)
    on left: 29 30, on right: 31 32 33 138 139
cmdlinecode (65)
    on left: 31 32 33, on right: 3
methbody (66)
    on left: 34 35, on right: 21 22 23 24
primitive (67)
    on left: 36 37, on right: 21 22 23 24
retval (68)
    on left: 38 39, on right: 34 35
funretval (69)
    on left: 40 41, on right: 29 30
blocklist1 (70)
    on left: 42 43, on right: 43 45 46
blocklist (71)
    on left: 44 45, on right: 47 48 49 50 51 52
msgsend (72)
    on left: 46 47 48 49 50 51 52, on right: 56
expr1 (73)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 66 68 69 70 76 88
valrangex1 (74)
    on left: 68 69 70, on right: 67
valrangexd (75)
    on left: 71 72 73, on right: 77
valrange2 (76)
    on left: 74 75, on right: 60
expr (77)
    on left: 76 77 78 79 80 81 82 83 84 85 86 87 88 89,
    on right: 39 41 48 49 50 51 52 71 72 73 78 80 81 82 83 84 85 86
    87 88 89 90 91 156 157
exprn (78)
    on left: 90 91, on right: 91 92
exprseq (79)
    on left: 92, on right: 30 35 57 69 70 72 73 74 75 95 96 99
arglistc (80)
    on left: 93 94, on right: 59 65
arglist1 (81)
    on left: 95 96, on right: 47 50 51 64 66 68 70 71 73 78 86 88 89
    94 96
keyarglist1 (82)
    on left: 97 98, on right: 48 49 63 98 101
keyarg (83)
    on left: 99, on right: 97 98
optkeyarglist (84)
    on left: 100 101, on right: 47 50 51 64 86
mavars (85)
    on left: 102 103, on right: 87
mavarlist (86)
    on left: 104 105, on right: 102 103 105
slotliteral (87)
    on left: 106 107 108 109 110 111 112 113 114 115,
    on right: 155 165
blockliteral (88)
    on left: 116, on right: 42 43 54
pushname (89)
    on left: 117, on right: 55
pushliteral (90)
    on left: 118 119 120 121 122 123 124 125 126 127,
    on right: 53
listliteral (91)
    on left: 128 129 130 131 132 133 134 135 136 137,
    on right: 172 173
block (92)
    on left: 138 139, on right: 116
funcvardecls (93)
    on left: 140 141, on right: 21 22 23 24 138 139 141
funcvardecls1 (94)
    on left: 142 143, on right: 31 32 143
funcvardecl (95)
    on left: 144, on right: 141 142 143
argdecls (96)
    on left: 145 146 147 148 149, on right: 21 22 23 24 138 139
slotdeflist0 (97)
    on left: 150 151, on right: 147 149
slotdeflist (98)
    on left: 152 153, on right: 144 146 148 151 153
slotdef (99)
    on left: 154 155, on right: 152 153
dictslotdef (100)
    on left: 156 157, on right: 158 159
dictslotlist1 (101)
    on left: 158 159, on right: 159 161
dictslotlist (102)
    on left: 160 161, on right: 61
rwslotdeflist (103)
    on left: 162 163, on right: 17 18 163
rwslotdef (104)
    on left: 164 165, on right: 162 163
listlit (105)
    on left: 166 167, on right: 115 127
listlit2 (106)
    on left: 168 169, on right: 137
literallistc (107)
    on left: 170 171, on right: 166 167 168 169
literallist1 (108)
    on left: 172 173, on right: 171 173
rwspec (109)
    on left: 174 175 176 177, on right: 164 165
integer (110)
    on left: 178 179, on right: 106 118 128 185
floatr (111)
    on left: 180 181, on right: 183 184
pie (112)
    on left: 182, on right: 184 185 186 187
floatp (113)
    on left: 183 184 185 186 187, on right: 107 119 129
name (114)
    on left: 188, on right: 12 21 22 46 47 49 51 52 58 83 84 85 86
    103 104 105 117 147 149 154 155 164 165
classname (115)
    on left: 189, on right: 8 9 10 14 63 64 65 79 167 169
primname (116)
    on left: 190, on right: 37
trueobj (117)
    on left: 191, on right: 111 123 133
falseobj (118)
    on left: 192, on right: 112 124 134
nilobj (119)
    on left: 193, on right: 113 125 135
infobj (120)
    on left: 194, on right: 114 126 136
ascii (121)
    on left: 195, on right: 108 120 130
symbol (122)
    on left: 196, on right: 110 122 132
string (123)
    on left: 197 198, on right: 109 121 131 198
string1 (124)
    on left: 199, on right: 197 198
pseudovar (125)
    on left: 200, on right: 62
binop (126)
    on left: 201 202 203 204 205 206 207 208 209, on right: 23 24 81
keybinop (127)
    on left: 210, on right: 82 99 157


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 362
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 24
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 28
    cmdlinecode	go to state 29
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 42
    funcvardecl	go to state 43
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 12

    classname	go to state 60



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 12

    $default	reduce using rule 1 (root)

    classdef	go to state 61
    classname	go to state 62



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 63



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 188)

    $default	reduce using rule 188 (name)



state 7

    integer  ->  INTEGER .   (rule 178)

    $default	reduce using rule 178 (integer)



state 8

    floatr  ->  FLOAT .   (rule 180)

    $default	reduce using rule 180 (floatr)



state 9

    symbol  ->  SYMBOL .   (rule 196)

    $default	reduce using rule 196 (symbol)



state 10

    string1  ->  STRING .   (rule 199)

    $default	reduce using rule 199 (string1)



state 11

    ascii  ->  ASCII .   (rule 195)

    $default	reduce using rule 195 (ascii)



state 12

    classname  ->  CLASSNAME .   (rule 189)

    $default	reduce using rule 189 (classname)



state 13

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 144)

    NAME	shift, and go to state 6

    slotdeflist	go to state 64
    slotdef	go to state 65
    name	go to state 66



state 14

    nilobj  ->  NILOBJ .   (rule 193)

    $default	reduce using rule 193 (nilobj)



state 15

    trueobj  ->  TRUEOBJ .   (rule 191)

    $default	reduce using rule 191 (trueobj)



state 16

    falseobj  ->  FALSEOBJ .   (rule 192)

    $default	reduce using rule 192 (falseobj)



state 17

    infobj  ->  INFINITUMOBJ .   (rule 194)

    $default	reduce using rule 194 (infobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 200)

    $default	reduce using rule 200 (pseudovar)



state 19

    pie  ->  PIE .   (rule 182)

    $default	reduce using rule 182 (pie)



state 20

    integer  ->  '-' . INTEGER   (rule 179)
    floatr  ->  '-' . FLOAT   (rule 181)
    floatp  ->  '-' . pie   (rule 187)

    INTEGER	shift, and go to state 67
    FLOAT	shift, and go to state 68
    PIE 	shift, and go to state 19

    pie 	go to state 69



state 21

    expr  ->  '`' . expr   (rule 80)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 71
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 22

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 138)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 74



state 23

    expr1  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 93 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 76
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 24

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 160 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 79
    expr	go to state 80
    exprn	go to state 36
    exprseq	go to state 81
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 82
    funcvardecl	go to state 43
    dictslotdef	go to state 83
    dictslotlist1	go to state 84
    dictslotlist	go to state 85
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 25

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 87
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 26

    expr1  ->  '~' . name   (rule 58)
    expr  ->  '~' . name '=' expr   (rule 84)

    NAME	shift, and go to state 6

    name	go to state 88



state 27

    expr  ->  '#' . mavars '=' expr   (rule 87)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 139)
    listlit  ->  '#' . '[' literallistc ']'   (rule 166)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 167)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 12
    '{' 	shift, and go to state 89
    '[' 	shift, and go to state 90

    mavars	go to state 91
    mavarlist	go to state 92
    name	go to state 93
    classname	go to state 94



state 28

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 29

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 30

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 31

    expr1  ->  msgsend .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 32

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 .   (rule 76)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 88)

    '[' 	shift, and go to state 95

    $default	reduce using rule 76 (expr)



state 33

    expr1  ->  valrangex1 .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 34

    expr  ->  valrangexd .   (rule 77)

    $default	reduce using rule 77 (expr)



state 35

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    exprn  ->  expr .   (rule 90)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 90 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 36

    exprn  ->  exprn . ';' expr   (rule 91)
    exprseq  ->  exprn . optsemi   (rule 92)

    ';' 	shift, and go to state 108

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 109



state 37

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 25

    $default	reduce using rule 40 (funretval)

    funretval	go to state 110



state 38

    expr1  ->  blockliteral .   (rule 54)

    $default	reduce using rule 54 (expr1)



state 39

    expr1  ->  pushname .   (rule 55)

    $default	reduce using rule 55 (expr1)



state 40

    expr1  ->  pushliteral .   (rule 53)

    $default	reduce using rule 53 (expr1)



state 41

    blockliteral  ->  block .   (rule 116)

    $default	reduce using rule 116 (blockliteral)



state 42

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 143)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 111
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 112
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 43

    funcvardecls1  ->  funcvardecl .   (rule 142)

    $default	reduce using rule 142 (funcvardecls1)



state 44

    pushliteral  ->  listlit .   (rule 127)

    $default	reduce using rule 127 (pushliteral)



state 45

    pushliteral  ->  integer .   (rule 118)
    floatp  ->  integer . pie   (rule 185)

    PIE 	shift, and go to state 19

    $default	reduce using rule 118 (pushliteral)

    pie 	go to state 113



state 46

    floatp  ->  floatr .   (rule 183)
    floatp  ->  floatr . pie   (rule 184)

    PIE 	shift, and go to state 19

    $default	reduce using rule 183 (floatp)

    pie 	go to state 114



state 47

    floatp  ->  pie .   (rule 186)

    $default	reduce using rule 186 (floatp)



state 48

    pushliteral  ->  floatp .   (rule 119)

    $default	reduce using rule 119 (pushliteral)



state 49

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name . '=' expr   (rule 83)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 86)
    pushname  ->  name .   (rule 117)

    '=' 	shift, and go to state 115
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 116
    '#' 	shift, and go to state 117

    $default	reduce using rule 117 (pushname)

    blocklist1	go to state 118
    blockliteral	go to state 119
    block	go to state 41



state 50

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 63)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 64)
    expr1  ->  classname . '[' arglistc ']'   (rule 65)
    expr  ->  classname .   (rule 79)

    '[' 	shift, and go to state 120
    '(' 	shift, and go to state 121

    $default	reduce using rule 79 (expr)



state 51

    pushliteral  ->  trueobj .   (rule 123)

    $default	reduce using rule 123 (pushliteral)



state 52

    pushliteral  ->  falseobj .   (rule 124)

    $default	reduce using rule 124 (pushliteral)



state 53

    pushliteral  ->  nilobj .   (rule 125)

    $default	reduce using rule 125 (pushliteral)



state 54

    pushliteral  ->  infobj .   (rule 126)

    $default	reduce using rule 126 (pushliteral)



state 55

    pushliteral  ->  ascii .   (rule 120)

    $default	reduce using rule 120 (pushliteral)



state 56

    pushliteral  ->  symbol .   (rule 122)

    $default	reduce using rule 122 (pushliteral)



state 57

    pushliteral  ->  string .   (rule 121)
    string  ->  string . string1   (rule 198)

    STRING	shift, and go to state 10

    $default	reduce using rule 121 (pushliteral)

    string1	go to state 122



state 58

    string  ->  string1 .   (rule 197)

    $default	reduce using rule 197 (string)



state 59

    expr1  ->  pseudovar .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 60

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 123



state 61

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 62

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 124
    '[' 	shift, and go to state 125

    $default	reduce using rule 13 (superclass)

    superclass	go to state 126



state 63

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 64

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 144)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 153)

    ';' 	shift, and go to state 127
    ',' 	shift, and go to state 128



state 65

    slotdeflist  ->  slotdef .   (rule 152)

    $default	reduce using rule 152 (slotdeflist)



state 66

    slotdef  ->  name .   (rule 154)
    slotdef  ->  name . '=' slotliteral   (rule 155)

    '=' 	shift, and go to state 129

    $default	reduce using rule 154 (slotdef)



state 67

    integer  ->  '-' INTEGER .   (rule 179)

    $default	reduce using rule 179 (integer)



state 68

    floatr  ->  '-' FLOAT .   (rule 181)

    $default	reduce using rule 181 (floatr)



state 69

    floatp  ->  '-' pie .   (rule 187)

    $default	reduce using rule 187 (floatp)



state 70

    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 160 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 79
    expr	go to state 80
    exprn	go to state 36
    exprseq	go to state 81
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 83
    dictslotlist1	go to state 84
    dictslotlist	go to state 85
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 71

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  '`' expr .   (rule 80)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)


    $default	reduce using rule 80 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 72

    argdecls  ->  ARG . slotdeflist ';'   (rule 146)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 147)

    NAME	shift, and go to state 6

    $default	reduce using rule 150 (slotdeflist0)

    slotdeflist0	go to state 130
    slotdeflist	go to state 131
    slotdef	go to state 65
    name	go to state 66



state 73

    argdecls  ->  '|' . slotdeflist '|'   (rule 148)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 149)

    NAME	shift, and go to state 6

    $default	reduce using rule 150 (slotdeflist0)

    slotdeflist0	go to state 132
    slotdeflist	go to state 133
    slotdef	go to state 65
    name	go to state 66



state 74

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 138)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 134



state 75

    arglist1  ->  exprseq .   (rule 95)

    $default	reduce using rule 95 (arglist1)



state 76

    expr1  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 135



state 77

    arglistc  ->  arglist1 . optcomma   (rule 94)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    ',' 	shift, and go to state 136

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 137



state 78

    keybinop  ->  KEYBINOP .   (rule 210)

    $default	reduce using rule 210 (keybinop)



state 79

    expr1  ->  '(' valrange2 . ')'   (rule 60)

    ')' 	shift, and go to state 138



state 80

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    exprn  ->  expr .   (rule 90)
    dictslotdef  ->  expr . ':' expr   (rule 156)

    ':' 	shift, and go to state 139
    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 90 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 81

    expr1  ->  '(' exprseq . ')'   (rule 57)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 74)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 75)

    DOTDOT	shift, and go to state 140
    ',' 	shift, and go to state 141
    ')' 	shift, and go to state 142



state 82

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 143)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 143
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 112
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 83

    dictslotlist1  ->  dictslotdef .   (rule 158)

    $default	reduce using rule 158 (dictslotlist1)



state 84

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 159)
    dictslotlist  ->  dictslotlist1 .   (rule 161)

    ',' 	shift, and go to state 144

    $default	reduce using rule 161 (dictslotlist)



state 85

    expr1  ->  '(' dictslotlist . ')'   (rule 61)

    ')' 	shift, and go to state 145



state 86

    dictslotdef  ->  keybinop . expr   (rule 157)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 146
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 87

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105
    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 148
    binop	go to state 106
    keybinop	go to state 107



state 88

    expr1  ->  '~' name .   (rule 58)
    expr  ->  '~' name . '=' expr   (rule 84)

    '=' 	shift, and go to state 149

    $default	reduce using rule 58 (expr1)



state 89

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 139)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 150



state 90

    listlit  ->  '#' '[' . literallistc ']'   (rule 166)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 170 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 154
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 91

    expr  ->  '#' mavars . '=' expr   (rule 87)

    '=' 	shift, and go to state 166



state 92

    mavars  ->  mavarlist .   (rule 102)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 103)
    mavarlist  ->  mavarlist . ',' name   (rule 105)

    ELLIPSIS	shift, and go to state 167
    ',' 	shift, and go to state 168

    $default	reduce using rule 102 (mavars)



state 93

    mavarlist  ->  name .   (rule 104)

    $default	reduce using rule 104 (mavarlist)



state 94

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 167)

    '[' 	shift, and go to state 169



state 95

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 170
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 171
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 96

    binop  ->  BINOP .   (rule 201)

    $default	reduce using rule 201 (binop)



state 97

    binop  ->  '-' .   (rule 206)

    $default	reduce using rule 206 (binop)



state 98

    binop  ->  '<' .   (rule 204)

    $default	reduce using rule 204 (binop)



state 99

    binop  ->  '>' .   (rule 205)

    $default	reduce using rule 205 (binop)



state 100

    binop  ->  '*' .   (rule 207)

    $default	reduce using rule 207 (binop)



state 101

    binop  ->  '+' .   (rule 208)

    $default	reduce using rule 208 (binop)



state 102

    binop  ->  '|' .   (rule 209)

    $default	reduce using rule 209 (binop)



state 103

    binop  ->  READWRITEVAR .   (rule 202)

    $default	reduce using rule 202 (binop)



state 104

    binop  ->  DOUBLEEQUAL .   (rule 203)

    $default	reduce using rule 203 (binop)



state 105

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . name blocklist   (rule 52)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 78)
    expr  ->  expr '.' . name '=' expr   (rule 85)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 89)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 172
    '(' 	shift, and go to state 173

    name	go to state 174



state 106

    expr  ->  expr binop . expr   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 175
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 107

    expr  ->  expr keybinop . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 176
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 108

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 91)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 177
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 109

    exprseq  ->  exprn optsemi .   (rule 92)

    $default	reduce using rule 92 (exprseq)



state 110

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 111

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 112

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 143)

    $default	reduce using rule 143 (funcvardecls1)



state 113

    floatp  ->  integer pie .   (rule 185)

    $default	reduce using rule 185 (floatp)



state 114

    floatp  ->  floatr pie .   (rule 184)

    $default	reduce using rule 184 (floatp)



state 115

    expr  ->  name '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 178
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 116

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 179
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 117

    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 139)

    '{' 	shift, and go to state 89



state 118

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 180
    block	go to state 41



state 119

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 120

    expr1  ->  classname '[' . arglistc ']'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 93 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 181
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 121

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 63)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 182
    keyarglist1	go to state 183
    keyarg	go to state 184
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 185



state 122

    string  ->  string string1 .   (rule 198)

    $default	reduce using rule 198 (string)



state 123

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 186



state 124

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 12

    classname	go to state 187



state 125

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 188
    name	go to state 189



state 126

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 190



state 127

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 144)

    $default	reduce using rule 144 (funcvardecl)



state 128

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 153)

    NAME	shift, and go to state 6

    slotdef	go to state 191
    name	go to state 66



state 129

    slotdef  ->  name '=' . slotliteral   (rule 155)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 192

    slotliteral	go to state 193
    listlit	go to state 194
    integer	go to state 195
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 196
    trueobj	go to state 197
    falseobj	go to state 198
    nilobj	go to state 199
    infobj	go to state 200
    ascii	go to state 201
    symbol	go to state 202
    string	go to state 203
    string1	go to state 58



state 130

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 147)

    ELLIPSIS	shift, and go to state 204



state 131

    argdecls  ->  ARG slotdeflist . ';'   (rule 146)
    slotdeflist0  ->  slotdeflist .   (rule 151)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 153)

    ';' 	shift, and go to state 205
    ',' 	shift, and go to state 128

    $default	reduce using rule 151 (slotdeflist0)



state 132

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 149)

    ELLIPSIS	shift, and go to state 206



state 133

    argdecls  ->  '|' slotdeflist . '|'   (rule 148)
    slotdeflist0  ->  slotdeflist .   (rule 151)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 153)

    '|' 	shift, and go to state 207
    ',' 	shift, and go to state 128

    $default	reduce using rule 151 (slotdeflist0)



state 134

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 138)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 208
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 209
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 135

    expr1  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 136

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 210
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 137

    arglistc  ->  arglist1 optcomma .   (rule 94)

    $default	reduce using rule 94 (arglistc)



state 138

    expr1  ->  '(' valrange2 ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 139

    dictslotdef  ->  expr ':' . expr   (rule 156)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 211
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 140

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 74)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 212
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 141

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 213
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 142

    expr1  ->  '(' exprseq ')' .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 143

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 214



state 144

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 159)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 215
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 216
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 145

    expr1  ->  '(' dictslotlist ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 146

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    dictslotdef  ->  keybinop expr .   (rule 157)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 157 (dictslotdef)

    binop	go to state 106
    keybinop	go to state 107



state 147

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 148

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 149

    expr  ->  '~' name '=' . expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 217
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 150

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 139)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 218



state 151

    listlit2  ->  '[' . literallistc ']'   (rule 168)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 170 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 219
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 152

    literallist1  ->  listliteral .   (rule 172)

    $default	reduce using rule 172 (literallist1)



state 153

    listliteral  ->  listlit2 .   (rule 137)

    $default	reduce using rule 137 (listliteral)



state 154

    listlit  ->  '#' '[' literallistc . ']'   (rule 166)

    ']' 	shift, and go to state 220



state 155

    literallistc  ->  literallist1 . optcomma   (rule 171)
    literallist1  ->  literallist1 . ',' listliteral   (rule 173)

    ',' 	shift, and go to state 221

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 222



state 156

    listliteral  ->  integer .   (rule 128)
    floatp  ->  integer . pie   (rule 185)

    PIE 	shift, and go to state 19

    $default	reduce using rule 128 (listliteral)

    pie 	go to state 113



state 157

    listliteral  ->  floatp .   (rule 129)

    $default	reduce using rule 129 (listliteral)



state 158

    listlit2  ->  classname . '[' literallistc ']'   (rule 169)

    '[' 	shift, and go to state 223



state 159

    listliteral  ->  trueobj .   (rule 133)

    $default	reduce using rule 133 (listliteral)



state 160

    listliteral  ->  falseobj .   (rule 134)

    $default	reduce using rule 134 (listliteral)



state 161

    listliteral  ->  nilobj .   (rule 135)

    $default	reduce using rule 135 (listliteral)



state 162

    listliteral  ->  infobj .   (rule 136)

    $default	reduce using rule 136 (listliteral)



state 163

    listliteral  ->  ascii .   (rule 130)

    $default	reduce using rule 130 (listliteral)



state 164

    listliteral  ->  symbol .   (rule 132)

    $default	reduce using rule 132 (listliteral)



state 165

    listliteral  ->  string .   (rule 131)
    string  ->  string . string1   (rule 198)

    STRING	shift, and go to state 10

    $default	reduce using rule 131 (listliteral)

    string1	go to state 122



state 166

    expr  ->  '#' mavars '=' . expr   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 224
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 167

    mavars  ->  mavarlist ELLIPSIS . name   (rule 103)

    NAME	shift, and go to state 6

    name	go to state 225



state 168

    mavarlist  ->  mavarlist ',' . name   (rule 105)

    NAME	shift, and go to state 6

    name	go to state 226



state 169

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 167)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 170 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 227
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 170

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 228
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 171

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 66)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 88)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    DOTDOT	shift, and go to state 229
    ']' 	shift, and go to state 230
    ',' 	shift, and go to state 231



state 172

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 78)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 232
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 233
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 173

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 234
    keyarglist1	go to state 235
    keyarg	go to state 184
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 185



state 174

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' name . blocklist   (rule 52)
    expr  ->  expr '.' name . '=' expr   (rule 85)

    '=' 	shift, and go to state 236
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 237
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 239
    blockliteral	go to state 119
    block	go to state 41



state 175

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr binop expr .   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    '.' 	shift, and go to state 105

    $default	reduce using rule 81 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 176

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr keybinop expr .   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    '.' 	shift, and go to state 105

    $default	reduce using rule 82 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 177

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    exprn  ->  exprn ';' expr .   (rule 91)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 91 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 178

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  name '=' expr .   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 83 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 179

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 86)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    ',' 	shift, and go to state 240

    $default	reduce using rule 100 (optkeyarglist)

    optkeyarglist	go to state 241



state 180

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 181

    expr1  ->  classname '[' arglistc . ']'   (rule 65)

    ']' 	shift, and go to state 242



state 182

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 64)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    ',' 	shift, and go to state 240

    $default	reduce using rule 100 (optkeyarglist)

    optkeyarglist	go to state 243



state 183

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 63)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 98)

    ',' 	shift, and go to state 244
    ')' 	shift, and go to state 245



state 184

    keyarglist1  ->  keyarg .   (rule 97)

    $default	reduce using rule 97 (keyarglist1)



state 185

    keyarg  ->  keybinop . exprseq   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 246
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 186

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 247
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 248

    methoddef	go to state 249
    name	go to state 250
    binop	go to state 251



state 187

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 188

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 252



state 189

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 190

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 253



state 191

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 153)

    $default	reduce using rule 153 (slotdeflist)



state 192

    listlit  ->  '#' . '[' literallistc ']'   (rule 166)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 167)

    CLASSNAME	shift, and go to state 12
    '[' 	shift, and go to state 90

    classname	go to state 94



state 193

    slotdef  ->  name '=' slotliteral .   (rule 155)

    $default	reduce using rule 155 (slotdef)



state 194

    slotliteral  ->  listlit .   (rule 115)

    $default	reduce using rule 115 (slotliteral)



state 195

    slotliteral  ->  integer .   (rule 106)
    floatp  ->  integer . pie   (rule 185)

    PIE 	shift, and go to state 19

    $default	reduce using rule 106 (slotliteral)

    pie 	go to state 113



state 196

    slotliteral  ->  floatp .   (rule 107)

    $default	reduce using rule 107 (slotliteral)



state 197

    slotliteral  ->  trueobj .   (rule 111)

    $default	reduce using rule 111 (slotliteral)



state 198

    slotliteral  ->  falseobj .   (rule 112)

    $default	reduce using rule 112 (slotliteral)



state 199

    slotliteral  ->  nilobj .   (rule 113)

    $default	reduce using rule 113 (slotliteral)



state 200

    slotliteral  ->  infobj .   (rule 114)

    $default	reduce using rule 114 (slotliteral)



state 201

    slotliteral  ->  ascii .   (rule 108)

    $default	reduce using rule 108 (slotliteral)



state 202

    slotliteral  ->  symbol .   (rule 110)

    $default	reduce using rule 110 (slotliteral)



state 203

    slotliteral  ->  string .   (rule 109)
    string  ->  string . string1   (rule 198)

    STRING	shift, and go to state 10

    $default	reduce using rule 109 (slotliteral)

    string1	go to state 122



state 204

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 147)

    NAME	shift, and go to state 6

    name	go to state 254



state 205

    argdecls  ->  ARG slotdeflist ';' .   (rule 146)

    $default	reduce using rule 146 (argdecls)



state 206

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 149)

    NAME	shift, and go to state 6

    name	go to state 255



state 207

    argdecls  ->  '|' slotdeflist '|' .   (rule 148)

    $default	reduce using rule 148 (argdecls)



state 208

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 138)

    '}' 	shift, and go to state 256



state 209

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 141)

    $default	reduce using rule 141 (funcvardecls)



state 210

    arglist1  ->  arglist1 ',' exprseq .   (rule 96)

    $default	reduce using rule 96 (arglist1)



state 211

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    dictslotdef  ->  expr ':' expr .   (rule 156)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 156 (dictslotdef)

    binop	go to state 106
    keybinop	go to state 107



state 212

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 74)

    $default	reduce using rule 74 (valrange2)



state 213

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 75)

    DOTDOT	shift, and go to state 257



state 214

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 215

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    dictslotdef  ->  expr . ':' expr   (rule 156)

    ':' 	shift, and go to state 139
    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    binop	go to state 106
    keybinop	go to state 107



state 216

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 159)

    $default	reduce using rule 159 (dictslotlist1)



state 217

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  '~' name '=' expr .   (rule 84)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 84 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 218

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 139)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 258
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 209
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 219

    listlit2  ->  '[' literallistc . ']'   (rule 168)

    ']' 	shift, and go to state 259



state 220

    listlit  ->  '#' '[' literallistc ']' .   (rule 166)

    $default	reduce using rule 166 (listlit)



state 221

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 173)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 260
    listlit2	go to state 153
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 222

    literallistc  ->  literallist1 optcomma .   (rule 171)

    $default	reduce using rule 171 (literallistc)



state 223

    listlit2  ->  classname '[' . literallistc ']'   (rule 169)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 170 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 261
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 224

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  '#' mavars '=' expr .   (rule 87)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 87 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 225

    mavars  ->  mavarlist ELLIPSIS name .   (rule 103)

    $default	reduce using rule 103 (mavars)



state 226

    mavarlist  ->  mavarlist ',' name .   (rule 105)

    $default	reduce using rule 105 (mavarlist)



state 227

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 167)

    ']' 	shift, and go to state 262



state 228

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 69)

    ']' 	shift, and go to state 263



state 229

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 264
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 265
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 230

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 66)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 88)

    '=' 	shift, and go to state 266

    $default	reduce using rule 66 (expr1)



state 231

    arglist1  ->  arglist1 ',' . exprseq   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 210
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 232

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 267
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 233

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 78)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 89)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    DOTDOT	shift, and go to state 268
    ']' 	shift, and go to state 269
    ',' 	shift, and go to state 231



state 234

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 50)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    ',' 	shift, and go to state 240

    $default	reduce using rule 100 (optkeyarglist)

    optkeyarglist	go to state 270



state 235

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 48)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 98)

    ',' 	shift, and go to state 244
    ')' 	shift, and go to state 271



state 236

    expr  ->  expr '.' name '=' . expr   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 272
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 237

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 273
    keyarglist1	go to state 274
    keyarg	go to state 184
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 185



state 238

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 180
    block	go to state 41



state 239

    msgsend  ->  expr '.' name blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 240

    arglist1  ->  arglist1 ',' . exprseq   (rule 96)
    optkeyarglist  ->  ',' . keyarglist1   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 210
    keyarglist1	go to state 275
    keyarg	go to state 184
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 185



state 241

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 86)

    ')' 	shift, and go to state 276



state 242

    expr1  ->  classname '[' arglistc ']' .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 243

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 64)

    ')' 	shift, and go to state 277



state 244

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 98)

    KEYBINOP	shift, and go to state 78

    keyarg	go to state 278
    keybinop	go to state 185



state 245

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 246

    keyarg  ->  keybinop exprseq .   (rule 99)

    $default	reduce using rule 99 (keyarg)



state 247

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 207)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104

    $default	reduce using rule 207 (binop)

    name	go to state 279
    binop	go to state 280



state 248

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 249

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 250

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 281



state 251

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 282



state 252

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 124

    $default	reduce using rule 13 (superclass)

    superclass	go to state 283



state 253

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 284
    CLASSVAR	shift, and go to state 285

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 286
    methods	go to state 287



state 254

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 147)

    ';' 	shift, and go to state 288



state 255

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 149)

    '|' 	shift, and go to state 289



state 256

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 138)

    $default	reduce using rule 138 (block)



state 257

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 290
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 258

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 139)

    '}' 	shift, and go to state 291



state 259

    listlit2  ->  '[' literallistc ']' .   (rule 168)

    $default	reduce using rule 168 (listlit2)



state 260

    literallist1  ->  literallist1 ',' listliteral .   (rule 173)

    $default	reduce using rule 173 (literallist1)



state 261

    listlit2  ->  classname '[' literallistc . ']'   (rule 169)

    ']' 	shift, and go to state 292



state 262

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 167)

    $default	reduce using rule 167 (listlit)



state 263

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 69)

    $default	reduce using rule 69 (valrangex1)



state 264

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 68)

    $default	reduce using rule 68 (valrangex1)



state 265

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 70)

    ']' 	shift, and go to state 293



state 266

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 294
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 267

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 72)

    ']' 	shift, and go to state 295



state 268

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 71)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 73)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 296
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 297
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 269

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 78)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 89)

    '=' 	shift, and go to state 298

    $default	reduce using rule 78 (expr)



state 270

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 50)

    ')' 	shift, and go to state 299



state 271

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 48)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 300
    blockliteral	go to state 119
    block	go to state 41



state 272

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr '.' name '=' expr .   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 85 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 273

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 96)

    ',' 	shift, and go to state 240

    $default	reduce using rule 100 (optkeyarglist)

    optkeyarglist	go to state 301



state 274

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 98)

    ',' 	shift, and go to state 244
    ')' 	shift, and go to state 302



state 275

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 98)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 101)

    ',' 	shift, and go to state 244

    $default	reduce using rule 101 (optkeyarglist)



state 276

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 86)

    '=' 	shift, and go to state 303
    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 304
    blockliteral	go to state 119
    block	go to state 41



state 277

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 278

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 98)

    $default	reduce using rule 98 (keyarglist1)



state 279

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 305



state 280

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 306



state 281

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 307



state 282

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 308



state 283

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 309



state 284

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 310
    '>' 	shift, and go to state 311
    READWRITEVAR	shift, and go to state 312

    $default	reduce using rule 174 (rwspec)

    rwslotdeflist	go to state 313
    rwslotdef	go to state 314
    rwspec	go to state 315



state 285

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 310
    '>' 	shift, and go to state 311
    READWRITEVAR	shift, and go to state 312

    $default	reduce using rule 174 (rwspec)

    rwslotdeflist	go to state 316
    rwslotdef	go to state 314
    rwspec	go to state 315



state 286

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 287

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 247
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 317

    methoddef	go to state 249
    name	go to state 250
    binop	go to state 251



state 288

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 147)

    $default	reduce using rule 147 (argdecls)



state 289

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 149)

    $default	reduce using rule 149 (argdecls)



state 290

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 75)

    $default	reduce using rule 75 (valrange2)



state 291

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 139)

    $default	reduce using rule 139 (block)



state 292

    listlit2  ->  classname '[' literallistc ']' .   (rule 169)

    $default	reduce using rule 169 (listlit2)



state 293

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 70)

    $default	reduce using rule 70 (valrangex1)



state 294

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 88)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 88 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 295

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 72)

    $default	reduce using rule 72 (valrangexd)



state 296

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 71)

    $default	reduce using rule 71 (valrangexd)



state 297

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 73)

    ']' 	shift, and go to state 318



state 298

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 319
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 299

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 50)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 320
    blockliteral	go to state 119
    block	go to state 41



state 300

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 301

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 321



state 302

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 49)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 322
    blockliteral	go to state 119
    block	go to state 41



state 303

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 323
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 304

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 305

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 324



state 306

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 145 (argdecls)

    argdecls	go to state 325



state 307

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 326



state 308

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 327



state 309

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 328



state 310

    rwspec  ->  '<' .   (rule 175)

    $default	reduce using rule 175 (rwspec)



state 311

    rwspec  ->  '>' .   (rule 177)

    $default	reduce using rule 177 (rwspec)



state 312

    rwspec  ->  READWRITEVAR .   (rule 176)

    $default	reduce using rule 176 (rwspec)



state 313

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 163)

    ';' 	shift, and go to state 329
    ',' 	shift, and go to state 330



state 314

    rwslotdeflist  ->  rwslotdef .   (rule 162)

    $default	reduce using rule 162 (rwslotdeflist)



state 315

    rwslotdef  ->  rwspec . name   (rule 164)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 165)

    NAME	shift, and go to state 6

    name	go to state 331



state 316

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 163)

    ';' 	shift, and go to state 332
    ',' 	shift, and go to state 330



state 317

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 318

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 73)

    $default	reduce using rule 73 (valrangexd)



state 319

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 89 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 320

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 321

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 238
    blocklist	go to state 333
    blockliteral	go to state 119
    block	go to state 41



state 322

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 323

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 86 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 324

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 334



state 325

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 140 (funcvardecls)

    funcvardecls	go to state 335



state 326

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    PRIMITIVENAME	shift, and go to state 336
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 337
    funcvardecl	go to state 209
    primname	go to state 338



state 327

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    PRIMITIVENAME	shift, and go to state 336
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 339
    funcvardecl	go to state 209
    primname	go to state 338



state 328

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 284
    CLASSVAR	shift, and go to state 285

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 286
    methods	go to state 340



state 329

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 330

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 163)

    '<' 	shift, and go to state 310
    '>' 	shift, and go to state 311
    READWRITEVAR	shift, and go to state 312

    $default	reduce using rule 174 (rwspec)

    rwslotdef	go to state 341
    rwspec	go to state 315



state 331

    rwslotdef  ->  rwspec name .   (rule 164)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 165)

    '=' 	shift, and go to state 342

    $default	reduce using rule 164 (rwslotdef)



state 332

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 333

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 334

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    PRIMITIVENAME	shift, and go to state 336
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 343
    funcvardecl	go to state 209
    primname	go to state 338



state 335

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 141)

    PRIMITIVENAME	shift, and go to state 336
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 344
    funcvardecl	go to state 209
    primname	go to state 338



state 336

    primname  ->  PRIMITIVENAME .   (rule 190)

    $default	reduce using rule 190 (primname)



state 337

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 345
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 346
    retval	go to state 347
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 348
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 338

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 349



state 339

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 345
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 350
    retval	go to state 347
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 348
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 340

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 247
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 351

    methoddef	go to state 249
    name	go to state 250
    binop	go to state 251



state 341

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 163)

    $default	reduce using rule 163 (rwslotdeflist)



state 342

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 165)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 192

    slotliteral	go to state 352
    listlit	go to state 194
    integer	go to state 195
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 196
    trueobj	go to state 197
    falseobj	go to state 198
    nilobj	go to state 199
    infobj	go to state 200
    ascii	go to state 201
    symbol	go to state 202
    string	go to state 203
    string1	go to state 58



state 343

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 345
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 353
    retval	go to state 347
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 348
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 344

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 345
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 354
    retval	go to state 347
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 348
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 345

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 355
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 346

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 356



state 347

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 348

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 345

    $default	reduce using rule 38 (retval)

    retval	go to state 357



state 349

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 350

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 358



state 351

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 352

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 165)

    $default	reduce using rule 165 (rwslotdef)



state 353

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 359



state 354

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 360



state 355

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 78)
    expr  ->  expr . binop expr   (rule 81)
    expr  ->  expr . keybinop expr   (rule 82)
    expr  ->  expr . '.' name '=' expr   (rule 85)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 89)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105
    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 361
    binop	go to state 106
    keybinop	go to state 107



state 356

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 357

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 358

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 359

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 360

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 361

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 362

    $   	go to state 363



state 363

    $   	go to state 364



state 364

    $default	accept
