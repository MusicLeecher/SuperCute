

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 78 between rule 93 and token BINOP resolved as reduce.
Conflict in state 78 between rule 93 and token KEYBINOP resolved as reduce.
Conflict in state 78 between rule 93 and token '-' resolved as reduce.
Conflict in state 78 between rule 93 and token '<' resolved as reduce.
Conflict in state 78 between rule 93 and token '>' resolved as reduce.
Conflict in state 78 between rule 93 and token '*' resolved as reduce.
Conflict in state 78 between rule 93 and token '+' resolved as reduce.
Conflict in state 78 between rule 93 and token '|' resolved as reduce.
Conflict in state 78 between rule 93 and token READWRITEVAR resolved as reduce.
Conflict in state 78 between rule 93 and token '.' resolved as reduce.
Conflict in state 184 between rule 95 and token BINOP resolved as shift.
Conflict in state 184 between rule 95 and token KEYBINOP resolved as shift.
Conflict in state 184 between rule 95 and token '-' resolved as shift.
Conflict in state 184 between rule 95 and token '<' resolved as shift.
Conflict in state 184 between rule 95 and token '>' resolved as shift.
Conflict in state 184 between rule 95 and token '*' resolved as shift.
Conflict in state 184 between rule 95 and token '+' resolved as shift.
Conflict in state 184 between rule 95 and token '|' resolved as shift.
Conflict in state 184 between rule 95 and token READWRITEVAR resolved as shift.
Conflict in state 184 between rule 95 and token '.' resolved as shift.
Conflict in state 228 between rule 96 and token BINOP resolved as shift.
Conflict in state 228 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 228 between rule 96 and token '-' resolved as shift.
Conflict in state 228 between rule 96 and token '<' resolved as shift.
Conflict in state 228 between rule 96 and token '>' resolved as shift.
Conflict in state 228 between rule 96 and token '*' resolved as shift.
Conflict in state 228 between rule 96 and token '+' resolved as shift.
Conflict in state 228 between rule 96 and token '|' resolved as shift.
Conflict in state 228 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 228 between rule 96 and token '.' resolved as shift.
Conflict in state 234 between rule 99 and token BINOP resolved as shift.
Conflict in state 234 between rule 99 and token KEYBINOP resolved as shift.
Conflict in state 234 between rule 99 and token '-' resolved as shift.
Conflict in state 234 between rule 99 and token '<' resolved as shift.
Conflict in state 234 between rule 99 and token '>' resolved as shift.
Conflict in state 234 between rule 99 and token '*' resolved as shift.
Conflict in state 234 between rule 99 and token '+' resolved as shift.
Conflict in state 234 between rule 99 and token '|' resolved as shift.
Conflict in state 234 between rule 99 and token READWRITEVAR resolved as shift.
Conflict in state 234 between rule 99 and token '.' resolved as shift.
Conflict in state 255 between rule 94 and token BINOP resolved as reduce.
Conflict in state 255 between rule 94 and token KEYBINOP resolved as reduce.
Conflict in state 255 between rule 94 and token '-' resolved as reduce.
Conflict in state 255 between rule 94 and token '<' resolved as reduce.
Conflict in state 255 between rule 94 and token '>' resolved as reduce.
Conflict in state 255 between rule 94 and token '*' resolved as reduce.
Conflict in state 255 between rule 94 and token '+' resolved as reduce.
Conflict in state 255 between rule 94 and token '|' resolved as reduce.
Conflict in state 255 between rule 94 and token READWRITEVAR resolved as reduce.
Conflict in state 255 between rule 94 and token '.' resolved as shift.
Conflict in state 296 between rule 97 and token BINOP resolved as shift.
Conflict in state 296 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 296 between rule 97 and token '-' resolved as shift.
Conflict in state 296 between rule 97 and token '<' resolved as shift.
Conflict in state 296 between rule 97 and token '>' resolved as shift.
Conflict in state 296 between rule 97 and token '*' resolved as shift.
Conflict in state 296 between rule 97 and token '+' resolved as shift.
Conflict in state 296 between rule 97 and token '|' resolved as shift.
Conflict in state 296 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 296 between rule 97 and token '.' resolved as shift.
Conflict in state 325 between rule 100 and token BINOP resolved as shift.
Conflict in state 325 between rule 100 and token KEYBINOP resolved as shift.
Conflict in state 325 between rule 100 and token '-' resolved as shift.
Conflict in state 325 between rule 100 and token '<' resolved as shift.
Conflict in state 325 between rule 100 and token '>' resolved as shift.
Conflict in state 325 between rule 100 and token '*' resolved as shift.
Conflict in state 325 between rule 100 and token '+' resolved as shift.
Conflict in state 325 between rule 100 and token '|' resolved as shift.
Conflict in state 325 between rule 100 and token READWRITEVAR resolved as shift.
Conflict in state 325 between rule 100 and token '.' resolved as shift.
Conflict in state 353 between rule 77 and token BINOP resolved as shift.
Conflict in state 353 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 353 between rule 77 and token '-' resolved as shift.
Conflict in state 353 between rule 77 and token '<' resolved as shift.
Conflict in state 353 between rule 77 and token '>' resolved as shift.
Conflict in state 353 between rule 77 and token '*' resolved as shift.
Conflict in state 353 between rule 77 and token '+' resolved as shift.
Conflict in state 353 between rule 77 and token '|' resolved as shift.
Conflict in state 353 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 353 between rule 77 and token '.' resolved as shift.
Conflict in state 354 between rule 76 and token BINOP resolved as shift.
Conflict in state 354 between rule 76 and token KEYBINOP resolved as shift.
Conflict in state 354 between rule 76 and token '-' resolved as shift.
Conflict in state 354 between rule 76 and token '<' resolved as shift.
Conflict in state 354 between rule 76 and token '>' resolved as shift.
Conflict in state 354 between rule 76 and token '*' resolved as shift.
Conflict in state 354 between rule 76 and token '+' resolved as shift.
Conflict in state 354 between rule 76 and token '|' resolved as shift.
Conflict in state 354 between rule 76 and token READWRITEVAR resolved as shift.
Conflict in state 354 between rule 76 and token '.' resolved as shift.
Conflict in state 359 between rule 101 and token BINOP resolved as shift.
Conflict in state 359 between rule 101 and token KEYBINOP resolved as shift.
Conflict in state 359 between rule 101 and token '-' resolved as shift.
Conflict in state 359 between rule 101 and token '<' resolved as shift.
Conflict in state 359 between rule 101 and token '>' resolved as shift.
Conflict in state 359 between rule 101 and token '*' resolved as shift.
Conflict in state 359 between rule 101 and token '+' resolved as shift.
Conflict in state 359 between rule 101 and token '|' resolved as shift.
Conflict in state 359 between rule 101 and token READWRITEVAR resolved as shift.
Conflict in state 359 between rule 101 and token '.' resolved as shift.
Conflict in state 364 between rule 98 and token BINOP resolved as shift.
Conflict in state 364 between rule 98 and token KEYBINOP resolved as shift.
Conflict in state 364 between rule 98 and token '-' resolved as shift.
Conflict in state 364 between rule 98 and token '<' resolved as shift.
Conflict in state 364 between rule 98 and token '>' resolved as shift.
Conflict in state 364 between rule 98 and token '*' resolved as shift.
Conflict in state 364 between rule 98 and token '+' resolved as shift.
Conflict in state 364 between rule 98 and token '|' resolved as shift.
Conflict in state 364 between rule 98 and token READWRITEVAR resolved as shift.
Conflict in state 364 between rule 98 and token '.' resolved as shift.
Conflict in state 374 between rule 78 and token BINOP resolved as shift.
Conflict in state 374 between rule 78 and token KEYBINOP resolved as shift.
Conflict in state 374 between rule 78 and token '-' resolved as shift.
Conflict in state 374 between rule 78 and token '<' resolved as shift.
Conflict in state 374 between rule 78 and token '>' resolved as shift.
Conflict in state 374 between rule 78 and token '*' resolved as shift.
Conflict in state 374 between rule 78 and token '+' resolved as shift.
Conflict in state 374 between rule 78 and token '|' resolved as shift.
Conflict in state 374 between rule 78 and token READWRITEVAR resolved as shift.
Conflict in state 374 between rule 78 and token '.' resolved as shift.
Conflict in state 375 between rule 83 and token BINOP resolved as shift.
Conflict in state 375 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 375 between rule 83 and token '-' resolved as shift.
Conflict in state 375 between rule 83 and token '<' resolved as shift.
Conflict in state 375 between rule 83 and token '>' resolved as shift.
Conflict in state 375 between rule 83 and token '*' resolved as shift.
Conflict in state 375 between rule 83 and token '+' resolved as shift.
Conflict in state 375 between rule 83 and token '|' resolved as shift.
Conflict in state 375 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 375 between rule 83 and token '.' resolved as shift.
Conflict in state 376 between rule 82 and token BINOP resolved as shift.
Conflict in state 376 between rule 82 and token KEYBINOP resolved as shift.
Conflict in state 376 between rule 82 and token '-' resolved as shift.
Conflict in state 376 between rule 82 and token '<' resolved as shift.
Conflict in state 376 between rule 82 and token '>' resolved as shift.
Conflict in state 376 between rule 82 and token '*' resolved as shift.
Conflict in state 376 between rule 82 and token '+' resolved as shift.
Conflict in state 376 between rule 82 and token '|' resolved as shift.
Conflict in state 376 between rule 82 and token READWRITEVAR resolved as shift.
Conflict in state 376 between rule 82 and token '.' resolved as shift.
Conflict in state 388 between rule 84 and token BINOP resolved as shift.
Conflict in state 388 between rule 84 and token KEYBINOP resolved as shift.
Conflict in state 388 between rule 84 and token '-' resolved as shift.
Conflict in state 388 between rule 84 and token '<' resolved as shift.
Conflict in state 388 between rule 84 and token '>' resolved as shift.
Conflict in state 388 between rule 84 and token '*' resolved as shift.
Conflict in state 388 between rule 84 and token '+' resolved as shift.
Conflict in state 388 between rule 84 and token '|' resolved as shift.
Conflict in state 388 between rule 84 and token READWRITEVAR resolved as shift.
Conflict in state 388 between rule 84 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> name '(' arglistv1 optkeyarglist ')'
rule 49   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 51   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' '(' arglistv1 optkeyarglist ')'
rule 53   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 54   msgsend -> expr '.' name '(' arglistv1 optkeyarglist ')'
rule 55   msgsend -> expr '.' name blocklist
rule 56   expr1 -> pushliteral
rule 57   expr1 -> blockliteral
rule 58   expr1 -> pushname
rule 59   expr1 -> curryarg
rule 60   expr1 -> msgsend
rule 61   expr1 -> '(' exprseq ')'
rule 62   expr1 -> '~' name
rule 63   expr1 -> '[' arrayelems ']'
rule 64   expr1 -> '(' valrange2 ')'
rule 65   expr1 -> '(' dictslotlist ')'
rule 66   expr1 -> pseudovar
rule 67   expr1 -> classname '(' keyarglist1 ')'
rule 68   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 69   expr1 -> classname '(' arglistv1 optkeyarglist ')'
rule 70   expr1 -> classname '[' arrayelems ']'
rule 71   expr1 -> expr1 '[' arglist1 ']'
rule 72   expr1 -> valrangex1
rule 73   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 74   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 75   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 76   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 77   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 78   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 79   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 80   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 81   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 82   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 83   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 84   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 85   valrange2 -> DOTDOT exprseq
rule 86   valrange2 -> exprseq DOTDOT exprseq
rule 87   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 88   expr -> expr1
rule 89   expr -> valrangexd
rule 90   expr -> valrangeassign
rule 91   expr -> expr '.' '[' arglist1 ']'
rule 92   expr -> classname
rule 93   expr -> '`' expr
rule 94   expr -> expr binop2 adverb expr
rule 95   expr -> name '=' expr
rule 96   expr -> '~' name '=' expr
rule 97   expr -> expr '.' name '=' expr
rule 98   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 99   expr -> '#' mavars '=' expr
rule 100  expr -> expr1 '[' arglist1 ']' '=' expr
rule 101  expr -> expr '.' '[' arglist1 ']' '=' expr
rule 102  adverb ->		/* empty */
rule 103  adverb -> '.' name
rule 104  adverb -> '.' integer
rule 105  adverb -> '.' '(' exprseq ')'
rule 106  exprn -> expr
rule 107  exprn -> exprn ';' expr
rule 108  exprseq -> exprn optsemi
rule 109  arrayelems ->		/* empty */
rule 110  arrayelems -> arrayelems1 optcomma
rule 111  arrayelems1 -> exprseq
rule 112  arrayelems1 -> exprseq ':' exprseq
rule 113  arrayelems1 -> keybinop exprseq
rule 114  arrayelems1 -> arrayelems1 ',' exprseq
rule 115  arrayelems1 -> arrayelems1 ',' keybinop exprseq
rule 116  arrayelems1 -> arrayelems1 ',' exprseq ':' exprseq
rule 117  arglist1 -> exprseq
rule 118  arglist1 -> arglist1 ',' exprseq
rule 119  arglistv1 -> '*' exprseq
rule 120  arglistv1 -> arglist1 ',' '*' exprseq
rule 121  keyarglist1 -> keyarg
rule 122  keyarglist1 -> keyarglist1 ',' keyarg
rule 123  keyarg -> keybinop exprseq
rule 124  optkeyarglist ->		/* empty */
rule 125  optkeyarglist -> ',' keyarglist1
rule 126  mavars -> mavarlist
rule 127  mavars -> mavarlist ELLIPSIS name
rule 128  mavarlist -> name
rule 129  mavarlist -> mavarlist ',' name
rule 130  slotliteral -> integer
rule 131  slotliteral -> floatp
rule 132  slotliteral -> ascii
rule 133  slotliteral -> string
rule 134  slotliteral -> symbol
rule 135  slotliteral -> trueobj
rule 136  slotliteral -> falseobj
rule 137  slotliteral -> nilobj
rule 138  slotliteral -> listlit
rule 139  blockliteral -> block
rule 140  pushname -> name
rule 141  pushliteral -> integer
rule 142  pushliteral -> floatp
rule 143  pushliteral -> ascii
rule 144  pushliteral -> string
rule 145  pushliteral -> symbol
rule 146  pushliteral -> trueobj
rule 147  pushliteral -> falseobj
rule 148  pushliteral -> nilobj
rule 149  pushliteral -> listlit
rule 150  listliteral -> integer
rule 151  listliteral -> floatp
rule 152  listliteral -> ascii
rule 153  listliteral -> string
rule 154  listliteral -> symbol
rule 155  listliteral -> trueobj
rule 156  listliteral -> falseobj
rule 157  listliteral -> nilobj
rule 158  listliteral -> listlit2
rule 159  block -> '{' argdecls funcvardecls funcbody '}'
rule 160  block -> BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
rule 161  funcvardecls ->		/* empty */
rule 162  funcvardecls -> funcvardecls funcvardecl
rule 163  funcvardecls1 -> funcvardecl
rule 164  funcvardecls1 -> funcvardecls1 funcvardecl
rule 165  funcvardecl -> VAR slotdeflist ';'
rule 166  argdecls ->		/* empty */
rule 167  argdecls -> ARG slotdeflist ';'
rule 168  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 169  argdecls -> '|' slotdeflist '|'
rule 170  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 171  slotdeflist0 ->		/* empty */
rule 172  slotdeflist0 -> slotdeflist
rule 173  slotdeflist -> slotdef
rule 174  slotdeflist -> slotdeflist ',' slotdef
rule 175  slotdef -> name
rule 176  slotdef -> name '=' slotliteral
rule 177  dictslotdef -> exprseq ':' exprseq
rule 178  dictslotdef -> keybinop exprseq
rule 179  dictslotlist1 -> dictslotdef
rule 180  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 181  dictslotlist ->		/* empty */
rule 182  dictslotlist -> dictslotlist1
rule 183  rwslotdeflist -> rwslotdef
rule 184  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 185  rwslotdef -> rwspec name
rule 186  rwslotdef -> rwspec name '=' slotliteral
rule 187  listlit -> '#' '[' literallistc ']'
rule 188  listlit -> '#' classname '[' literallistc ']'
rule 189  listlit2 -> '[' literallistc ']'
rule 190  listlit2 -> classname '[' literallistc ']'
rule 191  literallistc ->		/* empty */
rule 192  literallistc -> literallist1 optcomma
rule 193  literallist1 -> listliteral
rule 194  literallist1 -> literallist1 ',' listliteral
rule 195  rwspec ->		/* empty */
rule 196  rwspec -> '<'
rule 197  rwspec -> READWRITEVAR
rule 198  rwspec -> '>'
rule 199  integer -> INTEGER
rule 200  integer -> '-' INTEGER
rule 201  floatr -> FLOAT
rule 202  floatr -> '-' FLOAT
rule 203  accidental -> ACCIDENTAL
rule 204  accidental -> '-' ACCIDENTAL
rule 205  pie -> PIE
rule 206  floatp -> floatr
rule 207  floatp -> accidental
rule 208  floatp -> floatr pie
rule 209  floatp -> integer pie
rule 210  floatp -> pie
rule 211  floatp -> '-' pie
rule 212  name -> NAME
rule 213  classname -> CLASSNAME
rule 214  primname -> PRIMITIVENAME
rule 215  trueobj -> TRUEOBJ
rule 216  falseobj -> FALSEOBJ
rule 217  nilobj -> NILOBJ
rule 218  ascii -> ASCII
rule 219  symbol -> SYMBOL
rule 220  string -> STRING
rule 221  pseudovar -> PSEUDOVAR
rule 222  binop -> BINOP
rule 223  binop -> READWRITEVAR
rule 224  binop -> '<'
rule 225  binop -> '>'
rule 226  binop -> '-'
rule 227  binop -> '*'
rule 228  binop -> '+'
rule 229  binop -> '|'
rule 230  keybinop -> KEYBINOP
rule 231  binop2 -> binop
rule 232  binop2 -> keybinop
rule 233  curryarg -> CURRYARG

Terminals, with rules where they appear

$ (-1)
'#' (35) 99 187 188
'(' (40) 31 47 48 49 50 51 52 53 54 61 64 65 67 68 69 98 105
')' (41) 31 47 48 49 50 51 52 53 54 61 64 65 67 68 69 98 105
'*' (42) 22 24 119 120 227
'+' (43) 10 228
',' (44) 28 87 114 115 116 118 120 122 125 129 174 180 184 194
'-' (45) 200 202 204 211 226
'.' (46) 49 50 51 52 53 54 55 79 80 81 82 83 84 91 97 101 103 104 105
':' (58) 14 112 116 177
';' (59) 17 18 26 107 165 167 168
'<' (60) 196 224
'=' (61) 76 77 78 82 83 84 95 96 97 98 99 100 101 176 186
'>' (62) 198 225
'[' (91) 9 63 70 71 73 74 75 76 77 78 79 80 81 82 83 84 91 100 101
    187 188 189 190
']' (93) 9 63 70 71 73 74 75 76 77 78 79 80 81 82 83 84 91 100 101
    187 188 189 190
'^' (94) 39 41
'`' (96) 93
'{' (123) 8 9 10 21 22 23 24 159
'|' (124) 169 170 229
'}' (125) 8 9 10 21 22 23 24 159 160
'~' (126) 62 96
error (256)
NAME (257) 212
INTEGER (258) 199 200
FLOAT (259) 201 202
ACCIDENTAL (260) 203 204
SYMBOL (261) 219
STRING (262) 220
ASCII (263) 218
PRIMITIVENAME (264) 214
CLASSNAME (265) 213
CURRYARG (266) 233
VAR (267) 18 165
ARG (268) 167 168
CLASSVAR (269) 17
CONST (270)
NILOBJ (271) 217
TRUEOBJ (272) 215
FALSEOBJ (273) 216
PSEUDOVAR (274) 221
ELLIPSIS (275) 127 168 170
DOTDOT (276) 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
PIE (277) 205
BEGINCLOSEDFUNC (278) 160
BADTOKEN (279)
INTERPRET (280) 3
BINOP (281) 222
KEYBINOP (282) 230
READWRITEVAR (283) 197 223
UMINUS (284)

Nonterminals, with rules where they appear

root (52)
    on left: 1 2 3
classes (53)
    on left: 4 5, on right: 1 5
classextensions (54)
    on left: 6 7, on right: 2 7
classdef (55)
    on left: 8 9, on right: 5
classextension (56)
    on left: 10, on right: 6 7
optname (57)
    on left: 11 12, on right: 9
superclass (58)
    on left: 13 14, on right: 8 9
classvardecls (59)
    on left: 15 16, on right: 8 9 16
classvardecl (60)
    on left: 17 18, on right: 16
methods (61)
    on left: 19 20, on right: 8 9 10 20
methoddef (62)
    on left: 21 22 23 24, on right: 20
optsemi (63)
    on left: 25 26, on right: 37 39 41 108
optcomma (64)
    on left: 27 28, on right: 110 192
funcbody (65)
    on left: 29 30, on right: 31 32 33 159 160
cmdlinecode (66)
    on left: 31 32 33, on right: 3
methbody (67)
    on left: 34 35, on right: 21 22 23 24
primitive (68)
    on left: 36 37, on right: 21 22 23 24
retval (69)
    on left: 38 39, on right: 34 35
funretval (70)
    on left: 40 41, on right: 29 30
blocklist1 (71)
    on left: 42 43, on right: 43 45 46
blocklist (72)
    on left: 44 45, on right: 47 49 50 51 53 55
msgsend (73)
    on left: 46 47 48 49 50 51 52 53 54 55, on right: 60
expr1 (74)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72,
    on right: 71 73 74 75 76 77 78 88 100
valrangex1 (75)
    on left: 73 74 75, on right: 72
valrangeassign (76)
    on left: 76 77 78, on right: 90
valrangexd (77)
    on left: 79 80 81 82 83 84, on right: 89
valrange2 (78)
    on left: 85 86 87, on right: 64
expr (79)
    on left: 88 89 90 91 92 93 94 95 96 97 98 99 100 101,
    on right: 39 41 49 50 51 52 53 54 55 76 77 78 79 80 81 82 83 84
    91 93 94 95 96 97 98 99 100 101 106 107
adverb (80)
    on left: 102 103 104 105, on right: 94
exprn (81)
    on left: 106 107, on right: 107 108
exprseq (82)
    on left: 108, on right: 30 35 61 74 75 77 78 80 81 83 84 85 86
    87 105 111 112 113 114 115 116 117 118 119 120 123 177 178
arrayelems (83)
    on left: 109 110, on right: 63 70
arrayelems1 (84)
    on left: 111 112 113 114 115 116, on right: 110 114 115 116
arglist1 (85)
    on left: 117 118, on right: 47 51 53 68 71 73 75 76 78 79 81 82
    84 91 98 100 101 118 120
arglistv1 (86)
    on left: 119 120, on right: 48 52 54 69
keyarglist1 (87)
    on left: 121 122, on right: 49 50 67 122 125
keyarg (88)
    on left: 123, on right: 121 122
optkeyarglist (89)
    on left: 124 125, on right: 47 48 51 52 53 54 68 69 98
mavars (90)
    on left: 126 127, on right: 99
mavarlist (91)
    on left: 128 129, on right: 126 127 129
slotliteral (92)
    on left: 130 131 132 133 134 135 136 137 138, on right: 176 186
blockliteral (93)
    on left: 139, on right: 42 43 57
pushname (94)
    on left: 140, on right: 58
pushliteral (95)
    on left: 141 142 143 144 145 146 147 148 149, on right: 56
listliteral (96)
    on left: 150 151 152 153 154 155 156 157 158, on right: 193 194
block (97)
    on left: 159 160, on right: 139
funcvardecls (98)
    on left: 161 162, on right: 21 22 23 24 159 160 162
funcvardecls1 (99)
    on left: 163 164, on right: 31 32 164
funcvardecl (100)
    on left: 165, on right: 162 163 164
argdecls (101)
    on left: 166 167 168 169 170, on right: 21 22 23 24 159 160
slotdeflist0 (102)
    on left: 171 172, on right: 168 170
slotdeflist (103)
    on left: 173 174, on right: 165 167 169 172 174
slotdef (104)
    on left: 175 176, on right: 173 174
dictslotdef (105)
    on left: 177 178, on right: 179 180
dictslotlist1 (106)
    on left: 179 180, on right: 180 182
dictslotlist (107)
    on left: 181 182, on right: 65
rwslotdeflist (108)
    on left: 183 184, on right: 17 18 184
rwslotdef (109)
    on left: 185 186, on right: 183 184
listlit (110)
    on left: 187 188, on right: 138 149
listlit2 (111)
    on left: 189 190, on right: 158
literallistc (112)
    on left: 191 192, on right: 187 188 189 190
literallist1 (113)
    on left: 193 194, on right: 192 194
rwspec (114)
    on left: 195 196 197 198, on right: 185 186
integer (115)
    on left: 199 200, on right: 104 130 141 150 209
floatr (116)
    on left: 201 202, on right: 206 208
accidental (117)
    on left: 203 204, on right: 207
pie (118)
    on left: 205, on right: 208 209 210 211
floatp (119)
    on left: 206 207 208 209 210 211, on right: 131 142 151
name (120)
    on left: 212, on right: 12 21 22 46 47 48 50 53 54 55 62 95 96
    97 98 103 127 128 129 140 168 170 175 176 185 186
classname (121)
    on left: 213, on right: 8 9 10 14 67 68 69 70 92 188 190
primname (122)
    on left: 214, on right: 37
trueobj (123)
    on left: 215, on right: 135 146 155
falseobj (124)
    on left: 216, on right: 136 147 156
nilobj (125)
    on left: 217, on right: 137 148 157
ascii (126)
    on left: 218, on right: 132 143 152
symbol (127)
    on left: 219, on right: 134 145 154
string (128)
    on left: 220, on right: 133 144 153
pseudovar (129)
    on left: 221, on right: 66
binop (130)
    on left: 222 223 224 225 226 227 228 229, on right: 23 24 231
keybinop (131)
    on left: 230, on right: 113 115 123 178 232
binop2 (132)
    on left: 231 232, on right: 94
curryarg (133)
    on left: 233, on right: 59


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 408
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 26
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 30
    cmdlinecode	go to state 31
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 45
    funcvardecl	go to state 46
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 63



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 64
    classname	go to state 65



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 66



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 212)

    $default	reduce using rule 212 (name)



state 7

    integer  ->  INTEGER .   (rule 199)

    $default	reduce using rule 199 (integer)



state 8

    floatr  ->  FLOAT .   (rule 201)

    $default	reduce using rule 201 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 203)

    $default	reduce using rule 203 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 219)

    $default	reduce using rule 219 (symbol)



state 11

    string  ->  STRING .   (rule 220)

    $default	reduce using rule 220 (string)



state 12

    ascii  ->  ASCII .   (rule 218)

    $default	reduce using rule 218 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 213)

    $default	reduce using rule 213 (classname)



state 14

    curryarg  ->  CURRYARG .   (rule 233)

    $default	reduce using rule 233 (curryarg)



state 15

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 165)

    NAME	shift, and go to state 6

    slotdeflist	go to state 67
    slotdef	go to state 68
    name	go to state 69



state 16

    nilobj  ->  NILOBJ .   (rule 217)

    $default	reduce using rule 217 (nilobj)



state 17

    trueobj  ->  TRUEOBJ .   (rule 215)

    $default	reduce using rule 215 (trueobj)



state 18

    falseobj  ->  FALSEOBJ .   (rule 216)

    $default	reduce using rule 216 (falseobj)



state 19

    pseudovar  ->  PSEUDOVAR .   (rule 221)

    $default	reduce using rule 221 (pseudovar)



state 20

    pie  ->  PIE .   (rule 205)

    $default	reduce using rule 205 (pie)



state 21

    block  ->  BEGINCLOSEDFUNC . argdecls funcvardecls funcbody '}'   (rule 160)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 72



state 22

    integer  ->  '-' . INTEGER   (rule 200)
    floatr  ->  '-' . FLOAT   (rule 202)
    accidental  ->  '-' . ACCIDENTAL   (rule 204)
    floatp  ->  '-' . pie   (rule 211)

    INTEGER	shift, and go to state 73
    FLOAT	shift, and go to state 74
    ACCIDENTAL	shift, and go to state 75
    PIE 	shift, and go to state 20

    pie 	go to state 76



state 23

    expr  ->  '`' . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 78
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 24

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 159)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 79



state 25

    expr1  ->  '[' . arrayelems ']'   (rule 63)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 109 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 82
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 84
    curryarg	go to state 62



state 26

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 61)
    expr1  ->  '(' . valrange2 ')'   (rule 64)
    expr1  ->  '(' . dictslotlist ')'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 181 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecls1	go to state 88
    funcvardecl	go to state 46
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 27

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 93
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 28

    expr1  ->  '~' . name   (rule 62)
    expr  ->  '~' . name '=' expr   (rule 96)

    NAME	shift, and go to state 6

    name	go to state 94



state 29

    expr  ->  '#' . mavars '=' expr   (rule 99)
    listlit  ->  '#' . '[' literallistc ']'   (rule 187)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 188)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    mavars	go to state 96
    mavarlist	go to state 97
    name	go to state 98
    classname	go to state 99



state 30

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 31

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 32

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 33

    expr1  ->  msgsend .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 34

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 71)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 73)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 74)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 75)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 78)
    expr  ->  expr1 .   (rule 88)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 100)

    '[' 	shift, and go to state 100

    $default	reduce using rule 88 (expr)



state 35

    expr1  ->  valrangex1 .   (rule 72)

    $default	reduce using rule 72 (expr1)



state 36

    expr  ->  valrangeassign .   (rule 90)

    $default	reduce using rule 90 (expr)



state 37

    expr  ->  valrangexd .   (rule 89)

    $default	reduce using rule 89 (expr)



state 38

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  expr .   (rule 106)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 106 (exprn)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 39

    exprn  ->  exprn . ';' expr   (rule 107)
    exprseq  ->  exprn . optsemi   (rule 108)

    ';' 	shift, and go to state 113

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 114



state 40

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funretval	go to state 115



state 41

    expr1  ->  blockliteral .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 42

    expr1  ->  pushname .   (rule 58)

    $default	reduce using rule 58 (expr1)



state 43

    expr1  ->  pushliteral .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 44

    blockliteral  ->  block .   (rule 139)

    $default	reduce using rule 139 (blockliteral)



state 45

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 164)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 116
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 46

    funcvardecls1  ->  funcvardecl .   (rule 163)

    $default	reduce using rule 163 (funcvardecls1)



state 47

    pushliteral  ->  listlit .   (rule 149)

    $default	reduce using rule 149 (pushliteral)



state 48

    pushliteral  ->  integer .   (rule 141)
    floatp  ->  integer . pie   (rule 209)

    PIE 	shift, and go to state 20

    $default	reduce using rule 141 (pushliteral)

    pie 	go to state 118



state 49

    floatp  ->  floatr .   (rule 206)
    floatp  ->  floatr . pie   (rule 208)

    PIE 	shift, and go to state 20

    $default	reduce using rule 206 (floatp)

    pie 	go to state 119



state 50

    floatp  ->  accidental .   (rule 207)

    $default	reduce using rule 207 (floatp)



state 51

    floatp  ->  pie .   (rule 210)

    $default	reduce using rule 210 (floatp)



state 52

    pushliteral  ->  floatp .   (rule 142)

    $default	reduce using rule 142 (pushliteral)



state 53

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name . '(' arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name . '=' expr   (rule 95)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 98)
    pushname  ->  name .   (rule 140)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 120
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 121

    $default	reduce using rule 140 (pushname)

    blocklist1	go to state 122
    blockliteral	go to state 123
    block	go to state 44



state 54

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 67)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 68)
    expr1  ->  classname . '(' arglistv1 optkeyarglist ')'   (rule 69)
    expr1  ->  classname . '[' arrayelems ']'   (rule 70)
    expr  ->  classname .   (rule 92)

    '[' 	shift, and go to state 124
    '(' 	shift, and go to state 125

    $default	reduce using rule 92 (expr)



state 55

    pushliteral  ->  trueobj .   (rule 146)

    $default	reduce using rule 146 (pushliteral)



state 56

    pushliteral  ->  falseobj .   (rule 147)

    $default	reduce using rule 147 (pushliteral)



state 57

    pushliteral  ->  nilobj .   (rule 148)

    $default	reduce using rule 148 (pushliteral)



state 58

    pushliteral  ->  ascii .   (rule 143)

    $default	reduce using rule 143 (pushliteral)



state 59

    pushliteral  ->  symbol .   (rule 145)

    $default	reduce using rule 145 (pushliteral)



state 60

    pushliteral  ->  string .   (rule 144)

    $default	reduce using rule 144 (pushliteral)



state 61

    expr1  ->  pseudovar .   (rule 66)

    $default	reduce using rule 66 (expr1)



state 62

    expr1  ->  curryarg .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 63

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 126



state 64

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 65

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127
    '[' 	shift, and go to state 128

    $default	reduce using rule 13 (superclass)

    superclass	go to state 129



state 66

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 67

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 165)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 174)

    ';' 	shift, and go to state 130
    ',' 	shift, and go to state 131



state 68

    slotdeflist  ->  slotdef .   (rule 173)

    $default	reduce using rule 173 (slotdeflist)



state 69

    slotdef  ->  name .   (rule 175)
    slotdef  ->  name . '=' slotliteral   (rule 176)

    '=' 	shift, and go to state 132

    $default	reduce using rule 175 (slotdef)



state 70

    argdecls  ->  ARG . slotdeflist ';'   (rule 167)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 168)

    NAME	shift, and go to state 6

    $default	reduce using rule 171 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 68
    name	go to state 69



state 71

    argdecls  ->  '|' . slotdeflist '|'   (rule 169)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 170)

    NAME	shift, and go to state 6

    $default	reduce using rule 171 (slotdeflist0)

    slotdeflist0	go to state 135
    slotdeflist	go to state 136
    slotdef	go to state 68
    name	go to state 69



state 72

    block  ->  BEGINCLOSEDFUNC argdecls . funcvardecls funcbody '}'   (rule 160)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 137



state 73

    integer  ->  '-' INTEGER .   (rule 200)

    $default	reduce using rule 200 (integer)



state 74

    floatr  ->  '-' FLOAT .   (rule 202)

    $default	reduce using rule 202 (floatr)



state 75

    accidental  ->  '-' ACCIDENTAL .   (rule 204)

    $default	reduce using rule 204 (accidental)



state 76

    floatp  ->  '-' pie .   (rule 211)

    $default	reduce using rule 211 (floatp)



state 77

    expr1  ->  '(' . exprseq ')'   (rule 61)
    expr1  ->  '(' . valrange2 ')'   (rule 64)
    expr1  ->  '(' . dictslotlist ')'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 85
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 181 (dictslotlist)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    valrange2	go to state 86
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 87
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 89
    dictslotlist1	go to state 90
    dictslotlist	go to state 91
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 78

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  '`' expr .   (rule 93)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)


    $default	reduce using rule 93 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 79

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 159)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 138



state 80

    keybinop  ->  KEYBINOP .   (rule 230)

    $default	reduce using rule 230 (keybinop)



state 81

    arrayelems1  ->  exprseq .   (rule 111)
    arrayelems1  ->  exprseq . ':' exprseq   (rule 112)

    ':' 	shift, and go to state 139

    $default	reduce using rule 111 (arrayelems1)



state 82

    expr1  ->  '[' arrayelems . ']'   (rule 63)

    ']' 	shift, and go to state 140



state 83

    arrayelems  ->  arrayelems1 . optcomma   (rule 110)
    arrayelems1  ->  arrayelems1 . ',' exprseq   (rule 114)
    arrayelems1  ->  arrayelems1 . ',' keybinop exprseq   (rule 115)
    arrayelems1  ->  arrayelems1 . ',' exprseq ':' exprseq   (rule 116)

    ',' 	shift, and go to state 141

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 142



state 84

    arrayelems1  ->  keybinop . exprseq   (rule 113)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 143
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 85

    valrange2  ->  DOTDOT . exprseq   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 144
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 86

    expr1  ->  '(' valrange2 . ')'   (rule 64)

    ')' 	shift, and go to state 145



state 87

    expr1  ->  '(' exprseq . ')'   (rule 61)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 86)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 87)
    dictslotdef  ->  exprseq . ':' exprseq   (rule 177)

    DOTDOT	shift, and go to state 146
    ':' 	shift, and go to state 147
    ',' 	shift, and go to state 148
    ')' 	shift, and go to state 149



state 88

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 164)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 150
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 117
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 89

    dictslotlist1  ->  dictslotdef .   (rule 179)

    $default	reduce using rule 179 (dictslotlist1)



state 90

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 180)
    dictslotlist  ->  dictslotlist1 .   (rule 182)

    ',' 	shift, and go to state 151

    $default	reduce using rule 182 (dictslotlist)



state 91

    expr1  ->  '(' dictslotlist . ')'   (rule 65)

    ')' 	shift, and go to state 152



state 92

    dictslotdef  ->  keybinop . exprseq   (rule 178)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 153
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 93

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 155
    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 94

    expr1  ->  '~' name .   (rule 62)
    expr  ->  '~' name . '=' expr   (rule 96)

    '=' 	shift, and go to state 156

    $default	reduce using rule 62 (expr1)



state 95

    listlit  ->  '#' '[' . literallistc ']'   (rule 187)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 191 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 160
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    ascii	go to state 168
    symbol	go to state 169
    string	go to state 170



state 96

    expr  ->  '#' mavars . '=' expr   (rule 99)

    '=' 	shift, and go to state 171



state 97

    mavars  ->  mavarlist .   (rule 126)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 127)
    mavarlist  ->  mavarlist . ',' name   (rule 129)

    ELLIPSIS	shift, and go to state 172
    ',' 	shift, and go to state 173

    $default	reduce using rule 126 (mavars)



state 98

    mavarlist  ->  name .   (rule 128)

    $default	reduce using rule 128 (mavarlist)



state 99

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 188)

    '[' 	shift, and go to state 174



state 100

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 71)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 73)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 74)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 75)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 77)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 78)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 175
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 177
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 101

    binop  ->  BINOP .   (rule 222)

    $default	reduce using rule 222 (binop)



state 102

    binop  ->  '-' .   (rule 226)

    $default	reduce using rule 226 (binop)



state 103

    binop  ->  '<' .   (rule 224)

    $default	reduce using rule 224 (binop)



state 104

    binop  ->  '>' .   (rule 225)

    $default	reduce using rule 225 (binop)



state 105

    binop  ->  '*' .   (rule 227)

    $default	reduce using rule 227 (binop)



state 106

    binop  ->  '+' .   (rule 228)

    $default	reduce using rule 228 (binop)



state 107

    binop  ->  '|' .   (rule 229)

    $default	reduce using rule 229 (binop)



state 108

    binop  ->  READWRITEVAR .   (rule 223)

    $default	reduce using rule 223 (binop)



state 109

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' . name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' . name blocklist   (rule 55)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 91)
    expr  ->  expr '.' . name '=' expr   (rule 97)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 178
    '(' 	shift, and go to state 179

    name	go to state 180



state 110

    binop2  ->  binop .   (rule 231)

    $default	reduce using rule 231 (binop2)



state 111

    binop2  ->  keybinop .   (rule 232)

    $default	reduce using rule 232 (binop2)



state 112

    expr  ->  expr binop2 . adverb expr   (rule 94)

    '.' 	shift, and go to state 181

    $default	reduce using rule 102 (adverb)

    adverb	go to state 182



state 113

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 107)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 183
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 114

    exprseq  ->  exprn optsemi .   (rule 108)

    $default	reduce using rule 108 (exprseq)



state 115

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 116

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 117

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 164)

    $default	reduce using rule 164 (funcvardecls1)



state 118

    floatp  ->  integer pie .   (rule 209)

    $default	reduce using rule 209 (floatp)



state 119

    floatp  ->  floatr pie .   (rule 208)

    $default	reduce using rule 208 (floatp)



state 120

    expr  ->  name '=' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 184
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 121

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name '(' . arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 185
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 186
    arglistv1	go to state 187
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 122

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 188
    block	go to state 44



state 123

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 124

    expr1  ->  classname '[' . arrayelems ']'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 109 (arrayelems)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 81
    arrayelems	go to state 189
    arrayelems1	go to state 83
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 84
    curryarg	go to state 62



state 125

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 67)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 68)
    expr1  ->  classname '(' . arglistv1 optkeyarglist ')'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 185
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 190
    arglistv1	go to state 191
    keyarglist1	go to state 192
    keyarg	go to state 193
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 194
    curryarg	go to state 62



state 126

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 195



state 127

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 196



state 128

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 197
    name	go to state 198



state 129

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 199



state 130

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 165)

    $default	reduce using rule 165 (funcvardecl)



state 131

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 174)

    NAME	shift, and go to state 6

    slotdef	go to state 200
    name	go to state 69



state 132

    slotdef  ->  name '=' . slotliteral   (rule 176)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 201

    slotliteral	go to state 202
    listlit	go to state 203
    integer	go to state 204
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 205
    trueobj	go to state 206
    falseobj	go to state 207
    nilobj	go to state 208
    ascii	go to state 209
    symbol	go to state 210
    string	go to state 211



state 133

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 168)

    ELLIPSIS	shift, and go to state 212



state 134

    argdecls  ->  ARG slotdeflist . ';'   (rule 167)
    slotdeflist0  ->  slotdeflist .   (rule 172)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 174)

    ';' 	shift, and go to state 213
    ',' 	shift, and go to state 131

    $default	reduce using rule 172 (slotdeflist0)



state 135

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 170)

    ELLIPSIS	shift, and go to state 214



state 136

    argdecls  ->  '|' slotdeflist . '|'   (rule 169)
    slotdeflist0  ->  slotdeflist .   (rule 172)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 174)

    '|' 	shift, and go to state 215
    ',' 	shift, and go to state 131

    $default	reduce using rule 172 (slotdeflist0)



state 137

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls . funcbody '}'   (rule 160)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 216
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 217
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 138

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 159)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    VAR 	shift, and go to state 15
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 27
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 218
    funretval	go to state 32
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 40
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    funcvardecl	go to state 217
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 139

    arrayelems1  ->  exprseq ':' . exprseq   (rule 112)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 219
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 140

    expr1  ->  '[' arrayelems ']' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 141

    optcomma  ->  ',' .   (rule 28)
    arrayelems1  ->  arrayelems1 ',' . exprseq   (rule 114)
    arrayelems1  ->  arrayelems1 ',' . keybinop exprseq   (rule 115)
    arrayelems1  ->  arrayelems1 ',' . exprseq ':' exprseq   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 220
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 221
    curryarg	go to state 62



state 142

    arrayelems  ->  arrayelems1 optcomma .   (rule 110)

    $default	reduce using rule 110 (arrayelems)



state 143

    arrayelems1  ->  keybinop exprseq .   (rule 113)

    $default	reduce using rule 113 (arrayelems1)



state 144

    valrange2  ->  DOTDOT exprseq .   (rule 85)

    $default	reduce using rule 85 (valrange2)



state 145

    expr1  ->  '(' valrange2 ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 146

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 222
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 147

    dictslotdef  ->  exprseq ':' . exprseq   (rule 177)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 223
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 148

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 224
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 149

    expr1  ->  '(' exprseq ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 150

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 225



state 151

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 180)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 226
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    dictslotdef	go to state 227
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 92
    curryarg	go to state 62



state 152

    expr1  ->  '(' dictslotlist ')' .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 153

    dictslotdef  ->  keybinop exprseq .   (rule 178)

    $default	reduce using rule 178 (dictslotdef)



state 154

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 155

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 156

    expr  ->  '~' name '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 228
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 157

    listlit2  ->  '[' . literallistc ']'   (rule 189)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 191 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 229
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    ascii	go to state 168
    symbol	go to state 169
    string	go to state 170



state 158

    literallist1  ->  listliteral .   (rule 193)

    $default	reduce using rule 193 (literallist1)



state 159

    listliteral  ->  listlit2 .   (rule 158)

    $default	reduce using rule 158 (listliteral)



state 160

    listlit  ->  '#' '[' literallistc . ']'   (rule 187)

    ']' 	shift, and go to state 230



state 161

    literallistc  ->  literallist1 . optcomma   (rule 192)
    literallist1  ->  literallist1 . ',' listliteral   (rule 194)

    ',' 	shift, and go to state 231

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 232



state 162

    listliteral  ->  integer .   (rule 150)
    floatp  ->  integer . pie   (rule 209)

    PIE 	shift, and go to state 20

    $default	reduce using rule 150 (listliteral)

    pie 	go to state 118



state 163

    listliteral  ->  floatp .   (rule 151)

    $default	reduce using rule 151 (listliteral)



state 164

    listlit2  ->  classname . '[' literallistc ']'   (rule 190)

    '[' 	shift, and go to state 233



state 165

    listliteral  ->  trueobj .   (rule 155)

    $default	reduce using rule 155 (listliteral)



state 166

    listliteral  ->  falseobj .   (rule 156)

    $default	reduce using rule 156 (listliteral)



state 167

    listliteral  ->  nilobj .   (rule 157)

    $default	reduce using rule 157 (listliteral)



state 168

    listliteral  ->  ascii .   (rule 152)

    $default	reduce using rule 152 (listliteral)



state 169

    listliteral  ->  symbol .   (rule 154)

    $default	reduce using rule 154 (listliteral)



state 170

    listliteral  ->  string .   (rule 153)

    $default	reduce using rule 153 (listliteral)



state 171

    expr  ->  '#' mavars '=' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 234
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 172

    mavars  ->  mavarlist ELLIPSIS . name   (rule 127)

    NAME	shift, and go to state 6

    name	go to state 235



state 173

    mavarlist  ->  mavarlist ',' . name   (rule 129)

    NAME	shift, and go to state 6

    name	go to state 236



state 174

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 188)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 191 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 237
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    ascii	go to state 168
    symbol	go to state 169
    string	go to state 170



state 175

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 238
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 176

    arglist1  ->  exprseq .   (rule 117)

    $default	reduce using rule 117 (arglist1)



state 177

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 71)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 73)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 78)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 100)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)

    DOTDOT	shift, and go to state 239
    ']' 	shift, and go to state 240
    ',' 	shift, and go to state 241



state 178

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 91)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    DOTDOT	shift, and go to state 242
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 243
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 179

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' '(' . arglistv1 optkeyarglist ')'   (rule 52)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 185
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 244
    arglistv1	go to state 245
    keyarglist1	go to state 246
    keyarg	go to state 193
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 194
    curryarg	go to state 62



state 180

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name . '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' name . blocklist   (rule 55)
    expr  ->  expr '.' name . '=' expr   (rule 97)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 247
    '{' 	shift, and go to state 24
    '(' 	shift, and go to state 248

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 250
    blockliteral	go to state 123
    block	go to state 44



state 181

    adverb  ->  '.' . name   (rule 103)
    adverb  ->  '.' . integer   (rule 104)
    adverb  ->  '.' . '(' exprseq ')'   (rule 105)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    '-' 	shift, and go to state 251
    '(' 	shift, and go to state 252

    integer	go to state 253
    name	go to state 254



state 182

    expr  ->  expr binop2 adverb . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 255
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 183

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    exprn  ->  exprn ';' expr .   (rule 107)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 107 (exprn)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 184

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  name '=' expr .   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 95 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 185

    arglistv1  ->  '*' . exprseq   (rule 119)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 256
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 186

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 98)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 120)

    ',' 	shift, and go to state 257

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 258



state 187

    msgsend  ->  name '(' arglistv1 . optkeyarglist ')'   (rule 48)

    ',' 	shift, and go to state 259

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 260



state 188

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 189

    expr1  ->  classname '[' arrayelems . ']'   (rule 70)

    ']' 	shift, and go to state 261



state 190

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 68)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 120)

    ',' 	shift, and go to state 257

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 262



state 191

    expr1  ->  classname '(' arglistv1 . optkeyarglist ')'   (rule 69)

    ',' 	shift, and go to state 259

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 263



state 192

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 67)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 122)

    ',' 	shift, and go to state 264
    ')' 	shift, and go to state 265



state 193

    keyarglist1  ->  keyarg .   (rule 121)

    $default	reduce using rule 121 (keyarglist1)



state 194

    keyarg  ->  keybinop . exprseq   (rule 123)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 266
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 195

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 267
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 268

    methoddef	go to state 269
    name	go to state 270
    binop	go to state 271



state 196

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 197

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 272



state 198

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 199

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 273



state 200

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 174)

    $default	reduce using rule 174 (slotdeflist)



state 201

    listlit  ->  '#' . '[' literallistc ']'   (rule 187)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 188)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 95

    classname	go to state 99



state 202

    slotdef  ->  name '=' slotliteral .   (rule 176)

    $default	reduce using rule 176 (slotdef)



state 203

    slotliteral  ->  listlit .   (rule 138)

    $default	reduce using rule 138 (slotliteral)



state 204

    slotliteral  ->  integer .   (rule 130)
    floatp  ->  integer . pie   (rule 209)

    PIE 	shift, and go to state 20

    $default	reduce using rule 130 (slotliteral)

    pie 	go to state 118



state 205

    slotliteral  ->  floatp .   (rule 131)

    $default	reduce using rule 131 (slotliteral)



state 206

    slotliteral  ->  trueobj .   (rule 135)

    $default	reduce using rule 135 (slotliteral)



state 207

    slotliteral  ->  falseobj .   (rule 136)

    $default	reduce using rule 136 (slotliteral)



state 208

    slotliteral  ->  nilobj .   (rule 137)

    $default	reduce using rule 137 (slotliteral)



state 209

    slotliteral  ->  ascii .   (rule 132)

    $default	reduce using rule 132 (slotliteral)



state 210

    slotliteral  ->  symbol .   (rule 134)

    $default	reduce using rule 134 (slotliteral)



state 211

    slotliteral  ->  string .   (rule 133)

    $default	reduce using rule 133 (slotliteral)



state 212

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 168)

    NAME	shift, and go to state 6

    name	go to state 274



state 213

    argdecls  ->  ARG slotdeflist ';' .   (rule 167)

    $default	reduce using rule 167 (argdecls)



state 214

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 170)

    NAME	shift, and go to state 6

    name	go to state 275



state 215

    argdecls  ->  '|' slotdeflist '|' .   (rule 169)

    $default	reduce using rule 169 (argdecls)



state 216

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody . '}'   (rule 160)

    '}' 	shift, and go to state 276



state 217

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 162)

    $default	reduce using rule 162 (funcvardecls)



state 218

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 159)

    '}' 	shift, and go to state 277



state 219

    arrayelems1  ->  exprseq ':' exprseq .   (rule 112)

    $default	reduce using rule 112 (arrayelems1)



state 220

    arrayelems1  ->  arrayelems1 ',' exprseq .   (rule 114)
    arrayelems1  ->  arrayelems1 ',' exprseq . ':' exprseq   (rule 116)

    ':' 	shift, and go to state 278

    $default	reduce using rule 114 (arrayelems1)



state 221

    arrayelems1  ->  arrayelems1 ',' keybinop . exprseq   (rule 115)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 279
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 222

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 86)

    $default	reduce using rule 86 (valrange2)



state 223

    dictslotdef  ->  exprseq ':' exprseq .   (rule 177)

    $default	reduce using rule 177 (dictslotdef)



state 224

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 87)

    DOTDOT	shift, and go to state 280



state 225

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 226

    dictslotdef  ->  exprseq . ':' exprseq   (rule 177)

    ':' 	shift, and go to state 147



state 227

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 180)

    $default	reduce using rule 180 (dictslotlist1)



state 228

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  '~' name '=' expr .   (rule 96)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 96 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 229

    listlit2  ->  '[' literallistc . ']'   (rule 189)

    ']' 	shift, and go to state 281



state 230

    listlit  ->  '#' '[' literallistc ']' .   (rule 187)

    $default	reduce using rule 187 (listlit)



state 231

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 194)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 282
    listlit2	go to state 159
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    ascii	go to state 168
    symbol	go to state 169
    string	go to state 170



state 232

    literallistc  ->  literallist1 optcomma .   (rule 192)

    $default	reduce using rule 192 (literallistc)



state 233

    listlit2  ->  classname '[' . literallistc ']'   (rule 190)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '[' 	shift, and go to state 157

    $default	reduce using rule 191 (literallistc)

    listliteral	go to state 158
    listlit2	go to state 159
    literallistc	go to state 283
    literallist1	go to state 161
    integer	go to state 162
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 163
    classname	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    ascii	go to state 168
    symbol	go to state 169
    string	go to state 170



state 234

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  '#' mavars '=' expr .   (rule 99)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 99 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 235

    mavars  ->  mavarlist ELLIPSIS name .   (rule 127)

    $default	reduce using rule 127 (mavars)



state 236

    mavarlist  ->  mavarlist ',' name .   (rule 129)

    $default	reduce using rule 129 (mavarlist)



state 237

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 188)

    ']' 	shift, and go to state 284



state 238

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 74)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 77)

    ']' 	shift, and go to state 285



state 239

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 73)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 286
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 287
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 240

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 71)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 100)

    '=' 	shift, and go to state 288

    $default	reduce using rule 71 (expr1)



state 241

    arglist1  ->  arglist1 ',' . exprseq   (rule 118)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 289
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 242

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 290
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 243

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 79)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 91)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 101)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)

    DOTDOT	shift, and go to state 291
    ']' 	shift, and go to state 292
    ',' 	shift, and go to state 241



state 244

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 120)

    ',' 	shift, and go to state 257

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 293



state 245

    msgsend  ->  expr '.' '(' arglistv1 . optkeyarglist ')'   (rule 52)

    ',' 	shift, and go to state 259

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 294



state 246

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 122)

    ',' 	shift, and go to state 264
    ')' 	shift, and go to state 295



state 247

    expr  ->  expr '.' name '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 296
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 248

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name '(' . arglistv1 optkeyarglist ')'   (rule 54)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 185
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 176
    arglist1	go to state 297
    arglistv1	go to state 298
    keyarglist1	go to state 299
    keyarg	go to state 193
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 194
    curryarg	go to state 62



state 249

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 188
    block	go to state 44



state 250

    msgsend  ->  expr '.' name blocklist .   (rule 55)

    $default	reduce using rule 55 (msgsend)



state 251

    integer  ->  '-' . INTEGER   (rule 200)

    INTEGER	shift, and go to state 73



state 252

    adverb  ->  '.' '(' . exprseq ')'   (rule 105)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 300
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 253

    adverb  ->  '.' integer .   (rule 104)

    $default	reduce using rule 104 (adverb)



state 254

    adverb  ->  '.' name .   (rule 103)

    $default	reduce using rule 103 (adverb)



state 255

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr binop2 adverb expr .   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    '.' 	shift, and go to state 109

    $default	reduce using rule 94 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 256

    arglistv1  ->  '*' exprseq .   (rule 119)

    $default	reduce using rule 119 (arglistv1)



state 257

    arglist1  ->  arglist1 ',' . exprseq   (rule 118)
    arglistv1  ->  arglist1 ',' . '*' exprseq   (rule 120)
    optkeyarglist  ->  ',' . keyarglist1   (rule 125)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 22
    '*' 	shift, and go to state 301
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 289
    keyarglist1	go to state 302
    keyarg	go to state 193
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    keybinop	go to state 194
    curryarg	go to state 62



state 258

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 98)

    ')' 	shift, and go to state 303



state 259

    optkeyarglist  ->  ',' . keyarglist1   (rule 125)

    KEYBINOP	shift, and go to state 80

    keyarglist1	go to state 302
    keyarg	go to state 193
    keybinop	go to state 194



state 260

    msgsend  ->  name '(' arglistv1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 304



state 261

    expr1  ->  classname '[' arrayelems ']' .   (rule 70)

    $default	reduce using rule 70 (expr1)



state 262

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 68)

    ')' 	shift, and go to state 305



state 263

    expr1  ->  classname '(' arglistv1 optkeyarglist . ')'   (rule 69)

    ')' 	shift, and go to state 306



state 264

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 122)

    KEYBINOP	shift, and go to state 80

    keyarg	go to state 307
    keybinop	go to state 194



state 265

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 266

    keyarg  ->  keybinop exprseq .   (rule 123)

    $default	reduce using rule 123 (keyarg)



state 267

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 227)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108

    $default	reduce using rule 227 (binop)

    name	go to state 308
    binop	go to state 309



state 268

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 269

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 270

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 310



state 271

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 311



state 272

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 127

    $default	reduce using rule 13 (superclass)

    superclass	go to state 312



state 273

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 313
    CLASSVAR	shift, and go to state 314

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 315
    methods	go to state 316



state 274

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 168)

    ';' 	shift, and go to state 317



state 275

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 170)

    '|' 	shift, and go to state 318



state 276

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}' .   (rule 160)

    $default	reduce using rule 160 (block)



state 277

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 159)

    $default	reduce using rule 159 (block)



state 278

    arrayelems1  ->  arrayelems1 ',' exprseq ':' . exprseq   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 319
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 279

    arrayelems1  ->  arrayelems1 ',' keybinop exprseq .   (rule 115)

    $default	reduce using rule 115 (arrayelems1)



state 280

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 320
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 281

    listlit2  ->  '[' literallistc ']' .   (rule 189)

    $default	reduce using rule 189 (listlit2)



state 282

    literallist1  ->  literallist1 ',' listliteral .   (rule 194)

    $default	reduce using rule 194 (literallist1)



state 283

    listlit2  ->  classname '[' literallistc . ']'   (rule 190)

    ']' 	shift, and go to state 321



state 284

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 188)

    $default	reduce using rule 188 (listlit)



state 285

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 74)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 322

    $default	reduce using rule 74 (valrangex1)



state 286

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 73)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 76)

    '=' 	shift, and go to state 323

    $default	reduce using rule 73 (valrangex1)



state 287

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 78)

    ']' 	shift, and go to state 324



state 288

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 325
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 289

    arglist1  ->  arglist1 ',' exprseq .   (rule 118)

    $default	reduce using rule 118 (arglist1)



state 290

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 80)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 83)

    ']' 	shift, and go to state 326



state 291

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 79)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    ']' 	shift, and go to state 327
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 328
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 292

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 91)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 101)

    '=' 	shift, and go to state 329

    $default	reduce using rule 91 (expr)



state 293

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 330



state 294

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist . ')'   (rule 52)

    ')' 	shift, and go to state 331



state 295

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 49)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 332
    blockliteral	go to state 123
    block	go to state 44



state 296

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr '.' name '=' expr .   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 97 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 297

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 53)
    arglist1  ->  arglist1 . ',' exprseq   (rule 118)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 120)

    ',' 	shift, and go to state 257

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 333



state 298

    msgsend  ->  expr '.' name '(' arglistv1 . optkeyarglist ')'   (rule 54)

    ',' 	shift, and go to state 259

    $default	reduce using rule 124 (optkeyarglist)

    optkeyarglist	go to state 334



state 299

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 50)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 122)

    ',' 	shift, and go to state 264
    ')' 	shift, and go to state 335



state 300

    adverb  ->  '.' '(' exprseq . ')'   (rule 105)

    ')' 	shift, and go to state 336



state 301

    arglistv1  ->  arglist1 ',' '*' . exprseq   (rule 120)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 337
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 302

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 122)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 125)

    ',' 	shift, and go to state 264

    $default	reduce using rule 125 (optkeyarglist)



state 303

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 98)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '=' 	shift, and go to state 338
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 339
    blockliteral	go to state 123
    block	go to state 44



state 304

    msgsend  ->  name '(' arglistv1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 305

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 68)

    $default	reduce using rule 68 (expr1)



state 306

    expr1  ->  classname '(' arglistv1 optkeyarglist ')' .   (rule 69)

    $default	reduce using rule 69 (expr1)



state 307

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 122)

    $default	reduce using rule 122 (keyarglist1)



state 308

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 340



state 309

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 341



state 310

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 342



state 311

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 343



state 312

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 344



state 313

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 345
    '>' 	shift, and go to state 346
    READWRITEVAR	shift, and go to state 347

    $default	reduce using rule 195 (rwspec)

    rwslotdeflist	go to state 348
    rwslotdef	go to state 349
    rwspec	go to state 350



state 314

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 345
    '>' 	shift, and go to state 346
    READWRITEVAR	shift, and go to state 347

    $default	reduce using rule 195 (rwspec)

    rwslotdeflist	go to state 351
    rwslotdef	go to state 349
    rwspec	go to state 350



state 315

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 316

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 267
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 352

    methoddef	go to state 269
    name	go to state 270
    binop	go to state 271



state 317

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 168)

    $default	reduce using rule 168 (argdecls)



state 318

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 170)

    $default	reduce using rule 170 (argdecls)



state 319

    arrayelems1  ->  arrayelems1 ',' exprseq ':' exprseq .   (rule 116)

    $default	reduce using rule 116 (arrayelems1)



state 320

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 87)

    $default	reduce using rule 87 (valrange2)



state 321

    listlit2  ->  classname '[' literallistc ']' .   (rule 190)

    $default	reduce using rule 190 (listlit2)



state 322

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 353
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 323

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 354
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 324

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 78)

    '=' 	shift, and go to state 355

    $default	reduce using rule 75 (valrangex1)



state 325

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 100)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 100 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 326

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 80)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 83)

    '=' 	shift, and go to state 356

    $default	reduce using rule 80 (valrangexd)



state 327

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 79)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 82)

    '=' 	shift, and go to state 357

    $default	reduce using rule 79 (valrangexd)



state 328

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 84)

    ']' 	shift, and go to state 358



state 329

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 101)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 359
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 330

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 360
    blockliteral	go to state 123
    block	go to state 44



state 331

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist ')' .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 332

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 333

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 53)

    ')' 	shift, and go to state 361



state 334

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist . ')'   (rule 54)

    ')' 	shift, and go to state 362



state 335

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 50)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 363
    blockliteral	go to state 123
    block	go to state 44



state 336

    adverb  ->  '.' '(' exprseq ')' .   (rule 105)

    $default	reduce using rule 105 (adverb)



state 337

    arglistv1  ->  arglist1 ',' '*' exprseq .   (rule 120)

    $default	reduce using rule 120 (arglistv1)



state 338

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 364
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 339

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 340

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 365



state 341

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 166 (argdecls)

    argdecls	go to state 366



state 342

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 367



state 343

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 368



state 344

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 369



state 345

    rwspec  ->  '<' .   (rule 196)

    $default	reduce using rule 196 (rwspec)



state 346

    rwspec  ->  '>' .   (rule 198)

    $default	reduce using rule 198 (rwspec)



state 347

    rwspec  ->  READWRITEVAR .   (rule 197)

    $default	reduce using rule 197 (rwspec)



state 348

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 184)

    ';' 	shift, and go to state 370
    ',' 	shift, and go to state 371



state 349

    rwslotdeflist  ->  rwslotdef .   (rule 183)

    $default	reduce using rule 183 (rwslotdeflist)



state 350

    rwslotdef  ->  rwspec . name   (rule 185)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 186)

    NAME	shift, and go to state 6

    name	go to state 372



state 351

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 184)

    ';' 	shift, and go to state 373
    ',' 	shift, and go to state 371



state 352

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 353

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 77 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 354

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 76 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 355

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 374
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 356

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 375
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 357

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 376
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 358

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 84)

    '=' 	shift, and go to state 377

    $default	reduce using rule 81 (valrangexd)



state 359

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 101 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 360

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 361

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 53)

    BEGINCLOSEDFUNC	shift, and go to state 21
    '{' 	shift, and go to state 24

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 249
    blocklist	go to state 378
    blockliteral	go to state 123
    block	go to state 44



state 362

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist ')' .   (rule 54)

    $default	reduce using rule 54 (msgsend)



state 363

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 364

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 98 (expr)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 365

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 379



state 366

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 161 (funcvardecls)

    funcvardecls	go to state 380



state 367

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    PRIMITIVENAME	shift, and go to state 381
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 382
    funcvardecl	go to state 217
    primname	go to state 383



state 368

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    PRIMITIVENAME	shift, and go to state 381
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 384
    funcvardecl	go to state 217
    primname	go to state 383



state 369

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 313
    CLASSVAR	shift, and go to state 314

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 315
    methods	go to state 385



state 370

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 371

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 184)

    '<' 	shift, and go to state 345
    '>' 	shift, and go to state 346
    READWRITEVAR	shift, and go to state 347

    $default	reduce using rule 195 (rwspec)

    rwslotdef	go to state 386
    rwspec	go to state 350



state 372

    rwslotdef  ->  rwspec name .   (rule 185)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 186)

    '=' 	shift, and go to state 387

    $default	reduce using rule 185 (rwslotdef)



state 373

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 374

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 78)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 78 (valrangeassign)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 375

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 83 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 376

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 82 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 377

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 388
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 378

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 53)

    $default	reduce using rule 53 (msgsend)



state 379

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    PRIMITIVENAME	shift, and go to state 381
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 389
    funcvardecl	go to state 217
    primname	go to state 383



state 380

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 162)

    PRIMITIVENAME	shift, and go to state 381
    VAR 	shift, and go to state 15

    $default	reduce using rule 36 (primitive)

    primitive	go to state 390
    funcvardecl	go to state 217
    primname	go to state 383



state 381

    primname  ->  PRIMITIVENAME .   (rule 214)

    $default	reduce using rule 214 (primname)



state 382

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 391
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 392
    retval	go to state 393
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 394
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 383

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 395



state 384

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 391
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 396
    retval	go to state 393
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 394
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 385

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 101
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 267
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '}' 	shift, and go to state 397

    methoddef	go to state 269
    name	go to state 270
    binop	go to state 271



state 386

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 184)

    $default	reduce using rule 184 (rwslotdeflist)



state 387

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 186)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PIE 	shift, and go to state 20
    '-' 	shift, and go to state 22
    '#' 	shift, and go to state 201

    slotliteral	go to state 398
    listlit	go to state 203
    integer	go to state 204
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 205
    trueobj	go to state 206
    falseobj	go to state 207
    nilobj	go to state 208
    ascii	go to state 209
    symbol	go to state 210
    string	go to state 211



state 388

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109

    $default	reduce using rule 84 (valrangexd)

    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 389

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 391
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 399
    retval	go to state 393
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 394
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 390

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '^' 	shift, and go to state 391
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    $default	reduce using rule 38 (retval)

    methbody	go to state 400
    retval	go to state 393
    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 38
    exprn	go to state 39
    exprseq	go to state 394
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 391

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    CURRYARG	shift, and go to state 14
    NILOBJ	shift, and go to state 16
    TRUEOBJ	shift, and go to state 17
    FALSEOBJ	shift, and go to state 18
    PSEUDOVAR	shift, and go to state 19
    PIE 	shift, and go to state 20
    BEGINCLOSEDFUNC	shift, and go to state 21
    '-' 	shift, and go to state 22
    '`' 	shift, and go to state 23
    '{' 	shift, and go to state 24
    '[' 	shift, and go to state 25
    '(' 	shift, and go to state 77
    '~' 	shift, and go to state 28
    '#' 	shift, and go to state 29

    msgsend	go to state 33
    expr1	go to state 34
    valrangex1	go to state 35
    valrangeassign	go to state 36
    valrangexd	go to state 37
    expr	go to state 401
    blockliteral	go to state 41
    pushname	go to state 42
    pushliteral	go to state 43
    block	go to state 44
    listlit	go to state 47
    integer	go to state 48
    floatr	go to state 49
    accidental	go to state 50
    pie 	go to state 51
    floatp	go to state 52
    name	go to state 53
    classname	go to state 54
    trueobj	go to state 55
    falseobj	go to state 56
    nilobj	go to state 57
    ascii	go to state 58
    symbol	go to state 59
    string	go to state 60
    pseudovar	go to state 61
    curryarg	go to state 62



state 392

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 402



state 393

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 394

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 391

    $default	reduce using rule 38 (retval)

    retval	go to state 403



state 395

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 396

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 404



state 397

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 398

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 186)

    $default	reduce using rule 186 (rwslotdef)



state 399

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 405



state 400

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 406



state 401

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 81)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 84)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 91)
    expr  ->  expr . binop2 adverb expr   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 101)

    BINOP	shift, and go to state 101
    KEYBINOP	shift, and go to state 80
    '-' 	shift, and go to state 102
    '<' 	shift, and go to state 103
    '>' 	shift, and go to state 104
    '*' 	shift, and go to state 105
    '+' 	shift, and go to state 106
    '|' 	shift, and go to state 107
    READWRITEVAR	shift, and go to state 108
    '.' 	shift, and go to state 109
    ';' 	shift, and go to state 154

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 407
    binop	go to state 110
    keybinop	go to state 111
    binop2	go to state 112



state 402

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 403

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 404

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 405

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 406

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 407

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 408

    $   	go to state 409



state 409

    $   	go to state 410



state 410

    $default	accept
