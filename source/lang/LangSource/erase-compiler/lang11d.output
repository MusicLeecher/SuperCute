

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 69 between rule 68 and token BINOP resolved as reduce.
Conflict in state 69 between rule 68 and token KEYBINOP resolved as reduce.
Conflict in state 69 between rule 68 and token '-' resolved as reduce.
Conflict in state 69 between rule 68 and token '<' resolved as reduce.
Conflict in state 69 between rule 68 and token '>' resolved as reduce.
Conflict in state 69 between rule 68 and token '*' resolved as reduce.
Conflict in state 69 between rule 68 and token '+' resolved as reduce.
Conflict in state 69 between rule 68 and token '|' resolved as reduce.
Conflict in state 69 between rule 68 and token READWRITEVAR resolved as reduce.
Conflict in state 69 between rule 68 and token '.' resolved as reduce.
Conflict in state 158 between rule 69 and token BINOP resolved as reduce.
Conflict in state 158 between rule 69 and token KEYBINOP resolved as reduce.
Conflict in state 158 between rule 69 and token '-' resolved as reduce.
Conflict in state 158 between rule 69 and token '<' resolved as reduce.
Conflict in state 158 between rule 69 and token '>' resolved as reduce.
Conflict in state 158 between rule 69 and token '*' resolved as reduce.
Conflict in state 158 between rule 69 and token '+' resolved as reduce.
Conflict in state 158 between rule 69 and token '|' resolved as reduce.
Conflict in state 158 between rule 69 and token READWRITEVAR resolved as reduce.
Conflict in state 158 between rule 69 and token '.' resolved as shift.
Conflict in state 159 between rule 70 and token BINOP resolved as reduce.
Conflict in state 159 between rule 70 and token KEYBINOP resolved as reduce.
Conflict in state 159 between rule 70 and token '-' resolved as reduce.
Conflict in state 159 between rule 70 and token '<' resolved as reduce.
Conflict in state 159 between rule 70 and token '>' resolved as reduce.
Conflict in state 159 between rule 70 and token '*' resolved as reduce.
Conflict in state 159 between rule 70 and token '+' resolved as reduce.
Conflict in state 159 between rule 70 and token '|' resolved as reduce.
Conflict in state 159 between rule 70 and token READWRITEVAR resolved as reduce.
Conflict in state 159 between rule 70 and token '.' resolved as shift.
Conflict in state 161 between rule 71 and token BINOP resolved as shift.
Conflict in state 161 between rule 71 and token KEYBINOP resolved as shift.
Conflict in state 161 between rule 71 and token '-' resolved as shift.
Conflict in state 161 between rule 71 and token '<' resolved as shift.
Conflict in state 161 between rule 71 and token '>' resolved as shift.
Conflict in state 161 between rule 71 and token '*' resolved as shift.
Conflict in state 161 between rule 71 and token '+' resolved as shift.
Conflict in state 161 between rule 71 and token '|' resolved as shift.
Conflict in state 161 between rule 71 and token READWRITEVAR resolved as shift.
Conflict in state 161 between rule 71 and token '.' resolved as shift.
Conflict in state 195 between rule 72 and token BINOP resolved as shift.
Conflict in state 195 between rule 72 and token KEYBINOP resolved as shift.
Conflict in state 195 between rule 72 and token '-' resolved as shift.
Conflict in state 195 between rule 72 and token '<' resolved as shift.
Conflict in state 195 between rule 72 and token '>' resolved as shift.
Conflict in state 195 between rule 72 and token '*' resolved as shift.
Conflict in state 195 between rule 72 and token '+' resolved as shift.
Conflict in state 195 between rule 72 and token '|' resolved as shift.
Conflict in state 195 between rule 72 and token READWRITEVAR resolved as shift.
Conflict in state 195 between rule 72 and token '.' resolved as shift.
Conflict in state 202 between rule 75 and token BINOP resolved as shift.
Conflict in state 202 between rule 75 and token KEYBINOP resolved as shift.
Conflict in state 202 between rule 75 and token '-' resolved as shift.
Conflict in state 202 between rule 75 and token '<' resolved as shift.
Conflict in state 202 between rule 75 and token '>' resolved as shift.
Conflict in state 202 between rule 75 and token '*' resolved as shift.
Conflict in state 202 between rule 75 and token '+' resolved as shift.
Conflict in state 202 between rule 75 and token '|' resolved as shift.
Conflict in state 202 between rule 75 and token READWRITEVAR resolved as shift.
Conflict in state 202 between rule 75 and token '.' resolved as shift.
Conflict in state 241 between rule 73 and token BINOP resolved as shift.
Conflict in state 241 between rule 73 and token KEYBINOP resolved as shift.
Conflict in state 241 between rule 73 and token '-' resolved as shift.
Conflict in state 241 between rule 73 and token '<' resolved as shift.
Conflict in state 241 between rule 73 and token '>' resolved as shift.
Conflict in state 241 between rule 73 and token '*' resolved as shift.
Conflict in state 241 between rule 73 and token '+' resolved as shift.
Conflict in state 241 between rule 73 and token '|' resolved as shift.
Conflict in state 241 between rule 73 and token READWRITEVAR resolved as shift.
Conflict in state 241 between rule 73 and token '.' resolved as shift.
Conflict in state 261 between rule 76 and token BINOP resolved as shift.
Conflict in state 261 between rule 76 and token KEYBINOP resolved as shift.
Conflict in state 261 between rule 76 and token '-' resolved as shift.
Conflict in state 261 between rule 76 and token '<' resolved as shift.
Conflict in state 261 between rule 76 and token '>' resolved as shift.
Conflict in state 261 between rule 76 and token '*' resolved as shift.
Conflict in state 261 between rule 76 and token '+' resolved as shift.
Conflict in state 261 between rule 76 and token '|' resolved as shift.
Conflict in state 261 between rule 76 and token READWRITEVAR resolved as shift.
Conflict in state 261 between rule 76 and token '.' resolved as shift.
Conflict in state 282 between rule 77 and token BINOP resolved as shift.
Conflict in state 282 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 282 between rule 77 and token '-' resolved as shift.
Conflict in state 282 between rule 77 and token '<' resolved as shift.
Conflict in state 282 between rule 77 and token '>' resolved as shift.
Conflict in state 282 between rule 77 and token '*' resolved as shift.
Conflict in state 282 between rule 77 and token '+' resolved as shift.
Conflict in state 282 between rule 77 and token '|' resolved as shift.
Conflict in state 282 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 282 between rule 77 and token '.' resolved as shift.
Conflict in state 286 between rule 74 and token BINOP resolved as shift.
Conflict in state 286 between rule 74 and token KEYBINOP resolved as shift.
Conflict in state 286 between rule 74 and token '-' resolved as shift.
Conflict in state 286 between rule 74 and token '<' resolved as shift.
Conflict in state 286 between rule 74 and token '>' resolved as shift.
Conflict in state 286 between rule 74 and token '*' resolved as shift.
Conflict in state 286 between rule 74 and token '+' resolved as shift.
Conflict in state 286 between rule 74 and token '|' resolved as shift.
Conflict in state 286 between rule 74 and token READWRITEVAR resolved as shift.
Conflict in state 286 between rule 74 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 49   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 51   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' name blocklist
rule 53   expr1 -> pushliteral
rule 54   expr1 -> blockliteral
rule 55   expr1 -> pushname
rule 56   expr1 -> msgsend
rule 57   expr1 -> '(' exprseq ')'
rule 58   expr1 -> '~' name
rule 59   expr1 -> '[' arglistc ']'
rule 60   expr1 -> pseudovar
rule 61   expr1 -> classname '(' keyarglist1 ')'
rule 62   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 63   expr1 -> classname '[' arglistc ']'
rule 64   expr -> expr1
rule 65   expr -> expr1 '[' arglist1 ']'
rule 66   expr -> expr '.' '[' arglist1 ']'
rule 67   expr -> classname
rule 68   expr -> '`' expr
rule 69   expr -> expr binop expr
rule 70   expr -> expr keybinop expr
rule 71   expr -> name '=' expr
rule 72   expr -> '~' name '=' expr
rule 73   expr -> expr '.' name '=' expr
rule 74   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 75   expr -> '#' mavars '=' expr
rule 76   expr -> expr1 '[' arglist1 ']' '=' expr
rule 77   expr -> expr '.' '[' arglist1 ']' '=' expr
rule 78   exprn -> expr
rule 79   exprn -> exprn ';' expr
rule 80   exprseq -> exprn optsemi
rule 81   arglistc ->		/* empty */
rule 82   arglistc -> arglist1 optcomma
rule 83   arglist1 -> exprseq
rule 84   arglist1 -> arglist1 ',' exprseq
rule 85   keyarglist1 -> keyarg
rule 86   keyarglist1 -> keyarglist1 ',' keyarg
rule 87   keyarg -> keybinop exprseq
rule 88   optkeyarglist ->		/* empty */
rule 89   optkeyarglist -> ',' keyarglist1
rule 90   mavars -> mavarlist
rule 91   mavars -> mavarlist ELLIPSIS name
rule 92   mavarlist -> name
rule 93   mavarlist -> mavarlist ',' name
rule 94   slotliteral -> integer
rule 95   slotliteral -> floatp
rule 96   slotliteral -> ascii
rule 97   slotliteral -> string
rule 98   slotliteral -> symbol
rule 99   slotliteral -> trueobj
rule 100  slotliteral -> falseobj
rule 101  slotliteral -> nilobj
rule 102  slotliteral -> infobj
rule 103  slotliteral -> listlit
rule 104  blockliteral -> block
rule 105  pushname -> name
rule 106  pushliteral -> integer
rule 107  pushliteral -> floatp
rule 108  pushliteral -> ascii
rule 109  pushliteral -> string
rule 110  pushliteral -> symbol
rule 111  pushliteral -> trueobj
rule 112  pushliteral -> falseobj
rule 113  pushliteral -> nilobj
rule 114  pushliteral -> infobj
rule 115  pushliteral -> listlit
rule 116  listliteral -> integer
rule 117  listliteral -> floatp
rule 118  listliteral -> ascii
rule 119  listliteral -> string
rule 120  listliteral -> symbol
rule 121  listliteral -> trueobj
rule 122  listliteral -> falseobj
rule 123  listliteral -> nilobj
rule 124  listliteral -> infobj
rule 125  listliteral -> listlit2
rule 126  block -> '{' argdecls funcvardecls funcbody '}'
rule 127  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 128  funcvardecls ->		/* empty */
rule 129  funcvardecls -> funcvardecls funcvardecl
rule 130  funcvardecls1 -> funcvardecl
rule 131  funcvardecls1 -> funcvardecls1 funcvardecl
rule 132  funcvardecl -> VAR slotdeflist ';'
rule 133  argdecls ->		/* empty */
rule 134  argdecls -> ARG slotdeflist ';'
rule 135  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 136  argdecls -> '|' slotdeflist '|'
rule 137  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 138  slotdeflist0 ->		/* empty */
rule 139  slotdeflist0 -> slotdeflist
rule 140  slotdeflist -> slotdef
rule 141  slotdeflist -> slotdeflist ',' slotdef
rule 142  slotdef -> name
rule 143  slotdef -> name '=' slotliteral
rule 144  rwslotdeflist -> rwslotdef
rule 145  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 146  rwslotdef -> rwspec name
rule 147  rwslotdef -> rwspec name '=' slotliteral
rule 148  listlit -> '#' '[' literallistc ']'
rule 149  listlit -> '#' classname '[' literallistc ']'
rule 150  listlit2 -> '[' literallistc ']'
rule 151  listlit2 -> classname '[' literallistc ']'
rule 152  literallistc ->		/* empty */
rule 153  literallistc -> literallist1 optcomma
rule 154  literallist1 -> listliteral
rule 155  literallist1 -> literallist1 ',' listliteral
rule 156  rwspec ->		/* empty */
rule 157  rwspec -> '<'
rule 158  rwspec -> READWRITEVAR
rule 159  rwspec -> '>'
rule 160  integer -> INTEGER
rule 161  integer -> '-' INTEGER
rule 162  floatr -> FLOAT
rule 163  floatr -> '-' FLOAT
rule 164  pie -> PIE
rule 165  floatp -> floatr
rule 166  floatp -> floatr pie
rule 167  floatp -> integer pie
rule 168  floatp -> pie
rule 169  floatp -> '-' pie
rule 170  name -> NAME
rule 171  classname -> CLASSNAME
rule 172  primname -> PRIMITIVENAME
rule 173  trueobj -> TRUEOBJ
rule 174  falseobj -> FALSEOBJ
rule 175  nilobj -> NILOBJ
rule 176  infobj -> INFINITUMOBJ
rule 177  ascii -> ASCII
rule 178  symbol -> SYMBOL
rule 179  string -> string1
rule 180  string -> string string1
rule 181  string1 -> STRING
rule 182  pseudovar -> PSEUDOVAR
rule 183  binop -> BINOP
rule 184  binop -> READWRITEVAR
rule 185  binop -> '<'
rule 186  binop -> '>'
rule 187  binop -> '-'
rule 188  binop -> '*'
rule 189  binop -> '+'
rule 190  binop -> '|'
rule 191  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 75 127 148 149
'(' (40) 31 47 48 49 50 51 57 61 62 74
')' (41) 31 47 48 49 50 51 57 61 62 74
'*' (42) 22 24 188
'+' (43) 10 189
',' (44) 28 84 86 89 93 141 145 155
'-' (45) 161 163 169 187
'.' (46) 48 49 50 51 52 66 73 77
':' (58) 14
';' (59) 17 18 26 79 132 134 135
'<' (60) 157 185
'=' (61) 71 72 73 74 75 76 77 143 147
'>' (62) 159 186
'[' (91) 9 59 63 65 66 76 77 148 149 150 151
']' (93) 9 59 63 65 66 76 77 148 149 150 151
'^' (94) 39 41
'`' (96) 68
'{' (123) 8 9 10 21 22 23 24 126 127
'|' (124) 136 137 190
'}' (125) 8 9 10 21 22 23 24 126 127
'~' (126) 58 72
error (256)
NAME (257) 170
INTEGER (258) 160 161
FLOAT (259) 162 163
SYMBOL (260) 178
STRING (261) 181
ASCII (262) 177
PRIMITIVENAME (263) 172
CLASSNAME (264) 171
VAR (265) 18 132
ARG (266) 134 135
CLASSVAR (267) 17
CONST (268)
NILOBJ (269) 175
TRUEOBJ (270) 173
FALSEOBJ (271) 174
INFINITUMOBJ (272) 176
PSEUDOVAR (273) 182
ELLIPSIS (274) 91 135 137
PIE (275) 164
BADTOKEN (276)
INTERPRET (277) 3
BINOP (278) 183
KEYBINOP (279) 191
READWRITEVAR (280) 158 184
UMINUS (281)

Nonterminals, with rules where they appear

root (49)
    on left: 1 2 3
classes (50)
    on left: 4 5, on right: 1 5
classextensions (51)
    on left: 6 7, on right: 2 7
classdef (52)
    on left: 8 9, on right: 5
classextension (53)
    on left: 10, on right: 6 7
optname (54)
    on left: 11 12, on right: 9
superclass (55)
    on left: 13 14, on right: 8 9
classvardecls (56)
    on left: 15 16, on right: 8 9 16
classvardecl (57)
    on left: 17 18, on right: 16
methods (58)
    on left: 19 20, on right: 8 9 10 20
methoddef (59)
    on left: 21 22 23 24, on right: 20
optsemi (60)
    on left: 25 26, on right: 37 39 41 80
optcomma (61)
    on left: 27 28, on right: 82 153
funcbody (62)
    on left: 29 30, on right: 31 32 33 126 127
cmdlinecode (63)
    on left: 31 32 33, on right: 3
methbody (64)
    on left: 34 35, on right: 21 22 23 24
primitive (65)
    on left: 36 37, on right: 21 22 23 24
retval (66)
    on left: 38 39, on right: 34 35
funretval (67)
    on left: 40 41, on right: 29 30
blocklist1 (68)
    on left: 42 43, on right: 43 45 46
blocklist (69)
    on left: 44 45, on right: 47 48 49 50 51 52
msgsend (70)
    on left: 46 47 48 49 50 51 52, on right: 56
expr1 (71)
    on left: 53 54 55 56 57 58 59 60 61 62 63, on right: 64 65 76
expr (72)
    on left: 64 65 66 67 68 69 70 71 72 73 74 75 76 77,
    on right: 39 41 48 49 50 51 52 66 68 69 70 71 72 73 74 75 76 77
    78 79
exprn (73)
    on left: 78 79, on right: 79 80
exprseq (74)
    on left: 80, on right: 30 35 57 83 84 87
arglistc (75)
    on left: 81 82, on right: 59 63
arglist1 (76)
    on left: 83 84, on right: 47 50 51 62 65 66 74 76 77 82 84
keyarglist1 (77)
    on left: 85 86, on right: 48 49 61 86 89
keyarg (78)
    on left: 87, on right: 85 86
optkeyarglist (79)
    on left: 88 89, on right: 47 50 51 62 74
mavars (80)
    on left: 90 91, on right: 75
mavarlist (81)
    on left: 92 93, on right: 90 91 93
slotliteral (82)
    on left: 94 95 96 97 98 99 100 101 102 103, on right: 143 147
blockliteral (83)
    on left: 104, on right: 42 43 54
pushname (84)
    on left: 105, on right: 55
pushliteral (85)
    on left: 106 107 108 109 110 111 112 113 114 115,
    on right: 53
listliteral (86)
    on left: 116 117 118 119 120 121 122 123 124 125,
    on right: 154 155
block (87)
    on left: 126 127, on right: 104
funcvardecls (88)
    on left: 128 129, on right: 21 22 23 24 126 127 129
funcvardecls1 (89)
    on left: 130 131, on right: 31 32 131
funcvardecl (90)
    on left: 132, on right: 129 130 131
argdecls (91)
    on left: 133 134 135 136 137, on right: 21 22 23 24 126 127
slotdeflist0 (92)
    on left: 138 139, on right: 135 137
slotdeflist (93)
    on left: 140 141, on right: 132 134 136 139 141
slotdef (94)
    on left: 142 143, on right: 140 141
rwslotdeflist (95)
    on left: 144 145, on right: 17 18 145
rwslotdef (96)
    on left: 146 147, on right: 144 145
listlit (97)
    on left: 148 149, on right: 103 115
listlit2 (98)
    on left: 150 151, on right: 125
literallistc (99)
    on left: 152 153, on right: 148 149 150 151
literallist1 (100)
    on left: 154 155, on right: 153 155
rwspec (101)
    on left: 156 157 158 159, on right: 146 147
integer (102)
    on left: 160 161, on right: 94 106 116 167
floatr (103)
    on left: 162 163, on right: 165 166
pie (104)
    on left: 164, on right: 166 167 168 169
floatp (105)
    on left: 165 166 167 168 169, on right: 95 107 117
name (106)
    on left: 170, on right: 12 21 22 46 47 49 51 52 58 71 72 73 74
    91 92 93 105 135 137 142 143 146 147
classname (107)
    on left: 171, on right: 8 9 10 14 61 62 63 67 149 151
primname (108)
    on left: 172, on right: 37
trueobj (109)
    on left: 173, on right: 99 111 121
falseobj (110)
    on left: 174, on right: 100 112 122
nilobj (111)
    on left: 175, on right: 101 113 123
infobj (112)
    on left: 176, on right: 102 114 124
ascii (113)
    on left: 177, on right: 96 108 118
symbol (114)
    on left: 178, on right: 98 110 120
string (115)
    on left: 179 180, on right: 97 109 119 180
string1 (116)
    on left: 181, on right: 179 180
pseudovar (117)
    on left: 182, on right: 60
binop (118)
    on left: 183 184 185 186 187 188 189 190, on right: 23 24 69
keybinop (119)
    on left: 191, on right: 70 87


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 325
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 24
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 28
    cmdlinecode	go to state 29
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 35
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecls1	go to state 40
    funcvardecl	go to state 41
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 12

    classname	go to state 58



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 12

    $default	reduce using rule 1 (root)

    classdef	go to state 59
    classname	go to state 60



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 61



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 170)

    $default	reduce using rule 170 (name)



state 7

    integer  ->  INTEGER .   (rule 160)

    $default	reduce using rule 160 (integer)



state 8

    floatr  ->  FLOAT .   (rule 162)

    $default	reduce using rule 162 (floatr)



state 9

    symbol  ->  SYMBOL .   (rule 178)

    $default	reduce using rule 178 (symbol)



state 10

    string1  ->  STRING .   (rule 181)

    $default	reduce using rule 181 (string1)



state 11

    ascii  ->  ASCII .   (rule 177)

    $default	reduce using rule 177 (ascii)



state 12

    classname  ->  CLASSNAME .   (rule 171)

    $default	reduce using rule 171 (classname)



state 13

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 132)

    NAME	shift, and go to state 6

    slotdeflist	go to state 62
    slotdef	go to state 63
    name	go to state 64



state 14

    nilobj  ->  NILOBJ .   (rule 175)

    $default	reduce using rule 175 (nilobj)



state 15

    trueobj  ->  TRUEOBJ .   (rule 173)

    $default	reduce using rule 173 (trueobj)



state 16

    falseobj  ->  FALSEOBJ .   (rule 174)

    $default	reduce using rule 174 (falseobj)



state 17

    infobj  ->  INFINITUMOBJ .   (rule 176)

    $default	reduce using rule 176 (infobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 182)

    $default	reduce using rule 182 (pseudovar)



state 19

    pie  ->  PIE .   (rule 164)

    $default	reduce using rule 164 (pie)



state 20

    integer  ->  '-' . INTEGER   (rule 161)
    floatr  ->  '-' . FLOAT   (rule 163)
    floatp  ->  '-' . pie   (rule 169)

    INTEGER	shift, and go to state 65
    FLOAT	shift, and go to state 66
    PIE 	shift, and go to state 19

    pie 	go to state 67



state 21

    expr  ->  '`' . expr   (rule 68)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 69
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 22

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 126)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 72



state 23

    expr1  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 81 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglistc	go to state 74
    arglist1	go to state 75
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 24

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 57)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 76
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecls1	go to state 77
    funcvardecl	go to state 41
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 25

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 78
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 26

    expr1  ->  '~' . name   (rule 58)
    expr  ->  '~' . name '=' expr   (rule 72)

    NAME	shift, and go to state 6

    name	go to state 79



state 27

    expr  ->  '#' . mavars '=' expr   (rule 75)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 127)
    listlit  ->  '#' . '[' literallistc ']'   (rule 148)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 149)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 12
    '{' 	shift, and go to state 80
    '[' 	shift, and go to state 81

    mavars	go to state 82
    mavarlist	go to state 83
    name	go to state 84
    classname	go to state 85



state 28

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 29

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 30

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 31

    expr1  ->  msgsend .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 32

    expr  ->  expr1 .   (rule 64)
    expr  ->  expr1 . '[' arglist1 ']'   (rule 65)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 76)

    '[' 	shift, and go to state 86

    $default	reduce using rule 64 (expr)



state 33

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)
    exprn  ->  expr .   (rule 78)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 78 (exprn)

    binop	go to state 97
    keybinop	go to state 98



state 34

    exprn  ->  exprn . ';' expr   (rule 79)
    exprseq  ->  exprn . optsemi   (rule 80)

    ';' 	shift, and go to state 99

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 100



state 35

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 25

    $default	reduce using rule 40 (funretval)

    funretval	go to state 101



state 36

    expr1  ->  blockliteral .   (rule 54)

    $default	reduce using rule 54 (expr1)



state 37

    expr1  ->  pushname .   (rule 55)

    $default	reduce using rule 55 (expr1)



state 38

    expr1  ->  pushliteral .   (rule 53)

    $default	reduce using rule 53 (expr1)



state 39

    blockliteral  ->  block .   (rule 104)

    $default	reduce using rule 104 (blockliteral)



state 40

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 131)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 102
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 35
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecl	go to state 103
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 41

    funcvardecls1  ->  funcvardecl .   (rule 130)

    $default	reduce using rule 130 (funcvardecls1)



state 42

    pushliteral  ->  listlit .   (rule 115)

    $default	reduce using rule 115 (pushliteral)



state 43

    pushliteral  ->  integer .   (rule 106)
    floatp  ->  integer . pie   (rule 167)

    PIE 	shift, and go to state 19

    $default	reduce using rule 106 (pushliteral)

    pie 	go to state 104



state 44

    floatp  ->  floatr .   (rule 165)
    floatp  ->  floatr . pie   (rule 166)

    PIE 	shift, and go to state 19

    $default	reduce using rule 165 (floatp)

    pie 	go to state 105



state 45

    floatp  ->  pie .   (rule 168)

    $default	reduce using rule 168 (floatp)



state 46

    pushliteral  ->  floatp .   (rule 107)

    $default	reduce using rule 107 (pushliteral)



state 47

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name . '=' expr   (rule 71)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 74)
    pushname  ->  name .   (rule 105)

    '=' 	shift, and go to state 106
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 107
    '#' 	shift, and go to state 108

    $default	reduce using rule 105 (pushname)

    blocklist1	go to state 109
    blockliteral	go to state 110
    block	go to state 39



state 48

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 61)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 62)
    expr1  ->  classname . '[' arglistc ']'   (rule 63)
    expr  ->  classname .   (rule 67)

    '[' 	shift, and go to state 111
    '(' 	shift, and go to state 112

    $default	reduce using rule 67 (expr)



state 49

    pushliteral  ->  trueobj .   (rule 111)

    $default	reduce using rule 111 (pushliteral)



state 50

    pushliteral  ->  falseobj .   (rule 112)

    $default	reduce using rule 112 (pushliteral)



state 51

    pushliteral  ->  nilobj .   (rule 113)

    $default	reduce using rule 113 (pushliteral)



state 52

    pushliteral  ->  infobj .   (rule 114)

    $default	reduce using rule 114 (pushliteral)



state 53

    pushliteral  ->  ascii .   (rule 108)

    $default	reduce using rule 108 (pushliteral)



state 54

    pushliteral  ->  symbol .   (rule 110)

    $default	reduce using rule 110 (pushliteral)



state 55

    pushliteral  ->  string .   (rule 109)
    string  ->  string . string1   (rule 180)

    STRING	shift, and go to state 10

    $default	reduce using rule 109 (pushliteral)

    string1	go to state 113



state 56

    string  ->  string1 .   (rule 179)

    $default	reduce using rule 179 (string)



state 57

    expr1  ->  pseudovar .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 58

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 114



state 59

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 60

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    '[' 	shift, and go to state 115
    ':' 	shift, and go to state 116

    $default	reduce using rule 13 (superclass)

    superclass	go to state 117



state 61

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 62

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 132)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 141)

    ';' 	shift, and go to state 118
    ',' 	shift, and go to state 119



state 63

    slotdeflist  ->  slotdef .   (rule 140)

    $default	reduce using rule 140 (slotdeflist)



state 64

    slotdef  ->  name .   (rule 142)
    slotdef  ->  name . '=' slotliteral   (rule 143)

    '=' 	shift, and go to state 120

    $default	reduce using rule 142 (slotdef)



state 65

    integer  ->  '-' INTEGER .   (rule 161)

    $default	reduce using rule 161 (integer)



state 66

    floatr  ->  '-' FLOAT .   (rule 163)

    $default	reduce using rule 163 (floatr)



state 67

    floatp  ->  '-' pie .   (rule 169)

    $default	reduce using rule 169 (floatp)



state 68

    expr1  ->  '(' . exprseq ')'   (rule 57)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 76
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 69

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  '`' expr .   (rule 68)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)


    $default	reduce using rule 68 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 70

    argdecls  ->  ARG . slotdeflist ';'   (rule 134)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 135)

    NAME	shift, and go to state 6

    $default	reduce using rule 138 (slotdeflist0)

    slotdeflist0	go to state 121
    slotdeflist	go to state 122
    slotdef	go to state 63
    name	go to state 64



state 71

    argdecls  ->  '|' . slotdeflist '|'   (rule 136)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 137)

    NAME	shift, and go to state 6

    $default	reduce using rule 138 (slotdeflist0)

    slotdeflist0	go to state 123
    slotdeflist	go to state 124
    slotdef	go to state 63
    name	go to state 64



state 72

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 126)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 125



state 73

    arglist1  ->  exprseq .   (rule 83)

    $default	reduce using rule 83 (arglist1)



state 74

    expr1  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 126



state 75

    arglistc  ->  arglist1 . optcomma   (rule 82)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ',' 	shift, and go to state 127

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 128



state 76

    expr1  ->  '(' exprseq . ')'   (rule 57)

    ')' 	shift, and go to state 129



state 77

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 131)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 130
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 35
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecl	go to state 103
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 78

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96
    ';' 	shift, and go to state 131

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 132
    binop	go to state 97
    keybinop	go to state 98



state 79

    expr1  ->  '~' name .   (rule 58)
    expr  ->  '~' name . '=' expr   (rule 72)

    '=' 	shift, and go to state 133

    $default	reduce using rule 58 (expr1)



state 80

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 127)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 134



state 81

    listlit  ->  '#' '[' . literallistc ']'   (rule 148)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 135

    $default	reduce using rule 152 (literallistc)

    listliteral	go to state 136
    listlit2	go to state 137
    literallistc	go to state 138
    literallist1	go to state 139
    integer	go to state 140
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 141
    classname	go to state 142
    trueobj	go to state 143
    falseobj	go to state 144
    nilobj	go to state 145
    infobj	go to state 146
    ascii	go to state 147
    symbol	go to state 148
    string	go to state 149
    string1	go to state 56



state 82

    expr  ->  '#' mavars . '=' expr   (rule 75)

    '=' 	shift, and go to state 150



state 83

    mavars  ->  mavarlist .   (rule 90)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 91)
    mavarlist  ->  mavarlist . ',' name   (rule 93)

    ELLIPSIS	shift, and go to state 151
    ',' 	shift, and go to state 152

    $default	reduce using rule 90 (mavars)



state 84

    mavarlist  ->  name .   (rule 92)

    $default	reduce using rule 92 (mavarlist)



state 85

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 149)

    '[' 	shift, and go to state 153



state 86

    expr  ->  expr1 '[' . arglist1 ']'   (rule 65)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 154
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 87

    binop  ->  BINOP .   (rule 183)

    $default	reduce using rule 183 (binop)



state 88

    keybinop  ->  KEYBINOP .   (rule 191)

    $default	reduce using rule 191 (keybinop)



state 89

    binop  ->  '-' .   (rule 187)

    $default	reduce using rule 187 (binop)



state 90

    binop  ->  '<' .   (rule 185)

    $default	reduce using rule 185 (binop)



state 91

    binop  ->  '>' .   (rule 186)

    $default	reduce using rule 186 (binop)



state 92

    binop  ->  '*' .   (rule 188)

    $default	reduce using rule 188 (binop)



state 93

    binop  ->  '+' .   (rule 189)

    $default	reduce using rule 189 (binop)



state 94

    binop  ->  '|' .   (rule 190)

    $default	reduce using rule 190 (binop)



state 95

    binop  ->  READWRITEVAR .   (rule 184)

    $default	reduce using rule 184 (binop)



state 96

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . name blocklist   (rule 52)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 66)
    expr  ->  expr '.' . name '=' expr   (rule 73)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 155
    '(' 	shift, and go to state 156

    name	go to state 157



state 97

    expr  ->  expr binop . expr   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 158
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 98

    expr  ->  expr keybinop . expr   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 159
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 99

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 160
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 100

    exprseq  ->  exprn optsemi .   (rule 80)

    $default	reduce using rule 80 (exprseq)



state 101

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 102

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 103

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 131)

    $default	reduce using rule 131 (funcvardecls1)



state 104

    floatp  ->  integer pie .   (rule 167)

    $default	reduce using rule 167 (floatp)



state 105

    floatp  ->  floatr pie .   (rule 166)

    $default	reduce using rule 166 (floatp)



state 106

    expr  ->  name '=' . expr   (rule 71)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 161
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 107

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 74)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 162
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 108

    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 127)

    '{' 	shift, and go to state 80



state 109

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 163
    block	go to state 39



state 110

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 111

    expr1  ->  classname '[' . arglistc ']'   (rule 63)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 81 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglistc	go to state 164
    arglist1	go to state 75
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 112

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 61)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 62)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 165
    keyarglist1	go to state 166
    keyarg	go to state 167
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57
    keybinop	go to state 168



state 113

    string  ->  string string1 .   (rule 180)

    $default	reduce using rule 180 (string)



state 114

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 169



state 115

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 170
    name	go to state 171



state 116

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 12

    classname	go to state 172



state 117

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 173



state 118

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 132)

    $default	reduce using rule 132 (funcvardecl)



state 119

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 141)

    NAME	shift, and go to state 6

    slotdef	go to state 174
    name	go to state 64



state 120

    slotdef  ->  name '=' . slotliteral   (rule 143)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 175

    slotliteral	go to state 176
    listlit	go to state 177
    integer	go to state 178
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 179
    trueobj	go to state 180
    falseobj	go to state 181
    nilobj	go to state 182
    infobj	go to state 183
    ascii	go to state 184
    symbol	go to state 185
    string	go to state 186
    string1	go to state 56



state 121

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 135)

    ELLIPSIS	shift, and go to state 187



state 122

    argdecls  ->  ARG slotdeflist . ';'   (rule 134)
    slotdeflist0  ->  slotdeflist .   (rule 139)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 141)

    ';' 	shift, and go to state 188
    ',' 	shift, and go to state 119

    $default	reduce using rule 139 (slotdeflist0)



state 123

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 137)

    ELLIPSIS	shift, and go to state 189



state 124

    argdecls  ->  '|' slotdeflist . '|'   (rule 136)
    slotdeflist0  ->  slotdeflist .   (rule 139)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 141)

    '|' 	shift, and go to state 190
    ',' 	shift, and go to state 119

    $default	reduce using rule 139 (slotdeflist0)



state 125

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 126)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 191
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 35
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecl	go to state 192
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 126

    expr1  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 127

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 193
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 128

    arglistc  ->  arglist1 optcomma .   (rule 82)

    $default	reduce using rule 82 (arglistc)



state 129

    expr1  ->  '(' exprseq ')' .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 130

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 194



state 131

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 132

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 133

    expr  ->  '~' name '=' . expr   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 195
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 134

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 127)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 196



state 135

    listlit2  ->  '[' . literallistc ']'   (rule 150)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 135

    $default	reduce using rule 152 (literallistc)

    listliteral	go to state 136
    listlit2	go to state 137
    literallistc	go to state 197
    literallist1	go to state 139
    integer	go to state 140
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 141
    classname	go to state 142
    trueobj	go to state 143
    falseobj	go to state 144
    nilobj	go to state 145
    infobj	go to state 146
    ascii	go to state 147
    symbol	go to state 148
    string	go to state 149
    string1	go to state 56



state 136

    literallist1  ->  listliteral .   (rule 154)

    $default	reduce using rule 154 (literallist1)



state 137

    listliteral  ->  listlit2 .   (rule 125)

    $default	reduce using rule 125 (listliteral)



state 138

    listlit  ->  '#' '[' literallistc . ']'   (rule 148)

    ']' 	shift, and go to state 198



state 139

    literallistc  ->  literallist1 . optcomma   (rule 153)
    literallist1  ->  literallist1 . ',' listliteral   (rule 155)

    ',' 	shift, and go to state 199

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 200



state 140

    listliteral  ->  integer .   (rule 116)
    floatp  ->  integer . pie   (rule 167)

    PIE 	shift, and go to state 19

    $default	reduce using rule 116 (listliteral)

    pie 	go to state 104



state 141

    listliteral  ->  floatp .   (rule 117)

    $default	reduce using rule 117 (listliteral)



state 142

    listlit2  ->  classname . '[' literallistc ']'   (rule 151)

    '[' 	shift, and go to state 201



state 143

    listliteral  ->  trueobj .   (rule 121)

    $default	reduce using rule 121 (listliteral)



state 144

    listliteral  ->  falseobj .   (rule 122)

    $default	reduce using rule 122 (listliteral)



state 145

    listliteral  ->  nilobj .   (rule 123)

    $default	reduce using rule 123 (listliteral)



state 146

    listliteral  ->  infobj .   (rule 124)

    $default	reduce using rule 124 (listliteral)



state 147

    listliteral  ->  ascii .   (rule 118)

    $default	reduce using rule 118 (listliteral)



state 148

    listliteral  ->  symbol .   (rule 120)

    $default	reduce using rule 120 (listliteral)



state 149

    listliteral  ->  string .   (rule 119)
    string  ->  string . string1   (rule 180)

    STRING	shift, and go to state 10

    $default	reduce using rule 119 (listliteral)

    string1	go to state 113



state 150

    expr  ->  '#' mavars '=' . expr   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 202
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 151

    mavars  ->  mavarlist ELLIPSIS . name   (rule 91)

    NAME	shift, and go to state 6

    name	go to state 203



state 152

    mavarlist  ->  mavarlist ',' . name   (rule 93)

    NAME	shift, and go to state 6

    name	go to state 204



state 153

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 149)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 135

    $default	reduce using rule 152 (literallistc)

    listliteral	go to state 136
    listlit2	go to state 137
    literallistc	go to state 205
    literallist1	go to state 139
    integer	go to state 140
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 141
    classname	go to state 142
    trueobj	go to state 143
    falseobj	go to state 144
    nilobj	go to state 145
    infobj	go to state 146
    ascii	go to state 147
    symbol	go to state 148
    string	go to state 149
    string1	go to state 56



state 154

    expr  ->  expr1 '[' arglist1 . ']'   (rule 65)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 76)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ']' 	shift, and go to state 206
    ',' 	shift, and go to state 207



state 155

    expr  ->  expr '.' '[' . arglist1 ']'   (rule 66)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 208
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 156

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 209
    keyarglist1	go to state 210
    keyarg	go to state 167
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57
    keybinop	go to state 168



state 157

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' name . blocklist   (rule 52)
    expr  ->  expr '.' name . '=' expr   (rule 73)

    '=' 	shift, and go to state 211
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 212
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 214
    blockliteral	go to state 110
    block	go to state 39



state 158

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr binop expr .   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    '.' 	shift, and go to state 96

    $default	reduce using rule 69 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 159

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr keybinop expr .   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    '.' 	shift, and go to state 96

    $default	reduce using rule 70 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 160

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)
    exprn  ->  exprn ';' expr .   (rule 79)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 79 (exprn)

    binop	go to state 97
    keybinop	go to state 98



state 161

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  name '=' expr .   (rule 71)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 71 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 162

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 74)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ',' 	shift, and go to state 215

    $default	reduce using rule 88 (optkeyarglist)

    optkeyarglist	go to state 216



state 163

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 164

    expr1  ->  classname '[' arglistc . ']'   (rule 63)

    ']' 	shift, and go to state 217



state 165

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 62)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ',' 	shift, and go to state 215

    $default	reduce using rule 88 (optkeyarglist)

    optkeyarglist	go to state 218



state 166

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 61)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 86)

    ',' 	shift, and go to state 219
    ')' 	shift, and go to state 220



state 167

    keyarglist1  ->  keyarg .   (rule 85)

    $default	reduce using rule 85 (keyarglist1)



state 168

    keyarg  ->  keybinop . exprseq   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 221
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 169

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 87
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 222
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '}' 	shift, and go to state 223

    methoddef	go to state 224
    name	go to state 225
    binop	go to state 226



state 170

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 227



state 171

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 172

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 173

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 228



state 174

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 141)

    $default	reduce using rule 141 (slotdeflist)



state 175

    listlit  ->  '#' . '[' literallistc ']'   (rule 148)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 149)

    CLASSNAME	shift, and go to state 12
    '[' 	shift, and go to state 81

    classname	go to state 85



state 176

    slotdef  ->  name '=' slotliteral .   (rule 143)

    $default	reduce using rule 143 (slotdef)



state 177

    slotliteral  ->  listlit .   (rule 103)

    $default	reduce using rule 103 (slotliteral)



state 178

    slotliteral  ->  integer .   (rule 94)
    floatp  ->  integer . pie   (rule 167)

    PIE 	shift, and go to state 19

    $default	reduce using rule 94 (slotliteral)

    pie 	go to state 104



state 179

    slotliteral  ->  floatp .   (rule 95)

    $default	reduce using rule 95 (slotliteral)



state 180

    slotliteral  ->  trueobj .   (rule 99)

    $default	reduce using rule 99 (slotliteral)



state 181

    slotliteral  ->  falseobj .   (rule 100)

    $default	reduce using rule 100 (slotliteral)



state 182

    slotliteral  ->  nilobj .   (rule 101)

    $default	reduce using rule 101 (slotliteral)



state 183

    slotliteral  ->  infobj .   (rule 102)

    $default	reduce using rule 102 (slotliteral)



state 184

    slotliteral  ->  ascii .   (rule 96)

    $default	reduce using rule 96 (slotliteral)



state 185

    slotliteral  ->  symbol .   (rule 98)

    $default	reduce using rule 98 (slotliteral)



state 186

    slotliteral  ->  string .   (rule 97)
    string  ->  string . string1   (rule 180)

    STRING	shift, and go to state 10

    $default	reduce using rule 97 (slotliteral)

    string1	go to state 113



state 187

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 135)

    NAME	shift, and go to state 6

    name	go to state 229



state 188

    argdecls  ->  ARG slotdeflist ';' .   (rule 134)

    $default	reduce using rule 134 (argdecls)



state 189

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 137)

    NAME	shift, and go to state 6

    name	go to state 230



state 190

    argdecls  ->  '|' slotdeflist '|' .   (rule 136)

    $default	reduce using rule 136 (argdecls)



state 191

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 126)

    '}' 	shift, and go to state 231



state 192

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 129)

    $default	reduce using rule 129 (funcvardecls)



state 193

    arglist1  ->  arglist1 ',' exprseq .   (rule 84)

    $default	reduce using rule 84 (arglist1)



state 194

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 195

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  '~' name '=' expr .   (rule 72)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 72 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 196

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 127)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 232
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 35
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    funcvardecl	go to state 192
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 197

    listlit2  ->  '[' literallistc . ']'   (rule 150)

    ']' 	shift, and go to state 233



state 198

    listlit  ->  '#' '[' literallistc ']' .   (rule 148)

    $default	reduce using rule 148 (listlit)



state 199

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 155)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 135

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 234
    listlit2	go to state 137
    integer	go to state 140
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 141
    classname	go to state 142
    trueobj	go to state 143
    falseobj	go to state 144
    nilobj	go to state 145
    infobj	go to state 146
    ascii	go to state 147
    symbol	go to state 148
    string	go to state 149
    string1	go to state 56



state 200

    literallistc  ->  literallist1 optcomma .   (rule 153)

    $default	reduce using rule 153 (literallistc)



state 201

    listlit2  ->  classname '[' . literallistc ']'   (rule 151)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 135

    $default	reduce using rule 152 (literallistc)

    listliteral	go to state 136
    listlit2	go to state 137
    literallistc	go to state 235
    literallist1	go to state 139
    integer	go to state 140
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 141
    classname	go to state 142
    trueobj	go to state 143
    falseobj	go to state 144
    nilobj	go to state 145
    infobj	go to state 146
    ascii	go to state 147
    symbol	go to state 148
    string	go to state 149
    string1	go to state 56



state 202

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  '#' mavars '=' expr .   (rule 75)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 75 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 203

    mavars  ->  mavarlist ELLIPSIS name .   (rule 91)

    $default	reduce using rule 91 (mavars)



state 204

    mavarlist  ->  mavarlist ',' name .   (rule 93)

    $default	reduce using rule 93 (mavarlist)



state 205

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 149)

    ']' 	shift, and go to state 236



state 206

    expr  ->  expr1 '[' arglist1 ']' .   (rule 65)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 76)

    '=' 	shift, and go to state 237

    $default	reduce using rule 65 (expr)



state 207

    arglist1  ->  arglist1 ',' . exprseq   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 193
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 208

    expr  ->  expr '.' '[' arglist1 . ']'   (rule 66)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 77)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ']' 	shift, and go to state 238
    ',' 	shift, and go to state 207



state 209

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 50)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ',' 	shift, and go to state 215

    $default	reduce using rule 88 (optkeyarglist)

    optkeyarglist	go to state 239



state 210

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 48)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 86)

    ',' 	shift, and go to state 219
    ')' 	shift, and go to state 240



state 211

    expr  ->  expr '.' name '=' . expr   (rule 73)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 241
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 212

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 73
    arglist1	go to state 242
    keyarglist1	go to state 243
    keyarg	go to state 167
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57
    keybinop	go to state 168



state 213

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 163
    block	go to state 39



state 214

    msgsend  ->  expr '.' name blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 215

    arglist1  ->  arglist1 ',' . exprseq   (rule 84)
    optkeyarglist  ->  ',' . keyarglist1   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 193
    keyarglist1	go to state 244
    keyarg	go to state 167
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57
    keybinop	go to state 168



state 216

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 74)

    ')' 	shift, and go to state 245



state 217

    expr1  ->  classname '[' arglistc ']' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 218

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 62)

    ')' 	shift, and go to state 246



state 219

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 86)

    KEYBINOP	shift, and go to state 88

    keyarg	go to state 247
    keybinop	go to state 168



state 220

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 221

    keyarg  ->  keybinop exprseq .   (rule 87)

    $default	reduce using rule 87 (keyarg)



state 222

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 188)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 87
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95

    $default	reduce using rule 188 (binop)

    name	go to state 248
    binop	go to state 249



state 223

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 224

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 225

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 250



state 226

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 251



state 227

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 116

    $default	reduce using rule 13 (superclass)

    superclass	go to state 252



state 228

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 253
    CLASSVAR	shift, and go to state 254

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 255
    methods	go to state 256



state 229

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 135)

    ';' 	shift, and go to state 257



state 230

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 137)

    '|' 	shift, and go to state 258



state 231

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 126)

    $default	reduce using rule 126 (block)



state 232

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 127)

    '}' 	shift, and go to state 259



state 233

    listlit2  ->  '[' literallistc ']' .   (rule 150)

    $default	reduce using rule 150 (listlit2)



state 234

    literallist1  ->  literallist1 ',' listliteral .   (rule 155)

    $default	reduce using rule 155 (literallist1)



state 235

    listlit2  ->  classname '[' literallistc . ']'   (rule 151)

    ']' 	shift, and go to state 260



state 236

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 149)

    $default	reduce using rule 149 (listlit)



state 237

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 261
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 238

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 66)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 262

    $default	reduce using rule 66 (expr)



state 239

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 50)

    ')' 	shift, and go to state 263



state 240

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 48)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 264
    blockliteral	go to state 110
    block	go to state 39



state 241

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr '.' name '=' expr .   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 73 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 242

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 84)

    ',' 	shift, and go to state 215

    $default	reduce using rule 88 (optkeyarglist)

    optkeyarglist	go to state 265



state 243

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 86)

    ',' 	shift, and go to state 219
    ')' 	shift, and go to state 266



state 244

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 86)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 89)

    ',' 	shift, and go to state 219

    $default	reduce using rule 89 (optkeyarglist)



state 245

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 74)

    '=' 	shift, and go to state 267
    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 268
    blockliteral	go to state 110
    block	go to state 39



state 246

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 247

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 86)

    $default	reduce using rule 86 (keyarglist1)



state 248

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 269



state 249

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 270



state 250

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 271



state 251

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 272



state 252

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 273



state 253

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 274
    '>' 	shift, and go to state 275
    READWRITEVAR	shift, and go to state 276

    $default	reduce using rule 156 (rwspec)

    rwslotdeflist	go to state 277
    rwslotdef	go to state 278
    rwspec	go to state 279



state 254

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 274
    '>' 	shift, and go to state 275
    READWRITEVAR	shift, and go to state 276

    $default	reduce using rule 156 (rwspec)

    rwslotdeflist	go to state 280
    rwslotdef	go to state 278
    rwspec	go to state 279



state 255

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 256

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 87
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 222
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '}' 	shift, and go to state 281

    methoddef	go to state 224
    name	go to state 225
    binop	go to state 226



state 257

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 135)

    $default	reduce using rule 135 (argdecls)



state 258

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 137)

    $default	reduce using rule 137 (argdecls)



state 259

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 127)

    $default	reduce using rule 127 (block)



state 260

    listlit2  ->  classname '[' literallistc ']' .   (rule 151)

    $default	reduce using rule 151 (listlit2)



state 261

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 76)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 76 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 262

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 282
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 263

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 50)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 283
    blockliteral	go to state 110
    block	go to state 39



state 264

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 265

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 284



state 266

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 49)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 285
    blockliteral	go to state 110
    block	go to state 39



state 267

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 74)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 286
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 268

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 269

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 287



state 270

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 70
    '|' 	shift, and go to state 71

    $default	reduce using rule 133 (argdecls)

    argdecls	go to state 288



state 271

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 289



state 272

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 290



state 273

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 291



state 274

    rwspec  ->  '<' .   (rule 157)

    $default	reduce using rule 157 (rwspec)



state 275

    rwspec  ->  '>' .   (rule 159)

    $default	reduce using rule 159 (rwspec)



state 276

    rwspec  ->  READWRITEVAR .   (rule 158)

    $default	reduce using rule 158 (rwspec)



state 277

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 145)

    ';' 	shift, and go to state 292
    ',' 	shift, and go to state 293



state 278

    rwslotdeflist  ->  rwslotdef .   (rule 144)

    $default	reduce using rule 144 (rwslotdeflist)



state 279

    rwslotdef  ->  rwspec . name   (rule 146)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 147)

    NAME	shift, and go to state 6

    name	go to state 294



state 280

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 145)

    ';' 	shift, and go to state 295
    ',' 	shift, and go to state 293



state 281

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 282

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 77 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 283

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 284

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 108

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 213
    blocklist	go to state 296
    blockliteral	go to state 110
    block	go to state 39



state 285

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 286

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 74)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96

    $default	reduce using rule 74 (expr)

    binop	go to state 97
    keybinop	go to state 98



state 287

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 297



state 288

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 128 (funcvardecls)

    funcvardecls	go to state 298



state 289

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    PRIMITIVENAME	shift, and go to state 299
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 300
    funcvardecl	go to state 192
    primname	go to state 301



state 290

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    PRIMITIVENAME	shift, and go to state 299
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 302
    funcvardecl	go to state 192
    primname	go to state 301



state 291

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 253
    CLASSVAR	shift, and go to state 254

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 255
    methods	go to state 303



state 292

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 293

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 145)

    '<' 	shift, and go to state 274
    '>' 	shift, and go to state 275
    READWRITEVAR	shift, and go to state 276

    $default	reduce using rule 156 (rwspec)

    rwslotdef	go to state 304
    rwspec	go to state 279



state 294

    rwslotdef  ->  rwspec name .   (rule 146)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 147)

    '=' 	shift, and go to state 305

    $default	reduce using rule 146 (rwslotdef)



state 295

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 296

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 297

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    PRIMITIVENAME	shift, and go to state 299
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 306
    funcvardecl	go to state 192
    primname	go to state 301



state 298

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 129)

    PRIMITIVENAME	shift, and go to state 299
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 307
    funcvardecl	go to state 192
    primname	go to state 301



state 299

    primname  ->  PRIMITIVENAME .   (rule 172)

    $default	reduce using rule 172 (primname)



state 300

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 308
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 309
    retval	go to state 310
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 311
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 301

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 131

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 312



state 302

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 308
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 313
    retval	go to state 310
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 311
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 303

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 87
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 222
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '}' 	shift, and go to state 314

    methoddef	go to state 224
    name	go to state 225
    binop	go to state 226



state 304

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 145)

    $default	reduce using rule 145 (rwslotdeflist)



state 305

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 147)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 175

    slotliteral	go to state 315
    listlit	go to state 177
    integer	go to state 178
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 179
    trueobj	go to state 180
    falseobj	go to state 181
    nilobj	go to state 182
    infobj	go to state 183
    ascii	go to state 184
    symbol	go to state 185
    string	go to state 186
    string1	go to state 56



state 306

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 308
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 316
    retval	go to state 310
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 311
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 307

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '^' 	shift, and go to state 308
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 317
    retval	go to state 310
    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 33
    exprn	go to state 34
    exprseq	go to state 311
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 308

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 68
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    expr	go to state 318
    blockliteral	go to state 36
    pushname	go to state 37
    pushliteral	go to state 38
    block	go to state 39
    listlit	go to state 42
    integer	go to state 43
    floatr	go to state 44
    pie 	go to state 45
    floatp	go to state 46
    name	go to state 47
    classname	go to state 48
    trueobj	go to state 49
    falseobj	go to state 50
    nilobj	go to state 51
    infobj	go to state 52
    ascii	go to state 53
    symbol	go to state 54
    string	go to state 55
    string1	go to state 56
    pseudovar	go to state 57



state 309

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 319



state 310

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 311

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 308

    $default	reduce using rule 38 (retval)

    retval	go to state 320



state 312

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 313

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 321



state 314

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 315

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 147)

    $default	reduce using rule 147 (rwslotdef)



state 316

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 322



state 317

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 323



state 318

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 66)
    expr  ->  expr . binop expr   (rule 69)
    expr  ->  expr . keybinop expr   (rule 70)
    expr  ->  expr . '.' name '=' expr   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 77)

    BINOP	shift, and go to state 87
    KEYBINOP	shift, and go to state 88
    '-' 	shift, and go to state 89
    '<' 	shift, and go to state 90
    '>' 	shift, and go to state 91
    '*' 	shift, and go to state 92
    '+' 	shift, and go to state 93
    '|' 	shift, and go to state 94
    READWRITEVAR	shift, and go to state 95
    '.' 	shift, and go to state 96
    ';' 	shift, and go to state 131

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 324
    binop	go to state 97
    keybinop	go to state 98



state 319

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 320

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 321

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 322

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 323

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 324

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 325

    $   	go to state 326



state 326

    $   	go to state 327



state 327

    $default	accept
