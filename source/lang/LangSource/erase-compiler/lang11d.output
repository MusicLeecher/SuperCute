

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 71 between rule 84 and token BINOP resolved as reduce.
Conflict in state 71 between rule 84 and token KEYBINOP resolved as reduce.
Conflict in state 71 between rule 84 and token '-' resolved as reduce.
Conflict in state 71 between rule 84 and token '<' resolved as reduce.
Conflict in state 71 between rule 84 and token '>' resolved as reduce.
Conflict in state 71 between rule 84 and token '*' resolved as reduce.
Conflict in state 71 between rule 84 and token '+' resolved as reduce.
Conflict in state 71 between rule 84 and token '|' resolved as reduce.
Conflict in state 71 between rule 84 and token READWRITEVAR resolved as reduce.
Conflict in state 71 between rule 84 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 71 between rule 84 and token '.' resolved as reduce.
Conflict in state 176 between rule 85 and token BINOP resolved as reduce.
Conflict in state 176 between rule 85 and token KEYBINOP resolved as reduce.
Conflict in state 176 between rule 85 and token '-' resolved as reduce.
Conflict in state 176 between rule 85 and token '<' resolved as reduce.
Conflict in state 176 between rule 85 and token '>' resolved as reduce.
Conflict in state 176 between rule 85 and token '*' resolved as reduce.
Conflict in state 176 between rule 85 and token '+' resolved as reduce.
Conflict in state 176 between rule 85 and token '|' resolved as reduce.
Conflict in state 176 between rule 85 and token READWRITEVAR resolved as reduce.
Conflict in state 176 between rule 85 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 176 between rule 85 and token '.' resolved as shift.
Conflict in state 177 between rule 86 and token BINOP resolved as reduce.
Conflict in state 177 between rule 86 and token KEYBINOP resolved as reduce.
Conflict in state 177 between rule 86 and token '-' resolved as reduce.
Conflict in state 177 between rule 86 and token '<' resolved as reduce.
Conflict in state 177 between rule 86 and token '>' resolved as reduce.
Conflict in state 177 between rule 86 and token '*' resolved as reduce.
Conflict in state 177 between rule 86 and token '+' resolved as reduce.
Conflict in state 177 between rule 86 and token '|' resolved as reduce.
Conflict in state 177 between rule 86 and token READWRITEVAR resolved as reduce.
Conflict in state 177 between rule 86 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 177 between rule 86 and token '.' resolved as shift.
Conflict in state 179 between rule 87 and token BINOP resolved as shift.
Conflict in state 179 between rule 87 and token KEYBINOP resolved as shift.
Conflict in state 179 between rule 87 and token '-' resolved as shift.
Conflict in state 179 between rule 87 and token '<' resolved as shift.
Conflict in state 179 between rule 87 and token '>' resolved as shift.
Conflict in state 179 between rule 87 and token '*' resolved as shift.
Conflict in state 179 between rule 87 and token '+' resolved as shift.
Conflict in state 179 between rule 87 and token '|' resolved as shift.
Conflict in state 179 between rule 87 and token READWRITEVAR resolved as shift.
Conflict in state 179 between rule 87 and token DOUBLEEQUAL resolved as shift.
Conflict in state 179 between rule 87 and token '.' resolved as shift.
Conflict in state 218 between rule 88 and token BINOP resolved as shift.
Conflict in state 218 between rule 88 and token KEYBINOP resolved as shift.
Conflict in state 218 between rule 88 and token '-' resolved as shift.
Conflict in state 218 between rule 88 and token '<' resolved as shift.
Conflict in state 218 between rule 88 and token '>' resolved as shift.
Conflict in state 218 between rule 88 and token '*' resolved as shift.
Conflict in state 218 between rule 88 and token '+' resolved as shift.
Conflict in state 218 between rule 88 and token '|' resolved as shift.
Conflict in state 218 between rule 88 and token READWRITEVAR resolved as shift.
Conflict in state 218 between rule 88 and token DOUBLEEQUAL resolved as shift.
Conflict in state 218 between rule 88 and token '.' resolved as shift.
Conflict in state 225 between rule 91 and token BINOP resolved as shift.
Conflict in state 225 between rule 91 and token KEYBINOP resolved as shift.
Conflict in state 225 between rule 91 and token '-' resolved as shift.
Conflict in state 225 between rule 91 and token '<' resolved as shift.
Conflict in state 225 between rule 91 and token '>' resolved as shift.
Conflict in state 225 between rule 91 and token '*' resolved as shift.
Conflict in state 225 between rule 91 and token '+' resolved as shift.
Conflict in state 225 between rule 91 and token '|' resolved as shift.
Conflict in state 225 between rule 91 and token READWRITEVAR resolved as shift.
Conflict in state 225 between rule 91 and token DOUBLEEQUAL resolved as shift.
Conflict in state 225 between rule 91 and token '.' resolved as shift.
Conflict in state 277 between rule 89 and token BINOP resolved as shift.
Conflict in state 277 between rule 89 and token KEYBINOP resolved as shift.
Conflict in state 277 between rule 89 and token '-' resolved as shift.
Conflict in state 277 between rule 89 and token '<' resolved as shift.
Conflict in state 277 between rule 89 and token '>' resolved as shift.
Conflict in state 277 between rule 89 and token '*' resolved as shift.
Conflict in state 277 between rule 89 and token '+' resolved as shift.
Conflict in state 277 between rule 89 and token '|' resolved as shift.
Conflict in state 277 between rule 89 and token READWRITEVAR resolved as shift.
Conflict in state 277 between rule 89 and token DOUBLEEQUAL resolved as shift.
Conflict in state 277 between rule 89 and token '.' resolved as shift.
Conflict in state 300 between rule 92 and token BINOP resolved as shift.
Conflict in state 300 between rule 92 and token KEYBINOP resolved as shift.
Conflict in state 300 between rule 92 and token '-' resolved as shift.
Conflict in state 300 between rule 92 and token '<' resolved as shift.
Conflict in state 300 between rule 92 and token '>' resolved as shift.
Conflict in state 300 between rule 92 and token '*' resolved as shift.
Conflict in state 300 between rule 92 and token '+' resolved as shift.
Conflict in state 300 between rule 92 and token '|' resolved as shift.
Conflict in state 300 between rule 92 and token READWRITEVAR resolved as shift.
Conflict in state 300 between rule 92 and token DOUBLEEQUAL resolved as shift.
Conflict in state 300 between rule 92 and token '.' resolved as shift.
Conflict in state 329 between rule 93 and token BINOP resolved as shift.
Conflict in state 329 between rule 93 and token KEYBINOP resolved as shift.
Conflict in state 329 between rule 93 and token '-' resolved as shift.
Conflict in state 329 between rule 93 and token '<' resolved as shift.
Conflict in state 329 between rule 93 and token '>' resolved as shift.
Conflict in state 329 between rule 93 and token '*' resolved as shift.
Conflict in state 329 between rule 93 and token '+' resolved as shift.
Conflict in state 329 between rule 93 and token '|' resolved as shift.
Conflict in state 329 between rule 93 and token READWRITEVAR resolved as shift.
Conflict in state 329 between rule 93 and token DOUBLEEQUAL resolved as shift.
Conflict in state 329 between rule 93 and token '.' resolved as shift.
Conflict in state 333 between rule 90 and token BINOP resolved as shift.
Conflict in state 333 between rule 90 and token KEYBINOP resolved as shift.
Conflict in state 333 between rule 90 and token '-' resolved as shift.
Conflict in state 333 between rule 90 and token '<' resolved as shift.
Conflict in state 333 between rule 90 and token '>' resolved as shift.
Conflict in state 333 between rule 90 and token '*' resolved as shift.
Conflict in state 333 between rule 90 and token '+' resolved as shift.
Conflict in state 333 between rule 90 and token '|' resolved as shift.
Conflict in state 333 between rule 90 and token READWRITEVAR resolved as shift.
Conflict in state 333 between rule 90 and token DOUBLEEQUAL resolved as shift.
Conflict in state 333 between rule 90 and token '.' resolved as shift.
State 171 contains 1 shift/reduce conflict.
State 235 contains 1 shift/reduce conflict.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 49   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 51   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' name blocklist
rule 53   expr1 -> pushliteral
rule 54   expr1 -> blockliteral
rule 55   expr1 -> pushname
rule 56   expr1 -> msgsend
rule 57   expr1 -> '(' exprseq ')'
rule 58   expr1 -> '~' name
rule 59   expr1 -> '[' arglistc ']'
rule 60   expr1 -> '(' valrange2 ')'
rule 61   expr1 -> '(' dictslotlist ')'
rule 62   expr1 -> pseudovar
rule 63   expr1 -> classname '(' keyarglist1 ')'
rule 64   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 65   expr1 -> classname '[' arglistc ']'
rule 66   expr1 -> expr1 '[' arglist1 ']'
rule 67   expr1 -> valrangex1
rule 68   valrangex1 -> expr1 '[' exprseq DOTDOT ']'
rule 69   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 70   valrangex1 -> expr1 '[' exprseq DOTDOT exprseq ']'
rule 71   valrangex1 -> expr1 '[' exprseq ',' exprseq DOTDOT ']'
rule 72   valrangex1 -> expr1 '[' exprseq ',' exprseq DOTDOT exprseq ']'
rule 73   valrangexd -> expr '.' '[' exprseq DOTDOT ']'
rule 74   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 75   valrangexd -> expr '.' '[' exprseq DOTDOT exprseq ']'
rule 76   valrangexd -> expr '.' '[' exprseq ',' exprseq DOTDOT ']'
rule 77   valrangexd -> expr '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'
rule 78   valrange2 -> exprseq DOTDOT exprseq
rule 79   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 80   expr -> expr1
rule 81   expr -> valrangexd
rule 82   expr -> expr '.' '[' arglist1 ']'
rule 83   expr -> classname
rule 84   expr -> '`' expr
rule 85   expr -> expr binop expr
rule 86   expr -> expr keybinop expr
rule 87   expr -> name '=' expr
rule 88   expr -> '~' name '=' expr
rule 89   expr -> expr '.' name '=' expr
rule 90   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 91   expr -> '#' mavars '=' expr
rule 92   expr -> expr1 '[' arglist1 ']' '=' expr
rule 93   expr -> expr '.' '[' arglist1 ']' '=' expr
rule 94   exprn -> expr
rule 95   exprn -> exprn ';' expr
rule 96   exprseq -> exprn optsemi
rule 97   arglistc ->		/* empty */
rule 98   arglistc -> arglist1 optcomma
rule 99   arglist1 -> exprseq
rule 100  arglist1 -> arglist1 ',' exprseq
rule 101  keyarglist1 -> keyarg
rule 102  keyarglist1 -> keyarglist1 ',' keyarg
rule 103  keyarg -> keybinop exprseq
rule 104  optkeyarglist ->		/* empty */
rule 105  optkeyarglist -> ',' keyarglist1
rule 106  mavars -> mavarlist
rule 107  mavars -> mavarlist ELLIPSIS name
rule 108  mavarlist -> name
rule 109  mavarlist -> mavarlist ',' name
rule 110  slotliteral -> integer
rule 111  slotliteral -> floatp
rule 112  slotliteral -> ascii
rule 113  slotliteral -> string
rule 114  slotliteral -> symbol
rule 115  slotliteral -> trueobj
rule 116  slotliteral -> falseobj
rule 117  slotliteral -> nilobj
rule 118  slotliteral -> infobj
rule 119  slotliteral -> listlit
rule 120  blockliteral -> block
rule 121  pushname -> name
rule 122  pushliteral -> integer
rule 123  pushliteral -> floatp
rule 124  pushliteral -> ascii
rule 125  pushliteral -> string
rule 126  pushliteral -> symbol
rule 127  pushliteral -> trueobj
rule 128  pushliteral -> falseobj
rule 129  pushliteral -> nilobj
rule 130  pushliteral -> infobj
rule 131  pushliteral -> listlit
rule 132  listliteral -> integer
rule 133  listliteral -> floatp
rule 134  listliteral -> ascii
rule 135  listliteral -> string
rule 136  listliteral -> symbol
rule 137  listliteral -> trueobj
rule 138  listliteral -> falseobj
rule 139  listliteral -> nilobj
rule 140  listliteral -> infobj
rule 141  listliteral -> listlit2
rule 142  block -> '{' argdecls funcvardecls funcbody '}'
rule 143  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 144  funcvardecls ->		/* empty */
rule 145  funcvardecls -> funcvardecls funcvardecl
rule 146  funcvardecls1 -> funcvardecl
rule 147  funcvardecls1 -> funcvardecls1 funcvardecl
rule 148  funcvardecl -> VAR slotdeflist ';'
rule 149  argdecls ->		/* empty */
rule 150  argdecls -> ARG slotdeflist ';'
rule 151  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 152  argdecls -> '|' slotdeflist '|'
rule 153  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 154  slotdeflist0 ->		/* empty */
rule 155  slotdeflist0 -> slotdeflist
rule 156  slotdeflist -> slotdef
rule 157  slotdeflist -> slotdeflist ',' slotdef
rule 158  slotdef -> name
rule 159  slotdef -> name '=' slotliteral
rule 160  dictslotdef -> expr ':' expr
rule 161  dictslotdef -> keybinop expr
rule 162  dictslotlist1 -> dictslotdef
rule 163  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 164  dictslotlist ->		/* empty */
rule 165  dictslotlist -> dictslotlist1
rule 166  rwslotdeflist -> rwslotdef
rule 167  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 168  rwslotdef -> rwspec name
rule 169  rwslotdef -> rwspec name '=' slotliteral
rule 170  listlit -> '#' '[' literallistc ']'
rule 171  listlit -> '#' classname '[' literallistc ']'
rule 172  listlit2 -> '[' literallistc ']'
rule 173  listlit2 -> classname '[' literallistc ']'
rule 174  literallistc ->		/* empty */
rule 175  literallistc -> literallist1 optcomma
rule 176  literallist1 -> listliteral
rule 177  literallist1 -> literallist1 ',' listliteral
rule 178  rwspec ->		/* empty */
rule 179  rwspec -> '<'
rule 180  rwspec -> READWRITEVAR
rule 181  rwspec -> '>'
rule 182  integer -> INTEGER
rule 183  integer -> '-' INTEGER
rule 184  floatr -> FLOAT
rule 185  floatr -> '-' FLOAT
rule 186  pie -> PIE
rule 187  floatp -> floatr
rule 188  floatp -> floatr pie
rule 189  floatp -> integer pie
rule 190  floatp -> pie
rule 191  floatp -> '-' pie
rule 192  name -> NAME
rule 193  classname -> CLASSNAME
rule 194  primname -> PRIMITIVENAME
rule 195  trueobj -> TRUEOBJ
rule 196  falseobj -> FALSEOBJ
rule 197  nilobj -> NILOBJ
rule 198  infobj -> INFINITUMOBJ
rule 199  ascii -> ASCII
rule 200  symbol -> SYMBOL
rule 201  string -> string1
rule 202  string -> string string1
rule 203  string1 -> STRING
rule 204  pseudovar -> PSEUDOVAR
rule 205  binop -> BINOP
rule 206  binop -> READWRITEVAR
rule 207  binop -> DOUBLEEQUAL
rule 208  binop -> '<'
rule 209  binop -> '>'
rule 210  binop -> '-'
rule 211  binop -> '*'
rule 212  binop -> '+'
rule 213  binop -> '|'
rule 214  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 91 143 170 171
'(' (40) 31 47 48 49 50 51 57 60 61 63 64 90
')' (41) 31 47 48 49 50 51 57 60 61 63 64 90
'*' (42) 22 24 211
'+' (43) 10 212
',' (44) 28 71 72 76 77 79 100 102 105 109 157 163 167 177
'-' (45) 183 185 191 210
'.' (46) 48 49 50 51 52 73 74 75 76 77 82 89 93
':' (58) 14 160
';' (59) 17 18 26 95 148 150 151
'<' (60) 179 208
'=' (61) 87 88 89 90 91 92 93 159 169
'>' (62) 181 209
'[' (91) 9 59 65 66 68 69 70 71 72 73 74 75 76 77 82 92 93 170 171
    172 173
']' (93) 9 59 65 66 68 69 70 71 72 73 74 75 76 77 82 92 93 170 171
    172 173
'^' (94) 39 41
'`' (96) 84
'{' (123) 8 9 10 21 22 23 24 142 143
'|' (124) 152 153 213
'}' (125) 8 9 10 21 22 23 24 142 143
'~' (126) 58 88
error (256)
NAME (257) 192
INTEGER (258) 182 183
FLOAT (259) 184 185
SYMBOL (260) 200
STRING (261) 203
ASCII (262) 199
PRIMITIVENAME (263) 194
CLASSNAME (264) 193
VAR (265) 18 148
ARG (266) 150 151
CLASSVAR (267) 17
CONST (268)
NILOBJ (269) 197
TRUEOBJ (270) 195
FALSEOBJ (271) 196
INFINITUMOBJ (272) 198
PSEUDOVAR (273) 204
ELLIPSIS (274) 107 151 153
DOTDOT (275) 68 69 70 71 72 73 74 75 76 77 78 79
PIE (276) 186
BADTOKEN (277)
INTERPRET (278) 3
BINOP (279) 205
KEYBINOP (280) 214
READWRITEVAR (281) 180 206
DOUBLEEQUAL (282) 207
UMINUS (283)

Nonterminals, with rules where they appear

root (51)
    on left: 1 2 3
classes (52)
    on left: 4 5, on right: 1 5
classextensions (53)
    on left: 6 7, on right: 2 7
classdef (54)
    on left: 8 9, on right: 5
classextension (55)
    on left: 10, on right: 6 7
optname (56)
    on left: 11 12, on right: 9
superclass (57)
    on left: 13 14, on right: 8 9
classvardecls (58)
    on left: 15 16, on right: 8 9 16
classvardecl (59)
    on left: 17 18, on right: 16
methods (60)
    on left: 19 20, on right: 8 9 10 20
methoddef (61)
    on left: 21 22 23 24, on right: 20
optsemi (62)
    on left: 25 26, on right: 37 39 41 96
optcomma (63)
    on left: 27 28, on right: 98 175
funcbody (64)
    on left: 29 30, on right: 31 32 33 142 143
cmdlinecode (65)
    on left: 31 32 33, on right: 3
methbody (66)
    on left: 34 35, on right: 21 22 23 24
primitive (67)
    on left: 36 37, on right: 21 22 23 24
retval (68)
    on left: 38 39, on right: 34 35
funretval (69)
    on left: 40 41, on right: 29 30
blocklist1 (70)
    on left: 42 43, on right: 43 45 46
blocklist (71)
    on left: 44 45, on right: 47 48 49 50 51 52
msgsend (72)
    on left: 46 47 48 49 50 51 52, on right: 56
expr1 (73)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 66 68 69 70 71 72 80 92
valrangex1 (74)
    on left: 68 69 70 71 72, on right: 67
valrangexd (75)
    on left: 73 74 75 76 77, on right: 81
valrange2 (76)
    on left: 78 79, on right: 60
expr (77)
    on left: 80 81 82 83 84 85 86 87 88 89 90 91 92 93,
    on right: 39 41 48 49 50 51 52 73 74 75 76 77 82 84 85 86 87 88
    89 90 91 92 93 94 95 160 161
exprn (78)
    on left: 94 95, on right: 95 96
exprseq (79)
    on left: 96, on right: 30 35 57 68 69 70 71 72 73 74 75 76 77 78
    79 99 100 103
arglistc (80)
    on left: 97 98, on right: 59 65
arglist1 (81)
    on left: 99 100, on right: 47 50 51 64 66 82 90 92 93 98 100
keyarglist1 (82)
    on left: 101 102, on right: 48 49 63 102 105
keyarg (83)
    on left: 103, on right: 101 102
optkeyarglist (84)
    on left: 104 105, on right: 47 50 51 64 90
mavars (85)
    on left: 106 107, on right: 91
mavarlist (86)
    on left: 108 109, on right: 106 107 109
slotliteral (87)
    on left: 110 111 112 113 114 115 116 117 118 119,
    on right: 159 169
blockliteral (88)
    on left: 120, on right: 42 43 54
pushname (89)
    on left: 121, on right: 55
pushliteral (90)
    on left: 122 123 124 125 126 127 128 129 130 131,
    on right: 53
listliteral (91)
    on left: 132 133 134 135 136 137 138 139 140 141,
    on right: 176 177
block (92)
    on left: 142 143, on right: 120
funcvardecls (93)
    on left: 144 145, on right: 21 22 23 24 142 143 145
funcvardecls1 (94)
    on left: 146 147, on right: 31 32 147
funcvardecl (95)
    on left: 148, on right: 145 146 147
argdecls (96)
    on left: 149 150 151 152 153, on right: 21 22 23 24 142 143
slotdeflist0 (97)
    on left: 154 155, on right: 151 153
slotdeflist (98)
    on left: 156 157, on right: 148 150 152 155 157
slotdef (99)
    on left: 158 159, on right: 156 157
dictslotdef (100)
    on left: 160 161, on right: 162 163
dictslotlist1 (101)
    on left: 162 163, on right: 163 165
dictslotlist (102)
    on left: 164 165, on right: 61
rwslotdeflist (103)
    on left: 166 167, on right: 17 18 167
rwslotdef (104)
    on left: 168 169, on right: 166 167
listlit (105)
    on left: 170 171, on right: 119 131
listlit2 (106)
    on left: 172 173, on right: 141
literallistc (107)
    on left: 174 175, on right: 170 171 172 173
literallist1 (108)
    on left: 176 177, on right: 175 177
rwspec (109)
    on left: 178 179 180 181, on right: 168 169
integer (110)
    on left: 182 183, on right: 110 122 132 189
floatr (111)
    on left: 184 185, on right: 187 188
pie (112)
    on left: 186, on right: 188 189 190 191
floatp (113)
    on left: 187 188 189 190 191, on right: 111 123 133
name (114)
    on left: 192, on right: 12 21 22 46 47 49 51 52 58 87 88 89 90
    107 108 109 121 151 153 158 159 168 169
classname (115)
    on left: 193, on right: 8 9 10 14 63 64 65 83 171 173
primname (116)
    on left: 194, on right: 37
trueobj (117)
    on left: 195, on right: 115 127 137
falseobj (118)
    on left: 196, on right: 116 128 138
nilobj (119)
    on left: 197, on right: 117 129 139
infobj (120)
    on left: 198, on right: 118 130 140
ascii (121)
    on left: 199, on right: 112 124 134
symbol (122)
    on left: 200, on right: 114 126 136
string (123)
    on left: 201 202, on right: 113 125 135 202
string1 (124)
    on left: 203, on right: 201 202
pseudovar (125)
    on left: 204, on right: 62
binop (126)
    on left: 205 206 207 208 209 210 211 212 213, on right: 23 24 85
keybinop (127)
    on left: 214, on right: 86 103 161


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 376
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 24
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 28
    cmdlinecode	go to state 29
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 42
    funcvardecl	go to state 43
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 12

    classname	go to state 60



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 12

    $default	reduce using rule 1 (root)

    classdef	go to state 61
    classname	go to state 62



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 63



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 192)

    $default	reduce using rule 192 (name)



state 7

    integer  ->  INTEGER .   (rule 182)

    $default	reduce using rule 182 (integer)



state 8

    floatr  ->  FLOAT .   (rule 184)

    $default	reduce using rule 184 (floatr)



state 9

    symbol  ->  SYMBOL .   (rule 200)

    $default	reduce using rule 200 (symbol)



state 10

    string1  ->  STRING .   (rule 203)

    $default	reduce using rule 203 (string1)



state 11

    ascii  ->  ASCII .   (rule 199)

    $default	reduce using rule 199 (ascii)



state 12

    classname  ->  CLASSNAME .   (rule 193)

    $default	reduce using rule 193 (classname)



state 13

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 148)

    NAME	shift, and go to state 6

    slotdeflist	go to state 64
    slotdef	go to state 65
    name	go to state 66



state 14

    nilobj  ->  NILOBJ .   (rule 197)

    $default	reduce using rule 197 (nilobj)



state 15

    trueobj  ->  TRUEOBJ .   (rule 195)

    $default	reduce using rule 195 (trueobj)



state 16

    falseobj  ->  FALSEOBJ .   (rule 196)

    $default	reduce using rule 196 (falseobj)



state 17

    infobj  ->  INFINITUMOBJ .   (rule 198)

    $default	reduce using rule 198 (infobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 204)

    $default	reduce using rule 204 (pseudovar)



state 19

    pie  ->  PIE .   (rule 186)

    $default	reduce using rule 186 (pie)



state 20

    integer  ->  '-' . INTEGER   (rule 183)
    floatr  ->  '-' . FLOAT   (rule 185)
    floatp  ->  '-' . pie   (rule 191)

    INTEGER	shift, and go to state 67
    FLOAT	shift, and go to state 68
    PIE 	shift, and go to state 19

    pie 	go to state 69



state 21

    expr  ->  '`' . expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 71
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 22

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 142)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 74



state 23

    expr1  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 97 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 76
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 24

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 164 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 79
    expr	go to state 80
    exprn	go to state 36
    exprseq	go to state 81
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 82
    funcvardecl	go to state 43
    dictslotdef	go to state 83
    dictslotlist1	go to state 84
    dictslotlist	go to state 85
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 25

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 87
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 26

    expr1  ->  '~' . name   (rule 58)
    expr  ->  '~' . name '=' expr   (rule 88)

    NAME	shift, and go to state 6

    name	go to state 88



state 27

    expr  ->  '#' . mavars '=' expr   (rule 91)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 143)
    listlit  ->  '#' . '[' literallistc ']'   (rule 170)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 171)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 12
    '{' 	shift, and go to state 89
    '[' 	shift, and go to state 90

    mavars	go to state 91
    mavarlist	go to state 92
    name	go to state 93
    classname	go to state 94



state 28

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 29

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 30

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 31

    expr1  ->  msgsend .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 32

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 . '[' exprseq DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 . '[' exprseq DOTDOT exprseq ']'   (rule 70)
    valrangex1  ->  expr1 . '[' exprseq ',' exprseq DOTDOT ']'   (rule 71)
    valrangex1  ->  expr1 . '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 72)
    expr  ->  expr1 .   (rule 80)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 92)

    '[' 	shift, and go to state 95

    $default	reduce using rule 80 (expr)



state 33

    expr1  ->  valrangex1 .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 34

    expr  ->  valrangexd .   (rule 81)

    $default	reduce using rule 81 (expr)



state 35

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    exprn  ->  expr .   (rule 94)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 94 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 36

    exprn  ->  exprn . ';' expr   (rule 95)
    exprseq  ->  exprn . optsemi   (rule 96)

    ';' 	shift, and go to state 108

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 109



state 37

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 25

    $default	reduce using rule 40 (funretval)

    funretval	go to state 110



state 38

    expr1  ->  blockliteral .   (rule 54)

    $default	reduce using rule 54 (expr1)



state 39

    expr1  ->  pushname .   (rule 55)

    $default	reduce using rule 55 (expr1)



state 40

    expr1  ->  pushliteral .   (rule 53)

    $default	reduce using rule 53 (expr1)



state 41

    blockliteral  ->  block .   (rule 120)

    $default	reduce using rule 120 (blockliteral)



state 42

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 147)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 111
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 112
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 43

    funcvardecls1  ->  funcvardecl .   (rule 146)

    $default	reduce using rule 146 (funcvardecls1)



state 44

    pushliteral  ->  listlit .   (rule 131)

    $default	reduce using rule 131 (pushliteral)



state 45

    pushliteral  ->  integer .   (rule 122)
    floatp  ->  integer . pie   (rule 189)

    PIE 	shift, and go to state 19

    $default	reduce using rule 122 (pushliteral)

    pie 	go to state 113



state 46

    floatp  ->  floatr .   (rule 187)
    floatp  ->  floatr . pie   (rule 188)

    PIE 	shift, and go to state 19

    $default	reduce using rule 187 (floatp)

    pie 	go to state 114



state 47

    floatp  ->  pie .   (rule 190)

    $default	reduce using rule 190 (floatp)



state 48

    pushliteral  ->  floatp .   (rule 123)

    $default	reduce using rule 123 (pushliteral)



state 49

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name . '=' expr   (rule 87)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 90)
    pushname  ->  name .   (rule 121)

    '=' 	shift, and go to state 115
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 116
    '#' 	shift, and go to state 117

    $default	reduce using rule 121 (pushname)

    blocklist1	go to state 118
    blockliteral	go to state 119
    block	go to state 41



state 50

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 63)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 64)
    expr1  ->  classname . '[' arglistc ']'   (rule 65)
    expr  ->  classname .   (rule 83)

    '[' 	shift, and go to state 120
    '(' 	shift, and go to state 121

    $default	reduce using rule 83 (expr)



state 51

    pushliteral  ->  trueobj .   (rule 127)

    $default	reduce using rule 127 (pushliteral)



state 52

    pushliteral  ->  falseobj .   (rule 128)

    $default	reduce using rule 128 (pushliteral)



state 53

    pushliteral  ->  nilobj .   (rule 129)

    $default	reduce using rule 129 (pushliteral)



state 54

    pushliteral  ->  infobj .   (rule 130)

    $default	reduce using rule 130 (pushliteral)



state 55

    pushliteral  ->  ascii .   (rule 124)

    $default	reduce using rule 124 (pushliteral)



state 56

    pushliteral  ->  symbol .   (rule 126)

    $default	reduce using rule 126 (pushliteral)



state 57

    pushliteral  ->  string .   (rule 125)
    string  ->  string . string1   (rule 202)

    STRING	shift, and go to state 10

    $default	reduce using rule 125 (pushliteral)

    string1	go to state 122



state 58

    string  ->  string1 .   (rule 201)

    $default	reduce using rule 201 (string)



state 59

    expr1  ->  pseudovar .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 60

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 123



state 61

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 62

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 124
    '[' 	shift, and go to state 125

    $default	reduce using rule 13 (superclass)

    superclass	go to state 126



state 63

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 64

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 148)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 157)

    ';' 	shift, and go to state 127
    ',' 	shift, and go to state 128



state 65

    slotdeflist  ->  slotdef .   (rule 156)

    $default	reduce using rule 156 (slotdeflist)



state 66

    slotdef  ->  name .   (rule 158)
    slotdef  ->  name . '=' slotliteral   (rule 159)

    '=' 	shift, and go to state 129

    $default	reduce using rule 158 (slotdef)



state 67

    integer  ->  '-' INTEGER .   (rule 183)

    $default	reduce using rule 183 (integer)



state 68

    floatr  ->  '-' FLOAT .   (rule 185)

    $default	reduce using rule 185 (floatr)



state 69

    floatp  ->  '-' pie .   (rule 191)

    $default	reduce using rule 191 (floatp)



state 70

    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 164 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 79
    expr	go to state 80
    exprn	go to state 36
    exprseq	go to state 81
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 83
    dictslotlist1	go to state 84
    dictslotlist	go to state 85
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 71

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  '`' expr .   (rule 84)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)


    $default	reduce using rule 84 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 72

    argdecls  ->  ARG . slotdeflist ';'   (rule 150)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 151)

    NAME	shift, and go to state 6

    $default	reduce using rule 154 (slotdeflist0)

    slotdeflist0	go to state 130
    slotdeflist	go to state 131
    slotdef	go to state 65
    name	go to state 66



state 73

    argdecls  ->  '|' . slotdeflist '|'   (rule 152)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 153)

    NAME	shift, and go to state 6

    $default	reduce using rule 154 (slotdeflist0)

    slotdeflist0	go to state 132
    slotdeflist	go to state 133
    slotdef	go to state 65
    name	go to state 66



state 74

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 142)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 134



state 75

    arglist1  ->  exprseq .   (rule 99)

    $default	reduce using rule 99 (arglist1)



state 76

    expr1  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 135



state 77

    arglistc  ->  arglist1 . optcomma   (rule 98)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ',' 	shift, and go to state 136

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 137



state 78

    keybinop  ->  KEYBINOP .   (rule 214)

    $default	reduce using rule 214 (keybinop)



state 79

    expr1  ->  '(' valrange2 . ')'   (rule 60)

    ')' 	shift, and go to state 138



state 80

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    exprn  ->  expr .   (rule 94)
    dictslotdef  ->  expr . ':' expr   (rule 160)

    ':' 	shift, and go to state 139
    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 94 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 81

    expr1  ->  '(' exprseq . ')'   (rule 57)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 78)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 79)

    DOTDOT	shift, and go to state 140
    ',' 	shift, and go to state 141
    ')' 	shift, and go to state 142



state 82

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 147)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 143
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 112
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 83

    dictslotlist1  ->  dictslotdef .   (rule 162)

    $default	reduce using rule 162 (dictslotlist1)



state 84

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 163)
    dictslotlist  ->  dictslotlist1 .   (rule 165)

    ',' 	shift, and go to state 144

    $default	reduce using rule 165 (dictslotlist)



state 85

    expr1  ->  '(' dictslotlist . ')'   (rule 61)

    ')' 	shift, and go to state 145



state 86

    dictslotdef  ->  keybinop . expr   (rule 161)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 146
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 87

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105
    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 148
    binop	go to state 106
    keybinop	go to state 107



state 88

    expr1  ->  '~' name .   (rule 58)
    expr  ->  '~' name . '=' expr   (rule 88)

    '=' 	shift, and go to state 149

    $default	reduce using rule 58 (expr1)



state 89

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 143)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 150



state 90

    listlit  ->  '#' '[' . literallistc ']'   (rule 170)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 174 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 154
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 91

    expr  ->  '#' mavars . '=' expr   (rule 91)

    '=' 	shift, and go to state 166



state 92

    mavars  ->  mavarlist .   (rule 106)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 107)
    mavarlist  ->  mavarlist . ',' name   (rule 109)

    ELLIPSIS	shift, and go to state 167
    ',' 	shift, and go to state 168

    $default	reduce using rule 106 (mavars)



state 93

    mavarlist  ->  name .   (rule 108)

    $default	reduce using rule 108 (mavarlist)



state 94

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 171)

    '[' 	shift, and go to state 169



state 95

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 '[' . exprseq DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 '[' . exprseq DOTDOT exprseq ']'   (rule 70)
    valrangex1  ->  expr1 '[' . exprseq ',' exprseq DOTDOT ']'   (rule 71)
    valrangex1  ->  expr1 '[' . exprseq ',' exprseq DOTDOT exprseq ']'   (rule 72)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 170
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 171
    arglist1	go to state 172
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 96

    binop  ->  BINOP .   (rule 205)

    $default	reduce using rule 205 (binop)



state 97

    binop  ->  '-' .   (rule 210)

    $default	reduce using rule 210 (binop)



state 98

    binop  ->  '<' .   (rule 208)

    $default	reduce using rule 208 (binop)



state 99

    binop  ->  '>' .   (rule 209)

    $default	reduce using rule 209 (binop)



state 100

    binop  ->  '*' .   (rule 211)

    $default	reduce using rule 211 (binop)



state 101

    binop  ->  '+' .   (rule 212)

    $default	reduce using rule 212 (binop)



state 102

    binop  ->  '|' .   (rule 213)

    $default	reduce using rule 213 (binop)



state 103

    binop  ->  READWRITEVAR .   (rule 206)

    $default	reduce using rule 206 (binop)



state 104

    binop  ->  DOUBLEEQUAL .   (rule 207)

    $default	reduce using rule 207 (binop)



state 105

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . name blocklist   (rule 52)
    valrangexd  ->  expr '.' . '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr '.' . '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' . '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr '.' . '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 82)
    expr  ->  expr '.' . name '=' expr   (rule 89)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 93)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 173
    '(' 	shift, and go to state 174

    name	go to state 175



state 106

    expr  ->  expr binop . expr   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 176
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 107

    expr  ->  expr keybinop . expr   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 177
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 108

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 178
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 109

    exprseq  ->  exprn optsemi .   (rule 96)

    $default	reduce using rule 96 (exprseq)



state 110

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 111

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 112

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 147)

    $default	reduce using rule 147 (funcvardecls1)



state 113

    floatp  ->  integer pie .   (rule 189)

    $default	reduce using rule 189 (floatp)



state 114

    floatp  ->  floatr pie .   (rule 188)

    $default	reduce using rule 188 (floatp)



state 115

    expr  ->  name '=' . expr   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 179
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 116

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 90)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 180
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 117

    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 143)

    '{' 	shift, and go to state 89



state 118

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 181
    block	go to state 41



state 119

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 120

    expr1  ->  classname '[' . arglistc ']'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 97 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 182
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 121

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 63)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 183
    keyarglist1	go to state 184
    keyarg	go to state 185
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 186



state 122

    string  ->  string string1 .   (rule 202)

    $default	reduce using rule 202 (string)



state 123

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 187



state 124

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 12

    classname	go to state 188



state 125

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 189
    name	go to state 190



state 126

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 191



state 127

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 148)

    $default	reduce using rule 148 (funcvardecl)



state 128

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 157)

    NAME	shift, and go to state 6

    slotdef	go to state 192
    name	go to state 66



state 129

    slotdef  ->  name '=' . slotliteral   (rule 159)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 193

    slotliteral	go to state 194
    listlit	go to state 195
    integer	go to state 196
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 197
    trueobj	go to state 198
    falseobj	go to state 199
    nilobj	go to state 200
    infobj	go to state 201
    ascii	go to state 202
    symbol	go to state 203
    string	go to state 204
    string1	go to state 58



state 130

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 151)

    ELLIPSIS	shift, and go to state 205



state 131

    argdecls  ->  ARG slotdeflist . ';'   (rule 150)
    slotdeflist0  ->  slotdeflist .   (rule 155)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 157)

    ';' 	shift, and go to state 206
    ',' 	shift, and go to state 128

    $default	reduce using rule 155 (slotdeflist0)



state 132

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 153)

    ELLIPSIS	shift, and go to state 207



state 133

    argdecls  ->  '|' slotdeflist . '|'   (rule 152)
    slotdeflist0  ->  slotdeflist .   (rule 155)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 157)

    '|' 	shift, and go to state 208
    ',' 	shift, and go to state 128

    $default	reduce using rule 155 (slotdeflist0)



state 134

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 142)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 209
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 210
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 135

    expr1  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 136

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 211
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 137

    arglistc  ->  arglist1 optcomma .   (rule 98)

    $default	reduce using rule 98 (arglistc)



state 138

    expr1  ->  '(' valrange2 ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 139

    dictslotdef  ->  expr ':' . expr   (rule 160)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 212
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 140

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 78)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 213
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 141

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 214
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 142

    expr1  ->  '(' exprseq ')' .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 143

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 215



state 144

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 216
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 217
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 86



state 145

    expr1  ->  '(' dictslotlist ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 146

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    dictslotdef  ->  keybinop expr .   (rule 161)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 161 (dictslotdef)

    binop	go to state 106
    keybinop	go to state 107



state 147

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 148

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 149

    expr  ->  '~' name '=' . expr   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 218
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 150

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 143)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 219



state 151

    listlit2  ->  '[' . literallistc ']'   (rule 172)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 174 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 220
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 152

    literallist1  ->  listliteral .   (rule 176)

    $default	reduce using rule 176 (literallist1)



state 153

    listliteral  ->  listlit2 .   (rule 141)

    $default	reduce using rule 141 (listliteral)



state 154

    listlit  ->  '#' '[' literallistc . ']'   (rule 170)

    ']' 	shift, and go to state 221



state 155

    literallistc  ->  literallist1 . optcomma   (rule 175)
    literallist1  ->  literallist1 . ',' listliteral   (rule 177)

    ',' 	shift, and go to state 222

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 223



state 156

    listliteral  ->  integer .   (rule 132)
    floatp  ->  integer . pie   (rule 189)

    PIE 	shift, and go to state 19

    $default	reduce using rule 132 (listliteral)

    pie 	go to state 113



state 157

    listliteral  ->  floatp .   (rule 133)

    $default	reduce using rule 133 (listliteral)



state 158

    listlit2  ->  classname . '[' literallistc ']'   (rule 173)

    '[' 	shift, and go to state 224



state 159

    listliteral  ->  trueobj .   (rule 137)

    $default	reduce using rule 137 (listliteral)



state 160

    listliteral  ->  falseobj .   (rule 138)

    $default	reduce using rule 138 (listliteral)



state 161

    listliteral  ->  nilobj .   (rule 139)

    $default	reduce using rule 139 (listliteral)



state 162

    listliteral  ->  infobj .   (rule 140)

    $default	reduce using rule 140 (listliteral)



state 163

    listliteral  ->  ascii .   (rule 134)

    $default	reduce using rule 134 (listliteral)



state 164

    listliteral  ->  symbol .   (rule 136)

    $default	reduce using rule 136 (listliteral)



state 165

    listliteral  ->  string .   (rule 135)
    string  ->  string . string1   (rule 202)

    STRING	shift, and go to state 10

    $default	reduce using rule 135 (listliteral)

    string1	go to state 122



state 166

    expr  ->  '#' mavars '=' . expr   (rule 91)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 225
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 167

    mavars  ->  mavarlist ELLIPSIS . name   (rule 107)

    NAME	shift, and go to state 6

    name	go to state 226



state 168

    mavarlist  ->  mavarlist ',' . name   (rule 109)

    NAME	shift, and go to state 6

    name	go to state 227



state 169

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 171)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 174 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 228
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 170

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 229
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 171

    valrangex1  ->  expr1 '[' exprseq . DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' exprseq . DOTDOT exprseq ']'   (rule 70)
    valrangex1  ->  expr1 '[' exprseq . ',' exprseq DOTDOT ']'   (rule 71)
    valrangex1  ->  expr1 '[' exprseq . ',' exprseq DOTDOT exprseq ']'   (rule 72)
    arglist1  ->  exprseq .   (rule 99)

    DOTDOT	shift, and go to state 230
    ',' 	shift, and go to state 231

    ',' 	[reduce using rule 99 (arglist1)]
    $default	reduce using rule 99 (arglist1)



state 172

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 66)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 92)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ']' 	shift, and go to state 232
    ',' 	shift, and go to state 233



state 173

    valrangexd  ->  expr '.' '[' . exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr '.' '[' . exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' '[' . exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr '.' '[' . exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 82)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 234
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 235
    arglist1	go to state 236
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 174

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 237
    keyarglist1	go to state 238
    keyarg	go to state 185
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 186



state 175

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' name . blocklist   (rule 52)
    expr  ->  expr '.' name . '=' expr   (rule 89)

    '=' 	shift, and go to state 239
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 240
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 242
    blockliteral	go to state 119
    block	go to state 41



state 176

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr binop expr .   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    '.' 	shift, and go to state 105

    $default	reduce using rule 85 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 177

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr keybinop expr .   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    '.' 	shift, and go to state 105

    $default	reduce using rule 86 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 178

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    exprn  ->  exprn ';' expr .   (rule 95)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 95 (exprn)

    binop	go to state 106
    keybinop	go to state 107



state 179

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  name '=' expr .   (rule 87)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 87 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 180

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 90)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ',' 	shift, and go to state 243

    $default	reduce using rule 104 (optkeyarglist)

    optkeyarglist	go to state 244



state 181

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 182

    expr1  ->  classname '[' arglistc . ']'   (rule 65)

    ']' 	shift, and go to state 245



state 183

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 64)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ',' 	shift, and go to state 243

    $default	reduce using rule 104 (optkeyarglist)

    optkeyarglist	go to state 246



state 184

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 63)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 102)

    ',' 	shift, and go to state 247
    ')' 	shift, and go to state 248



state 185

    keyarglist1  ->  keyarg .   (rule 101)

    $default	reduce using rule 101 (keyarglist1)



state 186

    keyarg  ->  keybinop . exprseq   (rule 103)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 249
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 187

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 250
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 251

    methoddef	go to state 252
    name	go to state 253
    binop	go to state 254



state 188

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 189

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 255



state 190

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 191

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 256



state 192

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 157)

    $default	reduce using rule 157 (slotdeflist)



state 193

    listlit  ->  '#' . '[' literallistc ']'   (rule 170)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 171)

    CLASSNAME	shift, and go to state 12
    '[' 	shift, and go to state 90

    classname	go to state 94



state 194

    slotdef  ->  name '=' slotliteral .   (rule 159)

    $default	reduce using rule 159 (slotdef)



state 195

    slotliteral  ->  listlit .   (rule 119)

    $default	reduce using rule 119 (slotliteral)



state 196

    slotliteral  ->  integer .   (rule 110)
    floatp  ->  integer . pie   (rule 189)

    PIE 	shift, and go to state 19

    $default	reduce using rule 110 (slotliteral)

    pie 	go to state 113



state 197

    slotliteral  ->  floatp .   (rule 111)

    $default	reduce using rule 111 (slotliteral)



state 198

    slotliteral  ->  trueobj .   (rule 115)

    $default	reduce using rule 115 (slotliteral)



state 199

    slotliteral  ->  falseobj .   (rule 116)

    $default	reduce using rule 116 (slotliteral)



state 200

    slotliteral  ->  nilobj .   (rule 117)

    $default	reduce using rule 117 (slotliteral)



state 201

    slotliteral  ->  infobj .   (rule 118)

    $default	reduce using rule 118 (slotliteral)



state 202

    slotliteral  ->  ascii .   (rule 112)

    $default	reduce using rule 112 (slotliteral)



state 203

    slotliteral  ->  symbol .   (rule 114)

    $default	reduce using rule 114 (slotliteral)



state 204

    slotliteral  ->  string .   (rule 113)
    string  ->  string . string1   (rule 202)

    STRING	shift, and go to state 10

    $default	reduce using rule 113 (slotliteral)

    string1	go to state 122



state 205

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 151)

    NAME	shift, and go to state 6

    name	go to state 257



state 206

    argdecls  ->  ARG slotdeflist ';' .   (rule 150)

    $default	reduce using rule 150 (argdecls)



state 207

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 153)

    NAME	shift, and go to state 6

    name	go to state 258



state 208

    argdecls  ->  '|' slotdeflist '|' .   (rule 152)

    $default	reduce using rule 152 (argdecls)



state 209

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 142)

    '}' 	shift, and go to state 259



state 210

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 145)

    $default	reduce using rule 145 (funcvardecls)



state 211

    arglist1  ->  arglist1 ',' exprseq .   (rule 100)

    $default	reduce using rule 100 (arglist1)



state 212

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    dictslotdef  ->  expr ':' expr .   (rule 160)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 160 (dictslotdef)

    binop	go to state 106
    keybinop	go to state 107



state 213

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 78)

    $default	reduce using rule 78 (valrange2)



state 214

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 79)

    DOTDOT	shift, and go to state 260



state 215

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 216

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    dictslotdef  ->  expr . ':' expr   (rule 160)

    ':' 	shift, and go to state 139
    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    binop	go to state 106
    keybinop	go to state 107



state 217

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 163)

    $default	reduce using rule 163 (dictslotlist1)



state 218

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  '~' name '=' expr .   (rule 88)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 88 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 219

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 143)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 261
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 210
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 220

    listlit2  ->  '[' literallistc . ']'   (rule 172)

    ']' 	shift, and go to state 262



state 221

    listlit  ->  '#' '[' literallistc ']' .   (rule 170)

    $default	reduce using rule 170 (listlit)



state 222

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 177)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 263
    listlit2	go to state 153
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 223

    literallistc  ->  literallist1 optcomma .   (rule 175)

    $default	reduce using rule 175 (literallistc)



state 224

    listlit2  ->  classname '[' . literallistc ']'   (rule 173)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 151

    $default	reduce using rule 174 (literallistc)

    listliteral	go to state 152
    listlit2	go to state 153
    literallistc	go to state 264
    literallist1	go to state 155
    integer	go to state 156
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 157
    classname	go to state 158
    trueobj	go to state 159
    falseobj	go to state 160
    nilobj	go to state 161
    infobj	go to state 162
    ascii	go to state 163
    symbol	go to state 164
    string	go to state 165
    string1	go to state 58



state 225

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  '#' mavars '=' expr .   (rule 91)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 91 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 226

    mavars  ->  mavarlist ELLIPSIS name .   (rule 107)

    $default	reduce using rule 107 (mavars)



state 227

    mavarlist  ->  mavarlist ',' name .   (rule 109)

    $default	reduce using rule 109 (mavarlist)



state 228

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 171)

    ']' 	shift, and go to state 265



state 229

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 69)

    ']' 	shift, and go to state 266



state 230

    valrangex1  ->  expr1 '[' exprseq DOTDOT . ']'   (rule 68)
    valrangex1  ->  expr1 '[' exprseq DOTDOT . exprseq ']'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 267
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 268
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 231

    valrangex1  ->  expr1 '[' exprseq ',' . exprseq DOTDOT ']'   (rule 71)
    valrangex1  ->  expr1 '[' exprseq ',' . exprseq DOTDOT exprseq ']'   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 269
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 232

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 66)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 92)

    '=' 	shift, and go to state 270

    $default	reduce using rule 66 (expr1)



state 233

    arglist1  ->  arglist1 ',' . exprseq   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 211
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 234

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 74)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 271
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 235

    valrangexd  ->  expr '.' '[' exprseq . DOTDOT ']'   (rule 73)
    valrangexd  ->  expr '.' '[' exprseq . DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr '.' '[' exprseq . ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr '.' '[' exprseq . ',' exprseq DOTDOT exprseq ']'   (rule 77)
    arglist1  ->  exprseq .   (rule 99)

    DOTDOT	shift, and go to state 272
    ',' 	shift, and go to state 273

    ',' 	[reduce using rule 99 (arglist1)]
    $default	reduce using rule 99 (arglist1)



state 236

    expr  ->  expr '.' '[' arglist1 . ']'   (rule 82)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 93)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ']' 	shift, and go to state 274
    ',' 	shift, and go to state 233



state 237

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 50)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ',' 	shift, and go to state 243

    $default	reduce using rule 104 (optkeyarglist)

    optkeyarglist	go to state 275



state 238

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 48)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 102)

    ',' 	shift, and go to state 247
    ')' 	shift, and go to state 276



state 239

    expr  ->  expr '.' name '=' . expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 277
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 240

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 278
    keyarglist1	go to state 279
    keyarg	go to state 185
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 186



state 241

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 181
    block	go to state 41



state 242

    msgsend  ->  expr '.' name blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 243

    arglist1  ->  arglist1 ',' . exprseq   (rule 100)
    optkeyarglist  ->  ',' . keyarglist1   (rule 105)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 211
    keyarglist1	go to state 280
    keyarg	go to state 185
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 186



state 244

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 90)

    ')' 	shift, and go to state 281



state 245

    expr1  ->  classname '[' arglistc ']' .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 246

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 64)

    ')' 	shift, and go to state 282



state 247

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 102)

    KEYBINOP	shift, and go to state 78

    keyarg	go to state 283
    keybinop	go to state 186



state 248

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 249

    keyarg  ->  keybinop exprseq .   (rule 103)

    $default	reduce using rule 103 (keyarg)



state 250

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 211)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104

    $default	reduce using rule 211 (binop)

    name	go to state 284
    binop	go to state 285



state 251

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 252

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 253

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 286



state 254

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 287



state 255

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 124

    $default	reduce using rule 13 (superclass)

    superclass	go to state 288



state 256

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 289
    CLASSVAR	shift, and go to state 290

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 291
    methods	go to state 292



state 257

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 151)

    ';' 	shift, and go to state 293



state 258

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 153)

    '|' 	shift, and go to state 294



state 259

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 142)

    $default	reduce using rule 142 (block)



state 260

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 79)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 295
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 261

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 143)

    '}' 	shift, and go to state 296



state 262

    listlit2  ->  '[' literallistc ']' .   (rule 172)

    $default	reduce using rule 172 (listlit2)



state 263

    literallist1  ->  literallist1 ',' listliteral .   (rule 177)

    $default	reduce using rule 177 (literallist1)



state 264

    listlit2  ->  classname '[' literallistc . ']'   (rule 173)

    ']' 	shift, and go to state 297



state 265

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 171)

    $default	reduce using rule 171 (listlit)



state 266

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 69)

    $default	reduce using rule 69 (valrangex1)



state 267

    valrangex1  ->  expr1 '[' exprseq DOTDOT ']' .   (rule 68)

    $default	reduce using rule 68 (valrangex1)



state 268

    valrangex1  ->  expr1 '[' exprseq DOTDOT exprseq . ']'   (rule 70)

    ']' 	shift, and go to state 298



state 269

    valrangex1  ->  expr1 '[' exprseq ',' exprseq . DOTDOT ']'   (rule 71)
    valrangex1  ->  expr1 '[' exprseq ',' exprseq . DOTDOT exprseq ']'   (rule 72)

    DOTDOT	shift, and go to state 299



state 270

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 300
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 271

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 74)

    ']' 	shift, and go to state 301



state 272

    valrangexd  ->  expr '.' '[' exprseq DOTDOT . ']'   (rule 73)
    valrangexd  ->  expr '.' '[' exprseq DOTDOT . exprseq ']'   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 302
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 303
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 273

    valrangexd  ->  expr '.' '[' exprseq ',' . exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr '.' '[' exprseq ',' . exprseq DOTDOT exprseq ']'   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 304
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 274

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 82)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 93)

    '=' 	shift, and go to state 305

    $default	reduce using rule 82 (expr)



state 275

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 50)

    ')' 	shift, and go to state 306



state 276

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 48)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 307
    blockliteral	go to state 119
    block	go to state 41



state 277

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr '.' name '=' expr .   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 89 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 278

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 100)

    ',' 	shift, and go to state 243

    $default	reduce using rule 104 (optkeyarglist)

    optkeyarglist	go to state 308



state 279

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 102)

    ',' 	shift, and go to state 247
    ')' 	shift, and go to state 309



state 280

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 102)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 105)

    ',' 	shift, and go to state 247

    $default	reduce using rule 105 (optkeyarglist)



state 281

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 90)

    '=' 	shift, and go to state 310
    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 311
    blockliteral	go to state 119
    block	go to state 41



state 282

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 283

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 102)

    $default	reduce using rule 102 (keyarglist1)



state 284

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 312



state 285

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 313



state 286

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 314



state 287

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 315



state 288

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 316



state 289

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 317
    '>' 	shift, and go to state 318
    READWRITEVAR	shift, and go to state 319

    $default	reduce using rule 178 (rwspec)

    rwslotdeflist	go to state 320
    rwslotdef	go to state 321
    rwspec	go to state 322



state 290

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 317
    '>' 	shift, and go to state 318
    READWRITEVAR	shift, and go to state 319

    $default	reduce using rule 178 (rwspec)

    rwslotdeflist	go to state 323
    rwslotdef	go to state 321
    rwspec	go to state 322



state 291

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 292

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 250
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 324

    methoddef	go to state 252
    name	go to state 253
    binop	go to state 254



state 293

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 151)

    $default	reduce using rule 151 (argdecls)



state 294

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 153)

    $default	reduce using rule 153 (argdecls)



state 295

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 79)

    $default	reduce using rule 79 (valrange2)



state 296

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 143)

    $default	reduce using rule 143 (block)



state 297

    listlit2  ->  classname '[' literallistc ']' .   (rule 173)

    $default	reduce using rule 173 (listlit2)



state 298

    valrangex1  ->  expr1 '[' exprseq DOTDOT exprseq ']' .   (rule 70)

    $default	reduce using rule 70 (valrangex1)



state 299

    valrangex1  ->  expr1 '[' exprseq ',' exprseq DOTDOT . ']'   (rule 71)
    valrangex1  ->  expr1 '[' exprseq ',' exprseq DOTDOT . exprseq ']'   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 325
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 326
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 300

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 92)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 92 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 301

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 74)

    $default	reduce using rule 74 (valrangexd)



state 302

    valrangexd  ->  expr '.' '[' exprseq DOTDOT ']' .   (rule 73)

    $default	reduce using rule 73 (valrangexd)



state 303

    valrangexd  ->  expr '.' '[' exprseq DOTDOT exprseq . ']'   (rule 75)

    ']' 	shift, and go to state 327



state 304

    valrangexd  ->  expr '.' '[' exprseq ',' exprseq . DOTDOT ']'   (rule 76)
    valrangexd  ->  expr '.' '[' exprseq ',' exprseq . DOTDOT exprseq ']'   (rule 77)

    DOTDOT	shift, and go to state 328



state 305

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 329
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 306

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 50)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 330
    blockliteral	go to state 119
    block	go to state 41



state 307

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 308

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 331



state 309

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 49)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 332
    blockliteral	go to state 119
    block	go to state 41



state 310

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 90)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 333
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 311

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 312

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 334



state 313

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 149 (argdecls)

    argdecls	go to state 335



state 314

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 336



state 315

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 337



state 316

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 338



state 317

    rwspec  ->  '<' .   (rule 179)

    $default	reduce using rule 179 (rwspec)



state 318

    rwspec  ->  '>' .   (rule 181)

    $default	reduce using rule 181 (rwspec)



state 319

    rwspec  ->  READWRITEVAR .   (rule 180)

    $default	reduce using rule 180 (rwspec)



state 320

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 167)

    ';' 	shift, and go to state 339
    ',' 	shift, and go to state 340



state 321

    rwslotdeflist  ->  rwslotdef .   (rule 166)

    $default	reduce using rule 166 (rwslotdeflist)



state 322

    rwslotdef  ->  rwspec . name   (rule 168)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 169)

    NAME	shift, and go to state 6

    name	go to state 341



state 323

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 167)

    ';' 	shift, and go to state 342
    ',' 	shift, and go to state 340



state 324

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 325

    valrangex1  ->  expr1 '[' exprseq ',' exprseq DOTDOT ']' .   (rule 71)

    $default	reduce using rule 71 (valrangex1)



state 326

    valrangex1  ->  expr1 '[' exprseq ',' exprseq DOTDOT exprseq . ']'   (rule 72)

    ']' 	shift, and go to state 343



state 327

    valrangexd  ->  expr '.' '[' exprseq DOTDOT exprseq ']' .   (rule 75)

    $default	reduce using rule 75 (valrangexd)



state 328

    valrangexd  ->  expr '.' '[' exprseq ',' exprseq DOTDOT . ']'   (rule 76)
    valrangexd  ->  expr '.' '[' exprseq ',' exprseq DOTDOT . exprseq ']'   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 344
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 345
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 329

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 93 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 330

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 331

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 117

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 241
    blocklist	go to state 346
    blockliteral	go to state 119
    block	go to state 41



state 332

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 333

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 90)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105

    $default	reduce using rule 90 (expr)

    binop	go to state 106
    keybinop	go to state 107



state 334

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 347



state 335

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 144 (funcvardecls)

    funcvardecls	go to state 348



state 336

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    PRIMITIVENAME	shift, and go to state 349
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 350
    funcvardecl	go to state 210
    primname	go to state 351



state 337

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    PRIMITIVENAME	shift, and go to state 349
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 352
    funcvardecl	go to state 210
    primname	go to state 351



state 338

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 289
    CLASSVAR	shift, and go to state 290

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 291
    methods	go to state 353



state 339

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 340

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 167)

    '<' 	shift, and go to state 317
    '>' 	shift, and go to state 318
    READWRITEVAR	shift, and go to state 319

    $default	reduce using rule 178 (rwspec)

    rwslotdef	go to state 354
    rwspec	go to state 322



state 341

    rwslotdef  ->  rwspec name .   (rule 168)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 169)

    '=' 	shift, and go to state 355

    $default	reduce using rule 168 (rwslotdef)



state 342

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 343

    valrangex1  ->  expr1 '[' exprseq ',' exprseq DOTDOT exprseq ']' .   (rule 72)

    $default	reduce using rule 72 (valrangex1)



state 344

    valrangexd  ->  expr '.' '[' exprseq ',' exprseq DOTDOT ']' .   (rule 76)

    $default	reduce using rule 76 (valrangexd)



state 345

    valrangexd  ->  expr '.' '[' exprseq ',' exprseq DOTDOT exprseq . ']'   (rule 77)

    ']' 	shift, and go to state 356



state 346

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 347

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    PRIMITIVENAME	shift, and go to state 349
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 357
    funcvardecl	go to state 210
    primname	go to state 351



state 348

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 145)

    PRIMITIVENAME	shift, and go to state 349
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 358
    funcvardecl	go to state 210
    primname	go to state 351



state 349

    primname  ->  PRIMITIVENAME .   (rule 194)

    $default	reduce using rule 194 (primname)



state 350

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 359
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 360
    retval	go to state 361
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 362
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 351

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 363



state 352

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 359
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 364
    retval	go to state 361
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 362
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 353

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 96
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 250
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '}' 	shift, and go to state 365

    methoddef	go to state 252
    name	go to state 253
    binop	go to state 254



state 354

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 167)

    $default	reduce using rule 167 (rwslotdeflist)



state 355

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 169)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 193

    slotliteral	go to state 366
    listlit	go to state 195
    integer	go to state 196
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 197
    trueobj	go to state 198
    falseobj	go to state 199
    nilobj	go to state 200
    infobj	go to state 201
    ascii	go to state 202
    symbol	go to state 203
    string	go to state 204
    string1	go to state 58



state 356

    valrangexd  ->  expr '.' '[' exprseq ',' exprseq DOTDOT exprseq ']' .   (rule 77)

    $default	reduce using rule 77 (valrangexd)



state 357

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 359
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 367
    retval	go to state 361
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 362
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 358

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 359
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 368
    retval	go to state 361
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 362
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 359

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 369
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 360

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 370



state 361

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 362

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 359

    $default	reduce using rule 38 (retval)

    retval	go to state 371



state 363

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 364

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 372



state 365

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 366

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 169)

    $default	reduce using rule 169 (rwslotdef)



state 367

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 373



state 368

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 374



state 369

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT ']'   (rule 73)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 74)
    valrangexd  ->  expr . '.' '[' exprseq DOTDOT exprseq ']'   (rule 75)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT ']'   (rule 76)
    valrangexd  ->  expr . '.' '[' exprseq ',' exprseq DOTDOT exprseq ']'   (rule 77)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 82)
    expr  ->  expr . binop expr   (rule 85)
    expr  ->  expr . keybinop expr   (rule 86)
    expr  ->  expr . '.' name '=' expr   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 93)

    BINOP	shift, and go to state 96
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 97
    '<' 	shift, and go to state 98
    '>' 	shift, and go to state 99
    '*' 	shift, and go to state 100
    '+' 	shift, and go to state 101
    '|' 	shift, and go to state 102
    READWRITEVAR	shift, and go to state 103
    DOUBLEEQUAL	shift, and go to state 104
    '.' 	shift, and go to state 105
    ';' 	shift, and go to state 147

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 375
    binop	go to state 106
    keybinop	go to state 107



state 370

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 371

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 372

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 373

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 374

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 375

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 376

    $   	go to state 377



state 377

    $   	go to state 378



state 378

    $default	accept
