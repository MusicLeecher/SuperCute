

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 71 between rule 81 and token BINOP resolved as reduce.
Conflict in state 71 between rule 81 and token KEYBINOP resolved as reduce.
Conflict in state 71 between rule 81 and token '-' resolved as reduce.
Conflict in state 71 between rule 81 and token '<' resolved as reduce.
Conflict in state 71 between rule 81 and token '>' resolved as reduce.
Conflict in state 71 between rule 81 and token '*' resolved as reduce.
Conflict in state 71 between rule 81 and token '+' resolved as reduce.
Conflict in state 71 between rule 81 and token '|' resolved as reduce.
Conflict in state 71 between rule 81 and token READWRITEVAR resolved as reduce.
Conflict in state 71 between rule 81 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 71 between rule 81 and token '.' resolved as reduce.
Conflict in state 177 between rule 82 and token BINOP resolved as reduce.
Conflict in state 177 between rule 82 and token KEYBINOP resolved as reduce.
Conflict in state 177 between rule 82 and token '-' resolved as reduce.
Conflict in state 177 between rule 82 and token '<' resolved as reduce.
Conflict in state 177 between rule 82 and token '>' resolved as reduce.
Conflict in state 177 between rule 82 and token '*' resolved as reduce.
Conflict in state 177 between rule 82 and token '+' resolved as reduce.
Conflict in state 177 between rule 82 and token '|' resolved as reduce.
Conflict in state 177 between rule 82 and token READWRITEVAR resolved as reduce.
Conflict in state 177 between rule 82 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 177 between rule 82 and token '.' resolved as shift.
Conflict in state 178 between rule 83 and token BINOP resolved as reduce.
Conflict in state 178 between rule 83 and token KEYBINOP resolved as reduce.
Conflict in state 178 between rule 83 and token '-' resolved as reduce.
Conflict in state 178 between rule 83 and token '<' resolved as reduce.
Conflict in state 178 between rule 83 and token '>' resolved as reduce.
Conflict in state 178 between rule 83 and token '*' resolved as reduce.
Conflict in state 178 between rule 83 and token '+' resolved as reduce.
Conflict in state 178 between rule 83 and token '|' resolved as reduce.
Conflict in state 178 between rule 83 and token READWRITEVAR resolved as reduce.
Conflict in state 178 between rule 83 and token DOUBLEEQUAL resolved as reduce.
Conflict in state 178 between rule 83 and token '.' resolved as shift.
Conflict in state 180 between rule 84 and token BINOP resolved as shift.
Conflict in state 180 between rule 84 and token KEYBINOP resolved as shift.
Conflict in state 180 between rule 84 and token '-' resolved as shift.
Conflict in state 180 between rule 84 and token '<' resolved as shift.
Conflict in state 180 between rule 84 and token '>' resolved as shift.
Conflict in state 180 between rule 84 and token '*' resolved as shift.
Conflict in state 180 between rule 84 and token '+' resolved as shift.
Conflict in state 180 between rule 84 and token '|' resolved as shift.
Conflict in state 180 between rule 84 and token READWRITEVAR resolved as shift.
Conflict in state 180 between rule 84 and token DOUBLEEQUAL resolved as shift.
Conflict in state 180 between rule 84 and token '.' resolved as shift.
Conflict in state 219 between rule 85 and token BINOP resolved as shift.
Conflict in state 219 between rule 85 and token KEYBINOP resolved as shift.
Conflict in state 219 between rule 85 and token '-' resolved as shift.
Conflict in state 219 between rule 85 and token '<' resolved as shift.
Conflict in state 219 between rule 85 and token '>' resolved as shift.
Conflict in state 219 between rule 85 and token '*' resolved as shift.
Conflict in state 219 between rule 85 and token '+' resolved as shift.
Conflict in state 219 between rule 85 and token '|' resolved as shift.
Conflict in state 219 between rule 85 and token READWRITEVAR resolved as shift.
Conflict in state 219 between rule 85 and token DOUBLEEQUAL resolved as shift.
Conflict in state 219 between rule 85 and token '.' resolved as shift.
Conflict in state 226 between rule 88 and token BINOP resolved as shift.
Conflict in state 226 between rule 88 and token KEYBINOP resolved as shift.
Conflict in state 226 between rule 88 and token '-' resolved as shift.
Conflict in state 226 between rule 88 and token '<' resolved as shift.
Conflict in state 226 between rule 88 and token '>' resolved as shift.
Conflict in state 226 between rule 88 and token '*' resolved as shift.
Conflict in state 226 between rule 88 and token '+' resolved as shift.
Conflict in state 226 between rule 88 and token '|' resolved as shift.
Conflict in state 226 between rule 88 and token READWRITEVAR resolved as shift.
Conflict in state 226 between rule 88 and token DOUBLEEQUAL resolved as shift.
Conflict in state 226 between rule 88 and token '.' resolved as shift.
Conflict in state 274 between rule 86 and token BINOP resolved as shift.
Conflict in state 274 between rule 86 and token KEYBINOP resolved as shift.
Conflict in state 274 between rule 86 and token '-' resolved as shift.
Conflict in state 274 between rule 86 and token '<' resolved as shift.
Conflict in state 274 between rule 86 and token '>' resolved as shift.
Conflict in state 274 between rule 86 and token '*' resolved as shift.
Conflict in state 274 between rule 86 and token '+' resolved as shift.
Conflict in state 274 between rule 86 and token '|' resolved as shift.
Conflict in state 274 between rule 86 and token READWRITEVAR resolved as shift.
Conflict in state 274 between rule 86 and token DOUBLEEQUAL resolved as shift.
Conflict in state 274 between rule 86 and token '.' resolved as shift.
Conflict in state 296 between rule 89 and token BINOP resolved as shift.
Conflict in state 296 between rule 89 and token KEYBINOP resolved as shift.
Conflict in state 296 between rule 89 and token '-' resolved as shift.
Conflict in state 296 between rule 89 and token '<' resolved as shift.
Conflict in state 296 between rule 89 and token '>' resolved as shift.
Conflict in state 296 between rule 89 and token '*' resolved as shift.
Conflict in state 296 between rule 89 and token '+' resolved as shift.
Conflict in state 296 between rule 89 and token '|' resolved as shift.
Conflict in state 296 between rule 89 and token READWRITEVAR resolved as shift.
Conflict in state 296 between rule 89 and token DOUBLEEQUAL resolved as shift.
Conflict in state 296 between rule 89 and token '.' resolved as shift.
Conflict in state 321 between rule 90 and token BINOP resolved as shift.
Conflict in state 321 between rule 90 and token KEYBINOP resolved as shift.
Conflict in state 321 between rule 90 and token '-' resolved as shift.
Conflict in state 321 between rule 90 and token '<' resolved as shift.
Conflict in state 321 between rule 90 and token '>' resolved as shift.
Conflict in state 321 between rule 90 and token '*' resolved as shift.
Conflict in state 321 between rule 90 and token '+' resolved as shift.
Conflict in state 321 between rule 90 and token '|' resolved as shift.
Conflict in state 321 between rule 90 and token READWRITEVAR resolved as shift.
Conflict in state 321 between rule 90 and token DOUBLEEQUAL resolved as shift.
Conflict in state 321 between rule 90 and token '.' resolved as shift.
Conflict in state 325 between rule 87 and token BINOP resolved as shift.
Conflict in state 325 between rule 87 and token KEYBINOP resolved as shift.
Conflict in state 325 between rule 87 and token '-' resolved as shift.
Conflict in state 325 between rule 87 and token '<' resolved as shift.
Conflict in state 325 between rule 87 and token '>' resolved as shift.
Conflict in state 325 between rule 87 and token '*' resolved as shift.
Conflict in state 325 between rule 87 and token '+' resolved as shift.
Conflict in state 325 between rule 87 and token '|' resolved as shift.
Conflict in state 325 between rule 87 and token READWRITEVAR resolved as shift.
Conflict in state 325 between rule 87 and token DOUBLEEQUAL resolved as shift.
Conflict in state 325 between rule 87 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 49   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 51   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' name blocklist
rule 53   expr1 -> pushliteral
rule 54   expr1 -> blockliteral
rule 55   expr1 -> pushname
rule 56   expr1 -> msgsend
rule 57   expr1 -> '(' exprseq ')'
rule 58   expr1 -> '~' name
rule 59   expr1 -> '[' arglistc ']'
rule 60   expr1 -> '(' valrange2 ')'
rule 61   expr1 -> '(' dictslotlist ')'
rule 62   expr1 -> pseudovar
rule 63   expr1 -> classname '(' keyarglist1 ')'
rule 64   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 65   expr1 -> classname '[' arglistc ']'
rule 66   expr1 -> expr1 '[' arglist1 ']'
rule 67   expr1 -> valrangex1
rule 68   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 69   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 70   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 71   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 72   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 73   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 74   valrange2 -> DOTDOT exprseq
rule 75   valrange2 -> exprseq DOTDOT exprseq
rule 76   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 77   expr -> expr1
rule 78   expr -> valrangexd
rule 79   expr -> expr '.' '[' arglist1 ']'
rule 80   expr -> classname
rule 81   expr -> '`' expr
rule 82   expr -> expr binop expr
rule 83   expr -> expr keybinop expr
rule 84   expr -> name '=' expr
rule 85   expr -> '~' name '=' expr
rule 86   expr -> expr '.' name '=' expr
rule 87   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 88   expr -> '#' mavars '=' expr
rule 89   expr -> expr1 '[' arglist1 ']' '=' expr
rule 90   expr -> expr '.' '[' arglist1 ']' '=' expr
rule 91   exprn -> expr
rule 92   exprn -> exprn ';' expr
rule 93   exprseq -> exprn optsemi
rule 94   arglistc ->		/* empty */
rule 95   arglistc -> arglist1 optcomma
rule 96   arglist1 -> exprseq
rule 97   arglist1 -> arglist1 ',' exprseq
rule 98   keyarglist1 -> keyarg
rule 99   keyarglist1 -> keyarglist1 ',' keyarg
rule 100  keyarg -> keybinop exprseq
rule 101  optkeyarglist ->		/* empty */
rule 102  optkeyarglist -> ',' keyarglist1
rule 103  mavars -> mavarlist
rule 104  mavars -> mavarlist ELLIPSIS name
rule 105  mavarlist -> name
rule 106  mavarlist -> mavarlist ',' name
rule 107  slotliteral -> integer
rule 108  slotliteral -> floatp
rule 109  slotliteral -> ascii
rule 110  slotliteral -> string
rule 111  slotliteral -> symbol
rule 112  slotliteral -> trueobj
rule 113  slotliteral -> falseobj
rule 114  slotliteral -> nilobj
rule 115  slotliteral -> infobj
rule 116  slotliteral -> listlit
rule 117  blockliteral -> block
rule 118  pushname -> name
rule 119  pushliteral -> integer
rule 120  pushliteral -> floatp
rule 121  pushliteral -> ascii
rule 122  pushliteral -> string
rule 123  pushliteral -> symbol
rule 124  pushliteral -> trueobj
rule 125  pushliteral -> falseobj
rule 126  pushliteral -> nilobj
rule 127  pushliteral -> infobj
rule 128  pushliteral -> listlit
rule 129  listliteral -> integer
rule 130  listliteral -> floatp
rule 131  listliteral -> ascii
rule 132  listliteral -> string
rule 133  listliteral -> symbol
rule 134  listliteral -> trueobj
rule 135  listliteral -> falseobj
rule 136  listliteral -> nilobj
rule 137  listliteral -> infobj
rule 138  listliteral -> listlit2
rule 139  block -> '{' argdecls funcvardecls funcbody '}'
rule 140  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 141  funcvardecls ->		/* empty */
rule 142  funcvardecls -> funcvardecls funcvardecl
rule 143  funcvardecls1 -> funcvardecl
rule 144  funcvardecls1 -> funcvardecls1 funcvardecl
rule 145  funcvardecl -> VAR slotdeflist ';'
rule 146  argdecls ->		/* empty */
rule 147  argdecls -> ARG slotdeflist ';'
rule 148  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 149  argdecls -> '|' slotdeflist '|'
rule 150  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 151  slotdeflist0 ->		/* empty */
rule 152  slotdeflist0 -> slotdeflist
rule 153  slotdeflist -> slotdef
rule 154  slotdeflist -> slotdeflist ',' slotdef
rule 155  slotdef -> name
rule 156  slotdef -> name '=' slotliteral
rule 157  dictslotdef -> expr ':' expr
rule 158  dictslotdef -> keybinop expr
rule 159  dictslotlist1 -> dictslotdef
rule 160  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 161  dictslotlist ->		/* empty */
rule 162  dictslotlist -> dictslotlist1
rule 163  rwslotdeflist -> rwslotdef
rule 164  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 165  rwslotdef -> rwspec name
rule 166  rwslotdef -> rwspec name '=' slotliteral
rule 167  listlit -> '#' '[' literallistc ']'
rule 168  listlit -> '#' classname '[' literallistc ']'
rule 169  listlit2 -> '[' literallistc ']'
rule 170  listlit2 -> classname '[' literallistc ']'
rule 171  literallistc ->		/* empty */
rule 172  literallistc -> literallist1 optcomma
rule 173  literallist1 -> listliteral
rule 174  literallist1 -> literallist1 ',' listliteral
rule 175  rwspec ->		/* empty */
rule 176  rwspec -> '<'
rule 177  rwspec -> READWRITEVAR
rule 178  rwspec -> '>'
rule 179  integer -> INTEGER
rule 180  integer -> '-' INTEGER
rule 181  floatr -> FLOAT
rule 182  floatr -> '-' FLOAT
rule 183  pie -> PIE
rule 184  floatp -> floatr
rule 185  floatp -> floatr pie
rule 186  floatp -> integer pie
rule 187  floatp -> pie
rule 188  floatp -> '-' pie
rule 189  name -> NAME
rule 190  classname -> CLASSNAME
rule 191  primname -> PRIMITIVENAME
rule 192  trueobj -> TRUEOBJ
rule 193  falseobj -> FALSEOBJ
rule 194  nilobj -> NILOBJ
rule 195  infobj -> INFINITUMOBJ
rule 196  ascii -> ASCII
rule 197  symbol -> SYMBOL
rule 198  string -> string1
rule 199  string -> string string1
rule 200  string1 -> STRING
rule 201  pseudovar -> PSEUDOVAR
rule 202  binop -> BINOP
rule 203  binop -> READWRITEVAR
rule 204  binop -> DOUBLEEQUAL
rule 205  binop -> '<'
rule 206  binop -> '>'
rule 207  binop -> '-'
rule 208  binop -> '*'
rule 209  binop -> '+'
rule 210  binop -> '|'
rule 211  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 88 140 167 168
'(' (40) 31 47 48 49 50 51 57 60 61 63 64 87
')' (41) 31 47 48 49 50 51 57 60 61 63 64 87
'*' (42) 22 24 208
'+' (43) 10 209
',' (44) 28 76 97 99 102 106 154 160 164 174
'-' (45) 180 182 188 207
'.' (46) 48 49 50 51 52 71 72 73 79 86 90
':' (58) 14 157
';' (59) 17 18 26 92 145 147 148
'<' (60) 176 205
'=' (61) 84 85 86 87 88 89 90 156 166
'>' (62) 178 206
'[' (91) 9 59 65 66 68 69 70 71 72 73 79 89 90 167 168 169 170
']' (93) 9 59 65 66 68 69 70 71 72 73 79 89 90 167 168 169 170
'^' (94) 39 41
'`' (96) 81
'{' (123) 8 9 10 21 22 23 24 139 140
'|' (124) 149 150 210
'}' (125) 8 9 10 21 22 23 24 139 140
'~' (126) 58 85
error (256)
NAME (257) 189
INTEGER (258) 179 180
FLOAT (259) 181 182
SYMBOL (260) 197
STRING (261) 200
ASCII (262) 196
PRIMITIVENAME (263) 191
CLASSNAME (264) 190
VAR (265) 18 145
ARG (266) 147 148
CLASSVAR (267) 17
CONST (268)
NILOBJ (269) 194
TRUEOBJ (270) 192
FALSEOBJ (271) 193
INFINITUMOBJ (272) 195
PSEUDOVAR (273) 201
ELLIPSIS (274) 104 148 150
DOTDOT (275) 68 69 70 71 72 73 74 75 76
PIE (276) 183
BADTOKEN (277)
INTERPRET (278) 3
BINOP (279) 202
KEYBINOP (280) 211
READWRITEVAR (281) 177 203
DOUBLEEQUAL (282) 204
UMINUS (283)

Nonterminals, with rules where they appear

root (51)
    on left: 1 2 3
classes (52)
    on left: 4 5, on right: 1 5
classextensions (53)
    on left: 6 7, on right: 2 7
classdef (54)
    on left: 8 9, on right: 5
classextension (55)
    on left: 10, on right: 6 7
optname (56)
    on left: 11 12, on right: 9
superclass (57)
    on left: 13 14, on right: 8 9
classvardecls (58)
    on left: 15 16, on right: 8 9 16
classvardecl (59)
    on left: 17 18, on right: 16
methods (60)
    on left: 19 20, on right: 8 9 10 20
methoddef (61)
    on left: 21 22 23 24, on right: 20
optsemi (62)
    on left: 25 26, on right: 37 39 41 93
optcomma (63)
    on left: 27 28, on right: 95 172
funcbody (64)
    on left: 29 30, on right: 31 32 33 139 140
cmdlinecode (65)
    on left: 31 32 33, on right: 3
methbody (66)
    on left: 34 35, on right: 21 22 23 24
primitive (67)
    on left: 36 37, on right: 21 22 23 24
retval (68)
    on left: 38 39, on right: 34 35
funretval (69)
    on left: 40 41, on right: 29 30
blocklist1 (70)
    on left: 42 43, on right: 43 45 46
blocklist (71)
    on left: 44 45, on right: 47 48 49 50 51 52
msgsend (72)
    on left: 46 47 48 49 50 51 52, on right: 56
expr1 (73)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 66 68 69 70 77 89
valrangex1 (74)
    on left: 68 69 70, on right: 67
valrangexd (75)
    on left: 71 72 73, on right: 78
valrange2 (76)
    on left: 74 75 76, on right: 60
expr (77)
    on left: 77 78 79 80 81 82 83 84 85 86 87 88 89 90,
    on right: 39 41 48 49 50 51 52 71 72 73 79 81 82 83 84 85 86 87
    88 89 90 91 92 157 158
exprn (78)
    on left: 91 92, on right: 92 93
exprseq (79)
    on left: 93, on right: 30 35 57 69 70 72 73 74 75 76 96 97 100
arglistc (80)
    on left: 94 95, on right: 59 65
arglist1 (81)
    on left: 96 97, on right: 47 50 51 64 66 68 70 71 73 79 87 89 90
    95 97
keyarglist1 (82)
    on left: 98 99, on right: 48 49 63 99 102
keyarg (83)
    on left: 100, on right: 98 99
optkeyarglist (84)
    on left: 101 102, on right: 47 50 51 64 87
mavars (85)
    on left: 103 104, on right: 88
mavarlist (86)
    on left: 105 106, on right: 103 104 106
slotliteral (87)
    on left: 107 108 109 110 111 112 113 114 115 116,
    on right: 156 166
blockliteral (88)
    on left: 117, on right: 42 43 54
pushname (89)
    on left: 118, on right: 55
pushliteral (90)
    on left: 119 120 121 122 123 124 125 126 127 128,
    on right: 53
listliteral (91)
    on left: 129 130 131 132 133 134 135 136 137 138,
    on right: 173 174
block (92)
    on left: 139 140, on right: 117
funcvardecls (93)
    on left: 141 142, on right: 21 22 23 24 139 140 142
funcvardecls1 (94)
    on left: 143 144, on right: 31 32 144
funcvardecl (95)
    on left: 145, on right: 142 143 144
argdecls (96)
    on left: 146 147 148 149 150, on right: 21 22 23 24 139 140
slotdeflist0 (97)
    on left: 151 152, on right: 148 150
slotdeflist (98)
    on left: 153 154, on right: 145 147 149 152 154
slotdef (99)
    on left: 155 156, on right: 153 154
dictslotdef (100)
    on left: 157 158, on right: 159 160
dictslotlist1 (101)
    on left: 159 160, on right: 160 162
dictslotlist (102)
    on left: 161 162, on right: 61
rwslotdeflist (103)
    on left: 163 164, on right: 17 18 164
rwslotdef (104)
    on left: 165 166, on right: 163 164
listlit (105)
    on left: 167 168, on right: 116 128
listlit2 (106)
    on left: 169 170, on right: 138
literallistc (107)
    on left: 171 172, on right: 167 168 169 170
literallist1 (108)
    on left: 173 174, on right: 172 174
rwspec (109)
    on left: 175 176 177 178, on right: 165 166
integer (110)
    on left: 179 180, on right: 107 119 129 186
floatr (111)
    on left: 181 182, on right: 184 185
pie (112)
    on left: 183, on right: 185 186 187 188
floatp (113)
    on left: 184 185 186 187 188, on right: 108 120 130
name (114)
    on left: 189, on right: 12 21 22 46 47 49 51 52 58 84 85 86 87
    104 105 106 118 148 150 155 156 165 166
classname (115)
    on left: 190, on right: 8 9 10 14 63 64 65 80 168 170
primname (116)
    on left: 191, on right: 37
trueobj (117)
    on left: 192, on right: 112 124 134
falseobj (118)
    on left: 193, on right: 113 125 135
nilobj (119)
    on left: 194, on right: 114 126 136
infobj (120)
    on left: 195, on right: 115 127 137
ascii (121)
    on left: 196, on right: 109 121 131
symbol (122)
    on left: 197, on right: 111 123 133
string (123)
    on left: 198 199, on right: 110 122 132 199
string1 (124)
    on left: 200, on right: 198 199
pseudovar (125)
    on left: 201, on right: 62
binop (126)
    on left: 202 203 204 205 206 207 208 209 210, on right: 23 24 82
keybinop (127)
    on left: 211, on right: 83 100 158


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 364
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 24
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 28
    cmdlinecode	go to state 29
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 42
    funcvardecl	go to state 43
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 12

    classname	go to state 60



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 12

    $default	reduce using rule 1 (root)

    classdef	go to state 61
    classname	go to state 62



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 63



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 189)

    $default	reduce using rule 189 (name)



state 7

    integer  ->  INTEGER .   (rule 179)

    $default	reduce using rule 179 (integer)



state 8

    floatr  ->  FLOAT .   (rule 181)

    $default	reduce using rule 181 (floatr)



state 9

    symbol  ->  SYMBOL .   (rule 197)

    $default	reduce using rule 197 (symbol)



state 10

    string1  ->  STRING .   (rule 200)

    $default	reduce using rule 200 (string1)



state 11

    ascii  ->  ASCII .   (rule 196)

    $default	reduce using rule 196 (ascii)



state 12

    classname  ->  CLASSNAME .   (rule 190)

    $default	reduce using rule 190 (classname)



state 13

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 145)

    NAME	shift, and go to state 6

    slotdeflist	go to state 64
    slotdef	go to state 65
    name	go to state 66



state 14

    nilobj  ->  NILOBJ .   (rule 194)

    $default	reduce using rule 194 (nilobj)



state 15

    trueobj  ->  TRUEOBJ .   (rule 192)

    $default	reduce using rule 192 (trueobj)



state 16

    falseobj  ->  FALSEOBJ .   (rule 193)

    $default	reduce using rule 193 (falseobj)



state 17

    infobj  ->  INFINITUMOBJ .   (rule 195)

    $default	reduce using rule 195 (infobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 201)

    $default	reduce using rule 201 (pseudovar)



state 19

    pie  ->  PIE .   (rule 183)

    $default	reduce using rule 183 (pie)



state 20

    integer  ->  '-' . INTEGER   (rule 180)
    floatr  ->  '-' . FLOAT   (rule 182)
    floatp  ->  '-' . pie   (rule 188)

    INTEGER	shift, and go to state 67
    FLOAT	shift, and go to state 68
    PIE 	shift, and go to state 19

    pie 	go to state 69



state 21

    expr  ->  '`' . expr   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 71
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 22

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 139)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 74



state 23

    expr1  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 94 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 76
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 24

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 78
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 161 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 80
    expr	go to state 81
    exprn	go to state 36
    exprseq	go to state 82
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecls1	go to state 83
    funcvardecl	go to state 43
    dictslotdef	go to state 84
    dictslotlist1	go to state 85
    dictslotlist	go to state 86
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 87



state 25

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 88
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 26

    expr1  ->  '~' . name   (rule 58)
    expr  ->  '~' . name '=' expr   (rule 85)

    NAME	shift, and go to state 6

    name	go to state 89



state 27

    expr  ->  '#' . mavars '=' expr   (rule 88)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 140)
    listlit  ->  '#' . '[' literallistc ']'   (rule 167)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 168)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 12
    '{' 	shift, and go to state 90
    '[' 	shift, and go to state 91

    mavars	go to state 92
    mavarlist	go to state 93
    name	go to state 94
    classname	go to state 95



state 28

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 29

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 30

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 31

    expr1  ->  msgsend .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 32

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 .   (rule 77)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 89)

    '[' 	shift, and go to state 96

    $default	reduce using rule 77 (expr)



state 33

    expr1  ->  valrangex1 .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 34

    expr  ->  valrangexd .   (rule 78)

    $default	reduce using rule 78 (expr)



state 35

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    exprn  ->  expr .   (rule 91)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 91 (exprn)

    binop	go to state 107
    keybinop	go to state 108



state 36

    exprn  ->  exprn . ';' expr   (rule 92)
    exprseq  ->  exprn . optsemi   (rule 93)

    ';' 	shift, and go to state 109

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 110



state 37

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 25

    $default	reduce using rule 40 (funretval)

    funretval	go to state 111



state 38

    expr1  ->  blockliteral .   (rule 54)

    $default	reduce using rule 54 (expr1)



state 39

    expr1  ->  pushname .   (rule 55)

    $default	reduce using rule 55 (expr1)



state 40

    expr1  ->  pushliteral .   (rule 53)

    $default	reduce using rule 53 (expr1)



state 41

    blockliteral  ->  block .   (rule 117)

    $default	reduce using rule 117 (blockliteral)



state 42

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 144)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 112
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 113
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 43

    funcvardecls1  ->  funcvardecl .   (rule 143)

    $default	reduce using rule 143 (funcvardecls1)



state 44

    pushliteral  ->  listlit .   (rule 128)

    $default	reduce using rule 128 (pushliteral)



state 45

    pushliteral  ->  integer .   (rule 119)
    floatp  ->  integer . pie   (rule 186)

    PIE 	shift, and go to state 19

    $default	reduce using rule 119 (pushliteral)

    pie 	go to state 114



state 46

    floatp  ->  floatr .   (rule 184)
    floatp  ->  floatr . pie   (rule 185)

    PIE 	shift, and go to state 19

    $default	reduce using rule 184 (floatp)

    pie 	go to state 115



state 47

    floatp  ->  pie .   (rule 187)

    $default	reduce using rule 187 (floatp)



state 48

    pushliteral  ->  floatp .   (rule 120)

    $default	reduce using rule 120 (pushliteral)



state 49

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name . '=' expr   (rule 84)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 87)
    pushname  ->  name .   (rule 118)

    '=' 	shift, and go to state 116
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 117
    '#' 	shift, and go to state 118

    $default	reduce using rule 118 (pushname)

    blocklist1	go to state 119
    blockliteral	go to state 120
    block	go to state 41



state 50

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 63)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 64)
    expr1  ->  classname . '[' arglistc ']'   (rule 65)
    expr  ->  classname .   (rule 80)

    '[' 	shift, and go to state 121
    '(' 	shift, and go to state 122

    $default	reduce using rule 80 (expr)



state 51

    pushliteral  ->  trueobj .   (rule 124)

    $default	reduce using rule 124 (pushliteral)



state 52

    pushliteral  ->  falseobj .   (rule 125)

    $default	reduce using rule 125 (pushliteral)



state 53

    pushliteral  ->  nilobj .   (rule 126)

    $default	reduce using rule 126 (pushliteral)



state 54

    pushliteral  ->  infobj .   (rule 127)

    $default	reduce using rule 127 (pushliteral)



state 55

    pushliteral  ->  ascii .   (rule 121)

    $default	reduce using rule 121 (pushliteral)



state 56

    pushliteral  ->  symbol .   (rule 123)

    $default	reduce using rule 123 (pushliteral)



state 57

    pushliteral  ->  string .   (rule 122)
    string  ->  string . string1   (rule 199)

    STRING	shift, and go to state 10

    $default	reduce using rule 122 (pushliteral)

    string1	go to state 123



state 58

    string  ->  string1 .   (rule 198)

    $default	reduce using rule 198 (string)



state 59

    expr1  ->  pseudovar .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 60

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 124



state 61

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 62

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 125
    '[' 	shift, and go to state 126

    $default	reduce using rule 13 (superclass)

    superclass	go to state 127



state 63

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 64

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 145)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 154)

    ';' 	shift, and go to state 128
    ',' 	shift, and go to state 129



state 65

    slotdeflist  ->  slotdef .   (rule 153)

    $default	reduce using rule 153 (slotdeflist)



state 66

    slotdef  ->  name .   (rule 155)
    slotdef  ->  name . '=' slotliteral   (rule 156)

    '=' 	shift, and go to state 130

    $default	reduce using rule 155 (slotdef)



state 67

    integer  ->  '-' INTEGER .   (rule 180)

    $default	reduce using rule 180 (integer)



state 68

    floatr  ->  '-' FLOAT .   (rule 182)

    $default	reduce using rule 182 (floatr)



state 69

    floatp  ->  '-' pie .   (rule 188)

    $default	reduce using rule 188 (floatp)



state 70

    expr1  ->  '(' . exprseq ')'   (rule 57)
    expr1  ->  '(' . valrange2 ')'   (rule 60)
    expr1  ->  '(' . dictslotlist ')'   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 78
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 161 (dictslotlist)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    valrange2	go to state 80
    expr	go to state 81
    exprn	go to state 36
    exprseq	go to state 82
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 84
    dictslotlist1	go to state 85
    dictslotlist	go to state 86
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 87



state 71

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  '`' expr .   (rule 81)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)


    $default	reduce using rule 81 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 72

    argdecls  ->  ARG . slotdeflist ';'   (rule 147)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 148)

    NAME	shift, and go to state 6

    $default	reduce using rule 151 (slotdeflist0)

    slotdeflist0	go to state 131
    slotdeflist	go to state 132
    slotdef	go to state 65
    name	go to state 66



state 73

    argdecls  ->  '|' . slotdeflist '|'   (rule 149)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 150)

    NAME	shift, and go to state 6

    $default	reduce using rule 151 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 65
    name	go to state 66



state 74

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 139)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 135



state 75

    arglist1  ->  exprseq .   (rule 96)

    $default	reduce using rule 96 (arglist1)



state 76

    expr1  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 136



state 77

    arglistc  ->  arglist1 . optcomma   (rule 95)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    ',' 	shift, and go to state 137

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 138



state 78

    valrange2  ->  DOTDOT . exprseq   (rule 74)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 139
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 79

    keybinop  ->  KEYBINOP .   (rule 211)

    $default	reduce using rule 211 (keybinop)



state 80

    expr1  ->  '(' valrange2 . ')'   (rule 60)

    ')' 	shift, and go to state 140



state 81

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    exprn  ->  expr .   (rule 91)
    dictslotdef  ->  expr . ':' expr   (rule 157)

    ':' 	shift, and go to state 141
    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 91 (exprn)

    binop	go to state 107
    keybinop	go to state 108



state 82

    expr1  ->  '(' exprseq . ')'   (rule 57)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 75)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 76)

    DOTDOT	shift, and go to state 142
    ',' 	shift, and go to state 143
    ')' 	shift, and go to state 144



state 83

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 144)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 145
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 113
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 84

    dictslotlist1  ->  dictslotdef .   (rule 159)

    $default	reduce using rule 159 (dictslotlist1)



state 85

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 160)
    dictslotlist  ->  dictslotlist1 .   (rule 162)

    ',' 	shift, and go to state 146

    $default	reduce using rule 162 (dictslotlist)



state 86

    expr1  ->  '(' dictslotlist . ')'   (rule 61)

    ')' 	shift, and go to state 147



state 87

    dictslotdef  ->  keybinop . expr   (rule 158)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 148
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 88

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106
    ';' 	shift, and go to state 149

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 150
    binop	go to state 107
    keybinop	go to state 108



state 89

    expr1  ->  '~' name .   (rule 58)
    expr  ->  '~' name . '=' expr   (rule 85)

    '=' 	shift, and go to state 151

    $default	reduce using rule 58 (expr1)



state 90

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 140)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 152



state 91

    listlit  ->  '#' '[' . literallistc ']'   (rule 167)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 153

    $default	reduce using rule 171 (literallistc)

    listliteral	go to state 154
    listlit2	go to state 155
    literallistc	go to state 156
    literallist1	go to state 157
    integer	go to state 158
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 159
    classname	go to state 160
    trueobj	go to state 161
    falseobj	go to state 162
    nilobj	go to state 163
    infobj	go to state 164
    ascii	go to state 165
    symbol	go to state 166
    string	go to state 167
    string1	go to state 58



state 92

    expr  ->  '#' mavars . '=' expr   (rule 88)

    '=' 	shift, and go to state 168



state 93

    mavars  ->  mavarlist .   (rule 103)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 104)
    mavarlist  ->  mavarlist . ',' name   (rule 106)

    ELLIPSIS	shift, and go to state 169
    ',' 	shift, and go to state 170

    $default	reduce using rule 103 (mavars)



state 94

    mavarlist  ->  name .   (rule 105)

    $default	reduce using rule 105 (mavarlist)



state 95

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 168)

    '[' 	shift, and go to state 171



state 96

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 66)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 69)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 172
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 173
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 97

    binop  ->  BINOP .   (rule 202)

    $default	reduce using rule 202 (binop)



state 98

    binop  ->  '-' .   (rule 207)

    $default	reduce using rule 207 (binop)



state 99

    binop  ->  '<' .   (rule 205)

    $default	reduce using rule 205 (binop)



state 100

    binop  ->  '>' .   (rule 206)

    $default	reduce using rule 206 (binop)



state 101

    binop  ->  '*' .   (rule 208)

    $default	reduce using rule 208 (binop)



state 102

    binop  ->  '+' .   (rule 209)

    $default	reduce using rule 209 (binop)



state 103

    binop  ->  '|' .   (rule 210)

    $default	reduce using rule 210 (binop)



state 104

    binop  ->  READWRITEVAR .   (rule 203)

    $default	reduce using rule 203 (binop)



state 105

    binop  ->  DOUBLEEQUAL .   (rule 204)

    $default	reduce using rule 204 (binop)



state 106

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . name blocklist   (rule 52)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 79)
    expr  ->  expr '.' . name '=' expr   (rule 86)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 90)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 174
    '(' 	shift, and go to state 175

    name	go to state 176



state 107

    expr  ->  expr binop . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 177
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 108

    expr  ->  expr keybinop . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 178
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 109

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 179
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 110

    exprseq  ->  exprn optsemi .   (rule 93)

    $default	reduce using rule 93 (exprseq)



state 111

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 112

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 113

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 144)

    $default	reduce using rule 144 (funcvardecls1)



state 114

    floatp  ->  integer pie .   (rule 186)

    $default	reduce using rule 186 (floatp)



state 115

    floatp  ->  floatr pie .   (rule 185)

    $default	reduce using rule 185 (floatp)



state 116

    expr  ->  name '=' . expr   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 180
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 117

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 181
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 118

    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 140)

    '{' 	shift, and go to state 90



state 119

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 182
    block	go to state 41



state 120

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 121

    expr1  ->  classname '[' . arglistc ']'   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 94 (arglistc)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglistc	go to state 183
    arglist1	go to state 77
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 122

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 63)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 184
    keyarglist1	go to state 185
    keyarg	go to state 186
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 187



state 123

    string  ->  string string1 .   (rule 199)

    $default	reduce using rule 199 (string)



state 124

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 188



state 125

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 12

    classname	go to state 189



state 126

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 190
    name	go to state 191



state 127

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 192



state 128

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 145)

    $default	reduce using rule 145 (funcvardecl)



state 129

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 154)

    NAME	shift, and go to state 6

    slotdef	go to state 193
    name	go to state 66



state 130

    slotdef  ->  name '=' . slotliteral   (rule 156)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 194

    slotliteral	go to state 195
    listlit	go to state 196
    integer	go to state 197
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 198
    trueobj	go to state 199
    falseobj	go to state 200
    nilobj	go to state 201
    infobj	go to state 202
    ascii	go to state 203
    symbol	go to state 204
    string	go to state 205
    string1	go to state 58



state 131

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 148)

    ELLIPSIS	shift, and go to state 206



state 132

    argdecls  ->  ARG slotdeflist . ';'   (rule 147)
    slotdeflist0  ->  slotdeflist .   (rule 152)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 154)

    ';' 	shift, and go to state 207
    ',' 	shift, and go to state 129

    $default	reduce using rule 152 (slotdeflist0)



state 133

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 150)

    ELLIPSIS	shift, and go to state 208



state 134

    argdecls  ->  '|' slotdeflist . '|'   (rule 149)
    slotdeflist0  ->  slotdeflist .   (rule 152)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 154)

    '|' 	shift, and go to state 209
    ',' 	shift, and go to state 129

    $default	reduce using rule 152 (slotdeflist0)



state 135

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 139)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 210
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 211
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 136

    expr1  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 137

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 212
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 138

    arglistc  ->  arglist1 optcomma .   (rule 95)

    $default	reduce using rule 95 (arglistc)



state 139

    valrange2  ->  DOTDOT exprseq .   (rule 74)

    $default	reduce using rule 74 (valrange2)



state 140

    expr1  ->  '(' valrange2 ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 141

    dictslotdef  ->  expr ':' . expr   (rule 157)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 213
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 142

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 214
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 143

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 215
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 144

    expr1  ->  '(' exprseq ')' .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 145

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 216



state 146

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 160)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 217
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    dictslotdef	go to state 218
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 87



state 147

    expr1  ->  '(' dictslotlist ')' .   (rule 61)

    $default	reduce using rule 61 (expr1)



state 148

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    dictslotdef  ->  keybinop expr .   (rule 158)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 158 (dictslotdef)

    binop	go to state 107
    keybinop	go to state 108



state 149

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 150

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 151

    expr  ->  '~' name '=' . expr   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 219
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 152

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 140)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 220



state 153

    listlit2  ->  '[' . literallistc ']'   (rule 169)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 153

    $default	reduce using rule 171 (literallistc)

    listliteral	go to state 154
    listlit2	go to state 155
    literallistc	go to state 221
    literallist1	go to state 157
    integer	go to state 158
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 159
    classname	go to state 160
    trueobj	go to state 161
    falseobj	go to state 162
    nilobj	go to state 163
    infobj	go to state 164
    ascii	go to state 165
    symbol	go to state 166
    string	go to state 167
    string1	go to state 58



state 154

    literallist1  ->  listliteral .   (rule 173)

    $default	reduce using rule 173 (literallist1)



state 155

    listliteral  ->  listlit2 .   (rule 138)

    $default	reduce using rule 138 (listliteral)



state 156

    listlit  ->  '#' '[' literallistc . ']'   (rule 167)

    ']' 	shift, and go to state 222



state 157

    literallistc  ->  literallist1 . optcomma   (rule 172)
    literallist1  ->  literallist1 . ',' listliteral   (rule 174)

    ',' 	shift, and go to state 223

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 224



state 158

    listliteral  ->  integer .   (rule 129)
    floatp  ->  integer . pie   (rule 186)

    PIE 	shift, and go to state 19

    $default	reduce using rule 129 (listliteral)

    pie 	go to state 114



state 159

    listliteral  ->  floatp .   (rule 130)

    $default	reduce using rule 130 (listliteral)



state 160

    listlit2  ->  classname . '[' literallistc ']'   (rule 170)

    '[' 	shift, and go to state 225



state 161

    listliteral  ->  trueobj .   (rule 134)

    $default	reduce using rule 134 (listliteral)



state 162

    listliteral  ->  falseobj .   (rule 135)

    $default	reduce using rule 135 (listliteral)



state 163

    listliteral  ->  nilobj .   (rule 136)

    $default	reduce using rule 136 (listliteral)



state 164

    listliteral  ->  infobj .   (rule 137)

    $default	reduce using rule 137 (listliteral)



state 165

    listliteral  ->  ascii .   (rule 131)

    $default	reduce using rule 131 (listliteral)



state 166

    listliteral  ->  symbol .   (rule 133)

    $default	reduce using rule 133 (listliteral)



state 167

    listliteral  ->  string .   (rule 132)
    string  ->  string . string1   (rule 199)

    STRING	shift, and go to state 10

    $default	reduce using rule 132 (listliteral)

    string1	go to state 123



state 168

    expr  ->  '#' mavars '=' . expr   (rule 88)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 226
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 169

    mavars  ->  mavarlist ELLIPSIS . name   (rule 104)

    NAME	shift, and go to state 6

    name	go to state 227



state 170

    mavarlist  ->  mavarlist ',' . name   (rule 106)

    NAME	shift, and go to state 6

    name	go to state 228



state 171

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 168)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 153

    $default	reduce using rule 171 (literallistc)

    listliteral	go to state 154
    listlit2	go to state 155
    literallistc	go to state 229
    literallist1	go to state 157
    integer	go to state 158
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 159
    classname	go to state 160
    trueobj	go to state 161
    falseobj	go to state 162
    nilobj	go to state 163
    infobj	go to state 164
    ascii	go to state 165
    symbol	go to state 166
    string	go to state 167
    string1	go to state 58



state 172

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 230
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 173

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 66)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 70)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 89)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    DOTDOT	shift, and go to state 231
    ']' 	shift, and go to state 232
    ',' 	shift, and go to state 233



state 174

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 79)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 90)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 234
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 235
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 175

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 236
    keyarglist1	go to state 237
    keyarg	go to state 186
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 187



state 176

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' name . blocklist   (rule 52)
    expr  ->  expr '.' name . '=' expr   (rule 86)

    '=' 	shift, and go to state 238
    '{' 	shift, and go to state 22
    '(' 	shift, and go to state 239
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 241
    blockliteral	go to state 120
    block	go to state 41



state 177

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr binop expr .   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    '.' 	shift, and go to state 106

    $default	reduce using rule 82 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 178

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr keybinop expr .   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    '.' 	shift, and go to state 106

    $default	reduce using rule 83 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 179

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    exprn  ->  exprn ';' expr .   (rule 92)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 92 (exprn)

    binop	go to state 107
    keybinop	go to state 108



state 180

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  name '=' expr .   (rule 84)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 84 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 181

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 87)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    ',' 	shift, and go to state 242

    $default	reduce using rule 101 (optkeyarglist)

    optkeyarglist	go to state 243



state 182

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 183

    expr1  ->  classname '[' arglistc . ']'   (rule 65)

    ']' 	shift, and go to state 244



state 184

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 64)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    ',' 	shift, and go to state 242

    $default	reduce using rule 101 (optkeyarglist)

    optkeyarglist	go to state 245



state 185

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 63)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 99)

    ',' 	shift, and go to state 246
    ')' 	shift, and go to state 247



state 186

    keyarglist1  ->  keyarg .   (rule 98)

    $default	reduce using rule 98 (keyarglist1)



state 187

    keyarg  ->  keybinop . exprseq   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 248
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 188

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 97
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 249
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '}' 	shift, and go to state 250

    methoddef	go to state 251
    name	go to state 252
    binop	go to state 253



state 189

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 190

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 254



state 191

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 192

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 255



state 193

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 154)

    $default	reduce using rule 154 (slotdeflist)



state 194

    listlit  ->  '#' . '[' literallistc ']'   (rule 167)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 168)

    CLASSNAME	shift, and go to state 12
    '[' 	shift, and go to state 91

    classname	go to state 95



state 195

    slotdef  ->  name '=' slotliteral .   (rule 156)

    $default	reduce using rule 156 (slotdef)



state 196

    slotliteral  ->  listlit .   (rule 116)

    $default	reduce using rule 116 (slotliteral)



state 197

    slotliteral  ->  integer .   (rule 107)
    floatp  ->  integer . pie   (rule 186)

    PIE 	shift, and go to state 19

    $default	reduce using rule 107 (slotliteral)

    pie 	go to state 114



state 198

    slotliteral  ->  floatp .   (rule 108)

    $default	reduce using rule 108 (slotliteral)



state 199

    slotliteral  ->  trueobj .   (rule 112)

    $default	reduce using rule 112 (slotliteral)



state 200

    slotliteral  ->  falseobj .   (rule 113)

    $default	reduce using rule 113 (slotliteral)



state 201

    slotliteral  ->  nilobj .   (rule 114)

    $default	reduce using rule 114 (slotliteral)



state 202

    slotliteral  ->  infobj .   (rule 115)

    $default	reduce using rule 115 (slotliteral)



state 203

    slotliteral  ->  ascii .   (rule 109)

    $default	reduce using rule 109 (slotliteral)



state 204

    slotliteral  ->  symbol .   (rule 111)

    $default	reduce using rule 111 (slotliteral)



state 205

    slotliteral  ->  string .   (rule 110)
    string  ->  string . string1   (rule 199)

    STRING	shift, and go to state 10

    $default	reduce using rule 110 (slotliteral)

    string1	go to state 123



state 206

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 148)

    NAME	shift, and go to state 6

    name	go to state 256



state 207

    argdecls  ->  ARG slotdeflist ';' .   (rule 147)

    $default	reduce using rule 147 (argdecls)



state 208

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 150)

    NAME	shift, and go to state 6

    name	go to state 257



state 209

    argdecls  ->  '|' slotdeflist '|' .   (rule 149)

    $default	reduce using rule 149 (argdecls)



state 210

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 139)

    '}' 	shift, and go to state 258



state 211

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 142)

    $default	reduce using rule 142 (funcvardecls)



state 212

    arglist1  ->  arglist1 ',' exprseq .   (rule 97)

    $default	reduce using rule 97 (arglist1)



state 213

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    dictslotdef  ->  expr ':' expr .   (rule 157)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 157 (dictslotdef)

    binop	go to state 107
    keybinop	go to state 108



state 214

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 75)

    $default	reduce using rule 75 (valrange2)



state 215

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 76)

    DOTDOT	shift, and go to state 259



state 216

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 217

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    dictslotdef  ->  expr . ':' expr   (rule 157)

    ':' 	shift, and go to state 141
    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    binop	go to state 107
    keybinop	go to state 108



state 218

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 160)

    $default	reduce using rule 160 (dictslotlist1)



state 219

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  '~' name '=' expr .   (rule 85)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 85 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 220

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 140)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 260
    funretval	go to state 30
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 37
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    funcvardecl	go to state 211
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 221

    listlit2  ->  '[' literallistc . ']'   (rule 169)

    ']' 	shift, and go to state 261



state 222

    listlit  ->  '#' '[' literallistc ']' .   (rule 167)

    $default	reduce using rule 167 (listlit)



state 223

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 174)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 153

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 262
    listlit2	go to state 155
    integer	go to state 158
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 159
    classname	go to state 160
    trueobj	go to state 161
    falseobj	go to state 162
    nilobj	go to state 163
    infobj	go to state 164
    ascii	go to state 165
    symbol	go to state 166
    string	go to state 167
    string1	go to state 58



state 224

    literallistc  ->  literallist1 optcomma .   (rule 172)

    $default	reduce using rule 172 (literallistc)



state 225

    listlit2  ->  classname '[' . literallistc ']'   (rule 170)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 153

    $default	reduce using rule 171 (literallistc)

    listliteral	go to state 154
    listlit2	go to state 155
    literallistc	go to state 263
    literallist1	go to state 157
    integer	go to state 158
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 159
    classname	go to state 160
    trueobj	go to state 161
    falseobj	go to state 162
    nilobj	go to state 163
    infobj	go to state 164
    ascii	go to state 165
    symbol	go to state 166
    string	go to state 167
    string1	go to state 58



state 226

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  '#' mavars '=' expr .   (rule 88)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 88 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 227

    mavars  ->  mavarlist ELLIPSIS name .   (rule 104)

    $default	reduce using rule 104 (mavars)



state 228

    mavarlist  ->  mavarlist ',' name .   (rule 106)

    $default	reduce using rule 106 (mavarlist)



state 229

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 168)

    ']' 	shift, and go to state 264



state 230

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 69)

    ']' 	shift, and go to state 265



state 231

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 68)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 70)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 266
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 267
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 232

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 66)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 89)

    '=' 	shift, and go to state 268

    $default	reduce using rule 66 (expr1)



state 233

    arglist1  ->  arglist1 ',' . exprseq   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 212
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 234

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 269
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 235

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 71)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 79)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 90)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    DOTDOT	shift, and go to state 270
    ']' 	shift, and go to state 271
    ',' 	shift, and go to state 233



state 236

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 50)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    ',' 	shift, and go to state 242

    $default	reduce using rule 101 (optkeyarglist)

    optkeyarglist	go to state 272



state 237

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 48)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 99)

    ',' 	shift, and go to state 246
    ')' 	shift, and go to state 273



state 238

    expr  ->  expr '.' name '=' . expr   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 274
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 239

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 75
    arglist1	go to state 275
    keyarglist1	go to state 276
    keyarg	go to state 186
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 187



state 240

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 182
    block	go to state 41



state 241

    msgsend  ->  expr '.' name blocklist .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 242

    arglist1  ->  arglist1 ',' . exprseq   (rule 97)
    optkeyarglist  ->  ',' . keyarglist1   (rule 102)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 212
    keyarglist1	go to state 277
    keyarg	go to state 186
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59
    keybinop	go to state 187



state 243

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 87)

    ')' 	shift, and go to state 278



state 244

    expr1  ->  classname '[' arglistc ']' .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 245

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 64)

    ')' 	shift, and go to state 279



state 246

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 99)

    KEYBINOP	shift, and go to state 79

    keyarg	go to state 280
    keybinop	go to state 187



state 247

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 248

    keyarg  ->  keybinop exprseq .   (rule 100)

    $default	reduce using rule 100 (keyarg)



state 249

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 208)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 97
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105

    $default	reduce using rule 208 (binop)

    name	go to state 281
    binop	go to state 282



state 250

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 251

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 252

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 283



state 253

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 284



state 254

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 125

    $default	reduce using rule 13 (superclass)

    superclass	go to state 285



state 255

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 286
    CLASSVAR	shift, and go to state 287

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 288
    methods	go to state 289



state 256

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 148)

    ';' 	shift, and go to state 290



state 257

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 150)

    '|' 	shift, and go to state 291



state 258

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 139)

    $default	reduce using rule 139 (block)



state 259

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 292
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 260

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 140)

    '}' 	shift, and go to state 293



state 261

    listlit2  ->  '[' literallistc ']' .   (rule 169)

    $default	reduce using rule 169 (listlit2)



state 262

    literallist1  ->  literallist1 ',' listliteral .   (rule 174)

    $default	reduce using rule 174 (literallist1)



state 263

    listlit2  ->  classname '[' literallistc . ']'   (rule 170)

    ']' 	shift, and go to state 294



state 264

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 168)

    $default	reduce using rule 168 (listlit)



state 265

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 69)

    $default	reduce using rule 69 (valrangex1)



state 266

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 68)

    $default	reduce using rule 68 (valrangex1)



state 267

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 70)

    ']' 	shift, and go to state 295



state 268

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 89)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 296
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 269

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 72)

    ']' 	shift, and go to state 297



state 270

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 71)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 73)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    ']' 	shift, and go to state 298
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 299
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 271

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 79)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 90)

    '=' 	shift, and go to state 300

    $default	reduce using rule 79 (expr)



state 272

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 50)

    ')' 	shift, and go to state 301



state 273

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 48)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 302
    blockliteral	go to state 120
    block	go to state 41



state 274

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr '.' name '=' expr .   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 86 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 275

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 97)

    ',' 	shift, and go to state 242

    $default	reduce using rule 101 (optkeyarglist)

    optkeyarglist	go to state 303



state 276

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 99)

    ',' 	shift, and go to state 246
    ')' 	shift, and go to state 304



state 277

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 99)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 102)

    ',' 	shift, and go to state 246

    $default	reduce using rule 102 (optkeyarglist)



state 278

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 87)

    '=' 	shift, and go to state 305
    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 306
    blockliteral	go to state 120
    block	go to state 41



state 279

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 280

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 99)

    $default	reduce using rule 99 (keyarglist1)



state 281

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 307



state 282

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 308



state 283

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 309



state 284

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 310



state 285

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 311



state 286

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 312
    '>' 	shift, and go to state 313
    READWRITEVAR	shift, and go to state 314

    $default	reduce using rule 175 (rwspec)

    rwslotdeflist	go to state 315
    rwslotdef	go to state 316
    rwspec	go to state 317



state 287

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 312
    '>' 	shift, and go to state 313
    READWRITEVAR	shift, and go to state 314

    $default	reduce using rule 175 (rwspec)

    rwslotdeflist	go to state 318
    rwslotdef	go to state 316
    rwspec	go to state 317



state 288

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 289

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 97
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 249
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '}' 	shift, and go to state 319

    methoddef	go to state 251
    name	go to state 252
    binop	go to state 253



state 290

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 148)

    $default	reduce using rule 148 (argdecls)



state 291

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 150)

    $default	reduce using rule 150 (argdecls)



state 292

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 76)

    $default	reduce using rule 76 (valrange2)



state 293

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 140)

    $default	reduce using rule 140 (block)



state 294

    listlit2  ->  classname '[' literallistc ']' .   (rule 170)

    $default	reduce using rule 170 (listlit2)



state 295

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 70)

    $default	reduce using rule 70 (valrangex1)



state 296

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 89)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 89 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 297

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 72)

    $default	reduce using rule 72 (valrangexd)



state 298

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 71)

    $default	reduce using rule 71 (valrangexd)



state 299

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 73)

    ']' 	shift, and go to state 320



state 300

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 90)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 321
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 301

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 50)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 322
    blockliteral	go to state 120
    block	go to state 41



state 302

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 303

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 323



state 304

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 49)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 324
    blockliteral	go to state 120
    block	go to state 41



state 305

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 87)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 325
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 306

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 307

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 326



state 308

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 72
    '|' 	shift, and go to state 73

    $default	reduce using rule 146 (argdecls)

    argdecls	go to state 327



state 309

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 328



state 310

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 329



state 311

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 330



state 312

    rwspec  ->  '<' .   (rule 176)

    $default	reduce using rule 176 (rwspec)



state 313

    rwspec  ->  '>' .   (rule 178)

    $default	reduce using rule 178 (rwspec)



state 314

    rwspec  ->  READWRITEVAR .   (rule 177)

    $default	reduce using rule 177 (rwspec)



state 315

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 164)

    ';' 	shift, and go to state 331
    ',' 	shift, and go to state 332



state 316

    rwslotdeflist  ->  rwslotdef .   (rule 163)

    $default	reduce using rule 163 (rwslotdeflist)



state 317

    rwslotdef  ->  rwspec . name   (rule 165)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 166)

    NAME	shift, and go to state 6

    name	go to state 333



state 318

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 164)

    ';' 	shift, and go to state 334
    ',' 	shift, and go to state 332



state 319

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 320

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 73)

    $default	reduce using rule 73 (valrangexd)



state 321

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 90 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 322

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 323

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    '{' 	shift, and go to state 22
    '#' 	shift, and go to state 118

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 240
    blocklist	go to state 335
    blockliteral	go to state 120
    block	go to state 41



state 324

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 325

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 87)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106

    $default	reduce using rule 87 (expr)

    binop	go to state 107
    keybinop	go to state 108



state 326

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 336



state 327

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 141 (funcvardecls)

    funcvardecls	go to state 337



state 328

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    PRIMITIVENAME	shift, and go to state 338
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 339
    funcvardecl	go to state 211
    primname	go to state 340



state 329

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    PRIMITIVENAME	shift, and go to state 338
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 341
    funcvardecl	go to state 211
    primname	go to state 340



state 330

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 286
    CLASSVAR	shift, and go to state 287

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 288
    methods	go to state 342



state 331

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 332

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 164)

    '<' 	shift, and go to state 312
    '>' 	shift, and go to state 313
    READWRITEVAR	shift, and go to state 314

    $default	reduce using rule 175 (rwspec)

    rwslotdef	go to state 343
    rwspec	go to state 317



state 333

    rwslotdef  ->  rwspec name .   (rule 165)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 166)

    '=' 	shift, and go to state 344

    $default	reduce using rule 165 (rwslotdef)



state 334

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 335

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 336

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    PRIMITIVENAME	shift, and go to state 338
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 345
    funcvardecl	go to state 211
    primname	go to state 340



state 337

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 142)

    PRIMITIVENAME	shift, and go to state 338
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 346
    funcvardecl	go to state 211
    primname	go to state 340



state 338

    primname  ->  PRIMITIVENAME .   (rule 191)

    $default	reduce using rule 191 (primname)



state 339

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 347
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 348
    retval	go to state 349
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 350
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 340

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 149

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 351



state 341

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 347
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 352
    retval	go to state 349
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 350
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 342

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 97
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 249
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '}' 	shift, and go to state 353

    methoddef	go to state 251
    name	go to state 252
    binop	go to state 253



state 343

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 164)

    $default	reduce using rule 164 (rwslotdeflist)



state 344

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 166)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 194

    slotliteral	go to state 354
    listlit	go to state 196
    integer	go to state 197
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 198
    trueobj	go to state 199
    falseobj	go to state 200
    nilobj	go to state 201
    infobj	go to state 202
    ascii	go to state 203
    symbol	go to state 204
    string	go to state 205
    string1	go to state 58



state 345

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 347
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 355
    retval	go to state 349
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 350
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 346

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '^' 	shift, and go to state 347
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 356
    retval	go to state 349
    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 35
    exprn	go to state 36
    exprseq	go to state 350
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 347

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 70
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    msgsend	go to state 31
    expr1	go to state 32
    valrangex1	go to state 33
    valrangexd	go to state 34
    expr	go to state 357
    blockliteral	go to state 38
    pushname	go to state 39
    pushliteral	go to state 40
    block	go to state 41
    listlit	go to state 44
    integer	go to state 45
    floatr	go to state 46
    pie 	go to state 47
    floatp	go to state 48
    name	go to state 49
    classname	go to state 50
    trueobj	go to state 51
    falseobj	go to state 52
    nilobj	go to state 53
    infobj	go to state 54
    ascii	go to state 55
    symbol	go to state 56
    string	go to state 57
    string1	go to state 58
    pseudovar	go to state 59



state 348

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 358



state 349

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 350

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 347

    $default	reduce using rule 38 (retval)

    retval	go to state 359



state 351

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 352

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 360



state 353

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 354

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 166)

    $default	reduce using rule 166 (rwslotdef)



state 355

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 361



state 356

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 362



state 357

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 48)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' name blocklist   (rule 52)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 71)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 72)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 73)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 79)
    expr  ->  expr . binop expr   (rule 82)
    expr  ->  expr . keybinop expr   (rule 83)
    expr  ->  expr . '.' name '=' expr   (rule 86)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 90)

    BINOP	shift, and go to state 97
    KEYBINOP	shift, and go to state 79
    '-' 	shift, and go to state 98
    '<' 	shift, and go to state 99
    '>' 	shift, and go to state 100
    '*' 	shift, and go to state 101
    '+' 	shift, and go to state 102
    '|' 	shift, and go to state 103
    READWRITEVAR	shift, and go to state 104
    DOUBLEEQUAL	shift, and go to state 105
    '.' 	shift, and go to state 106
    ';' 	shift, and go to state 149

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 363
    binop	go to state 107
    keybinop	go to state 108



state 358

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 359

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 360

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 361

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 362

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 363

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 364

    $   	go to state 365



state 365

    $   	go to state 366



state 366

    $default	accept
