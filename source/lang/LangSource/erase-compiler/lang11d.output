

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 76 between rule 92 and token BINOP resolved as reduce.
Conflict in state 76 between rule 92 and token KEYBINOP resolved as reduce.
Conflict in state 76 between rule 92 and token '-' resolved as reduce.
Conflict in state 76 between rule 92 and token '<' resolved as reduce.
Conflict in state 76 between rule 92 and token '>' resolved as reduce.
Conflict in state 76 between rule 92 and token '*' resolved as reduce.
Conflict in state 76 between rule 92 and token '+' resolved as reduce.
Conflict in state 76 between rule 92 and token '|' resolved as reduce.
Conflict in state 76 between rule 92 and token READWRITEVAR resolved as reduce.
Conflict in state 76 between rule 92 and token '.' resolved as reduce.
Conflict in state 182 between rule 94 and token BINOP resolved as shift.
Conflict in state 182 between rule 94 and token KEYBINOP resolved as shift.
Conflict in state 182 between rule 94 and token '-' resolved as shift.
Conflict in state 182 between rule 94 and token '<' resolved as shift.
Conflict in state 182 between rule 94 and token '>' resolved as shift.
Conflict in state 182 between rule 94 and token '*' resolved as shift.
Conflict in state 182 between rule 94 and token '+' resolved as shift.
Conflict in state 182 between rule 94 and token '|' resolved as shift.
Conflict in state 182 between rule 94 and token READWRITEVAR resolved as shift.
Conflict in state 182 between rule 94 and token '.' resolved as shift.
Conflict in state 226 between rule 95 and token BINOP resolved as shift.
Conflict in state 226 between rule 95 and token KEYBINOP resolved as shift.
Conflict in state 226 between rule 95 and token '-' resolved as shift.
Conflict in state 226 between rule 95 and token '<' resolved as shift.
Conflict in state 226 between rule 95 and token '>' resolved as shift.
Conflict in state 226 between rule 95 and token '*' resolved as shift.
Conflict in state 226 between rule 95 and token '+' resolved as shift.
Conflict in state 226 between rule 95 and token '|' resolved as shift.
Conflict in state 226 between rule 95 and token READWRITEVAR resolved as shift.
Conflict in state 226 between rule 95 and token '.' resolved as shift.
Conflict in state 232 between rule 98 and token BINOP resolved as shift.
Conflict in state 232 between rule 98 and token KEYBINOP resolved as shift.
Conflict in state 232 between rule 98 and token '-' resolved as shift.
Conflict in state 232 between rule 98 and token '<' resolved as shift.
Conflict in state 232 between rule 98 and token '>' resolved as shift.
Conflict in state 232 between rule 98 and token '*' resolved as shift.
Conflict in state 232 between rule 98 and token '+' resolved as shift.
Conflict in state 232 between rule 98 and token '|' resolved as shift.
Conflict in state 232 between rule 98 and token READWRITEVAR resolved as shift.
Conflict in state 232 between rule 98 and token '.' resolved as shift.
Conflict in state 253 between rule 93 and token BINOP resolved as reduce.
Conflict in state 253 between rule 93 and token KEYBINOP resolved as reduce.
Conflict in state 253 between rule 93 and token '-' resolved as reduce.
Conflict in state 253 between rule 93 and token '<' resolved as reduce.
Conflict in state 253 between rule 93 and token '>' resolved as reduce.
Conflict in state 253 between rule 93 and token '*' resolved as reduce.
Conflict in state 253 between rule 93 and token '+' resolved as reduce.
Conflict in state 253 between rule 93 and token '|' resolved as reduce.
Conflict in state 253 between rule 93 and token READWRITEVAR resolved as reduce.
Conflict in state 253 between rule 93 and token '.' resolved as shift.
Conflict in state 294 between rule 96 and token BINOP resolved as shift.
Conflict in state 294 between rule 96 and token KEYBINOP resolved as shift.
Conflict in state 294 between rule 96 and token '-' resolved as shift.
Conflict in state 294 between rule 96 and token '<' resolved as shift.
Conflict in state 294 between rule 96 and token '>' resolved as shift.
Conflict in state 294 between rule 96 and token '*' resolved as shift.
Conflict in state 294 between rule 96 and token '+' resolved as shift.
Conflict in state 294 between rule 96 and token '|' resolved as shift.
Conflict in state 294 between rule 96 and token READWRITEVAR resolved as shift.
Conflict in state 294 between rule 96 and token '.' resolved as shift.
Conflict in state 323 between rule 99 and token BINOP resolved as shift.
Conflict in state 323 between rule 99 and token KEYBINOP resolved as shift.
Conflict in state 323 between rule 99 and token '-' resolved as shift.
Conflict in state 323 between rule 99 and token '<' resolved as shift.
Conflict in state 323 between rule 99 and token '>' resolved as shift.
Conflict in state 323 between rule 99 and token '*' resolved as shift.
Conflict in state 323 between rule 99 and token '+' resolved as shift.
Conflict in state 323 between rule 99 and token '|' resolved as shift.
Conflict in state 323 between rule 99 and token READWRITEVAR resolved as shift.
Conflict in state 323 between rule 99 and token '.' resolved as shift.
Conflict in state 351 between rule 76 and token BINOP resolved as shift.
Conflict in state 351 between rule 76 and token KEYBINOP resolved as shift.
Conflict in state 351 between rule 76 and token '-' resolved as shift.
Conflict in state 351 between rule 76 and token '<' resolved as shift.
Conflict in state 351 between rule 76 and token '>' resolved as shift.
Conflict in state 351 between rule 76 and token '*' resolved as shift.
Conflict in state 351 between rule 76 and token '+' resolved as shift.
Conflict in state 351 between rule 76 and token '|' resolved as shift.
Conflict in state 351 between rule 76 and token READWRITEVAR resolved as shift.
Conflict in state 351 between rule 76 and token '.' resolved as shift.
Conflict in state 352 between rule 75 and token BINOP resolved as shift.
Conflict in state 352 between rule 75 and token KEYBINOP resolved as shift.
Conflict in state 352 between rule 75 and token '-' resolved as shift.
Conflict in state 352 between rule 75 and token '<' resolved as shift.
Conflict in state 352 between rule 75 and token '>' resolved as shift.
Conflict in state 352 between rule 75 and token '*' resolved as shift.
Conflict in state 352 between rule 75 and token '+' resolved as shift.
Conflict in state 352 between rule 75 and token '|' resolved as shift.
Conflict in state 352 between rule 75 and token READWRITEVAR resolved as shift.
Conflict in state 352 between rule 75 and token '.' resolved as shift.
Conflict in state 357 between rule 100 and token BINOP resolved as shift.
Conflict in state 357 between rule 100 and token KEYBINOP resolved as shift.
Conflict in state 357 between rule 100 and token '-' resolved as shift.
Conflict in state 357 between rule 100 and token '<' resolved as shift.
Conflict in state 357 between rule 100 and token '>' resolved as shift.
Conflict in state 357 between rule 100 and token '*' resolved as shift.
Conflict in state 357 between rule 100 and token '+' resolved as shift.
Conflict in state 357 between rule 100 and token '|' resolved as shift.
Conflict in state 357 between rule 100 and token READWRITEVAR resolved as shift.
Conflict in state 357 between rule 100 and token '.' resolved as shift.
Conflict in state 362 between rule 97 and token BINOP resolved as shift.
Conflict in state 362 between rule 97 and token KEYBINOP resolved as shift.
Conflict in state 362 between rule 97 and token '-' resolved as shift.
Conflict in state 362 between rule 97 and token '<' resolved as shift.
Conflict in state 362 between rule 97 and token '>' resolved as shift.
Conflict in state 362 between rule 97 and token '*' resolved as shift.
Conflict in state 362 between rule 97 and token '+' resolved as shift.
Conflict in state 362 between rule 97 and token '|' resolved as shift.
Conflict in state 362 between rule 97 and token READWRITEVAR resolved as shift.
Conflict in state 362 between rule 97 and token '.' resolved as shift.
Conflict in state 372 between rule 77 and token BINOP resolved as shift.
Conflict in state 372 between rule 77 and token KEYBINOP resolved as shift.
Conflict in state 372 between rule 77 and token '-' resolved as shift.
Conflict in state 372 between rule 77 and token '<' resolved as shift.
Conflict in state 372 between rule 77 and token '>' resolved as shift.
Conflict in state 372 between rule 77 and token '*' resolved as shift.
Conflict in state 372 between rule 77 and token '+' resolved as shift.
Conflict in state 372 between rule 77 and token '|' resolved as shift.
Conflict in state 372 between rule 77 and token READWRITEVAR resolved as shift.
Conflict in state 372 between rule 77 and token '.' resolved as shift.
Conflict in state 373 between rule 82 and token BINOP resolved as shift.
Conflict in state 373 between rule 82 and token KEYBINOP resolved as shift.
Conflict in state 373 between rule 82 and token '-' resolved as shift.
Conflict in state 373 between rule 82 and token '<' resolved as shift.
Conflict in state 373 between rule 82 and token '>' resolved as shift.
Conflict in state 373 between rule 82 and token '*' resolved as shift.
Conflict in state 373 between rule 82 and token '+' resolved as shift.
Conflict in state 373 between rule 82 and token '|' resolved as shift.
Conflict in state 373 between rule 82 and token READWRITEVAR resolved as shift.
Conflict in state 373 between rule 82 and token '.' resolved as shift.
Conflict in state 374 between rule 81 and token BINOP resolved as shift.
Conflict in state 374 between rule 81 and token KEYBINOP resolved as shift.
Conflict in state 374 between rule 81 and token '-' resolved as shift.
Conflict in state 374 between rule 81 and token '<' resolved as shift.
Conflict in state 374 between rule 81 and token '>' resolved as shift.
Conflict in state 374 between rule 81 and token '*' resolved as shift.
Conflict in state 374 between rule 81 and token '+' resolved as shift.
Conflict in state 374 between rule 81 and token '|' resolved as shift.
Conflict in state 374 between rule 81 and token READWRITEVAR resolved as shift.
Conflict in state 374 between rule 81 and token '.' resolved as shift.
Conflict in state 386 between rule 83 and token BINOP resolved as shift.
Conflict in state 386 between rule 83 and token KEYBINOP resolved as shift.
Conflict in state 386 between rule 83 and token '-' resolved as shift.
Conflict in state 386 between rule 83 and token '<' resolved as shift.
Conflict in state 386 between rule 83 and token '>' resolved as shift.
Conflict in state 386 between rule 83 and token '*' resolved as shift.
Conflict in state 386 between rule 83 and token '+' resolved as shift.
Conflict in state 386 between rule 83 and token '|' resolved as shift.
Conflict in state 386 between rule 83 and token READWRITEVAR resolved as shift.
Conflict in state 386 between rule 83 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   blocklist1 -> blockliteral
rule 43   blocklist1 -> blocklist1 blockliteral
rule 44   blocklist ->		/* empty */
rule 45   blocklist -> blocklist1
rule 46   msgsend -> name blocklist1
rule 47   msgsend -> name '(' arglist1 optkeyarglist ')' blocklist
rule 48   msgsend -> name '(' arglistv1 optkeyarglist ')'
rule 49   msgsend -> expr '.' '(' keyarglist1 ')' blocklist
rule 50   msgsend -> expr '.' name '(' keyarglist1 ')' blocklist
rule 51   msgsend -> expr '.' '(' arglist1 optkeyarglist ')' blocklist
rule 52   msgsend -> expr '.' '(' arglistv1 optkeyarglist ')'
rule 53   msgsend -> expr '.' name '(' arglist1 optkeyarglist ')' blocklist
rule 54   msgsend -> expr '.' name '(' arglistv1 optkeyarglist ')'
rule 55   msgsend -> expr '.' name blocklist
rule 56   expr1 -> pushliteral
rule 57   expr1 -> blockliteral
rule 58   expr1 -> pushname
rule 59   expr1 -> msgsend
rule 60   expr1 -> '(' exprseq ')'
rule 61   expr1 -> '~' name
rule 62   expr1 -> '[' arrayelems ']'
rule 63   expr1 -> '(' valrange2 ')'
rule 64   expr1 -> '(' dictslotlist ')'
rule 65   expr1 -> pseudovar
rule 66   expr1 -> classname '(' keyarglist1 ')'
rule 67   expr1 -> classname '(' arglist1 optkeyarglist ')'
rule 68   expr1 -> classname '(' arglistv1 optkeyarglist ')'
rule 69   expr1 -> classname '[' arrayelems ']'
rule 70   expr1 -> expr1 '[' arglist1 ']'
rule 71   expr1 -> valrangex1
rule 72   valrangex1 -> expr1 '[' arglist1 DOTDOT ']'
rule 73   valrangex1 -> expr1 '[' DOTDOT exprseq ']'
rule 74   valrangex1 -> expr1 '[' arglist1 DOTDOT exprseq ']'
rule 75   valrangeassign -> expr1 '[' arglist1 DOTDOT ']' '=' expr
rule 76   valrangeassign -> expr1 '[' DOTDOT exprseq ']' '=' expr
rule 77   valrangeassign -> expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 78   valrangexd -> expr '.' '[' arglist1 DOTDOT ']'
rule 79   valrangexd -> expr '.' '[' DOTDOT exprseq ']'
rule 80   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']'
rule 81   valrangexd -> expr '.' '[' arglist1 DOTDOT ']' '=' expr
rule 82   valrangexd -> expr '.' '[' DOTDOT exprseq ']' '=' expr
rule 83   valrangexd -> expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
rule 84   valrange2 -> DOTDOT exprseq
rule 85   valrange2 -> exprseq DOTDOT exprseq
rule 86   valrange2 -> exprseq ',' exprseq DOTDOT exprseq
rule 87   expr -> expr1
rule 88   expr -> valrangexd
rule 89   expr -> valrangeassign
rule 90   expr -> expr '.' '[' arglist1 ']'
rule 91   expr -> classname
rule 92   expr -> '`' expr
rule 93   expr -> expr binop2 adverb expr
rule 94   expr -> name '=' expr
rule 95   expr -> '~' name '=' expr
rule 96   expr -> expr '.' name '=' expr
rule 97   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 98   expr -> '#' mavars '=' expr
rule 99   expr -> expr1 '[' arglist1 ']' '=' expr
rule 100  expr -> expr '.' '[' arglist1 ']' '=' expr
rule 101  adverb ->		/* empty */
rule 102  adverb -> '.' name
rule 103  adverb -> '.' integer
rule 104  adverb -> '.' '(' exprseq ')'
rule 105  exprn -> expr
rule 106  exprn -> exprn ';' expr
rule 107  exprseq -> exprn optsemi
rule 108  arrayelems ->		/* empty */
rule 109  arrayelems -> arrayelems1 optcomma
rule 110  arrayelems1 -> exprseq
rule 111  arrayelems1 -> exprseq ':' exprseq
rule 112  arrayelems1 -> keybinop exprseq
rule 113  arrayelems1 -> arrayelems1 ',' exprseq
rule 114  arrayelems1 -> arrayelems1 ',' keybinop exprseq
rule 115  arrayelems1 -> arrayelems1 ',' exprseq ':' exprseq
rule 116  arglist1 -> exprseq
rule 117  arglist1 -> arglist1 ',' exprseq
rule 118  arglistv1 -> '*' exprseq
rule 119  arglistv1 -> arglist1 ',' '*' exprseq
rule 120  keyarglist1 -> keyarg
rule 121  keyarglist1 -> keyarglist1 ',' keyarg
rule 122  keyarg -> keybinop exprseq
rule 123  optkeyarglist ->		/* empty */
rule 124  optkeyarglist -> ',' keyarglist1
rule 125  mavars -> mavarlist
rule 126  mavars -> mavarlist ELLIPSIS name
rule 127  mavarlist -> name
rule 128  mavarlist -> mavarlist ',' name
rule 129  slotliteral -> integer
rule 130  slotliteral -> floatp
rule 131  slotliteral -> ascii
rule 132  slotliteral -> string
rule 133  slotliteral -> symbol
rule 134  slotliteral -> trueobj
rule 135  slotliteral -> falseobj
rule 136  slotliteral -> nilobj
rule 137  slotliteral -> listlit
rule 138  blockliteral -> block
rule 139  pushname -> name
rule 140  pushliteral -> integer
rule 141  pushliteral -> floatp
rule 142  pushliteral -> ascii
rule 143  pushliteral -> string
rule 144  pushliteral -> symbol
rule 145  pushliteral -> trueobj
rule 146  pushliteral -> falseobj
rule 147  pushliteral -> nilobj
rule 148  pushliteral -> listlit
rule 149  listliteral -> integer
rule 150  listliteral -> floatp
rule 151  listliteral -> ascii
rule 152  listliteral -> string
rule 153  listliteral -> symbol
rule 154  listliteral -> trueobj
rule 155  listliteral -> falseobj
rule 156  listliteral -> nilobj
rule 157  listliteral -> listlit2
rule 158  block -> '{' argdecls funcvardecls funcbody '}'
rule 159  block -> BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
rule 160  funcvardecls ->		/* empty */
rule 161  funcvardecls -> funcvardecls funcvardecl
rule 162  funcvardecls1 -> funcvardecl
rule 163  funcvardecls1 -> funcvardecls1 funcvardecl
rule 164  funcvardecl -> VAR slotdeflist ';'
rule 165  argdecls ->		/* empty */
rule 166  argdecls -> ARG slotdeflist ';'
rule 167  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 168  argdecls -> '|' slotdeflist '|'
rule 169  argdecls -> '|' slotdeflist0 ELLIPSIS name '|'
rule 170  slotdeflist0 ->		/* empty */
rule 171  slotdeflist0 -> slotdeflist
rule 172  slotdeflist -> slotdef
rule 173  slotdeflist -> slotdeflist ',' slotdef
rule 174  slotdef -> name
rule 175  slotdef -> name '=' slotliteral
rule 176  dictslotdef -> exprseq ':' exprseq
rule 177  dictslotdef -> keybinop exprseq
rule 178  dictslotlist1 -> dictslotdef
rule 179  dictslotlist1 -> dictslotlist1 ',' dictslotdef
rule 180  dictslotlist ->		/* empty */
rule 181  dictslotlist -> dictslotlist1
rule 182  rwslotdeflist -> rwslotdef
rule 183  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 184  rwslotdef -> rwspec name
rule 185  rwslotdef -> rwspec name '=' slotliteral
rule 186  listlit -> '#' '[' literallistc ']'
rule 187  listlit -> '#' classname '[' literallistc ']'
rule 188  listlit2 -> '[' literallistc ']'
rule 189  listlit2 -> classname '[' literallistc ']'
rule 190  literallistc ->		/* empty */
rule 191  literallistc -> literallist1 optcomma
rule 192  literallist1 -> listliteral
rule 193  literallist1 -> literallist1 ',' listliteral
rule 194  rwspec ->		/* empty */
rule 195  rwspec -> '<'
rule 196  rwspec -> READWRITEVAR
rule 197  rwspec -> '>'
rule 198  integer -> INTEGER
rule 199  integer -> '-' INTEGER
rule 200  floatr -> FLOAT
rule 201  floatr -> '-' FLOAT
rule 202  accidental -> ACCIDENTAL
rule 203  accidental -> '-' ACCIDENTAL
rule 204  pie -> PIE
rule 205  floatp -> floatr
rule 206  floatp -> accidental
rule 207  floatp -> floatr pie
rule 208  floatp -> integer pie
rule 209  floatp -> pie
rule 210  floatp -> '-' pie
rule 211  name -> NAME
rule 212  classname -> CLASSNAME
rule 213  primname -> PRIMITIVENAME
rule 214  trueobj -> TRUEOBJ
rule 215  falseobj -> FALSEOBJ
rule 216  nilobj -> NILOBJ
rule 217  ascii -> ASCII
rule 218  symbol -> SYMBOL
rule 219  string -> STRING
rule 220  pseudovar -> PSEUDOVAR
rule 221  binop -> BINOP
rule 222  binop -> READWRITEVAR
rule 223  binop -> '<'
rule 224  binop -> '>'
rule 225  binop -> '-'
rule 226  binop -> '*'
rule 227  binop -> '+'
rule 228  binop -> '|'
rule 229  keybinop -> KEYBINOP
rule 230  binop2 -> binop
rule 231  binop2 -> keybinop

Terminals, with rules where they appear

$ (-1)
'#' (35) 98 186 187
'(' (40) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 97 104
')' (41) 31 47 48 49 50 51 52 53 54 60 63 64 66 67 68 97 104
'*' (42) 22 24 118 119 226
'+' (43) 10 227
',' (44) 28 86 113 114 115 117 119 121 124 128 173 179 183 193
'-' (45) 199 201 203 210 225
'.' (46) 49 50 51 52 53 54 55 78 79 80 81 82 83 90 96 100 102 103 104
':' (58) 14 111 115 176
';' (59) 17 18 26 106 164 166 167
'<' (60) 195 223
'=' (61) 75 76 77 81 82 83 94 95 96 97 98 99 100 175 185
'>' (62) 197 224
'[' (91) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 99 100 186
    187 188 189
']' (93) 9 62 69 70 72 73 74 75 76 77 78 79 80 81 82 83 90 99 100 186
    187 188 189
'^' (94) 39 41
'`' (96) 92
'{' (123) 8 9 10 21 22 23 24 158
'|' (124) 168 169 228
'}' (125) 8 9 10 21 22 23 24 158 159
'~' (126) 61 95
error (256)
NAME (257) 211
INTEGER (258) 198 199
FLOAT (259) 200 201
ACCIDENTAL (260) 202 203
SYMBOL (261) 218
STRING (262) 219
ASCII (263) 217
PRIMITIVENAME (264) 213
CLASSNAME (265) 212
VAR (266) 18 164
ARG (267) 166 167
CLASSVAR (268) 17
CONST (269)
NILOBJ (270) 216
TRUEOBJ (271) 214
FALSEOBJ (272) 215
PSEUDOVAR (273) 220
ELLIPSIS (274) 126 167 169
DOTDOT (275) 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
PIE (276) 204
BEGINCLOSEDFUNC (277) 159
BADTOKEN (278)
INTERPRET (279) 3
BINOP (280) 221
KEYBINOP (281) 229
READWRITEVAR (282) 196 222
UMINUS (283)

Nonterminals, with rules where they appear

root (51)
    on left: 1 2 3
classes (52)
    on left: 4 5, on right: 1 5
classextensions (53)
    on left: 6 7, on right: 2 7
classdef (54)
    on left: 8 9, on right: 5
classextension (55)
    on left: 10, on right: 6 7
optname (56)
    on left: 11 12, on right: 9
superclass (57)
    on left: 13 14, on right: 8 9
classvardecls (58)
    on left: 15 16, on right: 8 9 16
classvardecl (59)
    on left: 17 18, on right: 16
methods (60)
    on left: 19 20, on right: 8 9 10 20
methoddef (61)
    on left: 21 22 23 24, on right: 20
optsemi (62)
    on left: 25 26, on right: 37 39 41 107
optcomma (63)
    on left: 27 28, on right: 109 191
funcbody (64)
    on left: 29 30, on right: 31 32 33 158 159
cmdlinecode (65)
    on left: 31 32 33, on right: 3
methbody (66)
    on left: 34 35, on right: 21 22 23 24
primitive (67)
    on left: 36 37, on right: 21 22 23 24
retval (68)
    on left: 38 39, on right: 34 35
funretval (69)
    on left: 40 41, on right: 29 30
blocklist1 (70)
    on left: 42 43, on right: 43 45 46
blocklist (71)
    on left: 44 45, on right: 47 49 50 51 53 55
msgsend (72)
    on left: 46 47 48 49 50 51 52 53 54 55, on right: 59
expr1 (73)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71,
    on right: 70 72 73 74 75 76 77 87 99
valrangex1 (74)
    on left: 72 73 74, on right: 71
valrangeassign (75)
    on left: 75 76 77, on right: 89
valrangexd (76)
    on left: 78 79 80 81 82 83, on right: 88
valrange2 (77)
    on left: 84 85 86, on right: 63
expr (78)
    on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100,
    on right: 39 41 49 50 51 52 53 54 55 75 76 77 78 79 80 81 82 83
    90 92 93 94 95 96 97 98 99 100 105 106
adverb (79)
    on left: 101 102 103 104, on right: 93
exprn (80)
    on left: 105 106, on right: 106 107
exprseq (81)
    on left: 107, on right: 30 35 60 73 74 76 77 79 80 82 83 84 85
    86 104 110 111 112 113 114 115 116 117 118 119 122 176 177
arrayelems (82)
    on left: 108 109, on right: 62 69
arrayelems1 (83)
    on left: 110 111 112 113 114 115, on right: 109 113 114 115
arglist1 (84)
    on left: 116 117, on right: 47 51 53 67 70 72 74 75 77 78 80 81
    83 90 97 99 100 117 119
arglistv1 (85)
    on left: 118 119, on right: 48 52 54 68
keyarglist1 (86)
    on left: 120 121, on right: 49 50 66 121 124
keyarg (87)
    on left: 122, on right: 120 121
optkeyarglist (88)
    on left: 123 124, on right: 47 48 51 52 53 54 67 68 97
mavars (89)
    on left: 125 126, on right: 98
mavarlist (90)
    on left: 127 128, on right: 125 126 128
slotliteral (91)
    on left: 129 130 131 132 133 134 135 136 137, on right: 175 185
blockliteral (92)
    on left: 138, on right: 42 43 57
pushname (93)
    on left: 139, on right: 58
pushliteral (94)
    on left: 140 141 142 143 144 145 146 147 148, on right: 56
listliteral (95)
    on left: 149 150 151 152 153 154 155 156 157, on right: 192 193
block (96)
    on left: 158 159, on right: 138
funcvardecls (97)
    on left: 160 161, on right: 21 22 23 24 158 159 161
funcvardecls1 (98)
    on left: 162 163, on right: 31 32 163
funcvardecl (99)
    on left: 164, on right: 161 162 163
argdecls (100)
    on left: 165 166 167 168 169, on right: 21 22 23 24 158 159
slotdeflist0 (101)
    on left: 170 171, on right: 167 169
slotdeflist (102)
    on left: 172 173, on right: 164 166 168 171 173
slotdef (103)
    on left: 174 175, on right: 172 173
dictslotdef (104)
    on left: 176 177, on right: 178 179
dictslotlist1 (105)
    on left: 178 179, on right: 179 181
dictslotlist (106)
    on left: 180 181, on right: 64
rwslotdeflist (107)
    on left: 182 183, on right: 17 18 183
rwslotdef (108)
    on left: 184 185, on right: 182 183
listlit (109)
    on left: 186 187, on right: 137 148
listlit2 (110)
    on left: 188 189, on right: 157
literallistc (111)
    on left: 190 191, on right: 186 187 188 189
literallist1 (112)
    on left: 192 193, on right: 191 193
rwspec (113)
    on left: 194 195 196 197, on right: 184 185
integer (114)
    on left: 198 199, on right: 103 129 140 149 208
floatr (115)
    on left: 200 201, on right: 205 207
accidental (116)
    on left: 202 203, on right: 206
pie (117)
    on left: 204, on right: 207 208 209 210
floatp (118)
    on left: 205 206 207 208 209 210, on right: 130 141 150
name (119)
    on left: 211, on right: 12 21 22 46 47 48 50 53 54 55 61 94 95
    96 97 102 126 127 128 139 167 169 174 175 184 185
classname (120)
    on left: 212, on right: 8 9 10 14 66 67 68 69 91 187 189
primname (121)
    on left: 213, on right: 37
trueobj (122)
    on left: 214, on right: 134 145 154
falseobj (123)
    on left: 215, on right: 135 146 155
nilobj (124)
    on left: 216, on right: 136 147 156
ascii (125)
    on left: 217, on right: 131 142 151
symbol (126)
    on left: 218, on right: 133 144 153
string (127)
    on left: 219, on right: 132 143 152
pseudovar (128)
    on left: 220, on right: 65
binop (129)
    on left: 221 222 223 224 225 226 227 228, on right: 23 24 230
keybinop (130)
    on left: 229, on right: 112 114 122 177 231
binop2 (131)
    on left: 230 231, on right: 93


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 406
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 25
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 29
    cmdlinecode	go to state 30
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecls1	go to state 44
    funcvardecl	go to state 45
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 13

    classname	go to state 61



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 13

    $default	reduce using rule 1 (root)

    classdef	go to state 62
    classname	go to state 63



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 64



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 211)

    $default	reduce using rule 211 (name)



state 7

    integer  ->  INTEGER .   (rule 198)

    $default	reduce using rule 198 (integer)



state 8

    floatr  ->  FLOAT .   (rule 200)

    $default	reduce using rule 200 (floatr)



state 9

    accidental  ->  ACCIDENTAL .   (rule 202)

    $default	reduce using rule 202 (accidental)



state 10

    symbol  ->  SYMBOL .   (rule 218)

    $default	reduce using rule 218 (symbol)



state 11

    string  ->  STRING .   (rule 219)

    $default	reduce using rule 219 (string)



state 12

    ascii  ->  ASCII .   (rule 217)

    $default	reduce using rule 217 (ascii)



state 13

    classname  ->  CLASSNAME .   (rule 212)

    $default	reduce using rule 212 (classname)



state 14

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 164)

    NAME	shift, and go to state 6

    slotdeflist	go to state 65
    slotdef	go to state 66
    name	go to state 67



state 15

    nilobj  ->  NILOBJ .   (rule 216)

    $default	reduce using rule 216 (nilobj)



state 16

    trueobj  ->  TRUEOBJ .   (rule 214)

    $default	reduce using rule 214 (trueobj)



state 17

    falseobj  ->  FALSEOBJ .   (rule 215)

    $default	reduce using rule 215 (falseobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 220)

    $default	reduce using rule 220 (pseudovar)



state 19

    pie  ->  PIE .   (rule 204)

    $default	reduce using rule 204 (pie)



state 20

    block  ->  BEGINCLOSEDFUNC . argdecls funcvardecls funcbody '}'   (rule 159)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 70



state 21

    integer  ->  '-' . INTEGER   (rule 199)
    floatr  ->  '-' . FLOAT   (rule 201)
    accidental  ->  '-' . ACCIDENTAL   (rule 203)
    floatp  ->  '-' . pie   (rule 210)

    INTEGER	shift, and go to state 71
    FLOAT	shift, and go to state 72
    ACCIDENTAL	shift, and go to state 73
    PIE 	shift, and go to state 19

    pie 	go to state 74



state 22

    expr  ->  '`' . expr   (rule 92)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 76
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 23

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 158)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 77



state 24

    expr1  ->  '[' . arrayelems ']'   (rule 62)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 108 (arrayelems)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 79
    arrayelems	go to state 80
    arrayelems1	go to state 81
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 82



state 25

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 83
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 180 (dictslotlist)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    valrange2	go to state 84
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 85
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecls1	go to state 86
    funcvardecl	go to state 45
    dictslotdef	go to state 87
    dictslotlist1	go to state 88
    dictslotlist	go to state 89
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 90



state 26

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 91
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 27

    expr1  ->  '~' . name   (rule 61)
    expr  ->  '~' . name '=' expr   (rule 95)

    NAME	shift, and go to state 6

    name	go to state 92



state 28

    expr  ->  '#' . mavars '=' expr   (rule 98)
    listlit  ->  '#' . '[' literallistc ']'   (rule 186)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 187)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 93

    mavars	go to state 94
    mavarlist	go to state 95
    name	go to state 96
    classname	go to state 97



state 29

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 30

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 31

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 32

    expr1  ->  msgsend .   (rule 59)

    $default	reduce using rule 59 (expr1)



state 33

    expr1  ->  expr1 . '[' arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 . '[' DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 . '[' arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 . '[' DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 .   (rule 87)
    expr  ->  expr1 . '[' arglist1 ']' '=' expr   (rule 99)

    '[' 	shift, and go to state 98

    $default	reduce using rule 87 (expr)



state 34

    expr1  ->  valrangex1 .   (rule 71)

    $default	reduce using rule 71 (expr1)



state 35

    expr  ->  valrangeassign .   (rule 89)

    $default	reduce using rule 89 (expr)



state 36

    expr  ->  valrangexd .   (rule 88)

    $default	reduce using rule 88 (expr)



state 37

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)
    exprn  ->  expr .   (rule 105)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 105 (exprn)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 38

    exprn  ->  exprn . ';' expr   (rule 106)
    exprseq  ->  exprn . optsemi   (rule 107)

    ';' 	shift, and go to state 111

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 112



state 39

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 26

    $default	reduce using rule 40 (funretval)

    funretval	go to state 113



state 40

    expr1  ->  blockliteral .   (rule 57)

    $default	reduce using rule 57 (expr1)



state 41

    expr1  ->  pushname .   (rule 58)

    $default	reduce using rule 58 (expr1)



state 42

    expr1  ->  pushliteral .   (rule 56)

    $default	reduce using rule 56 (expr1)



state 43

    blockliteral  ->  block .   (rule 138)

    $default	reduce using rule 138 (blockliteral)



state 44

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 114
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 115
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 45

    funcvardecls1  ->  funcvardecl .   (rule 162)

    $default	reduce using rule 162 (funcvardecls1)



state 46

    pushliteral  ->  listlit .   (rule 148)

    $default	reduce using rule 148 (pushliteral)



state 47

    pushliteral  ->  integer .   (rule 140)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 19

    $default	reduce using rule 140 (pushliteral)

    pie 	go to state 116



state 48

    floatp  ->  floatr .   (rule 205)
    floatp  ->  floatr . pie   (rule 207)

    PIE 	shift, and go to state 19

    $default	reduce using rule 205 (floatp)

    pie 	go to state 117



state 49

    floatp  ->  accidental .   (rule 206)

    $default	reduce using rule 206 (floatp)



state 50

    floatp  ->  pie .   (rule 209)

    $default	reduce using rule 209 (floatp)



state 51

    pushliteral  ->  floatp .   (rule 141)

    $default	reduce using rule 141 (pushliteral)



state 52

    msgsend  ->  name . blocklist1   (rule 46)
    msgsend  ->  name . '(' arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name . '(' arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name . '=' expr   (rule 94)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 97)
    pushname  ->  name .   (rule 139)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '=' 	shift, and go to state 118
    '{' 	shift, and go to state 23
    '(' 	shift, and go to state 119

    $default	reduce using rule 139 (pushname)

    blocklist1	go to state 120
    blockliteral	go to state 121
    block	go to state 43



state 53

    expr1  ->  classname . '(' keyarglist1 ')'   (rule 66)
    expr1  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname . '(' arglistv1 optkeyarglist ')'   (rule 68)
    expr1  ->  classname . '[' arrayelems ']'   (rule 69)
    expr  ->  classname .   (rule 91)

    '[' 	shift, and go to state 122
    '(' 	shift, and go to state 123

    $default	reduce using rule 91 (expr)



state 54

    pushliteral  ->  trueobj .   (rule 145)

    $default	reduce using rule 145 (pushliteral)



state 55

    pushliteral  ->  falseobj .   (rule 146)

    $default	reduce using rule 146 (pushliteral)



state 56

    pushliteral  ->  nilobj .   (rule 147)

    $default	reduce using rule 147 (pushliteral)



state 57

    pushliteral  ->  ascii .   (rule 142)

    $default	reduce using rule 142 (pushliteral)



state 58

    pushliteral  ->  symbol .   (rule 144)

    $default	reduce using rule 144 (pushliteral)



state 59

    pushliteral  ->  string .   (rule 143)

    $default	reduce using rule 143 (pushliteral)



state 60

    expr1  ->  pseudovar .   (rule 65)

    $default	reduce using rule 65 (expr1)



state 61

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 124



state 62

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 63

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 125
    '[' 	shift, and go to state 126

    $default	reduce using rule 13 (superclass)

    superclass	go to state 127



state 64

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 65

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 164)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    ';' 	shift, and go to state 128
    ',' 	shift, and go to state 129



state 66

    slotdeflist  ->  slotdef .   (rule 172)

    $default	reduce using rule 172 (slotdeflist)



state 67

    slotdef  ->  name .   (rule 174)
    slotdef  ->  name . '=' slotliteral   (rule 175)

    '=' 	shift, and go to state 130

    $default	reduce using rule 174 (slotdef)



state 68

    argdecls  ->  ARG . slotdeflist ';'   (rule 166)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 167)

    NAME	shift, and go to state 6

    $default	reduce using rule 170 (slotdeflist0)

    slotdeflist0	go to state 131
    slotdeflist	go to state 132
    slotdef	go to state 66
    name	go to state 67



state 69

    argdecls  ->  '|' . slotdeflist '|'   (rule 168)
    argdecls  ->  '|' . slotdeflist0 ELLIPSIS name '|'   (rule 169)

    NAME	shift, and go to state 6

    $default	reduce using rule 170 (slotdeflist0)

    slotdeflist0	go to state 133
    slotdeflist	go to state 134
    slotdef	go to state 66
    name	go to state 67



state 70

    block  ->  BEGINCLOSEDFUNC argdecls . funcvardecls funcbody '}'   (rule 159)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 135



state 71

    integer  ->  '-' INTEGER .   (rule 199)

    $default	reduce using rule 199 (integer)



state 72

    floatr  ->  '-' FLOAT .   (rule 201)

    $default	reduce using rule 201 (floatr)



state 73

    accidental  ->  '-' ACCIDENTAL .   (rule 203)

    $default	reduce using rule 203 (accidental)



state 74

    floatp  ->  '-' pie .   (rule 210)

    $default	reduce using rule 210 (floatp)



state 75

    expr1  ->  '(' . exprseq ')'   (rule 60)
    expr1  ->  '(' . valrange2 ')'   (rule 63)
    expr1  ->  '(' . dictslotlist ')'   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 83
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 180 (dictslotlist)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    valrange2	go to state 84
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 85
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    dictslotdef	go to state 87
    dictslotlist1	go to state 88
    dictslotlist	go to state 89
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 90



state 76

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  '`' expr .   (rule 92)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)


    $default	reduce using rule 92 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 77

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 158)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 136



state 78

    keybinop  ->  KEYBINOP .   (rule 229)

    $default	reduce using rule 229 (keybinop)



state 79

    arrayelems1  ->  exprseq .   (rule 110)
    arrayelems1  ->  exprseq . ':' exprseq   (rule 111)

    ':' 	shift, and go to state 137

    $default	reduce using rule 110 (arrayelems1)



state 80

    expr1  ->  '[' arrayelems . ']'   (rule 62)

    ']' 	shift, and go to state 138



state 81

    arrayelems  ->  arrayelems1 . optcomma   (rule 109)
    arrayelems1  ->  arrayelems1 . ',' exprseq   (rule 113)
    arrayelems1  ->  arrayelems1 . ',' keybinop exprseq   (rule 114)
    arrayelems1  ->  arrayelems1 . ',' exprseq ':' exprseq   (rule 115)

    ',' 	shift, and go to state 139

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 140



state 82

    arrayelems1  ->  keybinop . exprseq   (rule 112)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 141
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 83

    valrange2  ->  DOTDOT . exprseq   (rule 84)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 142
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 84

    expr1  ->  '(' valrange2 . ')'   (rule 63)

    ')' 	shift, and go to state 143



state 85

    expr1  ->  '(' exprseq . ')'   (rule 60)
    valrange2  ->  exprseq . DOTDOT exprseq   (rule 85)
    valrange2  ->  exprseq . ',' exprseq DOTDOT exprseq   (rule 86)
    dictslotdef  ->  exprseq . ':' exprseq   (rule 176)

    DOTDOT	shift, and go to state 144
    ':' 	shift, and go to state 145
    ',' 	shift, and go to state 146
    ')' 	shift, and go to state 147



state 86

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 163)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 148
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 115
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 87

    dictslotlist1  ->  dictslotdef .   (rule 178)

    $default	reduce using rule 178 (dictslotlist1)



state 88

    dictslotlist1  ->  dictslotlist1 . ',' dictslotdef   (rule 179)
    dictslotlist  ->  dictslotlist1 .   (rule 181)

    ',' 	shift, and go to state 149

    $default	reduce using rule 181 (dictslotlist)



state 89

    expr1  ->  '(' dictslotlist . ')'   (rule 64)

    ')' 	shift, and go to state 150



state 90

    dictslotdef  ->  keybinop . exprseq   (rule 177)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 151
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 91

    funretval  ->  '^' expr . optsemi   (rule 41)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107
    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 153
    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 92

    expr1  ->  '~' name .   (rule 61)
    expr  ->  '~' name . '=' expr   (rule 95)

    '=' 	shift, and go to state 154

    $default	reduce using rule 61 (expr1)



state 93

    listlit  ->  '#' '[' . literallistc ']'   (rule 186)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 158
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    ascii	go to state 166
    symbol	go to state 167
    string	go to state 168



state 94

    expr  ->  '#' mavars . '=' expr   (rule 98)

    '=' 	shift, and go to state 169



state 95

    mavars  ->  mavarlist .   (rule 125)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 126)
    mavarlist  ->  mavarlist . ',' name   (rule 128)

    ELLIPSIS	shift, and go to state 170
    ',' 	shift, and go to state 171

    $default	reduce using rule 125 (mavars)



state 96

    mavarlist  ->  name .   (rule 127)

    $default	reduce using rule 127 (mavarlist)



state 97

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 187)

    '[' 	shift, and go to state 172



state 98

    expr1  ->  expr1 '[' . arglist1 ']'   (rule 70)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' . DOTDOT exprseq ']'   (rule 73)
    valrangex1  ->  expr1 '[' . arglist1 DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' . DOTDOT exprseq ']' '=' expr   (rule 76)
    valrangeassign  ->  expr1 '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' . arglist1 ']' '=' expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 173
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 175
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 99

    binop  ->  BINOP .   (rule 221)

    $default	reduce using rule 221 (binop)



state 100

    binop  ->  '-' .   (rule 225)

    $default	reduce using rule 225 (binop)



state 101

    binop  ->  '<' .   (rule 223)

    $default	reduce using rule 223 (binop)



state 102

    binop  ->  '>' .   (rule 224)

    $default	reduce using rule 224 (binop)



state 103

    binop  ->  '*' .   (rule 226)

    $default	reduce using rule 226 (binop)



state 104

    binop  ->  '+' .   (rule 227)

    $default	reduce using rule 227 (binop)



state 105

    binop  ->  '|' .   (rule 228)

    $default	reduce using rule 228 (binop)



state 106

    binop  ->  READWRITEVAR .   (rule 222)

    $default	reduce using rule 222 (binop)



state 107

    msgsend  ->  expr '.' . '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' . name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' . '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' . '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr '.' . name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' . name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' . name blocklist   (rule 55)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' . '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' . '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' . '[' arglist1 ']'   (rule 90)
    expr  ->  expr '.' . name '=' expr   (rule 96)
    expr  ->  expr '.' . '[' arglist1 ']' '=' expr   (rule 100)

    NAME	shift, and go to state 6
    '[' 	shift, and go to state 176
    '(' 	shift, and go to state 177

    name	go to state 178



state 108

    binop2  ->  binop .   (rule 230)

    $default	reduce using rule 230 (binop2)



state 109

    binop2  ->  keybinop .   (rule 231)

    $default	reduce using rule 231 (binop2)



state 110

    expr  ->  expr binop2 . adverb expr   (rule 93)

    '.' 	shift, and go to state 179

    $default	reduce using rule 101 (adverb)

    adverb	go to state 180



state 111

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 106)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 26 (optsemi)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 181
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 112

    exprseq  ->  exprn optsemi .   (rule 107)

    $default	reduce using rule 107 (exprseq)



state 113

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 114

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 115

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 163)

    $default	reduce using rule 163 (funcvardecls1)



state 116

    floatp  ->  integer pie .   (rule 208)

    $default	reduce using rule 208 (floatp)



state 117

    floatp  ->  floatr pie .   (rule 207)

    $default	reduce using rule 207 (floatp)



state 118

    expr  ->  name '=' . expr   (rule 94)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 182
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 119

    msgsend  ->  name '(' . arglist1 optkeyarglist ')' blocklist   (rule 47)
    msgsend  ->  name '(' . arglistv1 optkeyarglist ')'   (rule 48)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 184
    arglistv1	go to state 185
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 120

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    msgsend  ->  name blocklist1 .   (rule 46)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 46 (msgsend)

    blockliteral	go to state 186
    block	go to state 43



state 121

    blocklist1  ->  blockliteral .   (rule 42)

    $default	reduce using rule 42 (blocklist1)



state 122

    expr1  ->  classname '[' . arrayelems ']'   (rule 69)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 108 (arrayelems)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 79
    arrayelems	go to state 187
    arrayelems1	go to state 81
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 82



state 123

    expr1  ->  classname '(' . keyarglist1 ')'   (rule 66)
    expr1  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 67)
    expr1  ->  classname '(' . arglistv1 optkeyarglist ')'   (rule 68)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 188
    arglistv1	go to state 189
    keyarglist1	go to state 190
    keyarg	go to state 191
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 192



state 124

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 193



state 125

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 13

    classname	go to state 194



state 126

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 195
    name	go to state 196



state 127

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 197



state 128

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 164)

    $default	reduce using rule 164 (funcvardecl)



state 129

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 173)

    NAME	shift, and go to state 6

    slotdef	go to state 198
    name	go to state 67



state 130

    slotdef  ->  name '=' . slotliteral   (rule 175)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '#' 	shift, and go to state 199

    slotliteral	go to state 200
    listlit	go to state 201
    integer	go to state 202
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 203
    trueobj	go to state 204
    falseobj	go to state 205
    nilobj	go to state 206
    ascii	go to state 207
    symbol	go to state 208
    string	go to state 209



state 131

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 167)

    ELLIPSIS	shift, and go to state 210



state 132

    argdecls  ->  ARG slotdeflist . ';'   (rule 166)
    slotdeflist0  ->  slotdeflist .   (rule 171)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    ';' 	shift, and go to state 211
    ',' 	shift, and go to state 129

    $default	reduce using rule 171 (slotdeflist0)



state 133

    argdecls  ->  '|' slotdeflist0 . ELLIPSIS name '|'   (rule 169)

    ELLIPSIS	shift, and go to state 212



state 134

    argdecls  ->  '|' slotdeflist . '|'   (rule 168)
    slotdeflist0  ->  slotdeflist .   (rule 171)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 173)

    '|' 	shift, and go to state 213
    ',' 	shift, and go to state 129

    $default	reduce using rule 171 (slotdeflist0)



state 135

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls . funcbody '}'   (rule 159)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 214
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 215
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 136

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 158)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    VAR 	shift, and go to state 14
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 26
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 216
    funretval	go to state 31
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 39
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    funcvardecl	go to state 215
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 137

    arrayelems1  ->  exprseq ':' . exprseq   (rule 111)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 217
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 138

    expr1  ->  '[' arrayelems ']' .   (rule 62)

    $default	reduce using rule 62 (expr1)



state 139

    optcomma  ->  ',' .   (rule 28)
    arrayelems1  ->  arrayelems1 ',' . exprseq   (rule 113)
    arrayelems1  ->  arrayelems1 ',' . keybinop exprseq   (rule 114)
    arrayelems1  ->  arrayelems1 ',' . exprseq ':' exprseq   (rule 115)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 28 (optcomma)

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 218
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 219



state 140

    arrayelems  ->  arrayelems1 optcomma .   (rule 109)

    $default	reduce using rule 109 (arrayelems)



state 141

    arrayelems1  ->  keybinop exprseq .   (rule 112)

    $default	reduce using rule 112 (arrayelems1)



state 142

    valrange2  ->  DOTDOT exprseq .   (rule 84)

    $default	reduce using rule 84 (valrange2)



state 143

    expr1  ->  '(' valrange2 ')' .   (rule 63)

    $default	reduce using rule 63 (expr1)



state 144

    valrange2  ->  exprseq DOTDOT . exprseq   (rule 85)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 220
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 145

    dictslotdef  ->  exprseq ':' . exprseq   (rule 176)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 221
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 146

    valrange2  ->  exprseq ',' . exprseq DOTDOT exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 222
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 147

    expr1  ->  '(' exprseq ')' .   (rule 60)

    $default	reduce using rule 60 (expr1)



state 148

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 223



state 149

    dictslotlist1  ->  dictslotlist1 ',' . dictslotdef   (rule 179)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 224
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    dictslotdef	go to state 225
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 90



state 150

    expr1  ->  '(' dictslotlist ')' .   (rule 64)

    $default	reduce using rule 64 (expr1)



state 151

    dictslotdef  ->  keybinop exprseq .   (rule 177)

    $default	reduce using rule 177 (dictslotdef)



state 152

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 153

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 154

    expr  ->  '~' name '=' . expr   (rule 95)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 226
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 155

    listlit2  ->  '[' . literallistc ']'   (rule 188)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 227
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    ascii	go to state 166
    symbol	go to state 167
    string	go to state 168



state 156

    literallist1  ->  listliteral .   (rule 192)

    $default	reduce using rule 192 (literallist1)



state 157

    listliteral  ->  listlit2 .   (rule 157)

    $default	reduce using rule 157 (listliteral)



state 158

    listlit  ->  '#' '[' literallistc . ']'   (rule 186)

    ']' 	shift, and go to state 228



state 159

    literallistc  ->  literallist1 . optcomma   (rule 191)
    literallist1  ->  literallist1 . ',' listliteral   (rule 193)

    ',' 	shift, and go to state 229

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 230



state 160

    listliteral  ->  integer .   (rule 149)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 19

    $default	reduce using rule 149 (listliteral)

    pie 	go to state 116



state 161

    listliteral  ->  floatp .   (rule 150)

    $default	reduce using rule 150 (listliteral)



state 162

    listlit2  ->  classname . '[' literallistc ']'   (rule 189)

    '[' 	shift, and go to state 231



state 163

    listliteral  ->  trueobj .   (rule 154)

    $default	reduce using rule 154 (listliteral)



state 164

    listliteral  ->  falseobj .   (rule 155)

    $default	reduce using rule 155 (listliteral)



state 165

    listliteral  ->  nilobj .   (rule 156)

    $default	reduce using rule 156 (listliteral)



state 166

    listliteral  ->  ascii .   (rule 151)

    $default	reduce using rule 151 (listliteral)



state 167

    listliteral  ->  symbol .   (rule 153)

    $default	reduce using rule 153 (listliteral)



state 168

    listliteral  ->  string .   (rule 152)

    $default	reduce using rule 152 (listliteral)



state 169

    expr  ->  '#' mavars '=' . expr   (rule 98)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 232
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 170

    mavars  ->  mavarlist ELLIPSIS . name   (rule 126)

    NAME	shift, and go to state 6

    name	go to state 233



state 171

    mavarlist  ->  mavarlist ',' . name   (rule 128)

    NAME	shift, and go to state 6

    name	go to state 234



state 172

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 187)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 235
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    ascii	go to state 166
    symbol	go to state 167
    string	go to state 168



state 173

    valrangex1  ->  expr1 '[' DOTDOT . exprseq ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT . exprseq ']' '=' expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 236
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 174

    arglist1  ->  exprseq .   (rule 116)

    $default	reduce using rule 116 (arglist1)



state 175

    expr1  ->  expr1 '[' arglist1 . ']'   (rule 70)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 . DOTDOT exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 77)
    expr  ->  expr1 '[' arglist1 . ']' '=' expr   (rule 99)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)

    DOTDOT	shift, and go to state 237
    ']' 	shift, and go to state 238
    ',' 	shift, and go to state 239



state 176

    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' . DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' . arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' . arglist1 ']'   (rule 90)
    expr  ->  expr '.' '[' . arglist1 ']' '=' expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    DOTDOT	shift, and go to state 240
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 241
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 177

    msgsend  ->  expr '.' '(' . keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr '.' '(' . arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr '.' '(' . arglistv1 optkeyarglist ')'   (rule 52)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 242
    arglistv1	go to state 243
    keyarglist1	go to state 244
    keyarg	go to state 191
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 192



state 178

    msgsend  ->  expr '.' name . '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name . '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name . '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr '.' name . blocklist   (rule 55)
    expr  ->  expr '.' name . '=' expr   (rule 96)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '=' 	shift, and go to state 245
    '{' 	shift, and go to state 23
    '(' 	shift, and go to state 246

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 248
    blockliteral	go to state 121
    block	go to state 43



state 179

    adverb  ->  '.' . name   (rule 102)
    adverb  ->  '.' . integer   (rule 103)
    adverb  ->  '.' . '(' exprseq ')'   (rule 104)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    '-' 	shift, and go to state 249
    '(' 	shift, and go to state 250

    integer	go to state 251
    name	go to state 252



state 180

    expr  ->  expr binop2 adverb . expr   (rule 93)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 253
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 181

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)
    exprn  ->  exprn ';' expr .   (rule 106)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 106 (exprn)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 182

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  name '=' expr .   (rule 94)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 94 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 183

    arglistv1  ->  '*' . exprseq   (rule 118)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 254
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 184

    msgsend  ->  name '(' arglist1 . optkeyarglist ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 97)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 119)

    ',' 	shift, and go to state 255

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 256



state 185

    msgsend  ->  name '(' arglistv1 . optkeyarglist ')'   (rule 48)

    ',' 	shift, and go to state 257

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 258



state 186

    blocklist1  ->  blocklist1 blockliteral .   (rule 43)

    $default	reduce using rule 43 (blocklist1)



state 187

    expr1  ->  classname '[' arrayelems . ']'   (rule 69)

    ']' 	shift, and go to state 259



state 188

    expr1  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 67)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 119)

    ',' 	shift, and go to state 255

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 260



state 189

    expr1  ->  classname '(' arglistv1 . optkeyarglist ')'   (rule 68)

    ',' 	shift, and go to state 257

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 261



state 190

    expr1  ->  classname '(' keyarglist1 . ')'   (rule 66)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 121)

    ',' 	shift, and go to state 262
    ')' 	shift, and go to state 263



state 191

    keyarglist1  ->  keyarg .   (rule 120)

    $default	reduce using rule 120 (keyarglist1)



state 192

    keyarg  ->  keybinop . exprseq   (rule 122)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 264
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 193

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 99
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 265
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '}' 	shift, and go to state 266

    methoddef	go to state 267
    name	go to state 268
    binop	go to state 269



state 194

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 195

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 270



state 196

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 197

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 271



state 198

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 173)

    $default	reduce using rule 173 (slotdeflist)



state 199

    listlit  ->  '#' . '[' literallistc ']'   (rule 186)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 187)

    CLASSNAME	shift, and go to state 13
    '[' 	shift, and go to state 93

    classname	go to state 97



state 200

    slotdef  ->  name '=' slotliteral .   (rule 175)

    $default	reduce using rule 175 (slotdef)



state 201

    slotliteral  ->  listlit .   (rule 137)

    $default	reduce using rule 137 (slotliteral)



state 202

    slotliteral  ->  integer .   (rule 129)
    floatp  ->  integer . pie   (rule 208)

    PIE 	shift, and go to state 19

    $default	reduce using rule 129 (slotliteral)

    pie 	go to state 116



state 203

    slotliteral  ->  floatp .   (rule 130)

    $default	reduce using rule 130 (slotliteral)



state 204

    slotliteral  ->  trueobj .   (rule 134)

    $default	reduce using rule 134 (slotliteral)



state 205

    slotliteral  ->  falseobj .   (rule 135)

    $default	reduce using rule 135 (slotliteral)



state 206

    slotliteral  ->  nilobj .   (rule 136)

    $default	reduce using rule 136 (slotliteral)



state 207

    slotliteral  ->  ascii .   (rule 131)

    $default	reduce using rule 131 (slotliteral)



state 208

    slotliteral  ->  symbol .   (rule 133)

    $default	reduce using rule 133 (slotliteral)



state 209

    slotliteral  ->  string .   (rule 132)

    $default	reduce using rule 132 (slotliteral)



state 210

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 167)

    NAME	shift, and go to state 6

    name	go to state 272



state 211

    argdecls  ->  ARG slotdeflist ';' .   (rule 166)

    $default	reduce using rule 166 (argdecls)



state 212

    argdecls  ->  '|' slotdeflist0 ELLIPSIS . name '|'   (rule 169)

    NAME	shift, and go to state 6

    name	go to state 273



state 213

    argdecls  ->  '|' slotdeflist '|' .   (rule 168)

    $default	reduce using rule 168 (argdecls)



state 214

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody . '}'   (rule 159)

    '}' 	shift, and go to state 274



state 215

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 161)

    $default	reduce using rule 161 (funcvardecls)



state 216

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 158)

    '}' 	shift, and go to state 275



state 217

    arrayelems1  ->  exprseq ':' exprseq .   (rule 111)

    $default	reduce using rule 111 (arrayelems1)



state 218

    arrayelems1  ->  arrayelems1 ',' exprseq .   (rule 113)
    arrayelems1  ->  arrayelems1 ',' exprseq . ':' exprseq   (rule 115)

    ':' 	shift, and go to state 276

    $default	reduce using rule 113 (arrayelems1)



state 219

    arrayelems1  ->  arrayelems1 ',' keybinop . exprseq   (rule 114)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 277
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 220

    valrange2  ->  exprseq DOTDOT exprseq .   (rule 85)

    $default	reduce using rule 85 (valrange2)



state 221

    dictslotdef  ->  exprseq ':' exprseq .   (rule 176)

    $default	reduce using rule 176 (dictslotdef)



state 222

    valrange2  ->  exprseq ',' exprseq . DOTDOT exprseq   (rule 86)

    DOTDOT	shift, and go to state 278



state 223

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 224

    dictslotdef  ->  exprseq . ':' exprseq   (rule 176)

    ':' 	shift, and go to state 145



state 225

    dictslotlist1  ->  dictslotlist1 ',' dictslotdef .   (rule 179)

    $default	reduce using rule 179 (dictslotlist1)



state 226

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  '~' name '=' expr .   (rule 95)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 95 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 227

    listlit2  ->  '[' literallistc . ']'   (rule 188)

    ']' 	shift, and go to state 279



state 228

    listlit  ->  '#' '[' literallistc ']' .   (rule 186)

    $default	reduce using rule 186 (listlit)



state 229

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 193)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 280
    listlit2	go to state 157
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    ascii	go to state 166
    symbol	go to state 167
    string	go to state 168



state 230

    literallistc  ->  literallist1 optcomma .   (rule 191)

    $default	reduce using rule 191 (literallistc)



state 231

    listlit2  ->  classname '[' . literallistc ']'   (rule 189)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '[' 	shift, and go to state 155

    $default	reduce using rule 190 (literallistc)

    listliteral	go to state 156
    listlit2	go to state 157
    literallistc	go to state 281
    literallist1	go to state 159
    integer	go to state 160
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 161
    classname	go to state 162
    trueobj	go to state 163
    falseobj	go to state 164
    nilobj	go to state 165
    ascii	go to state 166
    symbol	go to state 167
    string	go to state 168



state 232

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  '#' mavars '=' expr .   (rule 98)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 98 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 233

    mavars  ->  mavarlist ELLIPSIS name .   (rule 126)

    $default	reduce using rule 126 (mavars)



state 234

    mavarlist  ->  mavarlist ',' name .   (rule 128)

    $default	reduce using rule 128 (mavarlist)



state 235

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 187)

    ']' 	shift, and go to state 282



state 236

    valrangex1  ->  expr1 '[' DOTDOT exprseq . ']'   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq . ']' '=' expr   (rule 76)

    ']' 	shift, and go to state 283



state 237

    valrangex1  ->  expr1 '[' arglist1 DOTDOT . ']'   (rule 72)
    valrangex1  ->  expr1 '[' arglist1 DOTDOT . exprseq ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . ']' '=' expr   (rule 75)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 284
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 285
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 238

    expr1  ->  expr1 '[' arglist1 ']' .   (rule 70)
    expr  ->  expr1 '[' arglist1 ']' . '=' expr   (rule 99)

    '=' 	shift, and go to state 286

    $default	reduce using rule 70 (expr1)



state 239

    arglist1  ->  arglist1 ',' . exprseq   (rule 117)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 287
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 240

    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT . exprseq ']' '=' expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 288
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 241

    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 . DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr '.' '[' arglist1 . ']'   (rule 90)
    expr  ->  expr '.' '[' arglist1 . ']' '=' expr   (rule 100)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)

    DOTDOT	shift, and go to state 289
    ']' 	shift, and go to state 290
    ',' 	shift, and go to state 239



state 242

    msgsend  ->  expr '.' '(' arglist1 . optkeyarglist ')' blocklist   (rule 51)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 119)

    ',' 	shift, and go to state 255

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 291



state 243

    msgsend  ->  expr '.' '(' arglistv1 . optkeyarglist ')'   (rule 52)

    ',' 	shift, and go to state 257

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 292



state 244

    msgsend  ->  expr '.' '(' keyarglist1 . ')' blocklist   (rule 49)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 121)

    ',' 	shift, and go to state 262
    ')' 	shift, and go to state 293



state 245

    expr  ->  expr '.' name '=' . expr   (rule 96)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 294
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 246

    msgsend  ->  expr '.' name '(' . keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr '.' name '(' . arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr '.' name '(' . arglistv1 optkeyarglist ')'   (rule 54)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '*' 	shift, and go to state 183
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 174
    arglist1	go to state 295
    arglistv1	go to state 296
    keyarglist1	go to state 297
    keyarg	go to state 191
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 192



state 247

    blocklist1  ->  blocklist1 . blockliteral   (rule 43)
    blocklist  ->  blocklist1 .   (rule 45)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 45 (blocklist)

    blockliteral	go to state 186
    block	go to state 43



state 248

    msgsend  ->  expr '.' name blocklist .   (rule 55)

    $default	reduce using rule 55 (msgsend)



state 249

    integer  ->  '-' . INTEGER   (rule 199)

    INTEGER	shift, and go to state 71



state 250

    adverb  ->  '.' '(' . exprseq ')'   (rule 104)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 298
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 251

    adverb  ->  '.' integer .   (rule 103)

    $default	reduce using rule 103 (adverb)



state 252

    adverb  ->  '.' name .   (rule 102)

    $default	reduce using rule 102 (adverb)



state 253

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr binop2 adverb expr .   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    '.' 	shift, and go to state 107

    $default	reduce using rule 93 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 254

    arglistv1  ->  '*' exprseq .   (rule 118)

    $default	reduce using rule 118 (arglistv1)



state 255

    arglist1  ->  arglist1 ',' . exprseq   (rule 117)
    arglistv1  ->  arglist1 ',' . '*' exprseq   (rule 119)
    optkeyarglist  ->  ',' . keyarglist1   (rule 124)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 21
    '*' 	shift, and go to state 299
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 287
    keyarglist1	go to state 300
    keyarg	go to state 191
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60
    keybinop	go to state 192



state 256

    msgsend  ->  name '(' arglist1 optkeyarglist . ')' blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 97)

    ')' 	shift, and go to state 301



state 257

    optkeyarglist  ->  ',' . keyarglist1   (rule 124)

    KEYBINOP	shift, and go to state 78

    keyarglist1	go to state 300
    keyarg	go to state 191
    keybinop	go to state 192



state 258

    msgsend  ->  name '(' arglistv1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 302



state 259

    expr1  ->  classname '[' arrayelems ']' .   (rule 69)

    $default	reduce using rule 69 (expr1)



state 260

    expr1  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 67)

    ')' 	shift, and go to state 303



state 261

    expr1  ->  classname '(' arglistv1 optkeyarglist . ')'   (rule 68)

    ')' 	shift, and go to state 304



state 262

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 121)

    KEYBINOP	shift, and go to state 78

    keyarg	go to state 305
    keybinop	go to state 192



state 263

    expr1  ->  classname '(' keyarglist1 ')' .   (rule 66)

    $default	reduce using rule 66 (expr1)



state 264

    keyarg  ->  keybinop exprseq .   (rule 122)

    $default	reduce using rule 122 (keyarg)



state 265

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 226)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 99
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106

    $default	reduce using rule 226 (binop)

    name	go to state 306
    binop	go to state 307



state 266

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 267

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 268

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 308



state 269

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 309



state 270

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 125

    $default	reduce using rule 13 (superclass)

    superclass	go to state 310



state 271

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 311
    CLASSVAR	shift, and go to state 312

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 313
    methods	go to state 314



state 272

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 167)

    ';' 	shift, and go to state 315



state 273

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name . '|'   (rule 169)

    '|' 	shift, and go to state 316



state 274

    block  ->  BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}' .   (rule 159)

    $default	reduce using rule 159 (block)



state 275

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 158)

    $default	reduce using rule 158 (block)



state 276

    arrayelems1  ->  arrayelems1 ',' exprseq ':' . exprseq   (rule 115)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 317
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 277

    arrayelems1  ->  arrayelems1 ',' keybinop exprseq .   (rule 114)

    $default	reduce using rule 114 (arrayelems1)



state 278

    valrange2  ->  exprseq ',' exprseq DOTDOT . exprseq   (rule 86)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 318
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 279

    listlit2  ->  '[' literallistc ']' .   (rule 188)

    $default	reduce using rule 188 (listlit2)



state 280

    literallist1  ->  literallist1 ',' listliteral .   (rule 193)

    $default	reduce using rule 193 (literallist1)



state 281

    listlit2  ->  classname '[' literallistc . ']'   (rule 189)

    ']' 	shift, and go to state 319



state 282

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 187)

    $default	reduce using rule 187 (listlit)



state 283

    valrangex1  ->  expr1 '[' DOTDOT exprseq ']' .   (rule 73)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' . '=' expr   (rule 76)

    '=' 	shift, and go to state 320

    $default	reduce using rule 73 (valrangex1)



state 284

    valrangex1  ->  expr1 '[' arglist1 DOTDOT ']' .   (rule 72)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' . '=' expr   (rule 75)

    '=' 	shift, and go to state 321

    $default	reduce using rule 72 (valrangex1)



state 285

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq . ']'   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 77)

    ']' 	shift, and go to state 322



state 286

    expr  ->  expr1 '[' arglist1 ']' '=' . expr   (rule 99)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 323
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 287

    arglist1  ->  arglist1 ',' exprseq .   (rule 117)

    $default	reduce using rule 117 (arglist1)



state 288

    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']'   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq . ']' '=' expr   (rule 82)

    ']' 	shift, and go to state 324



state 289

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']'   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT . exprseq ']' '=' expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    ']' 	shift, and go to state 325
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 326
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 290

    expr  ->  expr '.' '[' arglist1 ']' .   (rule 90)
    expr  ->  expr '.' '[' arglist1 ']' . '=' expr   (rule 100)

    '=' 	shift, and go to state 327

    $default	reduce using rule 90 (expr)



state 291

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist . ')' blocklist   (rule 51)

    ')' 	shift, and go to state 328



state 292

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist . ')'   (rule 52)

    ')' 	shift, and go to state 329



state 293

    msgsend  ->  expr '.' '(' keyarglist1 ')' . blocklist   (rule 49)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 330
    blockliteral	go to state 121
    block	go to state 43



state 294

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr '.' name '=' expr .   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 96 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 295

    msgsend  ->  expr '.' name '(' arglist1 . optkeyarglist ')' blocklist   (rule 53)
    arglist1  ->  arglist1 . ',' exprseq   (rule 117)
    arglistv1  ->  arglist1 . ',' '*' exprseq   (rule 119)

    ',' 	shift, and go to state 255

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 331



state 296

    msgsend  ->  expr '.' name '(' arglistv1 . optkeyarglist ')'   (rule 54)

    ',' 	shift, and go to state 257

    $default	reduce using rule 123 (optkeyarglist)

    optkeyarglist	go to state 332



state 297

    msgsend  ->  expr '.' name '(' keyarglist1 . ')' blocklist   (rule 50)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 121)

    ',' 	shift, and go to state 262
    ')' 	shift, and go to state 333



state 298

    adverb  ->  '.' '(' exprseq . ')'   (rule 104)

    ')' 	shift, and go to state 334



state 299

    arglistv1  ->  arglist1 ',' '*' . exprseq   (rule 119)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 335
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 300

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 121)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 124)

    ',' 	shift, and go to state 262

    $default	reduce using rule 124 (optkeyarglist)



state 301

    msgsend  ->  name '(' arglist1 optkeyarglist ')' . blocklist   (rule 47)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 97)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '=' 	shift, and go to state 336
    '{' 	shift, and go to state 23

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 337
    blockliteral	go to state 121
    block	go to state 43



state 302

    msgsend  ->  name '(' arglistv1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (msgsend)



state 303

    expr1  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 67)

    $default	reduce using rule 67 (expr1)



state 304

    expr1  ->  classname '(' arglistv1 optkeyarglist ')' .   (rule 68)

    $default	reduce using rule 68 (expr1)



state 305

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 121)

    $default	reduce using rule 121 (keyarglist1)



state 306

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 338



state 307

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 339



state 308

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 340



state 309

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 341



state 310

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 342



state 311

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 343
    '>' 	shift, and go to state 344
    READWRITEVAR	shift, and go to state 345

    $default	reduce using rule 194 (rwspec)

    rwslotdeflist	go to state 346
    rwslotdef	go to state 347
    rwspec	go to state 348



state 312

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 343
    '>' 	shift, and go to state 344
    READWRITEVAR	shift, and go to state 345

    $default	reduce using rule 194 (rwspec)

    rwslotdeflist	go to state 349
    rwslotdef	go to state 347
    rwspec	go to state 348



state 313

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 314

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 99
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 265
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '}' 	shift, and go to state 350

    methoddef	go to state 267
    name	go to state 268
    binop	go to state 269



state 315

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 167)

    $default	reduce using rule 167 (argdecls)



state 316

    argdecls  ->  '|' slotdeflist0 ELLIPSIS name '|' .   (rule 169)

    $default	reduce using rule 169 (argdecls)



state 317

    arrayelems1  ->  arrayelems1 ',' exprseq ':' exprseq .   (rule 115)

    $default	reduce using rule 115 (arrayelems1)



state 318

    valrange2  ->  exprseq ',' exprseq DOTDOT exprseq .   (rule 86)

    $default	reduce using rule 86 (valrange2)



state 319

    listlit2  ->  classname '[' literallistc ']' .   (rule 189)

    $default	reduce using rule 189 (listlit2)



state 320

    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' . expr   (rule 76)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 351
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 321

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' . expr   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 352
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 322

    valrangex1  ->  expr1 '[' arglist1 DOTDOT exprseq ']' .   (rule 74)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 77)

    '=' 	shift, and go to state 353

    $default	reduce using rule 74 (valrangex1)



state 323

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr1 '[' arglist1 ']' '=' expr .   (rule 99)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 99 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 324

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' .   (rule 79)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' . '=' expr   (rule 82)

    '=' 	shift, and go to state 354

    $default	reduce using rule 79 (valrangexd)



state 325

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' .   (rule 78)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' . '=' expr   (rule 81)

    '=' 	shift, and go to state 355

    $default	reduce using rule 78 (valrangexd)



state 326

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']'   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq . ']' '=' expr   (rule 83)

    ']' 	shift, and go to state 356



state 327

    expr  ->  expr '.' '[' arglist1 ']' '=' . expr   (rule 100)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 357
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 328

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' . blocklist   (rule 51)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 358
    blockliteral	go to state 121
    block	go to state 43



state 329

    msgsend  ->  expr '.' '(' arglistv1 optkeyarglist ')' .   (rule 52)

    $default	reduce using rule 52 (msgsend)



state 330

    msgsend  ->  expr '.' '(' keyarglist1 ')' blocklist .   (rule 49)

    $default	reduce using rule 49 (msgsend)



state 331

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist . ')' blocklist   (rule 53)

    ')' 	shift, and go to state 359



state 332

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist . ')'   (rule 54)

    ')' 	shift, and go to state 360



state 333

    msgsend  ->  expr '.' name '(' keyarglist1 ')' . blocklist   (rule 50)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 361
    blockliteral	go to state 121
    block	go to state 43



state 334

    adverb  ->  '.' '(' exprseq ')' .   (rule 104)

    $default	reduce using rule 104 (adverb)



state 335

    arglistv1  ->  arglist1 ',' '*' exprseq .   (rule 119)

    $default	reduce using rule 119 (arglistv1)



state 336

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 97)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 362
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 337

    msgsend  ->  name '(' arglist1 optkeyarglist ')' blocklist .   (rule 47)

    $default	reduce using rule 47 (msgsend)



state 338

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 363



state 339

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 68
    '|' 	shift, and go to state 69

    $default	reduce using rule 165 (argdecls)

    argdecls	go to state 364



state 340

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 365



state 341

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 366



state 342

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 367



state 343

    rwspec  ->  '<' .   (rule 195)

    $default	reduce using rule 195 (rwspec)



state 344

    rwspec  ->  '>' .   (rule 197)

    $default	reduce using rule 197 (rwspec)



state 345

    rwspec  ->  READWRITEVAR .   (rule 196)

    $default	reduce using rule 196 (rwspec)



state 346

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 183)

    ';' 	shift, and go to state 368
    ',' 	shift, and go to state 369



state 347

    rwslotdeflist  ->  rwslotdef .   (rule 182)

    $default	reduce using rule 182 (rwslotdeflist)



state 348

    rwslotdef  ->  rwspec . name   (rule 184)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 185)

    NAME	shift, and go to state 6

    name	go to state 370



state 349

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 183)

    ';' 	shift, and go to state 371
    ',' 	shift, and go to state 369



state 350

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 351

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' DOTDOT exprseq ']' '=' expr .   (rule 76)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 76 (valrangeassign)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 352

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT ']' '=' expr .   (rule 75)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 75 (valrangeassign)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 353

    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 372
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 354

    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' . expr   (rule 82)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 373
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 355

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' . expr   (rule 81)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 374
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 356

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' .   (rule 80)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' . '=' expr   (rule 83)

    '=' 	shift, and go to state 375

    $default	reduce using rule 80 (valrangexd)



state 357

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)
    expr  ->  expr '.' '[' arglist1 ']' '=' expr .   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 100 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 358

    msgsend  ->  expr '.' '(' arglist1 optkeyarglist ')' blocklist .   (rule 51)

    $default	reduce using rule 51 (msgsend)



state 359

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' . blocklist   (rule 53)

    BEGINCLOSEDFUNC	shift, and go to state 20
    '{' 	shift, and go to state 23

    $default	reduce using rule 44 (blocklist)

    blocklist1	go to state 247
    blocklist	go to state 376
    blockliteral	go to state 121
    block	go to state 43



state 360

    msgsend  ->  expr '.' name '(' arglistv1 optkeyarglist ')' .   (rule 54)

    $default	reduce using rule 54 (msgsend)



state 361

    msgsend  ->  expr '.' name '(' keyarglist1 ')' blocklist .   (rule 50)

    $default	reduce using rule 50 (msgsend)



state 362

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 97)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 97 (expr)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 363

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 377



state 364

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 160 (funcvardecls)

    funcvardecls	go to state 378



state 365

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 379
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 380
    funcvardecl	go to state 215
    primname	go to state 381



state 366

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 379
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 382
    funcvardecl	go to state 215
    primname	go to state 381



state 367

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 311
    CLASSVAR	shift, and go to state 312

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 313
    methods	go to state 383



state 368

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 369

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 183)

    '<' 	shift, and go to state 343
    '>' 	shift, and go to state 344
    READWRITEVAR	shift, and go to state 345

    $default	reduce using rule 194 (rwspec)

    rwslotdef	go to state 384
    rwspec	go to state 348



state 370

    rwslotdef  ->  rwspec name .   (rule 184)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 185)

    '=' 	shift, and go to state 385

    $default	reduce using rule 184 (rwslotdef)



state 371

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 372

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangeassign  ->  expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 77)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 77 (valrangeassign)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 373

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr '.' '[' DOTDOT exprseq ']' '=' expr .   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 82 (valrangexd)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 374

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT ']' '=' expr .   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 81 (valrangexd)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 375

    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' . expr   (rule 83)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 386
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 376

    msgsend  ->  expr '.' name '(' arglist1 optkeyarglist ')' blocklist .   (rule 53)

    $default	reduce using rule 53 (msgsend)



state 377

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 379
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 387
    funcvardecl	go to state 215
    primname	go to state 381



state 378

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 161)

    PRIMITIVENAME	shift, and go to state 379
    VAR 	shift, and go to state 14

    $default	reduce using rule 36 (primitive)

    primitive	go to state 388
    funcvardecl	go to state 215
    primname	go to state 381



state 379

    primname  ->  PRIMITIVENAME .   (rule 213)

    $default	reduce using rule 213 (primname)



state 380

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 389
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 390
    retval	go to state 391
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 392
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 381

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 393



state 382

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 389
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 394
    retval	go to state 391
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 392
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 383

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 99
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 265
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '}' 	shift, and go to state 395

    methoddef	go to state 267
    name	go to state 268
    binop	go to state 269



state 384

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 183)

    $default	reduce using rule 183 (rwslotdeflist)



state 385

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 185)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 21
    '#' 	shift, and go to state 199

    slotliteral	go to state 396
    listlit	go to state 201
    integer	go to state 202
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 203
    trueobj	go to state 204
    falseobj	go to state 205
    nilobj	go to state 206
    ascii	go to state 207
    symbol	go to state 208
    string	go to state 209



state 386

    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    valrangexd  ->  expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr .   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107

    $default	reduce using rule 83 (valrangexd)

    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 387

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 389
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 397
    retval	go to state 391
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 392
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 388

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '^' 	shift, and go to state 389
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    $default	reduce using rule 38 (retval)

    methbody	go to state 398
    retval	go to state 391
    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 37
    exprn	go to state 38
    exprseq	go to state 392
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 389

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    ACCIDENTAL	shift, and go to state 9
    SYMBOL	shift, and go to state 10
    STRING	shift, and go to state 11
    ASCII	shift, and go to state 12
    CLASSNAME	shift, and go to state 13
    NILOBJ	shift, and go to state 15
    TRUEOBJ	shift, and go to state 16
    FALSEOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    BEGINCLOSEDFUNC	shift, and go to state 20
    '-' 	shift, and go to state 21
    '`' 	shift, and go to state 22
    '{' 	shift, and go to state 23
    '[' 	shift, and go to state 24
    '(' 	shift, and go to state 75
    '~' 	shift, and go to state 27
    '#' 	shift, and go to state 28

    msgsend	go to state 32
    expr1	go to state 33
    valrangex1	go to state 34
    valrangeassign	go to state 35
    valrangexd	go to state 36
    expr	go to state 399
    blockliteral	go to state 40
    pushname	go to state 41
    pushliteral	go to state 42
    block	go to state 43
    listlit	go to state 46
    integer	go to state 47
    floatr	go to state 48
    accidental	go to state 49
    pie 	go to state 50
    floatp	go to state 51
    name	go to state 52
    classname	go to state 53
    trueobj	go to state 54
    falseobj	go to state 55
    nilobj	go to state 56
    ascii	go to state 57
    symbol	go to state 58
    string	go to state 59
    pseudovar	go to state 60



state 390

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 400



state 391

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 392

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 389

    $default	reduce using rule 38 (retval)

    retval	go to state 401



state 393

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 394

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 402



state 395

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 396

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 185)

    $default	reduce using rule 185 (rwslotdef)



state 397

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 403



state 398

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 404



state 399

    retval  ->  '^' expr . optsemi   (rule 39)
    msgsend  ->  expr . '.' '(' keyarglist1 ')' blocklist   (rule 49)
    msgsend  ->  expr . '.' name '(' keyarglist1 ')' blocklist   (rule 50)
    msgsend  ->  expr . '.' '(' arglist1 optkeyarglist ')' blocklist   (rule 51)
    msgsend  ->  expr . '.' '(' arglistv1 optkeyarglist ')'   (rule 52)
    msgsend  ->  expr . '.' name '(' arglist1 optkeyarglist ')' blocklist   (rule 53)
    msgsend  ->  expr . '.' name '(' arglistv1 optkeyarglist ')'   (rule 54)
    msgsend  ->  expr . '.' name blocklist   (rule 55)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']'   (rule 78)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']'   (rule 79)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']'   (rule 80)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT ']' '=' expr   (rule 81)
    valrangexd  ->  expr . '.' '[' DOTDOT exprseq ']' '=' expr   (rule 82)
    valrangexd  ->  expr . '.' '[' arglist1 DOTDOT exprseq ']' '=' expr   (rule 83)
    expr  ->  expr . '.' '[' arglist1 ']'   (rule 90)
    expr  ->  expr . binop2 adverb expr   (rule 93)
    expr  ->  expr . '.' name '=' expr   (rule 96)
    expr  ->  expr . '.' '[' arglist1 ']' '=' expr   (rule 100)

    BINOP	shift, and go to state 99
    KEYBINOP	shift, and go to state 78
    '-' 	shift, and go to state 100
    '<' 	shift, and go to state 101
    '>' 	shift, and go to state 102
    '*' 	shift, and go to state 103
    '+' 	shift, and go to state 104
    '|' 	shift, and go to state 105
    READWRITEVAR	shift, and go to state 106
    '.' 	shift, and go to state 107
    ';' 	shift, and go to state 152

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 405
    binop	go to state 108
    keybinop	go to state 109
    binop2	go to state 110



state 400

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 401

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 402

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 403

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 404

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 405

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 406

    $   	go to state 407



state 407

    $   	go to state 408



state 408

    $default	accept
