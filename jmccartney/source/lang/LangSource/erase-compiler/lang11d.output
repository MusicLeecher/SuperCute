

Terminals which are not used:

   CONST
   BADTOKEN


Conflict in state 65 between rule 50 and token BINOP resolved as reduce.
Conflict in state 65 between rule 50 and token KEYBINOP resolved as reduce.
Conflict in state 65 between rule 50 and token '-' resolved as reduce.
Conflict in state 65 between rule 50 and token '<' resolved as reduce.
Conflict in state 65 between rule 50 and token '>' resolved as reduce.
Conflict in state 65 between rule 50 and token '*' resolved as reduce.
Conflict in state 65 between rule 50 and token '+' resolved as reduce.
Conflict in state 65 between rule 50 and token READWRITEVAR resolved as reduce.
Conflict in state 65 between rule 50 and token '.' resolved as reduce.
Conflict in state 144 between rule 51 and token BINOP resolved as reduce.
Conflict in state 144 between rule 51 and token KEYBINOP resolved as reduce.
Conflict in state 144 between rule 51 and token '-' resolved as reduce.
Conflict in state 144 between rule 51 and token '<' resolved as reduce.
Conflict in state 144 between rule 51 and token '>' resolved as reduce.
Conflict in state 144 between rule 51 and token '*' resolved as reduce.
Conflict in state 144 between rule 51 and token '+' resolved as reduce.
Conflict in state 144 between rule 51 and token READWRITEVAR resolved as reduce.
Conflict in state 144 between rule 51 and token '.' resolved as shift.
Conflict in state 145 between rule 52 and token BINOP resolved as reduce.
Conflict in state 145 between rule 52 and token KEYBINOP resolved as reduce.
Conflict in state 145 between rule 52 and token '-' resolved as reduce.
Conflict in state 145 between rule 52 and token '<' resolved as reduce.
Conflict in state 145 between rule 52 and token '>' resolved as reduce.
Conflict in state 145 between rule 52 and token '*' resolved as reduce.
Conflict in state 145 between rule 52 and token '+' resolved as reduce.
Conflict in state 145 between rule 52 and token READWRITEVAR resolved as reduce.
Conflict in state 145 between rule 52 and token '.' resolved as shift.
Conflict in state 147 between rule 61 and token BINOP resolved as shift.
Conflict in state 147 between rule 61 and token KEYBINOP resolved as shift.
Conflict in state 147 between rule 61 and token '-' resolved as shift.
Conflict in state 147 between rule 61 and token '<' resolved as shift.
Conflict in state 147 between rule 61 and token '>' resolved as shift.
Conflict in state 147 between rule 61 and token '*' resolved as shift.
Conflict in state 147 between rule 61 and token '+' resolved as shift.
Conflict in state 147 between rule 61 and token READWRITEVAR resolved as shift.
Conflict in state 147 between rule 61 and token '.' resolved as shift.
Conflict in state 178 between rule 62 and token BINOP resolved as shift.
Conflict in state 178 between rule 62 and token KEYBINOP resolved as shift.
Conflict in state 178 between rule 62 and token '-' resolved as shift.
Conflict in state 178 between rule 62 and token '<' resolved as shift.
Conflict in state 178 between rule 62 and token '>' resolved as shift.
Conflict in state 178 between rule 62 and token '*' resolved as shift.
Conflict in state 178 between rule 62 and token '+' resolved as shift.
Conflict in state 178 between rule 62 and token READWRITEVAR resolved as shift.
Conflict in state 178 between rule 62 and token '.' resolved as shift.
Conflict in state 185 between rule 65 and token BINOP resolved as shift.
Conflict in state 185 between rule 65 and token KEYBINOP resolved as shift.
Conflict in state 185 between rule 65 and token '-' resolved as shift.
Conflict in state 185 between rule 65 and token '<' resolved as shift.
Conflict in state 185 between rule 65 and token '>' resolved as shift.
Conflict in state 185 between rule 65 and token '*' resolved as shift.
Conflict in state 185 between rule 65 and token '+' resolved as shift.
Conflict in state 185 between rule 65 and token READWRITEVAR resolved as shift.
Conflict in state 185 between rule 65 and token '.' resolved as shift.
Conflict in state 216 between rule 63 and token BINOP resolved as shift.
Conflict in state 216 between rule 63 and token KEYBINOP resolved as shift.
Conflict in state 216 between rule 63 and token '-' resolved as shift.
Conflict in state 216 between rule 63 and token '<' resolved as shift.
Conflict in state 216 between rule 63 and token '>' resolved as shift.
Conflict in state 216 between rule 63 and token '*' resolved as shift.
Conflict in state 216 between rule 63 and token '+' resolved as shift.
Conflict in state 216 between rule 63 and token READWRITEVAR resolved as shift.
Conflict in state 216 between rule 63 and token '.' resolved as shift.
Conflict in state 253 between rule 64 and token BINOP resolved as shift.
Conflict in state 253 between rule 64 and token KEYBINOP resolved as shift.
Conflict in state 253 between rule 64 and token '-' resolved as shift.
Conflict in state 253 between rule 64 and token '<' resolved as shift.
Conflict in state 253 between rule 64 and token '>' resolved as shift.
Conflict in state 253 between rule 64 and token '*' resolved as shift.
Conflict in state 253 between rule 64 and token '+' resolved as shift.
Conflict in state 253 between rule 64 and token READWRITEVAR resolved as shift.
Conflict in state 253 between rule 64 and token '.' resolved as shift.

Grammar
rule 1    root -> classes
rule 2    root -> classextensions
rule 3    root -> INTERPRET cmdlinecode
rule 4    classes ->		/* empty */
rule 5    classes -> classes classdef
rule 6    classextensions -> classextension
rule 7    classextensions -> classextensions classextension
rule 8    classdef -> classname superclass '{' classvardecls methods '}'
rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'
rule 10   classextension -> '+' classname '{' methods '}'
rule 11   optname ->		/* empty */
rule 12   optname -> name
rule 13   superclass ->		/* empty */
rule 14   superclass -> ':' classname
rule 15   classvardecls ->		/* empty */
rule 16   classvardecls -> classvardecls classvardecl
rule 17   classvardecl -> CLASSVAR rwslotdeflist ';'
rule 18   classvardecl -> VAR rwslotdeflist ';'
rule 19   methods ->		/* empty */
rule 20   methods -> methods methoddef
rule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'
rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'
rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'
rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'
rule 25   optsemi ->		/* empty */
rule 26   optsemi -> ';'
rule 27   optcomma ->		/* empty */
rule 28   optcomma -> ','
rule 29   funcbody -> funretval
rule 30   funcbody -> exprseq funretval
rule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'
rule 32   cmdlinecode -> funcvardecls1 funcbody
rule 33   cmdlinecode -> funcbody
rule 34   methbody -> retval
rule 35   methbody -> exprseq retval
rule 36   primitive ->		/* empty */
rule 37   primitive -> primname optsemi
rule 38   retval ->		/* empty */
rule 39   retval -> '^' expr optsemi
rule 40   funretval ->		/* empty */
rule 41   funretval -> '^' expr optsemi
rule 42   expr -> pushliteral
rule 43   expr -> name
rule 44   expr -> '~' name
rule 45   expr -> pseudovar
rule 46   expr -> classname
rule 47   expr -> classname '(' keyarglist1 ')'
rule 48   expr -> classname '(' arglist1 optkeyarglist ')'
rule 49   expr -> '(' exprseq ')'
rule 50   expr -> '`' expr
rule 51   expr -> expr binop expr
rule 52   expr -> expr keybinop expr
rule 53   expr -> name '(' arglist1 optkeyarglist ')'
rule 54   expr -> expr '.' '(' keyarglist1 ')'
rule 55   expr -> expr '.' name '(' keyarglist1 ')'
rule 56   expr -> expr '.' '(' arglist1 optkeyarglist ')'
rule 57   expr -> expr '.' name '(' arglist1 optkeyarglist ')'
rule 58   expr -> expr '.' name
rule 59   expr -> '[' arglistc ']'
rule 60   expr -> classname '[' arglistc ']'
rule 61   expr -> name '=' expr
rule 62   expr -> '~' name '=' expr
rule 63   expr -> expr '.' name '=' expr
rule 64   expr -> name '(' arglist1 optkeyarglist ')' '=' expr
rule 65   expr -> '#' mavars '=' expr
rule 66   exprn -> expr
rule 67   exprn -> exprn ';' expr
rule 68   exprseq -> exprn optsemi
rule 69   arglistc ->		/* empty */
rule 70   arglistc -> arglist1 optcomma
rule 71   arglist1 -> exprseq
rule 72   arglist1 -> arglist1 ',' exprseq
rule 73   keyarglist1 -> keyarg
rule 74   keyarglist1 -> keyarglist1 ',' keyarg
rule 75   keyarg -> keybinop exprseq
rule 76   optkeyarglist ->		/* empty */
rule 77   optkeyarglist -> ',' keyarglist1
rule 78   mavars -> mavarlist
rule 79   mavars -> mavarlist ELLIPSIS name
rule 80   mavarlist -> name
rule 81   mavarlist -> mavarlist ',' name
rule 82   slotliteral -> integer
rule 83   slotliteral -> floatp
rule 84   slotliteral -> ascii
rule 85   slotliteral -> string
rule 86   slotliteral -> symbol
rule 87   slotliteral -> trueobj
rule 88   slotliteral -> falseobj
rule 89   slotliteral -> nilobj
rule 90   slotliteral -> infobj
rule 91   slotliteral -> listlit
rule 92   pushliteral -> integer
rule 93   pushliteral -> floatp
rule 94   pushliteral -> ascii
rule 95   pushliteral -> string
rule 96   pushliteral -> symbol
rule 97   pushliteral -> trueobj
rule 98   pushliteral -> falseobj
rule 99   pushliteral -> nilobj
rule 100  pushliteral -> infobj
rule 101  pushliteral -> block
rule 102  pushliteral -> listlit
rule 103  listliteral -> integer
rule 104  listliteral -> floatp
rule 105  listliteral -> ascii
rule 106  listliteral -> string
rule 107  listliteral -> symbol
rule 108  listliteral -> trueobj
rule 109  listliteral -> falseobj
rule 110  listliteral -> nilobj
rule 111  listliteral -> infobj
rule 112  listliteral -> listlit2
rule 113  block -> '{' argdecls funcvardecls funcbody '}'
rule 114  block -> '#' '{' argdecls funcvardecls funcbody '}'
rule 115  funcvardecls ->		/* empty */
rule 116  funcvardecls -> funcvardecls funcvardecl
rule 117  funcvardecls1 -> funcvardecl
rule 118  funcvardecls1 -> funcvardecls1 funcvardecl
rule 119  funcvardecl -> VAR slotdeflist ';'
rule 120  argdecls ->		/* empty */
rule 121  argdecls -> ARG slotdeflist ';'
rule 122  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'
rule 123  slotdeflist0 ->		/* empty */
rule 124  slotdeflist0 -> slotdeflist
rule 125  slotdeflist -> slotdef
rule 126  slotdeflist -> slotdeflist ',' slotdef
rule 127  slotdef -> name
rule 128  slotdef -> name '=' slotliteral
rule 129  rwslotdeflist -> rwslotdef
rule 130  rwslotdeflist -> rwslotdeflist ',' rwslotdef
rule 131  rwslotdef -> rwspec name
rule 132  rwslotdef -> rwspec name '=' slotliteral
rule 133  listlit -> '#' '[' literallistc ']'
rule 134  listlit -> '#' classname '[' literallistc ']'
rule 135  listlit2 -> '[' literallistc ']'
rule 136  listlit2 -> classname '[' literallistc ']'
rule 137  literallistc ->		/* empty */
rule 138  literallistc -> literallist1 optcomma
rule 139  literallist1 -> listliteral
rule 140  literallist1 -> literallist1 ',' listliteral
rule 141  rwspec ->		/* empty */
rule 142  rwspec -> '<'
rule 143  rwspec -> READWRITEVAR
rule 144  rwspec -> '>'
rule 145  integer -> INTEGER
rule 146  integer -> '-' INTEGER
rule 147  floatr -> FLOAT
rule 148  floatr -> '-' FLOAT
rule 149  pie -> PIE
rule 150  floatp -> floatr
rule 151  floatp -> floatr pie
rule 152  floatp -> integer pie
rule 153  floatp -> pie
rule 154  floatp -> '-' pie
rule 155  name -> NAME
rule 156  classname -> CLASSNAME
rule 157  primname -> PRIMITIVENAME
rule 158  trueobj -> TRUEOBJ
rule 159  falseobj -> FALSEOBJ
rule 160  nilobj -> NILOBJ
rule 161  infobj -> INFINITUMOBJ
rule 162  ascii -> ASCII
rule 163  symbol -> SYMBOL
rule 164  string -> string1
rule 165  string -> string string1
rule 166  string1 -> STRING
rule 167  pseudovar -> PSEUDOVAR
rule 168  binop -> BINOP
rule 169  binop -> READWRITEVAR
rule 170  binop -> '<'
rule 171  binop -> '>'
rule 172  binop -> '-'
rule 173  binop -> '*'
rule 174  binop -> '+'
rule 175  keybinop -> KEYBINOP

Terminals, with rules where they appear

$ (-1)
'#' (35) 65 114 133 134
'(' (40) 31 47 48 49 53 54 55 56 57 64
')' (41) 31 47 48 49 53 54 55 56 57 64
'*' (42) 22 24 173
'+' (43) 10 174
',' (44) 28 72 74 77 81 126 130 140
'-' (45) 146 148 154 172
'.' (46) 54 55 56 57 58 63
':' (58) 14
';' (59) 17 18 26 67 119 121 122
'<' (60) 142 170
'=' (61) 61 62 63 64 65 128 132
'>' (62) 144 171
'[' (91) 9 59 60 133 134 135 136
']' (93) 9 59 60 133 134 135 136
'^' (94) 39 41
'`' (96) 50
'{' (123) 8 9 10 21 22 23 24 113 114
'}' (125) 8 9 10 21 22 23 24 113 114
'~' (126) 44 62
error (256)
NAME (257) 155
INTEGER (258) 145 146
FLOAT (259) 147 148
SYMBOL (260) 163
STRING (261) 166
ASCII (262) 162
PRIMITIVENAME (263) 157
CLASSNAME (264) 156
VAR (265) 18 119
ARG (266) 121 122
CLASSVAR (267) 17
CONST (268)
NILOBJ (269) 160
TRUEOBJ (270) 158
FALSEOBJ (271) 159
INFINITUMOBJ (272) 161
PSEUDOVAR (273) 167
ELLIPSIS (274) 79 122
PIE (275) 149
BADTOKEN (276)
INTERPRET (277) 3
BINOP (278) 168
KEYBINOP (279) 175
READWRITEVAR (280) 143 169
UMINUS (281)

Nonterminals, with rules where they appear

root (48)
    on left: 1 2 3
classes (49)
    on left: 4 5, on right: 1 5
classextensions (50)
    on left: 6 7, on right: 2 7
classdef (51)
    on left: 8 9, on right: 5
classextension (52)
    on left: 10, on right: 6 7
optname (53)
    on left: 11 12, on right: 9
superclass (54)
    on left: 13 14, on right: 8 9
classvardecls (55)
    on left: 15 16, on right: 8 9 16
classvardecl (56)
    on left: 17 18, on right: 16
methods (57)
    on left: 19 20, on right: 8 9 10 20
methoddef (58)
    on left: 21 22 23 24, on right: 20
optsemi (59)
    on left: 25 26, on right: 37 39 41 68
optcomma (60)
    on left: 27 28, on right: 70 138
funcbody (61)
    on left: 29 30, on right: 31 32 33 113 114
cmdlinecode (62)
    on left: 31 32 33, on right: 3
methbody (63)
    on left: 34 35, on right: 21 22 23 24
primitive (64)
    on left: 36 37, on right: 21 22 23 24
retval (65)
    on left: 38 39, on right: 34 35
funretval (66)
    on left: 40 41, on right: 29 30
expr (67)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62 63 64 65, on right: 39 41 50 51 52 54 55 56 57 58 61 62
    63 64 65 66 67
exprn (68)
    on left: 66 67, on right: 67 68
exprseq (69)
    on left: 68, on right: 30 35 49 71 72 75
arglistc (70)
    on left: 69 70, on right: 59 60
arglist1 (71)
    on left: 71 72, on right: 48 53 56 57 64 70 72
keyarglist1 (72)
    on left: 73 74, on right: 47 54 55 74 77
keyarg (73)
    on left: 75, on right: 73 74
optkeyarglist (74)
    on left: 76 77, on right: 48 53 56 57 64
mavars (75)
    on left: 78 79, on right: 65
mavarlist (76)
    on left: 80 81, on right: 78 79 81
slotliteral (77)
    on left: 82 83 84 85 86 87 88 89 90 91, on right: 128 132
pushliteral (78)
    on left: 92 93 94 95 96 97 98 99 100 101 102, on right: 42
listliteral (79)
    on left: 103 104 105 106 107 108 109 110 111 112,
    on right: 139 140
block (80)
    on left: 113 114, on right: 101
funcvardecls (81)
    on left: 115 116, on right: 21 22 23 24 113 114 116
funcvardecls1 (82)
    on left: 117 118, on right: 31 32 118
funcvardecl (83)
    on left: 119, on right: 116 117 118
argdecls (84)
    on left: 120 121 122, on right: 21 22 23 24 113 114
slotdeflist0 (85)
    on left: 123 124, on right: 122
slotdeflist (86)
    on left: 125 126, on right: 119 121 124 126
slotdef (87)
    on left: 127 128, on right: 125 126
rwslotdeflist (88)
    on left: 129 130, on right: 17 18 130
rwslotdef (89)
    on left: 131 132, on right: 129 130
listlit (90)
    on left: 133 134, on right: 91 102
listlit2 (91)
    on left: 135 136, on right: 112
literallistc (92)
    on left: 137 138, on right: 133 134 135 136
literallist1 (93)
    on left: 139 140, on right: 138 140
rwspec (94)
    on left: 141 142 143 144, on right: 131 132
integer (95)
    on left: 145 146, on right: 82 92 103 152
floatr (96)
    on left: 147 148, on right: 150 151
pie (97)
    on left: 149, on right: 151 152 153 154
floatp (98)
    on left: 150 151 152 153 154, on right: 83 93 104
name (99)
    on left: 155, on right: 12 21 22 43 44 53 55 57 58 61 62 63 64
    79 80 81 122 127 128 131 132
classname (100)
    on left: 156, on right: 8 9 10 14 46 47 48 60 134 136
primname (101)
    on left: 157, on right: 37
trueobj (102)
    on left: 158, on right: 87 97 108
falseobj (103)
    on left: 159, on right: 88 98 109
nilobj (104)
    on left: 160, on right: 89 99 110
infobj (105)
    on left: 161, on right: 90 100 111
ascii (106)
    on left: 162, on right: 84 94 105
symbol (107)
    on left: 163, on right: 86 96 107
string (108)
    on left: 164 165, on right: 85 95 106 165
string1 (109)
    on left: 166, on right: 164 165
pseudovar (110)
    on left: 167, on right: 45
binop (111)
    on left: 168 169 170 171 172 173 174, on right: 23 24 51
keybinop (112)
    on left: 175, on right: 52 75


state 0

    INTERPRET	shift, and go to state 1
    '+' 	shift, and go to state 2

    $default	reduce using rule 4 (classes)

    root	go to state 291
    classes	go to state 3
    classextensions	go to state 4
    classextension	go to state 5



state 1

    root  ->  INTERPRET . cmdlinecode   (rule 3)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 24
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 28
    cmdlinecode	go to state 29
    funretval	go to state 30
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 33
    pushliteral	go to state 34
    block	go to state 35
    funcvardecls1	go to state 36
    funcvardecl	go to state 37
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 2

    classextension  ->  '+' . classname '{' methods '}'   (rule 10)

    CLASSNAME	shift, and go to state 12

    classname	go to state 54



state 3

    root  ->  classes .   (rule 1)
    classes  ->  classes . classdef   (rule 5)

    CLASSNAME	shift, and go to state 12

    $default	reduce using rule 1 (root)

    classdef	go to state 55
    classname	go to state 56



state 4

    root  ->  classextensions .   (rule 2)
    classextensions  ->  classextensions . classextension   (rule 7)

    '+' 	shift, and go to state 2

    $default	reduce using rule 2 (root)

    classextension	go to state 57



state 5

    classextensions  ->  classextension .   (rule 6)

    $default	reduce using rule 6 (classextensions)



state 6

    name  ->  NAME .   (rule 155)

    $default	reduce using rule 155 (name)



state 7

    integer  ->  INTEGER .   (rule 145)

    $default	reduce using rule 145 (integer)



state 8

    floatr  ->  FLOAT .   (rule 147)

    $default	reduce using rule 147 (floatr)



state 9

    symbol  ->  SYMBOL .   (rule 163)

    $default	reduce using rule 163 (symbol)



state 10

    string1  ->  STRING .   (rule 166)

    $default	reduce using rule 166 (string1)



state 11

    ascii  ->  ASCII .   (rule 162)

    $default	reduce using rule 162 (ascii)



state 12

    classname  ->  CLASSNAME .   (rule 156)

    $default	reduce using rule 156 (classname)



state 13

    funcvardecl  ->  VAR . slotdeflist ';'   (rule 119)

    NAME	shift, and go to state 6

    slotdeflist	go to state 58
    slotdef	go to state 59
    name	go to state 60



state 14

    nilobj  ->  NILOBJ .   (rule 160)

    $default	reduce using rule 160 (nilobj)



state 15

    trueobj  ->  TRUEOBJ .   (rule 158)

    $default	reduce using rule 158 (trueobj)



state 16

    falseobj  ->  FALSEOBJ .   (rule 159)

    $default	reduce using rule 159 (falseobj)



state 17

    infobj  ->  INFINITUMOBJ .   (rule 161)

    $default	reduce using rule 161 (infobj)



state 18

    pseudovar  ->  PSEUDOVAR .   (rule 167)

    $default	reduce using rule 167 (pseudovar)



state 19

    pie  ->  PIE .   (rule 149)

    $default	reduce using rule 149 (pie)



state 20

    integer  ->  '-' . INTEGER   (rule 146)
    floatr  ->  '-' . FLOAT   (rule 148)
    floatp  ->  '-' . pie   (rule 154)

    INTEGER	shift, and go to state 61
    FLOAT	shift, and go to state 62
    PIE 	shift, and go to state 19

    pie 	go to state 63



state 21

    expr  ->  '`' . expr   (rule 50)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 65
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 22

    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 113)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 67



state 23

    expr  ->  '[' . arglistc ']'   (rule 59)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 69 (arglistc)

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglistc	go to state 69
    arglist1	go to state 70
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 24

    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)
    expr  ->  '(' . exprseq ')'   (rule 49)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 71
    pushliteral	go to state 34
    block	go to state 35
    funcvardecls1	go to state 72
    funcvardecl	go to state 37
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 25

    funretval  ->  '^' . expr optsemi   (rule 41)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 73
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 26

    expr  ->  '~' . name   (rule 44)
    expr  ->  '~' . name '=' expr   (rule 62)

    NAME	shift, and go to state 6

    name	go to state 74



state 27

    expr  ->  '#' . mavars '=' expr   (rule 65)
    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 114)
    listlit  ->  '#' . '[' literallistc ']'   (rule 133)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 134)

    NAME	shift, and go to state 6
    CLASSNAME	shift, and go to state 12
    '{' 	shift, and go to state 75
    '[' 	shift, and go to state 76

    mavars	go to state 77
    mavarlist	go to state 78
    name	go to state 79
    classname	go to state 80



state 28

    cmdlinecode  ->  funcbody .   (rule 33)

    $default	reduce using rule 33 (cmdlinecode)



state 29

    root  ->  INTERPRET cmdlinecode .   (rule 3)

    $default	reduce using rule 3 (root)



state 30

    funcbody  ->  funretval .   (rule 29)

    $default	reduce using rule 29 (funcbody)



state 31

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)
    exprn  ->  expr .   (rule 66)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 66 (exprn)

    binop	go to state 90
    keybinop	go to state 91



state 32

    exprn  ->  exprn . ';' expr   (rule 67)
    exprseq  ->  exprn . optsemi   (rule 68)

    ';' 	shift, and go to state 92

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 93



state 33

    funcbody  ->  exprseq . funretval   (rule 30)

    '^' 	shift, and go to state 25

    $default	reduce using rule 40 (funretval)

    funretval	go to state 94



state 34

    expr  ->  pushliteral .   (rule 42)

    $default	reduce using rule 42 (expr)



state 35

    pushliteral  ->  block .   (rule 101)

    $default	reduce using rule 101 (pushliteral)



state 36

    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 118)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 95
    funretval	go to state 30
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 33
    pushliteral	go to state 34
    block	go to state 35
    funcvardecl	go to state 96
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 37

    funcvardecls1  ->  funcvardecl .   (rule 117)

    $default	reduce using rule 117 (funcvardecls1)



state 38

    pushliteral  ->  listlit .   (rule 102)

    $default	reduce using rule 102 (pushliteral)



state 39

    pushliteral  ->  integer .   (rule 92)
    floatp  ->  integer . pie   (rule 152)

    PIE 	shift, and go to state 19

    $default	reduce using rule 92 (pushliteral)

    pie 	go to state 97



state 40

    floatp  ->  floatr .   (rule 150)
    floatp  ->  floatr . pie   (rule 151)

    PIE 	shift, and go to state 19

    $default	reduce using rule 150 (floatp)

    pie 	go to state 98



state 41

    floatp  ->  pie .   (rule 153)

    $default	reduce using rule 153 (floatp)



state 42

    pushliteral  ->  floatp .   (rule 93)

    $default	reduce using rule 93 (pushliteral)



state 43

    expr  ->  name .   (rule 43)
    expr  ->  name . '(' arglist1 optkeyarglist ')'   (rule 53)
    expr  ->  name . '=' expr   (rule 61)
    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 64)

    '=' 	shift, and go to state 99
    '(' 	shift, and go to state 100

    $default	reduce using rule 43 (expr)



state 44

    expr  ->  classname .   (rule 46)
    expr  ->  classname . '(' keyarglist1 ')'   (rule 47)
    expr  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 48)
    expr  ->  classname . '[' arglistc ']'   (rule 60)

    '[' 	shift, and go to state 101
    '(' 	shift, and go to state 102

    $default	reduce using rule 46 (expr)



state 45

    pushliteral  ->  trueobj .   (rule 97)

    $default	reduce using rule 97 (pushliteral)



state 46

    pushliteral  ->  falseobj .   (rule 98)

    $default	reduce using rule 98 (pushliteral)



state 47

    pushliteral  ->  nilobj .   (rule 99)

    $default	reduce using rule 99 (pushliteral)



state 48

    pushliteral  ->  infobj .   (rule 100)

    $default	reduce using rule 100 (pushliteral)



state 49

    pushliteral  ->  ascii .   (rule 94)

    $default	reduce using rule 94 (pushliteral)



state 50

    pushliteral  ->  symbol .   (rule 96)

    $default	reduce using rule 96 (pushliteral)



state 51

    pushliteral  ->  string .   (rule 95)
    string  ->  string . string1   (rule 165)

    STRING	shift, and go to state 10

    $default	reduce using rule 95 (pushliteral)

    string1	go to state 103



state 52

    string  ->  string1 .   (rule 164)

    $default	reduce using rule 164 (string)



state 53

    expr  ->  pseudovar .   (rule 45)

    $default	reduce using rule 45 (expr)



state 54

    classextension  ->  '+' classname . '{' methods '}'   (rule 10)

    '{' 	shift, and go to state 104



state 55

    classes  ->  classes classdef .   (rule 5)

    $default	reduce using rule 5 (classes)



state 56

    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)
    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    '[' 	shift, and go to state 105
    ':' 	shift, and go to state 106

    $default	reduce using rule 13 (superclass)

    superclass	go to state 107



state 57

    classextensions  ->  classextensions classextension .   (rule 7)

    $default	reduce using rule 7 (classextensions)



state 58

    funcvardecl  ->  VAR slotdeflist . ';'   (rule 119)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 126)

    ';' 	shift, and go to state 108
    ',' 	shift, and go to state 109



state 59

    slotdeflist  ->  slotdef .   (rule 125)

    $default	reduce using rule 125 (slotdeflist)



state 60

    slotdef  ->  name .   (rule 127)
    slotdef  ->  name . '=' slotliteral   (rule 128)

    '=' 	shift, and go to state 110

    $default	reduce using rule 127 (slotdef)



state 61

    integer  ->  '-' INTEGER .   (rule 146)

    $default	reduce using rule 146 (integer)



state 62

    floatr  ->  '-' FLOAT .   (rule 148)

    $default	reduce using rule 148 (floatr)



state 63

    floatp  ->  '-' pie .   (rule 154)

    $default	reduce using rule 154 (floatp)



state 64

    expr  ->  '(' . exprseq ')'   (rule 49)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 71
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 65

    expr  ->  '`' expr .   (rule 50)
    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)


    $default	reduce using rule 50 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 66

    argdecls  ->  ARG . slotdeflist ';'   (rule 121)
    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 122)

    NAME	shift, and go to state 6

    $default	reduce using rule 123 (slotdeflist0)

    slotdeflist0	go to state 111
    slotdeflist	go to state 112
    slotdef	go to state 59
    name	go to state 60



state 67

    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 113)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 113



state 68

    arglist1  ->  exprseq .   (rule 71)

    $default	reduce using rule 71 (arglist1)



state 69

    expr  ->  '[' arglistc . ']'   (rule 59)

    ']' 	shift, and go to state 114



state 70

    arglistc  ->  arglist1 . optcomma   (rule 70)
    arglist1  ->  arglist1 . ',' exprseq   (rule 72)

    ',' 	shift, and go to state 115

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 116



state 71

    expr  ->  '(' exprseq . ')'   (rule 49)

    ')' 	shift, and go to state 117



state 72

    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)
    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 118)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 118
    funretval	go to state 30
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 33
    pushliteral	go to state 34
    block	go to state 35
    funcvardecl	go to state 96
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 73

    funretval  ->  '^' expr . optsemi   (rule 41)
    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89
    ';' 	shift, and go to state 119

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 120
    binop	go to state 90
    keybinop	go to state 91



state 74

    expr  ->  '~' name .   (rule 44)
    expr  ->  '~' name . '=' expr   (rule 62)

    '=' 	shift, and go to state 121

    $default	reduce using rule 44 (expr)



state 75

    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 114)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 122



state 76

    listlit  ->  '#' '[' . literallistc ']'   (rule 133)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 123

    $default	reduce using rule 137 (literallistc)

    listliteral	go to state 124
    listlit2	go to state 125
    literallistc	go to state 126
    literallist1	go to state 127
    integer	go to state 128
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 129
    classname	go to state 130
    trueobj	go to state 131
    falseobj	go to state 132
    nilobj	go to state 133
    infobj	go to state 134
    ascii	go to state 135
    symbol	go to state 136
    string	go to state 137
    string1	go to state 52



state 77

    expr  ->  '#' mavars . '=' expr   (rule 65)

    '=' 	shift, and go to state 138



state 78

    mavars  ->  mavarlist .   (rule 78)
    mavars  ->  mavarlist . ELLIPSIS name   (rule 79)
    mavarlist  ->  mavarlist . ',' name   (rule 81)

    ELLIPSIS	shift, and go to state 139
    ',' 	shift, and go to state 140

    $default	reduce using rule 78 (mavars)



state 79

    mavarlist  ->  name .   (rule 80)

    $default	reduce using rule 80 (mavarlist)



state 80

    listlit  ->  '#' classname . '[' literallistc ']'   (rule 134)

    '[' 	shift, and go to state 141



state 81

    binop  ->  BINOP .   (rule 168)

    $default	reduce using rule 168 (binop)



state 82

    keybinop  ->  KEYBINOP .   (rule 175)

    $default	reduce using rule 175 (keybinop)



state 83

    binop  ->  '-' .   (rule 172)

    $default	reduce using rule 172 (binop)



state 84

    binop  ->  '<' .   (rule 170)

    $default	reduce using rule 170 (binop)



state 85

    binop  ->  '>' .   (rule 171)

    $default	reduce using rule 171 (binop)



state 86

    binop  ->  '*' .   (rule 173)

    $default	reduce using rule 173 (binop)



state 87

    binop  ->  '+' .   (rule 174)

    $default	reduce using rule 174 (binop)



state 88

    binop  ->  READWRITEVAR .   (rule 169)

    $default	reduce using rule 169 (binop)



state 89

    expr  ->  expr '.' . '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr '.' . name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr '.' . '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr '.' . name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr '.' . name   (rule 58)
    expr  ->  expr '.' . name '=' expr   (rule 63)

    NAME	shift, and go to state 6
    '(' 	shift, and go to state 142

    name	go to state 143



state 90

    expr  ->  expr binop . expr   (rule 51)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 144
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 91

    expr  ->  expr keybinop . expr   (rule 52)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 145
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 92

    optsemi  ->  ';' .   (rule 26)
    exprn  ->  exprn ';' . expr   (rule 67)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 26 (optsemi)

    expr	go to state 146
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 93

    exprseq  ->  exprn optsemi .   (rule 68)

    $default	reduce using rule 68 (exprseq)



state 94

    funcbody  ->  exprseq funretval .   (rule 30)

    $default	reduce using rule 30 (funcbody)



state 95

    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)

    $default	reduce using rule 32 (cmdlinecode)



state 96

    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 118)

    $default	reduce using rule 118 (funcvardecls1)



state 97

    floatp  ->  integer pie .   (rule 152)

    $default	reduce using rule 152 (floatp)



state 98

    floatp  ->  floatr pie .   (rule 151)

    $default	reduce using rule 151 (floatp)



state 99

    expr  ->  name '=' . expr   (rule 61)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 147
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 100

    expr  ->  name '(' . arglist1 optkeyarglist ')'   (rule 53)
    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglist1	go to state 148
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 101

    expr  ->  classname '[' . arglistc ']'   (rule 60)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 69 (arglistc)

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglistc	go to state 149
    arglist1	go to state 70
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 102

    expr  ->  classname '(' . keyarglist1 ')'   (rule 47)
    expr  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 48)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglist1	go to state 150
    keyarglist1	go to state 151
    keyarg	go to state 152
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53
    keybinop	go to state 153



state 103

    string  ->  string string1 .   (rule 165)

    $default	reduce using rule 165 (string)



state 104

    classextension  ->  '+' classname '{' . methods '}'   (rule 10)

    $default	reduce using rule 19 (methods)

    methods	go to state 154



state 105

    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)

    NAME	shift, and go to state 6

    $default	reduce using rule 11 (optname)

    optname	go to state 155
    name	go to state 156



state 106

    superclass  ->  ':' . classname   (rule 14)

    CLASSNAME	shift, and go to state 12

    classname	go to state 157



state 107

    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)

    '{' 	shift, and go to state 158



state 108

    funcvardecl  ->  VAR slotdeflist ';' .   (rule 119)

    $default	reduce using rule 119 (funcvardecl)



state 109

    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 126)

    NAME	shift, and go to state 6

    slotdef	go to state 159
    name	go to state 60



state 110

    slotdef  ->  name '=' . slotliteral   (rule 128)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 160

    slotliteral	go to state 161
    listlit	go to state 162
    integer	go to state 163
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171
    string1	go to state 52



state 111

    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 122)

    ELLIPSIS	shift, and go to state 172



state 112

    argdecls  ->  ARG slotdeflist . ';'   (rule 121)
    slotdeflist0  ->  slotdeflist .   (rule 124)
    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 126)

    ';' 	shift, and go to state 173
    ',' 	shift, and go to state 109

    $default	reduce using rule 124 (slotdeflist0)



state 113

    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 113)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 174
    funretval	go to state 30
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 33
    pushliteral	go to state 34
    block	go to state 35
    funcvardecl	go to state 175
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 114

    expr  ->  '[' arglistc ']' .   (rule 59)

    $default	reduce using rule 59 (expr)



state 115

    optcomma  ->  ',' .   (rule 28)
    arglist1  ->  arglist1 ',' . exprseq   (rule 72)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 28 (optcomma)

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 176
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 116

    arglistc  ->  arglist1 optcomma .   (rule 70)

    $default	reduce using rule 70 (arglistc)



state 117

    expr  ->  '(' exprseq ')' .   (rule 49)

    $default	reduce using rule 49 (expr)



state 118

    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)

    ')' 	shift, and go to state 177



state 119

    optsemi  ->  ';' .   (rule 26)

    $default	reduce using rule 26 (optsemi)



state 120

    funretval  ->  '^' expr optsemi .   (rule 41)

    $default	reduce using rule 41 (funretval)



state 121

    expr  ->  '~' name '=' . expr   (rule 62)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 178
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 122

    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 114)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 179



state 123

    listlit2  ->  '[' . literallistc ']'   (rule 135)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 123

    $default	reduce using rule 137 (literallistc)

    listliteral	go to state 124
    listlit2	go to state 125
    literallistc	go to state 180
    literallist1	go to state 127
    integer	go to state 128
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 129
    classname	go to state 130
    trueobj	go to state 131
    falseobj	go to state 132
    nilobj	go to state 133
    infobj	go to state 134
    ascii	go to state 135
    symbol	go to state 136
    string	go to state 137
    string1	go to state 52



state 124

    literallist1  ->  listliteral .   (rule 139)

    $default	reduce using rule 139 (literallist1)



state 125

    listliteral  ->  listlit2 .   (rule 112)

    $default	reduce using rule 112 (listliteral)



state 126

    listlit  ->  '#' '[' literallistc . ']'   (rule 133)

    ']' 	shift, and go to state 181



state 127

    literallistc  ->  literallist1 . optcomma   (rule 138)
    literallist1  ->  literallist1 . ',' listliteral   (rule 140)

    ',' 	shift, and go to state 182

    $default	reduce using rule 27 (optcomma)

    optcomma	go to state 183



state 128

    listliteral  ->  integer .   (rule 103)
    floatp  ->  integer . pie   (rule 152)

    PIE 	shift, and go to state 19

    $default	reduce using rule 103 (listliteral)

    pie 	go to state 97



state 129

    listliteral  ->  floatp .   (rule 104)

    $default	reduce using rule 104 (listliteral)



state 130

    listlit2  ->  classname . '[' literallistc ']'   (rule 136)

    '[' 	shift, and go to state 184



state 131

    listliteral  ->  trueobj .   (rule 108)

    $default	reduce using rule 108 (listliteral)



state 132

    listliteral  ->  falseobj .   (rule 109)

    $default	reduce using rule 109 (listliteral)



state 133

    listliteral  ->  nilobj .   (rule 110)

    $default	reduce using rule 110 (listliteral)



state 134

    listliteral  ->  infobj .   (rule 111)

    $default	reduce using rule 111 (listliteral)



state 135

    listliteral  ->  ascii .   (rule 105)

    $default	reduce using rule 105 (listliteral)



state 136

    listliteral  ->  symbol .   (rule 107)

    $default	reduce using rule 107 (listliteral)



state 137

    listliteral  ->  string .   (rule 106)
    string  ->  string . string1   (rule 165)

    STRING	shift, and go to state 10

    $default	reduce using rule 106 (listliteral)

    string1	go to state 103



state 138

    expr  ->  '#' mavars '=' . expr   (rule 65)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 185
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 139

    mavars  ->  mavarlist ELLIPSIS . name   (rule 79)

    NAME	shift, and go to state 6

    name	go to state 186



state 140

    mavarlist  ->  mavarlist ',' . name   (rule 81)

    NAME	shift, and go to state 6

    name	go to state 187



state 141

    listlit  ->  '#' classname '[' . literallistc ']'   (rule 134)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 123

    $default	reduce using rule 137 (literallistc)

    listliteral	go to state 124
    listlit2	go to state 125
    literallistc	go to state 188
    literallist1	go to state 127
    integer	go to state 128
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 129
    classname	go to state 130
    trueobj	go to state 131
    falseobj	go to state 132
    nilobj	go to state 133
    infobj	go to state 134
    ascii	go to state 135
    symbol	go to state 136
    string	go to state 137
    string1	go to state 52



state 142

    expr  ->  expr '.' '(' . keyarglist1 ')'   (rule 54)
    expr  ->  expr '.' '(' . arglist1 optkeyarglist ')'   (rule 56)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglist1	go to state 189
    keyarglist1	go to state 190
    keyarg	go to state 152
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53
    keybinop	go to state 153



state 143

    expr  ->  expr '.' name . '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr '.' name . '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr '.' name .   (rule 58)
    expr  ->  expr '.' name . '=' expr   (rule 63)

    '=' 	shift, and go to state 191
    '(' 	shift, and go to state 192

    $default	reduce using rule 58 (expr)



state 144

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr binop expr .   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    '.' 	shift, and go to state 89

    $default	reduce using rule 51 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 145

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr keybinop expr .   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    '.' 	shift, and go to state 89

    $default	reduce using rule 52 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 146

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)
    exprn  ->  exprn ';' expr .   (rule 67)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 67 (exprn)

    binop	go to state 90
    keybinop	go to state 91



state 147

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  name '=' expr .   (rule 61)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 61 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 148

    expr  ->  name '(' arglist1 . optkeyarglist ')'   (rule 53)
    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 64)
    arglist1  ->  arglist1 . ',' exprseq   (rule 72)

    ',' 	shift, and go to state 193

    $default	reduce using rule 76 (optkeyarglist)

    optkeyarglist	go to state 194



state 149

    expr  ->  classname '[' arglistc . ']'   (rule 60)

    ']' 	shift, and go to state 195



state 150

    expr  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 48)
    arglist1  ->  arglist1 . ',' exprseq   (rule 72)

    ',' 	shift, and go to state 193

    $default	reduce using rule 76 (optkeyarglist)

    optkeyarglist	go to state 196



state 151

    expr  ->  classname '(' keyarglist1 . ')'   (rule 47)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 74)

    ',' 	shift, and go to state 197
    ')' 	shift, and go to state 198



state 152

    keyarglist1  ->  keyarg .   (rule 73)

    $default	reduce using rule 73 (keyarglist1)



state 153

    keyarg  ->  keybinop . exprseq   (rule 75)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 199
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 154

    classextension  ->  '+' classname '{' methods . '}'   (rule 10)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 81
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 200
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '}' 	shift, and go to state 201

    methoddef	go to state 202
    name	go to state 203
    binop	go to state 204



state 155

    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)

    ']' 	shift, and go to state 205



state 156

    optname  ->  name .   (rule 12)

    $default	reduce using rule 12 (optname)



state 157

    superclass  ->  ':' classname .   (rule 14)

    $default	reduce using rule 14 (superclass)



state 158

    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 206



state 159

    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 126)

    $default	reduce using rule 126 (slotdeflist)



state 160

    listlit  ->  '#' . '[' literallistc ']'   (rule 133)
    listlit  ->  '#' . classname '[' literallistc ']'   (rule 134)

    CLASSNAME	shift, and go to state 12
    '[' 	shift, and go to state 76

    classname	go to state 80



state 161

    slotdef  ->  name '=' slotliteral .   (rule 128)

    $default	reduce using rule 128 (slotdef)



state 162

    slotliteral  ->  listlit .   (rule 91)

    $default	reduce using rule 91 (slotliteral)



state 163

    slotliteral  ->  integer .   (rule 82)
    floatp  ->  integer . pie   (rule 152)

    PIE 	shift, and go to state 19

    $default	reduce using rule 82 (slotliteral)

    pie 	go to state 97



state 164

    slotliteral  ->  floatp .   (rule 83)

    $default	reduce using rule 83 (slotliteral)



state 165

    slotliteral  ->  trueobj .   (rule 87)

    $default	reduce using rule 87 (slotliteral)



state 166

    slotliteral  ->  falseobj .   (rule 88)

    $default	reduce using rule 88 (slotliteral)



state 167

    slotliteral  ->  nilobj .   (rule 89)

    $default	reduce using rule 89 (slotliteral)



state 168

    slotliteral  ->  infobj .   (rule 90)

    $default	reduce using rule 90 (slotliteral)



state 169

    slotliteral  ->  ascii .   (rule 84)

    $default	reduce using rule 84 (slotliteral)



state 170

    slotliteral  ->  symbol .   (rule 86)

    $default	reduce using rule 86 (slotliteral)



state 171

    slotliteral  ->  string .   (rule 85)
    string  ->  string . string1   (rule 165)

    STRING	shift, and go to state 10

    $default	reduce using rule 85 (slotliteral)

    string1	go to state 103



state 172

    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 122)

    NAME	shift, and go to state 6

    name	go to state 207



state 173

    argdecls  ->  ARG slotdeflist ';' .   (rule 121)

    $default	reduce using rule 121 (argdecls)



state 174

    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 113)

    '}' 	shift, and go to state 208



state 175

    funcvardecls  ->  funcvardecls funcvardecl .   (rule 116)

    $default	reduce using rule 116 (funcvardecls)



state 176

    arglist1  ->  arglist1 ',' exprseq .   (rule 72)

    $default	reduce using rule 72 (arglist1)



state 177

    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)

    $default	reduce using rule 31 (cmdlinecode)



state 178

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  '~' name '=' expr .   (rule 62)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 62 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 179

    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 114)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    VAR 	shift, and go to state 13
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 25
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 40 (funretval)

    funcbody	go to state 209
    funretval	go to state 30
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 33
    pushliteral	go to state 34
    block	go to state 35
    funcvardecl	go to state 175
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 180

    listlit2  ->  '[' literallistc . ']'   (rule 135)

    ']' 	shift, and go to state 210



state 181

    listlit  ->  '#' '[' literallistc ']' .   (rule 133)

    $default	reduce using rule 133 (listlit)



state 182

    optcomma  ->  ',' .   (rule 28)
    literallist1  ->  literallist1 ',' . listliteral   (rule 140)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 123

    $default	reduce using rule 28 (optcomma)

    listliteral	go to state 211
    listlit2	go to state 125
    integer	go to state 128
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 129
    classname	go to state 130
    trueobj	go to state 131
    falseobj	go to state 132
    nilobj	go to state 133
    infobj	go to state 134
    ascii	go to state 135
    symbol	go to state 136
    string	go to state 137
    string1	go to state 52



state 183

    literallistc  ->  literallist1 optcomma .   (rule 138)

    $default	reduce using rule 138 (literallistc)



state 184

    listlit2  ->  classname '[' . literallistc ']'   (rule 136)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '[' 	shift, and go to state 123

    $default	reduce using rule 137 (literallistc)

    listliteral	go to state 124
    listlit2	go to state 125
    literallistc	go to state 212
    literallist1	go to state 127
    integer	go to state 128
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 129
    classname	go to state 130
    trueobj	go to state 131
    falseobj	go to state 132
    nilobj	go to state 133
    infobj	go to state 134
    ascii	go to state 135
    symbol	go to state 136
    string	go to state 137
    string1	go to state 52



state 185

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)
    expr  ->  '#' mavars '=' expr .   (rule 65)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 65 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 186

    mavars  ->  mavarlist ELLIPSIS name .   (rule 79)

    $default	reduce using rule 79 (mavars)



state 187

    mavarlist  ->  mavarlist ',' name .   (rule 81)

    $default	reduce using rule 81 (mavarlist)



state 188

    listlit  ->  '#' classname '[' literallistc . ']'   (rule 134)

    ']' 	shift, and go to state 213



state 189

    expr  ->  expr '.' '(' arglist1 . optkeyarglist ')'   (rule 56)
    arglist1  ->  arglist1 . ',' exprseq   (rule 72)

    ',' 	shift, and go to state 193

    $default	reduce using rule 76 (optkeyarglist)

    optkeyarglist	go to state 214



state 190

    expr  ->  expr '.' '(' keyarglist1 . ')'   (rule 54)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 74)

    ',' 	shift, and go to state 197
    ')' 	shift, and go to state 215



state 191

    expr  ->  expr '.' name '=' . expr   (rule 63)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 216
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 192

    expr  ->  expr '.' name '(' . keyarglist1 ')'   (rule 55)
    expr  ->  expr '.' name '(' . arglist1 optkeyarglist ')'   (rule 57)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 68
    arglist1	go to state 217
    keyarglist1	go to state 218
    keyarg	go to state 152
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53
    keybinop	go to state 153



state 193

    arglist1  ->  arglist1 ',' . exprseq   (rule 72)
    optkeyarglist  ->  ',' . keyarglist1   (rule 77)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 176
    keyarglist1	go to state 219
    keyarg	go to state 152
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53
    keybinop	go to state 153



state 194

    expr  ->  name '(' arglist1 optkeyarglist . ')'   (rule 53)
    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 64)

    ')' 	shift, and go to state 220



state 195

    expr  ->  classname '[' arglistc ']' .   (rule 60)

    $default	reduce using rule 60 (expr)



state 196

    expr  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 48)

    ')' 	shift, and go to state 221



state 197

    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 74)

    KEYBINOP	shift, and go to state 82

    keyarg	go to state 222
    keybinop	go to state 153



state 198

    expr  ->  classname '(' keyarglist1 ')' .   (rule 47)

    $default	reduce using rule 47 (expr)



state 199

    keyarg  ->  keybinop exprseq .   (rule 75)

    $default	reduce using rule 75 (keyarg)



state 200

    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)
    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)
    binop  ->  '*' .   (rule 173)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 81
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88

    $default	reduce using rule 173 (binop)

    name	go to state 223
    binop	go to state 224



state 201

    classextension  ->  '+' classname '{' methods '}' .   (rule 10)

    $default	reduce using rule 10 (classextension)



state 202

    methods  ->  methods methoddef .   (rule 20)

    $default	reduce using rule 20 (methods)



state 203

    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)

    '{' 	shift, and go to state 225



state 204

    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)

    '{' 	shift, and go to state 226



state 205

    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)

    ':' 	shift, and go to state 106

    $default	reduce using rule 13 (superclass)

    superclass	go to state 227



state 206

    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 228
    CLASSVAR	shift, and go to state 229

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 230
    methods	go to state 231



state 207

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 122)

    ';' 	shift, and go to state 232



state 208

    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 113)

    $default	reduce using rule 113 (block)



state 209

    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 114)

    '}' 	shift, and go to state 233



state 210

    listlit2  ->  '[' literallistc ']' .   (rule 135)

    $default	reduce using rule 135 (listlit2)



state 211

    literallist1  ->  literallist1 ',' listliteral .   (rule 140)

    $default	reduce using rule 140 (literallist1)



state 212

    listlit2  ->  classname '[' literallistc . ']'   (rule 136)

    ']' 	shift, and go to state 234



state 213

    listlit  ->  '#' classname '[' literallistc ']' .   (rule 134)

    $default	reduce using rule 134 (listlit)



state 214

    expr  ->  expr '.' '(' arglist1 optkeyarglist . ')'   (rule 56)

    ')' 	shift, and go to state 235



state 215

    expr  ->  expr '.' '(' keyarglist1 ')' .   (rule 54)

    $default	reduce using rule 54 (expr)



state 216

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)
    expr  ->  expr '.' name '=' expr .   (rule 63)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 63 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 217

    expr  ->  expr '.' name '(' arglist1 . optkeyarglist ')'   (rule 57)
    arglist1  ->  arglist1 . ',' exprseq   (rule 72)

    ',' 	shift, and go to state 193

    $default	reduce using rule 76 (optkeyarglist)

    optkeyarglist	go to state 236



state 218

    expr  ->  expr '.' name '(' keyarglist1 . ')'   (rule 55)
    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 74)

    ',' 	shift, and go to state 197
    ')' 	shift, and go to state 237



state 219

    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 74)
    optkeyarglist  ->  ',' keyarglist1 .   (rule 77)

    ',' 	shift, and go to state 197

    $default	reduce using rule 77 (optkeyarglist)



state 220

    expr  ->  name '(' arglist1 optkeyarglist ')' .   (rule 53)
    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 64)

    '=' 	shift, and go to state 238

    $default	reduce using rule 53 (expr)



state 221

    expr  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 48)

    $default	reduce using rule 48 (expr)



state 222

    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 74)

    $default	reduce using rule 74 (keyarglist1)



state 223

    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)

    '{' 	shift, and go to state 239



state 224

    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)

    '{' 	shift, and go to state 240



state 225

    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 241



state 226

    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 242



state 227

    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)

    '{' 	shift, and go to state 243



state 228

    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)

    '<' 	shift, and go to state 244
    '>' 	shift, and go to state 245
    READWRITEVAR	shift, and go to state 246

    $default	reduce using rule 141 (rwspec)

    rwslotdeflist	go to state 247
    rwslotdef	go to state 248
    rwspec	go to state 249



state 229

    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)

    '<' 	shift, and go to state 244
    '>' 	shift, and go to state 245
    READWRITEVAR	shift, and go to state 246

    $default	reduce using rule 141 (rwspec)

    rwslotdeflist	go to state 250
    rwslotdef	go to state 248
    rwspec	go to state 249



state 230

    classvardecls  ->  classvardecls classvardecl .   (rule 16)

    $default	reduce using rule 16 (classvardecls)



state 231

    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 81
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 200
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '}' 	shift, and go to state 251

    methoddef	go to state 202
    name	go to state 203
    binop	go to state 204



state 232

    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 122)

    $default	reduce using rule 122 (argdecls)



state 233

    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 114)

    $default	reduce using rule 114 (block)



state 234

    listlit2  ->  classname '[' literallistc ']' .   (rule 136)

    $default	reduce using rule 136 (listlit2)



state 235

    expr  ->  expr '.' '(' arglist1 optkeyarglist ')' .   (rule 56)

    $default	reduce using rule 56 (expr)



state 236

    expr  ->  expr '.' name '(' arglist1 optkeyarglist . ')'   (rule 57)

    ')' 	shift, and go to state 252



state 237

    expr  ->  expr '.' name '(' keyarglist1 ')' .   (rule 55)

    $default	reduce using rule 55 (expr)



state 238

    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 64)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 253
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 239

    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 254



state 240

    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)

    ARG 	shift, and go to state 66

    $default	reduce using rule 120 (argdecls)

    argdecls	go to state 255



state 241

    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 256



state 242

    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 257



state 243

    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)

    $default	reduce using rule 15 (classvardecls)

    classvardecls	go to state 258



state 244

    rwspec  ->  '<' .   (rule 142)

    $default	reduce using rule 142 (rwspec)



state 245

    rwspec  ->  '>' .   (rule 144)

    $default	reduce using rule 144 (rwspec)



state 246

    rwspec  ->  READWRITEVAR .   (rule 143)

    $default	reduce using rule 143 (rwspec)



state 247

    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 130)

    ';' 	shift, and go to state 259
    ',' 	shift, and go to state 260



state 248

    rwslotdeflist  ->  rwslotdef .   (rule 129)

    $default	reduce using rule 129 (rwslotdeflist)



state 249

    rwslotdef  ->  rwspec . name   (rule 131)
    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 132)

    NAME	shift, and go to state 6

    name	go to state 261



state 250

    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)
    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 130)

    ';' 	shift, and go to state 262
    ',' 	shift, and go to state 260



state 251

    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)

    $default	reduce using rule 8 (classdef)



state 252

    expr  ->  expr '.' name '(' arglist1 optkeyarglist ')' .   (rule 57)

    $default	reduce using rule 57 (expr)



state 253

    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)
    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 64)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89

    $default	reduce using rule 64 (expr)

    binop	go to state 90
    keybinop	go to state 91



state 254

    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 263



state 255

    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)

    $default	reduce using rule 115 (funcvardecls)

    funcvardecls	go to state 264



state 256

    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    PRIMITIVENAME	shift, and go to state 265
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 266
    funcvardecl	go to state 175
    primname	go to state 267



state 257

    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    PRIMITIVENAME	shift, and go to state 265
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 268
    funcvardecl	go to state 175
    primname	go to state 267



state 258

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)
    classvardecls  ->  classvardecls . classvardecl   (rule 16)

    VAR 	shift, and go to state 228
    CLASSVAR	shift, and go to state 229

    $default	reduce using rule 19 (methods)

    classvardecl	go to state 230
    methods	go to state 269



state 259

    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)

    $default	reduce using rule 18 (classvardecl)



state 260

    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 130)

    '<' 	shift, and go to state 244
    '>' 	shift, and go to state 245
    READWRITEVAR	shift, and go to state 246

    $default	reduce using rule 141 (rwspec)

    rwslotdef	go to state 270
    rwspec	go to state 249



state 261

    rwslotdef  ->  rwspec name .   (rule 131)
    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 132)

    '=' 	shift, and go to state 271

    $default	reduce using rule 131 (rwslotdef)



state 262

    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)

    $default	reduce using rule 17 (classvardecl)



state 263

    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    PRIMITIVENAME	shift, and go to state 265
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 272
    funcvardecl	go to state 175
    primname	go to state 267



state 264

    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)
    funcvardecls  ->  funcvardecls . funcvardecl   (rule 116)

    PRIMITIVENAME	shift, and go to state 265
    VAR 	shift, and go to state 13

    $default	reduce using rule 36 (primitive)

    primitive	go to state 273
    funcvardecl	go to state 175
    primname	go to state 267



state 265

    primname  ->  PRIMITIVENAME .   (rule 157)

    $default	reduce using rule 157 (primname)



state 266

    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 274
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 275
    retval	go to state 276
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 277
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 267

    primitive  ->  primname . optsemi   (rule 37)

    ';' 	shift, and go to state 119

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 278



state 268

    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 274
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 279
    retval	go to state 276
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 277
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 269

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)
    methods  ->  methods . methoddef   (rule 20)

    NAME	shift, and go to state 6
    BINOP	shift, and go to state 81
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 200
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '}' 	shift, and go to state 280

    methoddef	go to state 202
    name	go to state 203
    binop	go to state 204



state 270

    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 130)

    $default	reduce using rule 130 (rwslotdeflist)



state 271

    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 132)

    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '#' 	shift, and go to state 160

    slotliteral	go to state 281
    listlit	go to state 162
    integer	go to state 163
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 164
    trueobj	go to state 165
    falseobj	go to state 166
    nilobj	go to state 167
    infobj	go to state 168
    ascii	go to state 169
    symbol	go to state 170
    string	go to state 171
    string1	go to state 52



state 272

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 274
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 282
    retval	go to state 276
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 277
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 273

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '^' 	shift, and go to state 274
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    $default	reduce using rule 38 (retval)

    methbody	go to state 283
    retval	go to state 276
    expr	go to state 31
    exprn	go to state 32
    exprseq	go to state 277
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 274

    retval  ->  '^' . expr optsemi   (rule 39)

    NAME	shift, and go to state 6
    INTEGER	shift, and go to state 7
    FLOAT	shift, and go to state 8
    SYMBOL	shift, and go to state 9
    STRING	shift, and go to state 10
    ASCII	shift, and go to state 11
    CLASSNAME	shift, and go to state 12
    NILOBJ	shift, and go to state 14
    TRUEOBJ	shift, and go to state 15
    FALSEOBJ	shift, and go to state 16
    INFINITUMOBJ	shift, and go to state 17
    PSEUDOVAR	shift, and go to state 18
    PIE 	shift, and go to state 19
    '-' 	shift, and go to state 20
    '`' 	shift, and go to state 21
    '{' 	shift, and go to state 22
    '[' 	shift, and go to state 23
    '(' 	shift, and go to state 64
    '~' 	shift, and go to state 26
    '#' 	shift, and go to state 27

    expr	go to state 284
    pushliteral	go to state 34
    block	go to state 35
    listlit	go to state 38
    integer	go to state 39
    floatr	go to state 40
    pie 	go to state 41
    floatp	go to state 42
    name	go to state 43
    classname	go to state 44
    trueobj	go to state 45
    falseobj	go to state 46
    nilobj	go to state 47
    infobj	go to state 48
    ascii	go to state 49
    symbol	go to state 50
    string	go to state 51
    string1	go to state 52
    pseudovar	go to state 53



state 275

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)

    '}' 	shift, and go to state 285



state 276

    methbody  ->  retval .   (rule 34)

    $default	reduce using rule 34 (methbody)



state 277

    methbody  ->  exprseq . retval   (rule 35)

    '^' 	shift, and go to state 274

    $default	reduce using rule 38 (retval)

    retval	go to state 286



state 278

    primitive  ->  primname optsemi .   (rule 37)

    $default	reduce using rule 37 (primitive)



state 279

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)

    '}' 	shift, and go to state 287



state 280

    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)

    $default	reduce using rule 9 (classdef)



state 281

    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 132)

    $default	reduce using rule 132 (rwslotdef)



state 282

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)

    '}' 	shift, and go to state 288



state 283

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)

    '}' 	shift, and go to state 289



state 284

    retval  ->  '^' expr . optsemi   (rule 39)
    expr  ->  expr . binop expr   (rule 51)
    expr  ->  expr . keybinop expr   (rule 52)
    expr  ->  expr . '.' '(' keyarglist1 ')'   (rule 54)
    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 55)
    expr  ->  expr . '.' '(' arglist1 optkeyarglist ')'   (rule 56)
    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 57)
    expr  ->  expr . '.' name   (rule 58)
    expr  ->  expr . '.' name '=' expr   (rule 63)

    BINOP	shift, and go to state 81
    KEYBINOP	shift, and go to state 82
    '-' 	shift, and go to state 83
    '<' 	shift, and go to state 84
    '>' 	shift, and go to state 85
    '*' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    READWRITEVAR	shift, and go to state 88
    '.' 	shift, and go to state 89
    ';' 	shift, and go to state 119

    $default	reduce using rule 25 (optsemi)

    optsemi	go to state 290
    binop	go to state 90
    keybinop	go to state 91



state 285

    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)

    $default	reduce using rule 21 (methoddef)



state 286

    methbody  ->  exprseq retval .   (rule 35)

    $default	reduce using rule 35 (methbody)



state 287

    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)

    $default	reduce using rule 23 (methoddef)



state 288

    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)

    $default	reduce using rule 22 (methoddef)



state 289

    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)

    $default	reduce using rule 24 (methoddef)



state 290

    retval  ->  '^' expr optsemi .   (rule 39)

    $default	reduce using rule 39 (retval)



state 291

    $   	go to state 292



state 292

    $   	go to state 293



state 293

    $default	accept
