{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
\red96\green96\blue96;}
\vieww9000\viewh9000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\cf2 SCView\cf0  \{  \cf3 // abstract class\
\cf0 	\cf2 classvar\cf0  <>currentDrag;\
	\
	\cf2 var\cf0  dataptr, parent, <>action, <background;\
	\
	*new \{ \cf2 arg\cf0  parent, bounds;\
		^\cf2 super\cf0 .new.init(parent, bounds);\
	\}\
	\
	init \{ \cf2 arg\cf0  argParent, argBounds;\
		parent = argParent.asView;\
		\cf2 this\cf0 .prInit(parent, argBounds);\
		if (parent.notNil, \{ parent.add(\cf2 this\cf0 ); \});\
	\}\
	\
	asView \{ ^\cf2 this\cf0  \}\
	\
	bounds \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\bounds\cf0 , \cf2 Rect\cf0 .new)\
	\}\
	bounds_ \{ \cf2 arg\cf0  rect;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\bounds\cf0 , rect)\
	\}\
	\
	visible \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\visible\cf0 )\
	\}\
	visible_ \{ \cf2 arg\cf0  bool;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\visible\cf0 , bool)\
	\}\
	\
	enabled \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\enabled\cf0 )\
	\}\
	enabled_ \{ \cf2 arg\cf0  bool;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\enabled\cf0 , bool)\
	\}\
	\
	canFocus \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\canFocus\cf0 )\
	\}\
	canFocus_ \{ \cf2 arg\cf0  bool;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\canFocus\cf0 , bool)\
	\}\
	\
	\cf3 /*\
	resize behaviour in an SCCompositeView:\
		1  2  3\
		4  5  6\
		7  8  9\
		\
		1 - fixed to left, fixed to top\
		2 - horizontally elastic, fixed to top\
		3 - fixed to right, fixed to top\
		\
		4 - fixed to left, vertically elastic\
		5 - horizontally elastic, vertically elastic\
		6 - fixed to right, vertically elastic\
		\
		7 - fixed to left, fixed to bottom\
		8 - horizontally elastic, fixed to bottom\
		9 - fixed to right, fixed to bottom\
	*/\cf0 \
	resize \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\resize\cf0 )\
	\}\
	resize_ \{ \cf2 arg\cf0  resize;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\resize\cf0 , resize)\
	\}\
	\
	background_ \{ \cf2 arg\cf0  color;\
		background = color;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\background\cf0 , color)\
	\}\
	\
	keyDown \{ \cf2 arg\cf0  key, modifiers; \}\
	\
	doAction \{\
		action.value(\cf2 this\cf0 );\
	\}\
	\
	properties \{\
		^#[\cf4 \\bounds\cf0 , \cf4 \\visible\cf0 , \cf4 \\enabled\cf0 , \cf4 \\canFocus\cf0 , \cf4 \\resize\cf0 , \cf4 \\background\cf0 ]\
	\}\
	getPropertyList \{\
		^\cf2 this\cf0 .properties.collect(\{ \cf2 arg\cf0  name;\
			[name, \cf2 this\cf0 .perform(name)]\
		\});\
	\}\
	setPropertyList \{ \cf2 arg\cf0  list;\
		list.do(\{ \cf2 arg\cf0  item;\
			\cf2 var\cf0  name, value;\
			#name, value = item;\
			\cf2 this\cf0 .perform(name.asSetter, value);\
		\});\
	\}\
	\
	\cf3 // private\
\cf0 	prInit \{ \cf2 arg\cf0  argParent, argBounds;\
		\cf2 _SCView_New\cf0 \
		^\cf2 this\cf0 .primitiveFailed\
	\}\
	prSetProperty \{ \cf2 arg\cf0  key, value;\
		\cf2 _SCView_SetProperty\cf0 \
		^\cf2 this\cf0 .primitiveFailed\
	\}\
	prGetProperty \{ \cf2 arg\cf0  key, value;\
		\cf2 _SCView_GetProperty\cf0 \
		^\cf2 this\cf0 .primitiveFailed\
	\}\
	\
	setPropertyWithAction \{ \cf2 arg\cf0  symbol, obj;\
		\cf3 // setting some properties may need to have the action called.\
\cf0 		if (\cf2 this\cf0 .prSetProperty(symbol, obj), \{\
			\cf3 // prSetProperty returns true if action needs to be called.\
\cf0 			\cf2 this\cf0 .doAction;\
		\});\
	\}\
\}\
\
\cf2 SCContainerView\cf0  : \cf2 SCView\cf0  \{ \cf3 // abstract class\
\cf0 	\cf2 var\cf0  children, <>decorator;\
			\
	add \{ \cf2 arg\cf0  child;\
		children = children.add(child);\
		if (decorator.notNil, \{ decorator.place(child); \});\
	\}\
\}\
\
\cf2 SCCompositeView\cf0  : \cf2 SCContainerView\cf0  \{\
\}\
\
\cf2 SCTopView\cf0  : \cf2 SCCompositeView\cf0  \{\
	\cf3 // created by SCWindow\
\cf0 \}\
\
\cf2 SCControlView\cf0  : \cf2 SCView\cf0  \{ \cf3 // abstract class\
\cf0 \}\
\
\cf2 SCSliderBase\cf0  : \cf2 SCControlView\cf0  \{\
	\
	knobColor \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\knobColor\cf0 , \cf2 Color\cf0 .new)\
	\}\
	knobColor_ \{ \cf2 arg\cf0  color;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\knobColor\cf0 , color)\
	\}\
	\
	step_ \{ \cf2 arg\cf0  stepSize;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\step\cf0 , stepSize);\
	\}\
	step \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\step\cf0 )\
	\}\
	\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\knobColor\cf0 , \cf4 \\step\cf0 ]\
	\}\
\
\}\
\
\cf2 SCSlider\cf0  : \cf2 SCSliderBase\cf0 \
\{\
	value \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\value\cf0 )\
	\}\
	value_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\value\cf0 , val);\
	\}	\
	\
	keyDown \{ \cf2 arg\cf0  key, modifiers;\
		if (key == $r, \{ \cf2 this\cf0 .value = 1.0.rand; ^\cf2 this\cf0  \});\
		if (key == $n, \{ \cf2 this\cf0 .value = 0.0; ^\cf2 this\cf0  \});\
		if (key == $x, \{ \cf2 this\cf0 .value = 1.0; ^\cf2 this\cf0  \});\
		if (key == $c, \{ \cf2 this\cf0 .value = 0.5; ^\cf2 this\cf0  \});\
		if (key == $], \{ \
			\cf2 this\cf0 .value = \cf2 this\cf0 .value + (1/\cf2 this\cf0 .bounds.width); \
			^\cf2 this\cf0  \
		\});\
		if (key == $[, \{ \
			\cf2 this\cf0 .value = \cf2 this\cf0 .value - (1/\cf2 this\cf0 .bounds.width); \
			^\cf2 this\cf0  \
		\});\
	\}\
	beginDrag \{ \
		currentDrag = \cf2 this\cf0 .value; \
	\}\
	canReceiveDrag \{\
		^currentDrag.isKindOf(\cf2 SimpleNumber\cf0 );\
	\}\
	receiveDrag \{\
		\cf2 this\cf0 .value = currentDrag;\
		currentDrag = \cf2 nil\cf0 ;\
	\}\
\}\
\
\cf2 SCKnob\cf0  : \cf2 SCSlider\cf0 \
\{\
\}\
\
\cf2 SCRangeSlider\cf0  : \cf2 SCSliderBase\cf0  \{\
	lo \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\lo\cf0 )\
	\}\
	lo_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\lo\cf0 , val);\
	\}	\
	hi \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\hi\cf0 )\
	\}\
	hi_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\hi\cf0 , val);\
	\}	\
	range \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\range\cf0 )\
	\}\
	range_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\range\cf0 , val);\
	\}	\
\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\lo\cf0 , \cf4 \\hi\cf0 ]\
	\}\
	keyDown \{ \cf2 arg\cf0  key, modifiers;\
		\cf2 var\cf0  a, b;\
		if (key == $r, \{ \
			a = 1.0.rand; \
			b = 1.0.rand; \
			\cf2 this\cf0 .lo = min(a, b);\
			\cf2 this\cf0 .hi = max(a, b);\
			^\cf2 this\cf0  \
		\});\
		if (key == $n, \{ \cf2 this\cf0 .lo = 0.0; \cf2 this\cf0 .hi = 0.0; ^\cf2 this\cf0  \});\
		if (key == $x, \{ \cf2 this\cf0 .lo = 1.0; \cf2 this\cf0 .hi = 1.0; ^\cf2 this\cf0  \});\
		if (key == $c, \{ \cf2 this\cf0 .lo = 0.5; \cf2 this\cf0 .hi = 0.5; ^\cf2 this\cf0  \});\
		if (key == $a, \{ \cf2 this\cf0 .lo = 0.0; \cf2 this\cf0 .hi = 1.0; ^\cf2 this\cf0  \});\
	\}\
	beginDrag \{ \
		currentDrag = \cf2 Point\cf0 (\cf2 this\cf0 .lo, \cf2 this\cf0 .hi); \
	\}\
	canReceiveDrag \{\
		^currentDrag.isKindOf(\cf2 Point\cf0 );\
	\}\
	receiveDrag \{\
		\cf2 this\cf0 .lo = currentDrag.x;\
		\cf2 this\cf0 .hi = currentDrag.y;\
		currentDrag = \cf2 nil\cf0 ;\
	\}\
\}\
\
\cf2 SC2DSlider\cf0  : \cf2 SCSliderBase\cf0  \{\
	x \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\x\cf0 )\
	\}\
	x_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\x\cf0 , val);\
	\}	\
	y \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\y\cf0 )\
	\}\
	y_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\y\cf0 , val);\
	\}	\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\x\cf0 , \cf4 \\y\cf0 ]\
	\}\
	keyDown \{ \cf2 arg\cf0  key, modifiers;\
		if (key == $r, \{ \cf2 this\cf0 .x = 1.0.rand; \cf2 this\cf0 .y = 1.0.rand; ^\cf2 this\cf0  \});\
		if (key == $n, \{ \cf2 this\cf0 .x = 0.0; \cf2 this\cf0 .y = 0.0; ^\cf2 this\cf0  \});\
		if (key == $x, \{ \cf2 this\cf0 .x = 1.0; \cf2 this\cf0 .y = 1.0; ^\cf2 this\cf0  \});\
		if (key == $c, \{ \cf2 this\cf0 .x = 0.5; \cf2 this\cf0 .y = 0.5; ^\cf2 this\cf0  \});\
	\}\
	beginDrag \{ \
		currentDrag = \cf2 Point\cf0 (\cf2 this\cf0 .x, \cf2 this\cf0 .y); \
	\}\
	canReceiveDrag \{\
		^currentDrag.isKindOf(\cf2 Point\cf0 );\
	\}\
	receiveDrag \{\
		\cf2 this\cf0 .x = currentDrag.x;\
		\cf2 this\cf0 .y = currentDrag.y;\
		currentDrag = \cf2 nil\cf0 ;\
	\}\
\}\
\
\
\cf2 SCButton\cf0  : \cf2 SCControlView\cf0  \{\
	\cf2 var\cf0  <font, <states;\
	\
	value \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\value\cf0 )\
	\}\
	value_ \{ \cf2 arg\cf0  val;\
		\cf2 this\cf0 .setPropertyWithAction(\cf4 \\value\cf0 , val);\
	\}	\
\
	keyDown \{ \cf2 arg\cf0  key, modifiers;\
		if (key == $ , \{ \cf2 this\cf0 .value = \cf2 this\cf0 .value + 1; ^\cf2 this\cf0  \});\
		if (key == $\\r, \{ \cf2 this\cf0 .value = \cf2 this\cf0 .value + 1; ^\cf2 this\cf0  \});\
	\}\
	font_ \{ \cf2 arg\cf0  argFont;\
		font = argFont;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\font\cf0 , font)\
	\}\
\
	states_ \{ \cf2 arg\cf0  array;\
		states = array;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\states\cf0 , states);\
	\}\
	\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\value\cf0 , \cf4 \\font\cf0 , \cf4 \\states\cf0 ]\
	\}\
\}\
\
\
\cf2 SCStaticText\cf0  : \cf2 SCView\cf0  \{\
	\cf2 var\cf0  <string, <font, <object;\
	\
	font_ \{ \cf2 arg\cf0  argFont;\
		font = argFont;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\font\cf0 , font)\
	\}\
	\
	string_ \{ \cf2 arg\cf0  argString;\
		string = argString.asString;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\string\cf0 , string)\
	\}\
	align_ \{ \cf2 arg\cf0  align;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\align\cf0 , align)\
	\}\
	\
	stringColor \{\
		^\cf2 this\cf0 .prGetProperty(\cf4 \\stringColor\cf0 , \cf2 Color\cf0 .new)\
	\}\
	stringColor_ \{ \cf2 arg\cf0  color;\
		\cf2 this\cf0 .prSetProperty(\cf4 \\stringColor\cf0 , color)\
	\}\
\
	object_ \{ \cf2 arg\cf0  obj;\
		object = obj;\
		\cf2 this\cf0 .string = object.asString(80);\
	\}\
	\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\string\cf0 , \cf4 \\font\cf0 , \cf4 \\stringColor\cf0 ]\
	\}\
\}\
\
\cf2 SCNumberBox\cf0  : \cf2 SCStaticText\cf0  \{\
	\cf2 var\cf0  keyString;\
	\
	keyDown \{ \cf2 arg\cf0  key, modifiers; \
		if ((key == 3.asAscii) || (key == $\\r) || (key == $\\n), \{ \cf3 // enter key\
\cf0 			\cf2 this\cf0 .value = keyString.asFloat;\
			^\cf2 this\cf0 \
		\});\
		if (key == 127.asAscii, \{ \cf3 // delete key\
\cf0 			keyString = \cf2 nil\cf0 ;\
			\cf2 this\cf0 .string = object.asString;\
			\cf2 this\cf0 .stringColor = \cf2 Color\cf0 .black;\
			^\cf2 this\cf0 \
		\});\
		if (key.isDecDigit || \cf5 "+-.eE"\cf0 .includes(key), \{\
			if (keyString.isNil, \{ \
				keyString = \cf2 String\cf0 .new;\
				\cf2 this\cf0 .stringColor = \cf2 Color\cf0 .red;\
			\});\
			keyString = keyString.add(key);\
			\cf2 this\cf0 .string = keyString;\
		\});\
	\}\
	value \{ ^object \}\
	value_ \{ \cf2 arg\cf0  val;\
		keyString = \cf2 nil\cf0 ;\
		\cf2 this\cf0 .stringColor = \cf2 Color\cf0 .black;\
		object = val;\
		\cf2 this\cf0 .string = val.asString;\
		\cf2 this\cf0 .doAction;\
	\}\
	properties \{\
		^\cf2 super\cf0 .properties ++ [\cf4 \\boxColor\cf0 ]\
	\}\
	beginDrag \{ \
		currentDrag = object.asFloat; \
	\}\
	canReceiveDrag \{\
		^currentDrag.isKindOf(\cf2 SimpleNumber\cf0 );\
	\}\
	receiveDrag \{\
		\cf2 this\cf0 .value = currentDrag;\
		currentDrag = \cf2 nil\cf0 ;\
	\}\
\}\
\
\
\cf2 SCDragView\cf0  : \cf2 SCStaticText\cf0  \{\
\}\
\
\cf2 SCDragSource\cf0  : \cf2 SCDragView\cf0  \{\
	\cf2 var\cf0  <>beginDragAction;\
	\
	beginDrag \{ \
		currentDrag = if (beginDragAction.isNil, \
			object, \
		\{\
			beginDragAction.value(\cf2 this\cf0 );\
		\});\
	\}\
\}\
\
\cf2 SCDragSink\cf0  : \cf2 SCDragView\cf0 \
\{	\
	\cf2 var\cf0  <>acceptDrag = \cf2 true\cf0 ;\
	\
	canReceiveDrag \{\
		^acceptDrag.value(\cf2 this\cf0 );\
	\}\
	receiveDrag \{\
		\cf2 this\cf0 .object = currentDrag;\
		\cf2 this\cf0 .doAction;\
		currentDrag = \cf2 nil\cf0 ;\
	\}\
\}\
\
\cf2 SCDragBoth\cf0  : \cf2 SCDragSink\cf0  \{\
	\cf2 var\cf0  <>beginDragAction;\
	\
	beginDrag \{ \
		currentDrag = if (beginDragAction.isNil, \
			object, \
		\{\
			beginDragAction.value(\cf2 this\cf0 );\
		\});\
	\}\
\}\
\
\
\cf2 SCUserView\cf0  : \cf2 SCView\cf0  \{ \cf3 // abstract class\
\cf0 	draw \{\}\
	mouseBeginTrack \{ \cf2 arg\cf0  x, y, modifiers; \}\
	mouseTrack \{ \cf2 arg\cf0  x, y, modifiers; \}\
	mouseEndTrack \{ \cf2 arg\cf0  x, y, modifiers; \}\
\}\
\
\cf2 SCFuncUserView\cf0  : \cf2 SCUserView\cf0  \{\
	\cf2 var\cf0  <>keyDownFunc, <>drawFunc;\
	\cf2 var\cf0  <>mouseBeginTrackFunc, <>mouseTrackFunc, <>mouseEndTrackFunc;\
	\
	draw \{ drawFunc.value(\cf2 this\cf0 ) \}\
	mouseBeginTrack \{ \cf2 arg\cf0  x, y, modifiers; \
		mouseBeginTrackFunc.value(\cf2 this\cf0 , x, y, modifiers); \
	\}\
	mouseTrack \{ \cf2 arg\cf0  x, y, modifiers; \
		mouseTrackFunc.value(\cf2 this\cf0 , x, y, modifiers); \
	\}\
	mouseEndTrack \{ \cf2 arg\cf0  x, y, modifiers; \
		mouseEndTrackFunc.value(\cf2 this\cf0 , x, y, modifiers); \
	\}\
	keyDown \{ \cf2 arg\cf0  key, modifiers; \
		keyDownFunc.value(\cf2 this\cf0 , key, modifiers) \
	\}\
\}\
\
\
\cf2 Gradient\cf0  \{\
	\cf2 var\cf0  color1, color2, direction, steps;\
	*new \{ \cf2 arg\cf0  color1, color2, direction=\cf4 \\h\cf0 , steps=64;\
		^\cf2 super\cf0 .newCopyArgs(color1, color2, direction, steps)\
	\}\
\}\
\
\cf2 HiliteGradient\cf0  \{\
	\cf2 var\cf0  color1, color2, direction, steps, frac;\
	*new \{ \cf2 arg\cf0  color1, color2, direction=\cf4 \\v\cf0 , steps=64, frac = 0.33;\
		^\cf2 super\cf0 .newCopyArgs(color1, color2, direction, steps, frac)\
	\}\
\}\
\
\
}