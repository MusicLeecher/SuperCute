{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red191\green0\blue0;
\red96\green96\blue96;\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 Server\cf3 .local.boot;\
\cf2 Server\cf3 .local.status;\
\cf2 Server\cf3 .local.quit;\
\
\cf2 Server\cf3 .internal.boot;\
\cf2 Server\cf3 .internal.status;\
\cf2 Server\cf3 .internal.quit;\
\
\
s = \cf2 Server\cf3 .local; \cf4 // get the default server\
\cf3 s = \cf2 Server\cf3 .internal; \cf4 // get the default server\
\cf3 \
(\
\cf2 SynthDef\cf3 (\cf5 "pink"\cf3 , \{\
	\cf2 Out\cf3 .ar(0, \cf2 PinkNoise\cf3 .ar(0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/pink.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "white"\cf3 , \{\
	\cf2 Out\cf3 .ar(0, \cf2 WhiteNoise\cf3 .ar(0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/white.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "brown"\cf3 , \{\
	\cf2 Out\cf3 .ar(0, \cf2 BrownNoise\cf3 .ar(0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/brown.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "gray"\cf3 , \{\
	\cf2 Out\cf3 .ar(0, \cf2 GrayNoise\cf3 .ar(0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/gray.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "clipnoise"\cf3 , \{\
	\cf2 Out\cf3 .ar(0, \cf2 ClipNoise\cf3 .ar(0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/clipnoise.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "thru"\cf3 , \{\
	\cf2 Out\cf3 .ar(0,\cf2 In\cf3 .ar(2,2));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/thru.scsyndef"\cf3 );\
)\
\
(\
\cf2 SynthDef\cf3 (\cf5 "ring"\cf3 , \{\
	\cf2 Out\cf3 .ar(0,\cf2 In\cf3 .ar(2,2) * \cf2 FSinOsc\cf3 .ar(400));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/ring.scsyndef"\cf3 );\
)\
\
s = \cf2 Server\cf3 .local;\
s = \cf2 Server\cf3 .internal;\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "pink"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "white"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
\cf2 Server\cf3 .internal.sendBundle(0, [\cf5 "/s_new"\cf3 , \cf5 "white"\cf3 , 2002, 1, 0]);\
\cf2 Server\cf3 .internal.sendBundle(1, [\cf5 "/n_free"\cf3 , 2002]);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "brown"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "gray"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "clipnoise"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/s_trace"\cf3 , 2002);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "thru"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/s_trace"\cf3 , 2002);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "ring"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
\
\cf2 (\
SynthDef\cf3 (\cf5 "klank"\cf3 , \{\
	\cf2 var\cf3  out;\
	out = \cf2 Klank\cf3 .ar(`[Array.series(7,1),\cf2 Array\cf3 .geom(7,1,0.6),\cf2 Array\cf3 .fill(7,0.2)], \{\cf2 WhiteNoise\cf3 .ar(0.00006)\}.dup, 300);\
	\cf2 Out\cf3 .ar(0, out.distort);\
\}).writeDefFile;\
\cf0 s.sendMsg(\cf6 "/d_load"\cf0 , \cf6 "synthdefs/klank.scsyndef"\cf0 );\
\cf3 )\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "klank"\cf3 , 2002, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2002);\
\
(\
\cf2 SynthDef\cf3 (\cf5 "bubbles"\cf3 , \{\
	\cf2 var\cf3  f, zout;\
	f = \cf2 LFSaw\cf3 .kr(0.4, 0, 24, \cf2 LFSaw\cf3 .kr([8,7.23], 0, 3, 80)).midicps; \cf4 // glissando function\
\cf3 	zout = \cf2 CombN\cf3 .ar(\cf2 SinOsc\cf3 .ar(f, 0, 0.04), 0.2, 0.2, 4); \cf4 // echoing sine wave\
\cf3 	\cf2 Out\cf3 .ar(0, zout.postln);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/bubbles.scsyndef"\cf3 );\
)\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "bubbles"\cf3 , 2003, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2003);\
\
(\
\cf2 SynthDef\cf3 (\cf5 "moto-rev"\cf3 , \{\
	\cf2 var\cf3  x;\
	x = \cf2 RLPF\cf3 .ar(\cf2 LFPulse\cf3 .ar(\cf2 SinOsc\cf3 .kr(0.2, 0, 10, 21), [0,0.1], 0.1), 100, 0.1).clip2(0.4);\
	\cf2 Out\cf3 .ar(0, x);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/moto-rev.scsyndef"\cf3 );\
)\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "moto-rev"\cf3 , 2004, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2004);\
\
s.sendMsg(\cf5 "/g_freeAll"\cf3 , 0);\
\
\
(\
\cf4 // define a synth\
\cf2 SynthDef\cf3 (\cf5 "glissine"\cf3 , \{\
	\cf2 var\cf3  freq;\
	freq = \cf2 XLine\cf3 .kr(8000,300,4);\
	\cf2 Out\cf3 .ar(0, \cf2 SinOsc\cf3 .ar(freq, 0, 0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/glissine.scsyndef"\cf3 );\
)\
\
(\
\cf4 // define a synth\
\cf2 SynthDef\cf3 (\cf5 "glissine2"\cf3 , \{\
	\cf2 var\cf3  freq;\
	freq = \cf2 XLine\cf3 .kr(8000,300,4);\
	\cf2 FreeSelfWhenDone\cf3 .kr(freq);\
	\cf2 Out\cf3 .ar(0, \cf2 SinOsc\cf3 .ar(freq, 0, 0.1));\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/glissine2.scsyndef"\cf3 );\
)\
\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "glissine2"\cf3 , 2003, 1, 0);\
s.sendMsg(\cf5 "/n_free"\cf3 , 2003);\
\
s = \cf2 Server\cf3 .local;\
(\
\cf2 SynthDef\cf3 (\cf5 "env2"\cf3 , \{ \cf2 arg\cf3  freq=800, gate = 1;\
	\cf2 var\cf3  out, eg, fc, osc, rq;\
	eg = \cf2 EnvGen\cf3 .kr(\cf2 Env\cf3 .adsr(0.03,0.3,0.1,0.8), gate);\
	fc = \cf2 SinOsc\cf3 .kr(0.27,0,1400,2000);\
	rq = \cf2 SinOsc\cf3 .ar(0.13,0,0.2,0.8);\
	osc = \cf2 Mix\cf3 .fill(10, \{ \cf2 LFSaw\cf3 .ar(freq * [0.5,1].scramble * \{\cf2 Rand\cf3 (0.98,1.02)\}.dup, 0, 0.04) \});\
	out = \cf2 RLPF\cf3 .ar(osc, fc, 0.1) * 0.3;\
	\cf2 FreeSelfWhenDone\cf3 .kr(eg);\
	\cf2 Out\cf3 .ar(0, out * eg);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/env2.scsyndef"\cf3 );\
)\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "env2"\cf3 , 2003, 1, 0, \cf7 \\freq\cf3 , 400);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2003, \cf7 \\gate\cf3 , 0);\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "env2"\cf3 , 2004, 1, 0, \cf7 \\freq\cf3 , 500);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2004, \cf7 \\gate\cf3 , 0);\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "env2"\cf3 , 2005, 1, 0, \cf7 \\freq\cf3 , 600);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2005, \cf7 \\gate\cf3 , 0);\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "env2"\cf3 , 2006, 1, 0, \cf7 \\freq\cf3 , 800);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2006, \cf7 \\gate\cf3 , 0);\
\
\
(\
\cf2 SynthDef\cf3 (\cf5 "busy"\cf3 , \{\
	\cf2 var\cf3  out;\
	out = \cf2 Pan2\cf3 .ar(\
		\cf2 FSinOsc\cf3 .ar(\cf2 Rand\cf3 (400,2400.0), 0, \cf2 LFPulse\cf3 .kr(\cf2 ExpRand\cf3 (0.5,8), 0, \cf2 Rand\cf3 (0,0.7), 0.04)),\
	\cf2 Rand\cf3 (-1,1));\
	\cf2 Out\cf3 .ar(0, out);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/busy.scsyndef"\cf3 );\
)\
\
(\
r = \cf2 Routine\cf3 (\{\
	10.do(\{ \cf2 arg\cf3  i;\
		s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "busy"\cf3 , 2100+i, 1, 0);\
		s.sendBundle(5, [\cf5 "/n_free"\cf3 , 2100+i]);\
		1.wait;\
	\});\
	\cf7 \\done\cf3 .postln;\
\});\
\cf2 SystemClock\cf3 .play(r);\
)\
\
\
(\
\cf4 // define a synth\
\cf2 SynthDef\cf3 (\cf5 "playbuf"\cf3 , \{ \cf2 arg\cf3  rate = 1;\
	\cf2 var\cf3  out;\
	out = \cf2 Mix\cf3 (\cf2 PlayBuf\cf3 .ar(2, 0, rate*[1,1.04,1.08,1.12], loop: 1)) * 0.3;\
	\cf2 Out\cf3 .ar(0, out);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/playbuf.scsyndef"\cf3 );\
)\
\
(\
\cf4 // define a synth\
\cf2 SynthDef\cf3 (\cf5 "playbuf"\cf3 , \{ \cf2 arg\cf3  rate = 1, trig = 0;\
	\cf2 var\cf3  out;\
	out = \cf2 Mix\cf3 (\cf2 PlayBuf\cf3 .ar(1, 0, rate*0.25, trig, 10000, loop: 0)) * 0.3;\
	\cf2 Out\cf3 .ar(0, out);\
\}).writeDefFile;\
s.sendMsg(\cf5 "/d_load"\cf3 , \cf5 "synthdefs/playbuf.scsyndef"\cf3 );\
)\
\
s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "playbuf"\cf3 , 2003, 1, 0, \cf7 \\rate\cf3 , 1);\
\
s.sendMsg(\cf5 "/n_set"\cf3 , 2003, \cf7 \\trig\cf3 , 1);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2003, \cf7 \\trig\cf3 , 0);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2003, \cf7 \\trig\cf3 , 1);\
s.sendMsg(\cf5 "/n_set"\cf3 , 2003, \cf7 \\trig\cf3 , 0);\
\
s.sendMsg(\cf5 "/b_allocRead"\cf3 , 0, \cf5 "sounds/a11wlk01.wav"\cf3 );\
\
s.sendMsg(\cf5 "/b_alloc"\cf3 , 0, 100000, 2);\
\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Submarine.aiff"\cf3 );\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Ping.aiff"\cf3 , 0,-1,50000);\
\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Morse.aiff"\cf3 , 0,-1, 75000.rand);\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Purr.aiff"\cf3 , 0,-1, 75000.rand);\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Funk.aiff"\cf3 , 0,-1,75000.rand);\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Blow.aiff"\cf3 , 0,-1,75000.rand);\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Frog.aiff"\cf3 , 0, -1, 75000.rand);\
s.sendMsg(\cf5 "/b_read"\cf3 , 0, \cf5 "/System/Library/Sounds/Glass.aiff"\cf3 , 0, -1, 87500.rand);\
\
s.sendMsg(\cf5 "/n_free"\cf3 , 2003);\
\
}