{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red255\green3\blue3;\red191\green0\blue0;\red96\green96\blue96;
\red0\green0\blue191;}
\vieww10760\viewh13640\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\fs36 \cf0 \
SuperCollider 3 Synth Server Architecture\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
copyright \'a9 2002 James McCartney\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 The SuperCollider 3 Synth Server is a simple but powerful synthesis engine. While synthesis is running, new modules can be created, destroyed and repatched, sample buffers can be created and reallocated. Effects processes can be created and patched into a signal flow dynamically at scheduled times.  All running modules are ordered in a tree of nodes that define an order of execution. Patching between modules is done through global audio and control buses. \
\
All commands are received via TCP or UDP using a simplified version of Open Sound Control (OSC). The synth server and its client(s) may be on the same machine or across a network. The synth server does not send or receive MIDI. It is expected that the client will send all control commands. If MIDI is desired, it is up to the client to receive it and convert it to appropriate OSC commands for the synth engine.\
\
Synth definitions are stored in files generated by the SuperCollider language application. Unit generator definitions are Mach-O bundles (not to be confused with CFBundles). The Unit generator API is a simple C interface.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 \
\
\
Main Design Concepts
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Node\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 A Node is an addressable node in a tree of nodes run by the synth engine. There are two types, Synths and Groups. The tree defines the order of execution of all Synths. All nodes have an integer ID.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 \
Group
\f0\b0 \
A Group is a collection of Nodes represented as a linked list. A new Node may be added to the head or tail of the group. The Nodes within a Group may be controlled together. The Nodes in a Group may be both Synths and other Groups. At startup there is a top level group with an ID of zero that defines the root of the tree.\
\

\f1\b Synth
\f0\b0 \
A Synth is a collection of unit generators that run together. They can be addressed and controlled by commands to the synthesis engine. They read input and write output to global audio and control buses. Synths can have their own local controls that are set via commands to the server.\
\

\f1\b Synth Definition
\f0\b0 \
Synths are created from Synth Definitions. Synth Definition files are created by the SuperCollider language application and are loaded into the synth server. Synth Definitions are referred to by name.\
\

\f1\b Audio Buses
\f0\b0 \
Synths send audio signals to each other via a single global array of audio buses.  Audio buses are indexed by integers beginning with zero. Using buses rather than connecting synths to each other directly allows synths to connect themselves to the community of other synths without having to know anything about them specifically. The lowest numbered buses get written to the audio hardware outputs. Immediately following the output buses are the input buses, read from the audio hardware inputs. The number of bus channels defined as inputs and outputs do not have to match that of the hardware.\
\

\f1\b Control Buses
\f0\b0 \
Synths can send control signals to each other via a single global array of control buses.  Buses are indexed by integers beginning with zero.\
\

\f1\b Buffers
\f0\b0 \
Buffers are arrays of 32 bit floating point values with a small descriptive header. Buffers are stored in a single global array indexed by integers beginning with zero. Buffers may be safely allocated, loaded and freed while synthesis is running, even while unit generators are using them. Buffers are used for wave tables, sample buffers, delay lines, envelopes, or for any other need which can use an array of floating point values. Sound files may be loaded into or written from buffers.\
\

\f1\b Unit Generator Definitions
\f0\b0 \
Unit Generator Definitions are plug-ins loaded automatically when the program starts. They are binary code libraries that are used as building blocks by Synths to build synthesis algorithms. Unit Generator Definitions have names that match the names of SuperCollider language classes used in building Synth Definitions. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 \
\
Command Line Arguments\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 One of -u or -t must be supplied. Both may be supplied.
\fs36 \

\fs24 -u 
\f2\i udp-port-number
\f0\i0 \
	a port number 0-65535. \
-t 
\f2\i tcp-port-number
\f0\i0 \
	a port number 0-65535\
	\
-v 
\f2\i device-name
\f0\i0 \
	Name of a sound i/o device to use. If not specified, the default device is used.\
	Currently this is ignored and the default device is used.\
	\
-a 
\f2\i num-audio-bus-channels
\f0\i0 \
	number of audio bus channels (default = 128).\
	The space allocated for audio buses is: (numchannels * (blocksize + 1) * 4)\
-i 
\f2\i num-input-bus-channels
\f0\i0 \
	number of audio input bus channels (default = 2)\
-o 
\f2\i num-output-bus-channels
\f0\i0 \
	number of audio output bus channels (default = 2)\
-c 
\f2\i num-control-bus-channels
\f0\i0 \
	number of control bus channels (default = 4096)\
	The space allocated for control buses is: (numchannels * 8)\
-b 
\f2\i num-buffers
\f0\i0 \
	number of sample buffers (default = 1024)\
-n 
\f2\i max-nodes
\f0\i0 \
	maximum number of nodes (default = 1024)\
-d 
\f2\i max-synth-defs
\f0\i0 \
	maximum number of synth definitions (default = 1024)\
-z 
\f2\i block-size
\f0\i0 \
	The number of samples in one control period.\
-m 
\f2\i real-time-memory-size
\f0\i0 \
	The number of kilobytes of real time memory. \
	This memory is used to allocate synths and any memory that \
	unit generators themselves allocate. (default = 2048)\
	\
-l 
\f2\i max-logins
\f0\i0 \
	maximum number of named return addresses stored (default = 64)\
	also maximum number of tcp connections accepted\
-p 
\f2\i session-password
\f0\i0 \
	When using TCP, the session password must be the first command sent.\
	The default is no password.\
	UDP ports never require passwords, so if password protection is desired, \
	use TCP.\
\
example:\
\
supercollider_synth -u 57117 >synth_log &\
	\
	Accept commands via UDP on port 57117. \
	Send output to file "synth_log"\
	Run asynchronously: &.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 \
Binary Format of Messages\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 Messages are similar in format to Open Sound Control messages, except that OSC #bundles may not be nested, and pattern matching of the command name is not performed. When streamed via TCP, Messages are each preceeded by a 32 bit integer giving the length in bytes of the message. UDP datagrams contain this length information already.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Types:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 All values are in network byte order.\
	
\f1\b long
\f0\b0  - a 64 bit integer. Used for time stamps only.\
	
\f1\b int
\f0\b0  - a 32 bit integer.\
	
\f1\b float
\f0\b0  - a 32 bit floating point number.\
	
\f1\b string
\f0\b0  - a string of 8 bit ASCII characters, zero padded to a multiple of 4 bytes.\
	
\f1\b bytes
\f0\b0  - a buffer of data preceeded by a 32 bit length field and padded to a multiple of 4 bytes. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Tags:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 Command arguments have single character tags which occur in a tag string to identify their types.\
	'i' - an int.\
	'f' - a float\
	's' - a string\
	'b' - bytes\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 a Command consists of:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - the command name. See the Command Reference below.\
	string - a string with tags defined by the types of the arguments to follow. \
			The tag string begins with a comma ',' character.\
	...any combination of arguments of types: int, float, or string.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 a Bundle consists of:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	time stamp - long. Time stamps are in the same format as defined by Open Sound Control :  The top 32 bits are seconds since 1970 and the lower 32 bits represent the 32 bit fraction of one second.\
	...a series of Commands each preceded by a 32-bit integer byte length.\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 a Message consists of:\
	using UDP : \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 		one Bundle or one Command.\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 	using TCP : \
		
\f0\b0 int - the length in bytes of the following message.
\f1\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 		one Bundle or one Command.\
	\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 SuperCollider Server Synth Engine Command Reference\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
The following is a list of all server commands and their arguments. \
If a command's description contains the word 
\f1\b Asynchronous
\f0\b0 , then that command will be passed to a background thread to complete so as not to steal CPU time from the audio synthesis thread. All asynchronous commands send a reply to the client when they are completed. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Master Controls
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /quit						quit program
\f0\b0 \
	no arguments.\
\
Exits the synthesis server.\

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 just before completion.\
\

\f1\b /notify
\f0\b0 					
\f1\b register to receive notifications from server
\f0\b0 \
	int - one to receive notifications, zero to stop receiving them.\
	\
If argument is one, server will remember your return address and send you notifications. if argument is zero, server will stop sending you notifications. \

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /status					query the status
\f0\b0 \
	no arguments.\
\
Replies to sender with the following message.\
/status.reply\
	int - 1. unused.\
	int - number of unit generators.\
	int - number of synths.\
	int - number of groups.\
	int - number of loaded synth definitions.\
\
\

\f1\b /cmd					plug-in defined command\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - command name\
	...any arguments\
	\
Commands are defined by plug-ins.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Synth Definition Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /d_recv
\f0\b0 					
\f1\b receive a synth definition file
\f0\b0 \
	bytes - buffer of data. \
\
Loads a file of synth definitions from a buffer in the message. Resident definitions with the same names are overwritten. \
\
\

\f1\b /d_load
\f0\b0 					
\f1\b load synth definition
\f0\b0 \
	string - pathname of file. \
\
Loads a file of synth definitions. Resident definitions with the same names are overwritten. \
\
\

\f1\b /d_loadDir					load a directory of synth definitions
\f0\b0 \
	string - pathname of directory.\
	\
Loads a directory of synth definitions files. Resident definitions with the same names are overwritten. \
\

\f1\b /d_freeAll					free all synth definitions
\f0\b0 \
	no arguments.\
\
Deletes all synth definitions. May not be called when synthesis is running. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Node Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 n_free					delete a node.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	\
Stops the node abruptly, removes it from its group, and frees its memory.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_run					turn node on or off\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - run flag\
	\
If the run flag set to zero then the node will not be executed.\
If the run flag is set back to one, then it will be executed.\
Using this method to start and stop nodes can cause a click if the node is not silent at the time run flag is toggled. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_set					set a node's control value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Takes a list of pairs of control indices and values and sets the controls to those values. If the node is a group, then it sets the controls of every node in the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_setn					set ranges of a node's control value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of sequential controls to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of control indices to sets of values. For each range, the starting control index is given followed by the number of controls to change, followed by the values. If the node is a group, then it sets the controls of every node in the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_fill					fill ranges of a node's control value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of values to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of control indices to single values. For each range, the starting control index is given followed by the number of controls to change, followed by the value to fill. If the node is a group, then it sets the controls of every node in the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_map					map a node's controls to read from a bus\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	[\
		int or string - a control index or name\
		int - control bus index\
	] * N\
	\
Takes a list of pairs of control names or indices and bus indices and causes those controls to be read from a global control bus instead of responding to 
\f1\b n_set
\f0\b0 , 
\f1\b n_setn
\f0\b0  and 
\f1\b n_fill
\f0\b0  commands. If the node is a group, then it maps the controls of every node in the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_before					place a node before another\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - the ID of the node to place (A)\
	int - the ID of the node before which the above is placed (B)\
\
Places node A in the same group as node B, to execute immediately before node B.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_after					place a node after another\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - the ID of the node to place (A)\
	int - the ID of the node after which the above is placed (B)\
\
Places node A in the same group as node B, to execute immediately after node B.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Synth Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /s_new						create a new synth\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - synth definition name\
	int - synth ID\
	int - parent group ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Create a new synth from a synth definition, give it an ID, and add it to the tail of a group. Controls may be set when creating the synth. The control arguments are the same as for the 
\f1\b n_set
\f0\b0  command.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /s_trace						trace unit generators inputs and outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - synth ID\
	\
Causes the synth to print out the values of the inputs and outputs of its unit generators for one control period.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 \
Group Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /g_new					create a new group\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - new group ID\
	int - parent group ID\
	\
Create a new group and add it to a parent group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /g_head					add node to head of group\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - group ID\
	int - node ID\
	\
Adds the node to the head (first to be executed) of the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /g_tail					add node to tail of group\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - group ID\
	int - node ID\
	\
Adds the node to the tail (last to be executed) of the group.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /g_freeAll					delete all nodes in a group.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - group ID\
	\
Frees all nodes in the group. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Unit Generator Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /u_cmd					send a command to a unit generator\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - unit generator index\
	string - command name\
	...any arguments\
	\
Sends all arguments following the command name to the unit generator to be performed. Commands are defined by unit generator plug ins.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Buffer Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
Buffers are stored in a global array, indexed by integers starting at zero. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /b_alloc					allocate buffer space.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	int - number of frames\
	int - number of channels (optional. default = 1 channel)\
	\
Allocates zero filled buffer to number of channels and samples.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_allocRead				allocate buffer space and read a sound file.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = 0, see below)\
	\
Allocates buffer to number of channels of file and number of samples requested, or fewer if sound file is smaller than requested. Reads sound file data from the given starting frame in the file. If the number of frames argument is less than or equal to zero, the entire file is read. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_read					read sound file data into an existing buffer.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
	\
Reads sound file data from the given starting frame in the file and writes it to the given starting frame in the buffer. If number of frames is less than zero, the entire file is read. \
If reading a file to be used by DiskIn ugen then you will want to set "leave file open" to one, otherwise set it to zero.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_write					write sound file data.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	string - path name of a sound file.\
	string - header format.\
	string - sample format.\
	int - number of frames to write (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
Write a buffer as a sound file.\
Header format is one of: \
	"aiff", "next", "wav", "ircam"", "raw"\
Sample format is one of:\
	"int8", "int16", "int24", "int32", "float", "double", "mulaw", "alaw"\
Not all combinations of header format and sample format are possible.\
If number of frames is less than zero, all samples from the starting frame to the end of the buffer are written.\
If reading a file to be used by DiskIn ugen then you will want to set "leave file open" to one, otherwise set it to zero. If "leave file open" is set to one then the file is created, but no frames are written until the DiskOut ugen does so.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_free					free buffer data.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	\
Frees buffer space allocated for this buffer. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_zero					zero sample data\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	\
Sets all samples in the buffer to zero. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_set					set sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	[\
		int - a sample index\
		float - a sample value\
	] * N\
	\
Takes a list of pairs of sample indices and values and sets the samples to those values. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /b_setn					set ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of sequential samples to change (M)\
		[\
			float - a sample value\
		] * M\
	] * N\
	\
Set contiguous ranges of sample indices to sets of values. For each range, the starting sample index is given followed by the number of samples to change, followed by the values.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /b_fill					fill ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of samples to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of sample indices to single values. For each range, the starting sample index is given followed by the number of samples to change, followed by the value to fill.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Control Bus Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /c_set					set sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - a bus index\
		float - a control value\
	] * N\
	\
Takes a list of pairs of bus indices and values and sets the buses to those values. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /c_setn					set ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - starting bus index\
		int - number of sequential channels to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of buses to sets of values. For each range, the starting bus index is given followed by the number of channels to change, followed by the values.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /c_fill						fill ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - starting bus index\
		int - number of channels to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of buses to single values. For each range, the starting sample index is given followed by the number of samples to change, followed by the value to fill.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /c_get					get sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - a bus index\
	] * N\
	\
Takes a list of buses and replies to sender with the corresponding 
\f1\b c_set
\f0\b0  command.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /c_getn					get ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - starting bus index\
		int - number of sequential samples to get (M)\
	] * N\
	\
Get contiguous ranges of buses. Replies to sender with the corresponding 
\f1\b c_setn
\f0\b0  command.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Non Real Time Mode Commands
\f0\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 \
/nrt_start						begin non real time mode, write a file header\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - path name of input sound file. If null string, then no input.\
	string - path name of output sound file to create.\
	string - header format.\
	string - sample format.\
	int - number of channels.\
\
Begin accepting messages in non real time mode. All time stamped messages sent will be stored in a queue until 
\f1\b /nrt_end
\f0\b0  or 
\f1\b /nrt_advance
\f0\b0  is received. \
A sound file is created to store the calculated output.\
Real time and non real time modes may not operate concurrently. \
OSC time begins at zero for non real time mode.\
Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /nrt_end						end real time mode, close file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	no arguments.\
	\
This message should be sent in a bundle in non real time mode. \
The bundle timestamp will establish the ending time of the file. \
This command will end non real time mode and close the sound file.\
Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /nrt_advance					calculate samples in non real time mode.
\f0\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	no arguments.\
\
This message should be sent in a bundle in non real time mode. The synthesizer will calculate samples up to the bundle's time stamp. No messages with earlier time stamps should be sent after this one. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 \
\
Replies to Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
These messages are sent by the server in reponse to some commands.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /done					an asynchronous message has completed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - the name of the command\
\
Sent in response to all asynchronous commands. Sent only to the sender of the original message.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /fail						an error occurred.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - the name of the command\
	string - the error message.\
\
There was a problem. Sent only to the sender of the original message.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /late						a command was received too late.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - the high 32 bits of the original time stamp.\
	int - the low 32 bits of the original time stamp.\
	int - the high 32 bits of the time it was executed.\
	int - the low 32 bits of the time it was executed.\
\
The command was received too late to be executed on time. Sent only to the sender of the original message.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Notifications from Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
These messages are sent as notification of some event to all clients who have registered via the /notify command .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_go					a node was started\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - group ID\
	\
This command is sent to all registered clients when a node is created.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_end					a node ended\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - group ID\
	\
This command is sent to all registered clients when a node ends and is deallocated.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_off					a node was turned off\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - group ID\
	\
This command is sent to all registered clients when a node is turned off.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_on					a node was turned on\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - group ID\
	\
This command is sent to all registered clients when a node is turned on.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /n_move					a node was moved\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - group ID\
	\
This command is sent to all registered clients when a node is moved from one group to another.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /tr						a trigger message\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - node ID\
	int - trigger ID\
	float - trigger value\
\
This command is the mechanism that synths can use to trigger events in clients.\
The node ID is the node that is sending the trigger. The trigger ID and value are determined by inputs to the SendTrig unit generator which is the originator of this message.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 Unit Generator Plug-In Example\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
Unit generator plug-ins will be described in another document. But for an example of what one looks like, here is the complete source to a plug-in for a sample-and-hold unit generator called Latch. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f3\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
#include \cf4 "SC_PlugIn.h"\cf0 \
\
static \cf5 InterfaceTable\cf0  *ft;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
struct \cf5 Latch\cf0  : public \cf5 Unit\cf0 \
\{\
	float mLevel, m_prevtrig;\
\};\
\
\
extern \cf4 "C"\cf0 \
\{\
	void start();\
	void load(\cf5 InterfaceTable\cf0  *inTable);\
\
	void \cf5 Latch_Ctor\cf0 (\cf5 Latch\cf0  *unit);\
	void \cf5 Latch_next_ak\cf0 (\cf5 Latch\cf0  *unit, int inNumSamples);\
	void \cf5 Latch_next_aa\cf0 (\cf5 Latch\cf0  *unit, int inNumSamples);\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 // Codewarrior's linker has a bug that demands this function be defined...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 void start() \{\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
void \cf5 Latch_Ctor\cf0 (\cf5 Latch\cf0  *unit)\
\{\
	if (\cf5 INRATE\cf0 (1) == calc_FullRate) \{\
		\cf5 SETCALC\cf0 (\cf5 Latch_next_aa\cf0 );\
	\} else \{\
		\cf5 SETCALC\cf0 (\cf5 Latch_next_ak\cf0 );\
	\}\
\
	unit->m_prevtrig = 0.f;\
	unit->mLevel = 0.f;\
	\
	\cf5 ZOUT0\cf0 (0) = 0.f;\
\}\
\
\
void \cf5 Latch_next_ak\cf0 (\cf5 Latch\cf0  *unit, int inNumSamples)\
\{\
	float *out = \cf5 ZOUT\cf0 (0);\
	float level = unit->mLevel;\
	\
	float curtrig = \cf5 ZIN0\cf0 (1);\
	if (unit->m_prevtrig <= 0.f && curtrig > 0.f) level = \cf5 ZIN0\cf0 (0);\
	\
	\cf5 LOOP\cf0 (inNumSamples, *++out = level; );\
\
	unit->m_prevtrig = curtrig;\
	unit->mLevel = level;\
\}\
\
\
void \cf5 Latch_next_aa\cf0 (\cf5 Latch\cf0  *unit, int inNumSamples)\
\{\
	float *out = \cf5 ZOUT\cf0 (0);\
	float *in = \cf5 ZIN\cf0 (0);\
	float *trig = \cf5 ZIN\cf0 (1);\
	float prevtrig = unit->m_prevtrig;\
	float level = unit->mLevel;\
	\
	\cf5 LOOP\cf0 (inNumSamples, \
		float curtrig = *++trig;\
		if (prevtrig <= 0.f && curtrig > 0.f) level = *++in;\
		else \{ ++in; \}\
		*++out = level;\
		prevtrig = curtrig;\
	);\
	unit->m_prevtrig = prevtrig;\
	unit->mLevel = level;\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf0 \
void load(\cf5 InterfaceTable\cf0  *inTable)\
\{\
	ft = inTable;\
\
	\cf5 DefineSimpleUnit\cf0 (\cf5 Latch\cf0 );\
	\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf3 ///////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs36 \cf0 Glossary\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 buffer
\f0\b0  - a header and array of floating point sample data. Buffers are used for sound files, delay lines, arrays of global controls, and arrays of inter-synth patch points.\
\

\f1\b group
\f0\b0  - a linked list of nodes. groups provide ways to control execution of many nodes at once. a group is a kind of node.\
\

\f1\b MIDI
\f0\b0  - a protocol for sending music control data between synthesizers.\
\

\f1\b node
\f0\b0  - an object in a tree of objects executed in a depth first traversal order by the synth engine. There are two types of nodes, synths and groups.\
\

\f1\b Open Sound Control
\f0\b0  - a protocol defined by CNMAT at UCBerkeley for controlling synthesizers. See http://www.cnmat.ucb.edu/OSC .\
\

\f1\b OSC
\f0\b0  - see Open Sound Control.\
\

\f1\b synth
\f0\b0  - a sound processing module. Similar to "voice " in other systems. Synths are referred to by a number.\
\

\f1\b synth definition
\f0\b0  - a definition for creating new synths. similar to "instrument" in other systems.\
\

\f1\b TCP
\f0\b0  - a protocol for streaming data over a network.\
\

\f1\b UDP
\f0\b0  - a protocol for sending datagrams over a network.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
}