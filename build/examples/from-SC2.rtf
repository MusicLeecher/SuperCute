{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
 \
(\
\cf2 // analog bubbles\cf0 \
\{\
	f = \cf3 LFSaw\cf0 .kr(0.4, 0, 24, \cf3 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps; \cf2 // glissando function\cf0 \
	\cf3 CombN\cf0 .ar(\cf3 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4) \cf2 // echoing sine wave\cf0 \
\}.play)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // LFO modulation of Pulse waves and resonant filters\cf0 \
play(\{ \
	\cf3 CombL\cf0 .ar(\
		\cf3 RLPF\cf0 .ar(\cf3 LFPulse\cf0 .ar(\cf3 FSinOsc\cf0 .kr(0.05,0,80,160),0,0.4,0.05), \
		   \cf3 FSinOsc\cf0 .kr([0.6,0.7],0,3600,4000), 0.2),\
		0.3, [0.2,0.25], 2)\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // moto rev\cf0 \
\{\
	\cf3 RLPF\cf0 .ar(\cf3 LFPulse\cf0 .ar(\cf3 SinOsc\cf0 .kr(0.2, 0, 10, 21), 0.1), 100, 0.1).clip2(0.4) \
\}.play)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // scratchy\cf0 \
play(\{  \cf3 RHPF\cf0 .ar(\cf3 BrownNoise\cf0 .ar([0.5,0.5], -0.49).max(0) * 20, 5000, 1)  \})\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // sprinkler\cf0 \
play(\{\
	\cf3 BPZ2\cf0 .ar(\cf3 WhiteNoise\cf0 .ar(\cf3 LFPulse\cf0 .kr(\cf3 LFPulse\cf0 .kr(0.09, 0, 0.16, 10, 7), 0, 0.25, 0.1)))\
\}))\
\
(\
play(\{\
	\cf3 BPZ2\cf0 .ar(\cf3 WhiteNoise\cf0 .ar(\cf3 LFPulse\cf0 .kr(\cf3 MouseX\cf0 .kr(0.2,50), 0, 0.25, 0.1)))\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // harmonic swimming\cf0 \
play(\{\
	\cf3 var\cf0  f, p, z, offset;\
	f = 50;		\cf2 // fundamental frequency\cf0 \
	p = 20;		\cf2 // number of partials per channel\cf0 \
	z = 0.0;		\cf2 // start of oscil daisy chain\cf0 \
	offset = \cf3 Line\cf0 .kr(0, -0.02, 60); \cf2 // causes sound to separate and fade\cf0 \
	p.do(\{ \cf3 arg\cf0  i;\
		z = \cf3 FSinOsc\cf0 .ar(\
				f * (i+1), 		\cf2 // freq of partial\cf0 \
				0,\
				max(0, 			\cf2 // clip negative amplitudes to zero\cf0 \
					\cf3 LFNoise1\cf0 .kr(\
						6 + [4.0.rand2, 4.0.rand2],	\cf2 // amplitude rate \cf0 \
						0.02, 					\cf2 // amplitude scale\cf0 \
						offset					\cf2 // amplitude offset\cf0 \
					)\
				), \
				z\
		)\
	\});\
	z\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // harmonic tumbling\cf0 \
play(\{\
	\cf3 var\cf0  f, p, z, trig;\
	f = 80;	\cf2 // fundamental frequency\cf0 \
	p = 10;	\cf2 // number of partials per channel\cf0 \
	z = 0.0;	\cf2 // start of oscil daisy chain\cf0 \
	trig = \cf3 XLine\cf0 .kr([10,10], 0.1, 60);	\cf2 // trigger probability decreases over time\cf0 \
	p.do(\{ \cf3 arg\cf0  i;\
		z = \cf3 FSinOsc\cf0 .ar(\
				f * (i+1), 		\cf2 // freq of partial\cf0 \
				0,\
				\cf3 Decay2\cf0 .kr(\
					\cf3 Dust\cf0 .kr(	\
						trig,		\cf2 // trigger rate\cf0 \
						0.02		\cf2 // trigger amplitude\cf0 \
					), \
					0.005, 	\cf2 // grain attack time\cf0 \
					0.5.rand	\cf2 // grain decay time\cf0 \
				),\
				z\
		)\
	\});\
	z\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\cf2 // Klank - bank of resonators excited by impulses\cf0 \
\cf3 var\cf0  n, p, z;\
n = 5;	\cf2 // number of simultaneous instruments\cf0 \
p = 15;	\cf2 // number of partials per instrument\cf0 \
	z = `[	\cf2 // filter bank specification :\cf0 \
				\cf3 Array\cf0 .fill(p, \{ 80 + 10000.0.linrand\} ),	\cf2 // frequencies\cf0 \
				\cf3 Array\cf0 .fill(p, \{ 1.0.rand2 \}), 			\cf2 // amplitudes\cf0 \
				\cf3 Array\cf0 .fill(p, \{ 0.2 + 8.0.rand \} )		\cf2 // ring times\cf0 \
			];\
		\cf3 Pan2\cf0 .ar(\
			\cf3 Klank\cf0 .ar(z, \cf3 Dust\cf0 .ar(0.7, 0.04)),\
			1.0.rand2\
		)\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\cf2 // Klank - excited by noise bursts\cf0 \
\cf3 var\cf0  n, p;\
\cf3 var\cf0  exciter, spec;\
n = 5;	\cf2 // number of simultaneous instruments\cf0 \
p = 8;	\cf2 // number of partials per instrument\cf0 \
		exciter = \cf3 Decay\cf0 .ar(\cf3 Dust\cf0 .ar(0.6, 0.001), 3.1, \cf3 WhiteNoise\cf0 .ar);\
		spec = \cf3 Array\cf0 .fill(2, \{\
			`[\
				\cf3 Array\cf0 .fill(p, \{ 80 + 10000.0.linrand\} ),\
				\cf3 nil\cf0 ,\
				\cf3 Array\cf0 .fill(p, \{ 0.2 + 4.0.rand \} )\
			]\
		\});\
		\cf3 Klank\cf0 .ar(spec, exciter)\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // what was I thinking?\cf0 \
\{\
	z = \cf3 RLPF\cf0 .ar(\
		\cf3 Pulse\cf0 .ar(\
			max( \cf3 SinOsc\cf0 .kr(4, 0, 1, 80),\
				\cf3 Decay\cf0 .ar(\cf3 LFPulse\cf0 .ar(0.1, 0, 0.05, \cf3 Impulse\cf0 .ar(8, 0, 500)), 2)\
			), \
			\cf3 LFNoise1\cf0 .kr(0.157, 0.4, 0.5), \
			0.04),\
		\cf3 LFNoise1\cf0 .kr(0.2, 2000, 2400),\
		0.2);\
	y = z * 0.6;\
	z +  [\
			  \cf3 CombL\cf0 .ar(y, 0.06, \cf3 LFNoise1\cf0 .kr(0.3.rand, 0.025, 0.035), 1) \
			+ \cf3 CombL\cf0 .ar(y, 0.06, \cf3 LFNoise1\cf0 .kr(0.3.rand, 0.025, 0.035), 1)\
		,\
			  \cf3 CombL\cf0 .ar(y, 0.06, \cf3 LFNoise1\cf0 .kr(0.3.rand, 0.025, 0.035), 1)\
			+ \cf3 CombL\cf0 .ar(y, 0.06, \cf3 LFNoise1\cf0 .kr(0.3.rand, 0.025, 0.035), 1)\
		]\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // police state\cf0 \
\cf3 var\cf0  n;\
n = 4;	\cf2 // number of sirens\cf0 \
play(\{\
	\cf3 CombL\cf0 .ar(\
		\cf3 Mix\cf0 .arFill(n, \{\
			\cf3 Pan2\cf0 .ar(\
				\cf3 SinOsc\cf0 .ar(\
					\cf3 SinOsc\cf0 .kr(0.1.rand + 0.02, 2pi.rand, 600.rand, 1000 + 300.rand2), \
					0, \
					\cf3 LFNoise2\cf0 .ar(100 + 20.0.rand2, 0.1)\
				),\
				1.0.rand2\
			)\
		\}) \
		+ \cf3 LFNoise2\cf0 .ar(\cf3 LFNoise2\cf0 .kr([0.4,0.4], 90, 620), \cf3 LFNoise2\cf0 .kr([0.3,0.3], 0.15, 0.18)), \
		0.3, 0.3, 3)\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\cf2 // cymbalism\cf0 \
\cf3 var\cf0  p;\
		\cf3 var\cf0  z, f1, f2;\
p = 15;	\cf2 // number of partials per channel per 'cymbal'.\cf0 \
		f1 = 500 + 2000.0.rand;\
		f2 = 8000.0.rand;\
		z = \cf3 Array\cf0 .fill(2, \{\
			`[	\cf2 // sine oscil bank specification :\cf0 \
				y = \cf3 Array\cf0 .fill(p, \{ f1 + f2.rand\} ), \cf2 // frequencies\cf0 \
				\cf3 nil\cf0 , 							\cf2 // amplitudes default to 1.0\cf0 \
				\cf3 Array\cf0 .fill(p, \{ 1.0 + 4.0.rand \})	\cf2 // ring times\cf0 \
			]\
		\});\
		\cf3 Klank\cf0 .ar(z, \cf3 Decay\cf0 .ar(\cf3 Impulse\cf0 .ar(3.0.rand + 0.5), 0.004, \cf3 WhiteNoise\cf0 .ar(0.03)));\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // synthetic piano\cf0 \
\cf3 var\cf0  n;\
n = 6;	\cf2 // number of keys playing\cf0 \
play(\{\
	\cf3 Mix\cf0 .ar(\cf3 Array\cf0 .fill(n, \{	\cf2 // mix an array of notes\cf0 \
		\cf3 var\cf0  delayTime, pitch, detune, strike, hammerEnv, hammer;\
	\
		\cf2 // calculate delay based on a random note\cf0 \
		pitch = (36 + 54.rand); \
		strike = \cf3 Impulse\cf0 .ar(0.1+0.4.rand, 2pi.rand, 0.1); \cf2 // random period for each key\cf0 \
		hammerEnv = \cf3 Decay2\cf0 .ar(strike, 0.008, 0.04); \cf2 // excitation envelope\cf0 \
		\cf3 Pan2\cf0 .ar(\
			\cf2 // array of 3 strings per note\cf0 \
			\cf3 Mix\cf0 .ar(\cf3 Array\cf0 .fill(3, \{ \cf3 arg\cf0  i;\
				\cf2 // detune strings, calculate delay time :\cf0 \
				detune = #[-0.05, 0, 0.04].at(i);\
				delayTime = 1 / (pitch + detune).midicps;\
				\cf2 // each string gets own exciter :\cf0 \
				hammer = \cf3 LFNoise2\cf0 .ar(3000, hammerEnv); \cf2 // 3000 Hz was chosen by ear..\cf0 \
				\cf3 CombL\cf0 .ar(hammer,		\cf2 // used as a string resonator\cf0 \
					delayTime, 		\cf2 // max delay time\cf0 \
					delayTime,			\cf2 // actual delay time\cf0 \
					6) 				\cf2 // decay time of string\cf0 \
			\})),\
			(pitch - 36)/27 - 1 \cf2 // pan position: lo notes left, hi notes right\cf0 \
		)\
	\}))\
\})\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf3 var\cf0  a, c, d, s, z, y;\
\cf2 // reverberated sine percussion\cf0 \
d = 6; \cf2 // number of percolators\cf0 \
c = 5; \cf2 // number of comb delays\cf0 \
a = 4; \cf2 // number of allpass delays\cf0 \
\
play(\{\
		\cf2 // sine percolation sound :\cf0 \
	s = \cf3 Mix\cf0 .ar(\cf3 Array\cf0 .fill(d, \{ \cf3 Resonz\cf0 .ar(\cf3 Dust\cf0 .ar(2/d, 50), 200 + 3000.0.rand, 0.003)\}) );\
	\
		\cf2 // reverb predelay time :\cf0 \
	z = \cf3 DelayN\cf0 .ar(s, 0.048);\
	\
		\cf2 // 7 length modulated comb delays in parallel :\cf0 \
	y = \cf3 Mix\cf0 .ar(\cf3 CombL\cf0 .ar(z, 0.1, \cf3 LFNoise1\cf0 .kr(\cf3 Array\cf0 .fill(c,\{0.1.rand\}), 0.04, 0.05), 15)); \
	\
		\cf2 // chain of 4 allpass delays on each of two channels (8 total) :\cf0 \
	a.do(\{ y = \cf3 AllpassN\cf0 .ar(y, 0.050, [0.050.rand,0.050.rand], 1) \});\
	\
		\cf2 // add original sound to reverb and play it :\cf0 \
	s+(0.2*y)\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // reverberated noise bursts\cf0 \
\cf3 var\cf0  a, c, d, s, z, y;\
play(\{\
		\cf2 // pink noise percussion sound :\cf0 \
	s = \cf3 Decay\cf0 .ar(\cf3 Dust\cf0 .ar(0.6, 0.2), 0.15, \cf3 PinkNoise\cf0 .ar);\
	\
		\cf2 // reverb predelay time :\cf0 \
	z = \cf3 DelayN\cf0 .ar(s, 0.048);\
	\
		\cf2 // 6 modulated comb delays in parallel :\cf0 \
	y = \cf3 Mix\cf0 .ar(\cf3 CombL\cf0 .ar(z, 0.1, \cf3 LFNoise1\cf0 .kr(\cf3 Array\cf0 .fill(6,\{0.1.rand\}), 0.04, 0.05), 15)); \
	\
		\cf2 // chain of 4 allpass delays on each of two channels (8 total) :\cf0 \
	4.do(\{ y = \cf3 AllpassN\cf0 .ar(y, 0.050, [0.050.rand,0.050.rand], 1) \});\
	\
		\cf2 // add original sound to reverb and play it :\cf0 \
	s+y\
\}))\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
	\cf2 // sample and hold liquidities\cf0 \
	\cf2 // mouse x controls clock rate, mouse y controls center frequency\cf0 \
\{\
	\cf3 var\cf0  clockRate, clockTime, clock, centerFreq, freq, panPos, patch;\
\
	clockRate = \cf3 MouseX\cf0 .kr(1, 200, 1);\
	clockTime = clockRate.reciprocal;\
	clock = \cf3 Impulse\cf0 .kr(clockRate, 0.4);\
\
	centerFreq = \cf3 MouseY\cf0 .kr(100, 8000, 1);\
	freq = \cf3 Latch\cf0 .kr(\cf3 WhiteNoise\cf0 .kr(centerFreq * 0.5, centerFreq), clock);\
	panPos = \cf3 Latch\cf0 .kr(\cf3 WhiteNoise\cf0 .kr, clock);\
	patch = \cf3 CombN\cf0 .ar(\
			\cf3 Pan2\cf0 .ar( \
				\cf3 SinOsc\cf0 .ar(\
					freq, \
					0, \
					\cf3 Decay2\cf0 .kr(clock, 0.1 * clockTime, 0.9 * clockTime)\
				), \
				panPos\
			),\
			0.3, 0.3, 2\
		);\
	patch\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\cf2 // sweepy noise - mouse controls LFO\cf0 \
\{\
	\cf3 var\cf0  lfoDepth, lfoRate, freq, filtered;\
	lfoDepth = \cf3 MouseY\cf0 .kr(200, 8000, \cf4 'exponential'\cf0 );\
	lfoRate = \cf3 MouseX\cf0 .kr(4, 60, \cf4 'exponential'\cf0 );\
	freq = \cf3 LFSaw\cf0 .kr(lfoRate, 0, lfoDepth, lfoDepth * 1.2);\
	filtered = \cf3 RLPF\cf0 .ar(\cf3 WhiteNoise\cf0 .ar([0.03,0.03]), freq, 0.1);\
	\cf3 CombN\cf0 .ar(filtered, 0.3, 0.3, 2, 1, filtered);\
\}.play\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
		\cf3 var\cf0  a, a0, a1, b, c, pan;\
		a0 = 200.0.rand + 40;\
		a1 = a0 + 1.0.rand2;\
		a = [a0, a1];\
		b = 2000.0.rand;\
		c = [a0 + 1.0.rand2, a1 + 1.0.rand2];\
		\cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .ar(a, 0, 1.0.rand * b, b), 0, \cf3 SinOsc\cf0 .kr(c, 0, 0.05, 0.05))\
\}.play;\
)\
\
\cf2 //////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\
\cf2 // aleatoric quartet\cf0 \
\cf2 // mouse x controls density\cf0 \
\
play(\{\
	\cf3 var\cf0  amp, density, dmul, dadd, signal;\
	amp = 0.07;\
	density = \cf3 MouseX\cf0 .kr(0.01,1); \cf2 // mouse determines density of excitation\cf0 \
	\
	\cf2 // calculate multiply and add for excitation probability\cf0 \
	dmul = density.reciprocal * 0.5 * amp;\
	dadd = dmul.neg + amp;\
	\
	signal = \cf3 Mix\cf0 .ar(	\cf2 // mix an array of 4 instruments\cf0 \
		\cf3 Array\cf0 .fill(4, \{\
			\cf3 var\cf0  excitation, freq;\
			\
			excitation = \cf3 PinkNoise\cf0 .ar(\
				\cf2 // if amplitude is below zero it is clipped\cf0 \
				\cf2 // density determines the probability of being above zero\cf0 \
				max(0, \cf3 LFNoise1\cf0 .kr(8, dmul, dadd)) \
			);\
			\
			freq = \cf3 Lag\cf0 .kr(			\cf2 // lag the pitch so it glissandos between pitches\cf0 \
				\cf3 LFNoise0\cf0 .kr(				\cf2 // use low freq step noise as a pitch control\cf0 \
					[1, 0.5, 0.25].choose, 	\cf2 // choose a frequency of pitch change\cf0 \
					7, 					\cf2 // +/- 7 semitones\cf0 \
					66 + 30.rand2			\cf2 // random center note\cf0 \
				).round(1), 		\cf2 // round to nearest semitone\cf0 \
				0.2				\cf2 // gliss time\cf0 \
			).midicps;			\cf2 // convert to hertz\cf0 \
			\
			\cf3 Pan2\cf0 .ar(	\cf2 // pan each intrument\cf0 \
				\cf3 CombL\cf0 .ar(excitation, 0.02, freq.reciprocal, 3), \cf2 // comb delay simulates string\cf0 \
				1.0.rand2		\cf2 // random pan position\cf0 \
			);\
	\}));\
	\
	\cf2 // add some reverb via allpass delays\cf0 \
	5.do(\{ signal = \cf3 AllpassN\cf0 .ar(signal, 0.05, [0.05.rand,0.05.rand], 1) \});\
	\cf3 LeakDC\cf0 .ar( signal, 0.995);		\cf2 // delays build up a lot of DC, so leak it out here.\cf0 \
\})\
)\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
		\cf3 var\cf0  mix, out, n=8;\
		r = \cf3 LFNoise0\cf0 .kr(rrand(0.2,1.0), 1,1).squared * \cf3 MouseX\cf0 .kr;\
		mix = \cf3 Klank\cf0 .ar(\
			`[\
				\cf3 Array\cf0 .fill(n, \{ exprand(1.0,20.0) \}),\
				\cf3 nil\cf0 ,\
				\cf3 Array\cf0 .fill(n, \{ 0.2.rand \})\
			],\
			\cf3 Blip\cf0 .ar(r, [rrand(2,5),rrand(2,5)], 0.1)\
		).fold2(0.2).cubed * 12;\
		mix = \cf3 Mix\cf0 .arFill(3, \{ \cf3 CombL\cf0 .ar(mix, 0.1, 0.03.linrand, 4.0.linrand) \});\
		out = mix.distort * 0.5;\
		6.do(\{ out = \cf3 AllpassN\cf0 .ar(out, 0.05, [0.05.rand, 0.05.rand], 3) \});\
		out = \cf3 LeakDC\cf0 .ar(out);\
\}.play\
)\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
	\cf3 var\cf0  root, scale;\
\
	\cf2 // struck string\cf0 \
	\cf3 var\cf0  trig, p, exc, x, freq, s;\
	root = rrand(3,6);\
	scale = #[0,2,4,5,7,9,11];\
\
	freq = (scale.choose + #[24,36,48,60,72,84].choose + root).midicps;\
	exc = \cf3 BrownNoise\cf0 .ar(\
		\cf3 Decay2\cf0 .kr(\
			\cf3 Impulse\cf0 .kr(#[0.125,0.25,0.375,0.5,0.75,1,1.5,2,3,4].choose,0,[0.05,0.05]\
		), 0.005, 0.05));\
	s = (\cf3 Klank\cf0 .ar(`[\
			\cf3 Array\cf0 .series(16, freq, freq),\
			\cf3 Array\cf0 .geom(16,1,rrand(0.7,0.999)),\
			\cf3 Array\cf0 .fill(16, \{rrand(0.1,2.5)\})\
		], exc) * 0.1).softclip;\
\}.play\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
	\cf3 var\cf0  root, scale, s;\
			\cf2 // wind chords\cf0 \
	\cf3 var\cf0  trig, p, n, exc, x, base, range;\
		\cf2 //root = rrand(3,6);\cf0 \
		root = 5;\
		scale = #[0,2,4,5,7,9,11];\
		n = 5;\
		exc = \cf3 BrownNoise\cf0 .ar([0.007,0.007]) * max(0, \cf3 LFNoise1\cf0 .kr(exprand(0.125,0.5), 1.25, -0.25));\
		s = (\cf3 Klank\cf0 .ar(`[\cf3 Array\cf0 .fill(n, \{(scale.choose + #[36,48,60,72,84].choose + root).midicps\}),\cf3 nil\cf0 ,\cf3 Array\cf0 .fill(n, \{rrand(0.1,2.0)\})], exc) * 0.1).softclip;\
\}.play;\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\
			\cf2 // wind metals\cf0 \
			\cf3 var\cf0  trig, s, p, n, exc, x, base, range;\
			n = 6;\
			base = exprand(60,4000);\
			range = rrand(500.0,8000.0);\
			exc = \cf3 BrownNoise\cf0 .ar([0.007,0.007]) * max(0, \cf3 LFNoise1\cf0 .kr(exprand(0.125,0.5), 0.75, 0.25));\
			s = (\cf3 Klank\cf0 .ar(`[\cf3 Array\cf0 .fill(n, \{linrand(range)+base\}),\cf3 nil\cf0 ,\cf3 Array\cf0 .fill(n, \{rrand(0.1,2.0)\})], exc) * 0.1).softclip;\
\}.play;\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\cf3 var\cf0  root, scale;\
			\cf2 // bowed string\cf0 \
		\cf3 var\cf0  trig, p, s, exc, x, freq;\
		\cf2 //root = rrand(3,6);\cf0 \
		root = 5;\
		scale = #[0,2,4,5,7,9,11];\
			freq = (scale.choose + #[24,36,48,60,72,84].choose + root).midicps;\
			exc = \cf3 BrownNoise\cf0 .ar([0.007,0.007]) * max(0, \cf3 LFNoise1\cf0 .kr(exprand(0.125,0.5), 0.6, 0.4));\
			s = (\cf3 Klank\cf0 .ar(`[\
					\cf3 Array\cf0 .series(12, freq, freq),\
					\cf3 Array\cf0 .geom(12,1,rrand(0.7,0.9)),\
					\cf3 Array\cf0 .fill(12, \{rrand(1.0,3.0)\})\
				], exc) * 0.1).softclip;\
\}.play;\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
	\cf3 var\cf0  root, scale, s;\
	\cf2 // whistle\cf0 \
	\cf3 var\cf0  trig, p, exc, x, freq;\
		root = 5;\
		scale = #[0,2,4,5,7,9,11];\
			freq = (scale.choose + #[84,96].choose + root).midicps;\
			exc = \cf3 BrownNoise\cf0 .ar([0.05,0.05]) * max(0, \cf3 SinOsc\cf0 .kr(exprand(0.125,0.5), 2pi.rand));\
			s = (\cf3 Klank\cf0 .ar(`[\
					\cf3 Array\cf0 [freq],\
					\cf3 nil\cf0 ,\
					\cf3 Array\cf0 [0.3]\
				], exc) * 0.1).softclip;\
\}.play\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
\
	\cf2 // metallic\cf0 \
	\cf3 var\cf0  trig, p, exc, x, s;\
	exc = \cf3 BrownNoise\cf0 .ar(\cf3 Decay2\cf0 .kr(\cf3 Impulse\cf0 .kr(#[0.125,0.25,0.375,0.5,0.75,1,1.5,2].choose,0,[0.04,0.04]), 0.005, 0.05));\
	s = (\cf3 Klank\cf0 .ar(`[\cf3 Array\cf0 .fill(16, \{linrand(8000.0)+60\}),\cf3 nil\cf0 ,\cf3 Array\cf0 .fill(16, \{rrand(0.1,2.0)\})], exc) * 0.1).softclip;\
\}.play\
)\
\
\cf2 ///////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
(\
\{\
	var x, r, f;\
	x = \cf3 Mix\cf0 .fill(4, \{ \
		\cf3 LFSaw\cf0 .ar((\cf3 LFPulse\cf0 .kr(0.06,0,0.5,2,34 + \{0.1.rand2\}.dup)).midicps, 0, 0.01) \
	\});\
	r = \cf3 MouseY\cf0 .kr(0.1,0.7);\
	f = \cf3 LinExp\cf0 .kr(\cf3 SinOsc\cf0 .kr(0.07),-1,1,300,5000);\
	x = \cf3 RLPF\cf0 .ar(x, f, r).softclip;\
	x = \cf3 RLPF\cf0 .ar(x, f, r).softclip;\
\}.play;\
)\
\
(\
\{\
\cf3 Pan2\cf0 .ar(\
	\cf3 SinOsc\cf0 .ar(rrand(24,108).midicps, 2pi.rand,\
		 \
		\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.1)).max(0)\
		* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.1)).abs\
	), 1.0.rand2);\
	\
\}.play;\
)\
\
\
(\
\{\
		\cf3 Pan2\cf0 .ar(\
	\cf3 HPZ1\cf0 .ar(\cf3 LFTri\cf0 .ar(rrand(24,128).midicps, 2pi.rand,\
		 \
		\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.04)).max(0)\
		* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
	)), 1.0.rand2); \
\}.play;\
)\
\
(\
\{\
\
		x = \cf3 Pan2\cf0 .ar(\
		\cf3 LPZ2\cf0 .ar(\cf3 LFPulse\cf0 .ar(80 * rrand(1,32), 2pi.rand, 0.1,\
			 \
			\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.04)).max(0)\
			* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
		\
		)), 1.0.rand2); \
		2.do(\{ x = \cf3 AllpassN\cf0 .ar(x, 0.05, [0.05.rand,0.05.rand], 3.0.rand, 2); \});\
		x\
	\
\}.play\
)\
\
\
(\
\{\
		x = \cf3 Pan2\cf0 .ar(\
		\cf3 LPZ2\cf0 .ar(\cf3 LFPulse\cf0 .ar(80 * (1 + 32.linrand), 2pi.rand, 0.1,\
			 \
			\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(0.125 * [2**rrand(0,6),2**rrand(0,6)], [2pi.rand,2pi.rand], 0.04)).max(0)\
			* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(4 * [rrand(1,6),rrand(1,6)], [2pi.rand,2pi.rand])).abs\
		\
		)), 1.0.rand2); \
		2.do(\{ x = \cf3 AllpassN\cf0 .ar(x, 0.05, [0.05.rand,0.05.rand], 4.0.rand, 2); \});\
		x\
	\
	\}.play;\
)\
\
(\
\{\
\
		\cf3 Pan2\cf0 .ar(\
	\cf3 BPZ2\cf0 .ar(\cf3 LFPulse\cf0 .ar(120 * 100.rand, 2pi.rand, 0.5,\
		 \
		\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.04)).max(0)\
		* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
	)), 1.0.rand2); \
\}.play\
)\
\
(\
\{\
\
		\cf3 Pan2\cf0 .ar(\
	\cf3 Resonz\cf0 .ar(\cf3 LFPulse\cf0 .ar(exprand(50,600), 2pi.rand, 0.5,\
		 \
		\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.1)).max(0)\
		* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
	), exprand(100,2000), 0.2), 1.0.rand2); \
\}.play\
)\
\
(\
\{\
\
		\cf3 Pan2\cf0 .ar(\
	\cf3 RLPF\cf0 .ar(\cf3 LFPulse\cf0 .ar(exprand(50,600), 2pi.rand, 0.5,\
		 \
		\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.1)).max(0)\
		* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
	), exprand(100,2000), 0.2), 1.0.rand2); \
\}.play\
)\
\
\{  \cf3 SinOsc\cf0 .ar(exprand(100,6000), 0, \cf3 LFNoise2\cf0 .ar(exprand(4,24),[0.07,0.07])) \}.play;\
\
(\
\{\
\
		\cf3 Pan2\cf0 .ar(\
		\cf3 RLPF\cf0 .ar(\cf3 LFPulse\cf0 .ar(exprand(50,600), 2pi.rand, 0.5,\
			 \
			\cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(0.3,8) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand], 0.1)).max(0)\
			* \cf3 Mix\cf0 .ar(\cf3 SinOsc\cf0 .ar(exprand(6,24) * [rrand(0.7,1.3),1], [2pi.rand,2pi.rand])).abs\
		), exprand(100,2000), 0.2), 1.0.rand2); \
\}.play;\
)\
\
\cf2 /////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\
(\
\{\
		\cf3 var\cf0  freq, x;\
		freq = \cf3 LFPulse\cf0 .kr(20.0.rand, 0, 1.0.rand, \
			\cf3 LFPulse\cf0 .kr(4.0.rand, 0, 1.0.rand, 8000.rand, 2000.rand));\
		freq = freq + \cf3 LFPulse\cf0 .kr(20.0.rand, 0, 1.0.rand, \
			\cf3 LFPulse\cf0 .kr(4.0.rand, 0, 1.0.rand, 8000.rand, 2000.rand));\
		x = \cf3 LFPulse\cf0 .ar(freq+[0.5,0.5].rand2, 0, 0.5, 0.15, -0.05);\
		\cf3 AllpassN\cf0 .ar(x, 0.05, [0.05,0.05].rand, 0.3);\
\}.play\
)\
\
(\
\{\
	\cf3 var\cf0  out, lfoDepth, lfoRate, freq, filtered;\
	lfoDepth = \cf3 MouseY\cf0 .kr(200, 8000, 1);\
	lfoRate = \cf3 MouseX\cf0 .kr(4, 60, 1);\
	freq = \cf3 LFSaw\cf0 .kr(lfoRate, 0, lfoDepth, lfoDepth * 1.2);\
	filtered = \cf3 RLPF\cf0 .ar(\{\cf3 WhiteNoise\cf0 .ar(0.03)\}.dup, freq, 0.1);\
	out = \cf3 CombN\cf0 .ar(filtered, 0.3, 0.3, 2, 1, filtered);\
	out\
\}.play;\
)\
\
\cf2 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\
\cf2 // adding many things to the top level spawn.\cf0 \
(\
\{\
	\cf3 var\cf0  exc, amp;\
	amp = \cf3 LFPulse\cf0 .kr(4,0,0.1,0.002);\
	exc = \cf3 LPZ1\cf0 .ar(\cf3 GrayNoise\cf0 .ar([amp,amp]));\
	\cf3 Klank\cf0 .ar(`[\cf3 FloatArray\cf0 .fill(4, \{ rrand(80.0,400.0) \}), \
			\cf3 nil\cf0 , \
			\cf3 FloatArray\cf0 [1, 1, 1, 1]], exc);\
\}.play;\
)\
\
(\
\{\
	\cf3 var\cf0  exc, amp;\
	amp = \cf3 LFPulse\cf0 .kr(8,0,0.1,0.002);\
	exc = \cf3 LPZ1\cf0 .ar(\cf3 GrayNoise\cf0 .ar([amp,amp]));\
	\cf3 Klank\cf0 .ar(`[\cf3 FloatArray\cf0 .fill(4, \{ rrand(80.0,400.0) \}), \
			\cf3 nil\cf0 , \
			\cf3 FloatArray\cf0 [1, 1, 1, 1]], exc).abs;\
\}.play;\
)\
\
(\
\{\
	\cf3 CombN\cf0 .ar(\cf3 LPF\cf0 .ar(\cf3 LFNoise0\cf0 .ar(\cf3 MouseX\cf0 .kr([300,2200])*[1,1.1],\cf3 LFPulse\cf0 .kr(1,0,0.3,0.1)), 800).abs, 0.2, [0.2,0.17], 5);\
\}.play;\
)\
\
(\
\{\
	\cf3 var\cf0  amp, my;\
	amp = \cf3 LFPulse\cf0 .kr(0.5,0,0.5);\
	my = \cf3 MouseY\cf0 .kr(400,3200);\
	\cf3 Mix\cf0 .arFill(8, \{\
		\cf3 var\cf0  x;\
		x = \cf3 Formlet\cf0 .ar(\cf3 Dust\cf0 .ar(12,[0.05,0.05]) * amp, my * exprand(0.5,2.0), 0.005, 0.1);\
		\cf3 AllpassN\cf0 .ar(x, 0.05,0.05.rand, 8);\
	\});\
\}.play;\
)\
}