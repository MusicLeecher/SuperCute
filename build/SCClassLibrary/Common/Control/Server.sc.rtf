{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 \
\cf3 Server\cf2  : \cf3 Model\cf2  \{\
	\cf3 classvar\cf2  <>local, <>internal, <>named, <>set;\
	\
	\cf3 var\cf2  <name, <addr, <>options;\
	\cf3 var\cf2  <isLocal, <inProcess;\
	\cf3 var\cf2  <serverRunning = \cf3 false\cf2 , <alive = \cf3 false\cf2 ;\
	\cf3 var\cf2  <window;\
	\
	*new \{ \cf3 arg\cf2  name, addr, options;\
		^\cf3 super\cf2 .new.init(name, addr, options)\
	\}\
	init \{ \cf3 arg\cf2  n,a,o;\
		name = n;\
		addr = a;\
		options = o;\
		if (addr.isNil, \{ addr = \cf3 NetAddr\cf2 (\cf4 "127.0.0.1"\cf2 , 57110) \});\
		options = options ? \cf4 ""\cf2 ;\
		inProcess = addr.addr == 0;\
		isLocal = inProcess || \{ addr.addr == 2130706433 \};\
		serverRunning = \cf3 false\cf2 ;\
		named.put(name, \cf3 this\cf2 );\
		set.add(\cf3 this\cf2 );\
	\}\
	\
	*initClass \{\
		named = \cf3 IdentityDictionary\cf2 .new;\
		set = \cf3 Set\cf2 .new;\
		local = \cf3 Server\cf2 .new(\cf5 \\localhost\cf2 , \cf3 NetAddr\cf2 (\cf4 "127.0.0.1"\cf2 , 57110));\
		internal = \cf3 Server\cf2 .new(\cf5 \\internal\cf2 , \cf3 NetAddr\cf2 .new);\
		local.makeWindow;\
		internal.makeWindow;\
	\}\
	\
	sendMsg \{ \cf3 arg\cf2  ... args;\
		addr.sendBundle(\cf3 nil\cf2 , args);\
	\}\
	sendBundle \{ \cf3 arg\cf2  time ... args;\
		addr.performList(\cf5 \\sendBundle\cf2 , time, args);\
	\}\
	\
	serverRunning_ \{ \cf3 arg\cf2  val;\
		if (val != serverRunning, \{\
			serverRunning = val;\
			\cf3 this\cf2 .changed(\cf5 \\serverRunning\cf2 );\
		\});\
	\}	\
	\
	bootInProcess \{\
		\cf3 _BootInProcessServer\cf2 \
		^\cf3 this\cf2 .primitiveFailed\
	\}\
	quitInProcess \{\
		\cf3 _QuitInProcessServer\cf2 \
		^\cf3 this\cf2 .primitiveFailed\
	\}\
	\
	boot \{\
		if (\cf3 this\cf2 .serverRunning, \{ \cf4 "already running"\cf2 .postln; ^\cf3 nil\cf2  \});\
		\
		if (isLocal.not, \{ ^\cf3 nil\cf2  \}); \cf6 // cant boot a remote server.\
\cf2 		if (inProcess, \{ \
			\cf3 this\cf2 .bootInProcess; \
		\},\{\
			unixCmd(\cf4 "cd server; ./scsynth -u "\cf2  ++ addr.port ++ \cf4 " "\cf2  ++ options);\
		\});\
		\
		alive = \cf3 true\cf2 ;\
		\cf3 this\cf2 .serverRunning = \cf3 true\cf2 ;\
		\cf3 this\cf2 .notify(\cf3 true\cf2 );\
\
	\}\
	quit \{\
		addr.sendMsg(\cf4 "/quit"\cf2 );\
		if (inProcess, \{ \
			\cf3 this\cf2 .quitInProcess;\
			\cf4 "quit done\\n"\cf2 .postln\
		\});\
		alive = \cf3 false\cf2 ;\
		\cf3 this\cf2 .serverRunning = \cf3 false\cf2 ;\
	\}\
	\
	status \{\
		addr.sendMsg(\cf4 "/status"\cf2 );\
	\}\
	\
	notify \{ \cf3 arg\cf2  flag;\
		addr.sendMsg(\cf4 "/notify"\cf2 , flag.binaryValue);\
	\}	\
	\
	makeWindow \{\
		\cf3 var\cf2  w, b0, b1, b2, b3, aliveThread;\
		\cf3 var\cf2  s0, s1, s1s, ctlr;\
		\
		if (window.notNil, \{ ^window.front \});\
		\
		w = window = \cf3 SCWindow\cf2 (name.asString ++ \cf4 " server"\cf2 , \cf3 Rect\cf2 (128+200.rand, 64+80.rand, 240, 140));\
		w.view.decorator = \cf3 FlowLayout\cf2 (w.view.bounds);\
		\
		if (isLocal, \{\
			w.onClose = \{\
				\cf3 OSCresponder\cf2 .removeAddr(addr);\
				aliveThread.stop; \
				\cf3 this\cf2 .quit;\
				window = \cf3 nil\cf2 ;\
				ctlr.remove;\
			\};\
		\
			b0 = \cf3 SCButton\cf2 (w, \cf3 Rect\cf2 (0,0, 80, 24));\
			b0.states = [[\cf4 "Start Server"\cf2 , \cf3 Color\cf2 .black, \cf3 Color\cf2 .green],[\cf4 "Stop Server"\cf2 , \cf3 Color\cf2 .white, \cf3 Color\cf2 .red]];\
			b0.enabled = \cf3 true\cf2 ;\
			b0.action = \{ \cf3 arg\cf2  view; \
				if(view.value == 1, \{\
					\cf3 this\cf2 .boot;\
				\},\{\
					\cf3 this\cf2 .quit;\
				\});\
			\};\
		\
		\},\{\
			w.onClose = \{\
				\cf3 OSCresponder\cf2 .removeAddr(addr);\
				aliveThread.stop; \
				ctlr.remove;\
			\};\
		\});\
		\
		w.view.decorator.nextLine;\
\
		[\cf4 "UGens"\cf2 , \cf4 "Synths"\cf2 , \cf4 "Groups"\cf2 , \cf4 "SynthDefs"\cf2 ].do(\{ \cf3 arg\cf2  label;\
			s0 = \cf3 SCStaticText\cf2 (w, \cf3 Rect\cf2 (0,0, 120, 18));\
			s0.string = label ++ \cf4 " :"\cf2 ;\
			s0.align = \cf5 \\right\cf2 ;\
		\
			s1 = \cf3 SCStaticText\cf2 (w, \cf3 Rect\cf2 (0,0, 80, 18));\
			s1.string = \cf4 "?"\cf2 ;\
			s1.align = \cf5 \\left\cf2 ;\
			s1s = s1s.add(s1);\
			\
			w.view.decorator.nextLine;\
		\});\
		\
		w.front;\
		\
		aliveThread = \cf3 Routine\cf2 (\{\
			\cf6 // this thread polls the server to see if it is alive\
\cf2 			\cf3 OSCresponder\cf2 .add(\cf3 OSCresponder\cf2 (addr, \cf5 'status.reply'\cf2 , \{ \cf3 arg\cf2  time, resp, msg;\
				alive = \cf3 true\cf2 ;\
				\cf3 AppClock\cf2 .sched(0, \{\
					\cf6 // have to sched with AppClock because cocoa \
\cf2 					\cf6 // cannot be called from socket routine\
\cf2 					msg.copyRange(2, 5).do(\{ \cf3 arg\cf2  val, i; s1s.at(i).string = val.asString; \});\
				\});\
			\}));\
			4.wait;\
			loop(\{\
				\cf3 this\cf2 .status;\
				0.2.wait;\
				\cf3 this\cf2 .serverRunning = alive;\
				alive = \cf3 false\cf2 ;\
			\});\
		\});\
		\cf3 AppClock\cf2 .play(aliveThread);\
		\
		ctlr = \cf3 SimpleController\cf2 (\cf3 this\cf2 )\
			.put(\cf5 \\serverRunning\cf2 , \{\
					b0.setProperty(\cf5 \\value\cf2 , serverRunning.binaryValue);\
			\});		\
	\}\
\}\
\
\cf3 Module\cf2  \{\
	\cf3 var\cf2  server, name, id, values, presets, presetIndex, <isOn = \cf3 false\cf2 ;\
	\
	*new \{ \cf3 arg\cf2  server, name, id;\
		^\cf3 super\cf2 .newCopyArgs(server, name, id).init\
	\}\
	init \{\
		\cf3 this\cf2 .load;\
	\}\
	store \{\
		if (presetIndex > presets.size, \{\
			presets = presets.add(values);\
		\});\
		presets.put(presetIndex, values);\
	\}\
	recall \{\
		if (presetIndex < presets.size, \{\
			values = presets.at(presetIndex).copy;\
			\cf6 // set gui elems and synth controls		\
\cf2 		\});\
	\}\
	save \{\
		presets.writeArchive(\cf4 "server/presets/"\cf2  ++ name ++ \cf4 ".scpreset"\cf2 );\
	\}\
	load \{\
		\cf3 var\cf2  filename;\
		filename = \cf4 "server/presets/"\cf2  ++ name ++ \cf4 ".scpreset"\cf2 ;\
		if (\cf3 File\cf2 .exists(filename), \{\
			presets = \cf3 Object\cf2 .readArchive(filename);\
		\});\
	\}\
	start \{\
		\cf3 var\cf2  msg;\
		isOn = \cf3 true\cf2 ;\
		msg = [\cf4 "/s_new"\cf2 , name, id, 0];\
		values.keysValuesDo(\{ \cf3 arg\cf2  key, value; msg = msg.addAll([key, value]); \});\
		server.addr.sendBundle(\cf3 nil\cf2 , msg); \
	\}\
	stop \{\
		isOn = \cf3 false\cf2 ;\
		server.sendMsg(\cf4 "/n_set"\cf2 , id, \cf5 \\gate\cf2 , 0); \
	\}\
\}\
\
\
}