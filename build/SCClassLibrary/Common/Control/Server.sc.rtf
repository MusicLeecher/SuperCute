{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\cf2 Server\cf0  : \cf2 Model\cf0  \{\
	\cf2 classvar\cf0  <>default, <>named, <>set;\
	\
	\cf2 var\cf0  <name, <addr, <>options;\
	\cf2 var\cf0  <isLocal;\
	\cf2 var\cf0  <serverRunning = \cf2 false\cf0 , <audioRunning = \cf2 false\cf0 , <alive = \cf2 false\cf0 ;\
	\cf2 var\cf0  <window;\
	\
	*new \{ \cf2 arg\cf0  name, addr, options;\
		^\cf2 super\cf0 .new.init(name, addr, options)\
	\}\
	init \{ \cf2 arg\cf0  n,a,o;\
		name = n;\
		addr = a;\
		options = o;\
		if (addr.isNil, \{ addr = \cf2 NetAddr\cf0 (\cf3 "127.0.0.1"\cf0 , 57110) \});\
		options = options ? \cf3 ""\cf0 ;\
		isLocal = addr.addr == 2130706433;\
		serverRunning = \cf2 false\cf0 ;\
		named.put(name, \cf2 this\cf0 );\
		set.add(\cf2 this\cf0 );\
	\}\
	\
	*initClass \{\
		named = \cf2 IdentityDictionary\cf0 .new;\
		set = \cf2 Set\cf0 .new;\
		default = \cf2 Server\cf0 .new(\cf4 \\default\cf0 );\
		default.makeWindow;\
	\}\
	\
	sendMsg \{ \cf2 arg\cf0  ... args;\
		addr.sendBundle(\cf2 nil\cf0 , args);\
	\}\
	sendBundle \{ \cf2 arg\cf0  time ... args;\
		addr.performList(\cf4 \\sendBundle\cf0 , time, args);\
	\}\
	\
	serverRunning_ \{ \cf2 arg\cf0  val;\
		if (val != serverRunning, \{\
			serverRunning = val;\
			\cf2 this\cf0 .changed(\cf4 \\serverRunning\cf0 );\
		\});\
	\}\
	audioRunning_ \{ \cf2 arg\cf0  val;\
		if (val != audioRunning, \{\
			audioRunning = val;\
			\cf2 this\cf0 .changed(\cf4 \\audioRunning\cf0 );\
		\});\
	\}\
	\
	\
	boot \{\
		if (isLocal.not, \{ ^\cf2 nil\cf0  \}); \cf5 // cant boot a remote server.\
\cf0 		\
\cf5 //		unixCmd("scsynth -u " ++ addr.port ++ " "\
//			++ options ++ " >synth_log &");\
\cf0 		unixCmd(\cf3 "cd server; ./scsynth -u "\cf0  ++ addr.port ++ \cf3 " "\cf0 \
			++ options);\
		alive = \cf2 true\cf0 ;\
		\cf2 this\cf0 .audioRunning = \cf2 false\cf0 ;\
		\cf2 this\cf0 .serverRunning = \cf2 true\cf0 ;\
		\cf2 this\cf0 .notify(\cf2 true\cf0 );\
\
	\}\
	quit \{\
		addr.sendMsg(\cf3 "/quit"\cf0 );\
		alive = \cf2 false\cf0 ;\
		\cf2 this\cf0 .serverRunning = \cf2 false\cf0 ;\
		\cf2 this\cf0 .audioRunning = \cf2 false\cf0 ;\
	\}\
	\
	status \{\
		addr.sendMsg(\cf3 "/status"\cf0 );\
	\}\
	\
	notify \{ \cf2 arg\cf0  flag;\
		addr.sendMsg(\cf3 "/notify"\cf0 , flag.binaryValue);\
	\}	\
	\
	makeWindow \{\
		\cf2 var\cf0  w, b0, b1, b2, b3, aliveThread;\
		\cf2 var\cf0  s0, s1, s1s, ctlr;\
		\
		if (window.notNil, \{ ^window.front \});\
		\
		w = window = \cf2 SCWindow\cf0 (name.asString ++ \cf3 " server"\cf0 , \cf2 Rect\cf0 (128, 64, 240, 140));\
		w.view.decorator = \cf2 FlowLayout\cf0 (w.view.bounds);\
		\
		if (isLocal, \{\
			w.onClose = \{\
				\cf2 OSCresponder\cf0 .removeAddr(addr);\
				aliveThread.stop; \
				\cf2 this\cf0 .quit;\
				window = \cf2 nil\cf0 ;\
				ctlr.remove;\
			\};\
		\
			b0 = \cf2 SCButton\cf0 (w, \cf2 Rect\cf0 (0,0, 80, 24));\
			b0.states = [[\cf3 "Start Server"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .green]];\
			b0.enabled = serverRunning.not;\
			b0.action = \{ \cf2 arg\cf0  view; \
				alive = \cf2 true\cf0 ;\
				\cf2 this\cf0 .boot;\
			\};\
		\
			b1 = \cf2 SCButton\cf0 (w, \cf2 Rect\cf0 (0,0, 80, 24));\
			b1.states = [[\cf3 "Stop Server"\cf0 , \cf2 Color\cf0 .white, \cf2 Color\cf0 .red]];\
			b1.enabled = serverRunning;\
			b1.action = \{ \cf2 arg\cf0  view; \
				alive = \cf2 false\cf0 ;\
				\cf2 this\cf0 .quit;\
			\};\
		\},\{\
			w.onClose = \{\
				\cf2 OSCresponder\cf0 .removeAddr(addr);\
				aliveThread.stop; \
				ctlr.remove;\
			\};\
		\});\
		\
		w.view.decorator.nextLine;\
\
		[\cf3 "UGens"\cf0 , \cf3 "Synths"\cf0 , \cf3 "Groups"\cf0 , \cf3 "SynthDefs"\cf0 ].do(\{ \cf2 arg\cf0  label;\
			s0 = \cf2 SCStaticText\cf0 (w, \cf2 Rect\cf0 (0,0, 120, 18));\
			s0.string = label ++ \cf3 " :"\cf0 ;\
			s0.align = \cf4 \\right\cf0 ;\
		\
			s1 = \cf2 SCStaticText\cf0 (w, \cf2 Rect\cf0 (0,0, 80, 18));\
			s1.string = \cf3 "?"\cf0 ;\
			s1.align = \cf4 \\left\cf0 ;\
			s1s = s1s.add(s1);\
			\
			w.view.decorator.nextLine;\
		\});\
		\
		w.front;\
		\
		aliveThread = \cf2 Routine\cf0 (\{\
			\cf5 // this thread polls the server to see if it is alive\
\cf0 			\cf2 var\cf0  first = \cf2 true\cf0 ;\
			\cf2 OSCresponder\cf0 .add(\cf2 OSCresponder\cf0 (addr, \cf4 'status.reply'\cf0 , \{ \cf2 arg\cf0  time, resp, msg;\
				alive = \cf2 true\cf0 ;\
				\cf2 AppClock\cf0 .sched(0, \{\
					\cf5 // have to sched with AppClock because cocoa \
\cf0 					\cf5 // cannot be called from socket routine\
\cf0 					\cf2 this\cf0 .audioRunning = msg.at(1) != 0;\
					msg.copyRange(2, 5).do(\{ \cf2 arg\cf0  val, i; s1s.at(i).string = val.asString; \});\
				\});\
			\}));\
			4.wait;\
			loop(\{\
				\cf2 this\cf0 .status;\
				2.wait;\
				\cf2 this\cf0 .serverRunning = alive;\
				alive = \cf2 false\cf0 ;\
			\});\
		\});\
		\cf2 AppClock\cf0 .play(aliveThread);\
		\
		ctlr = \cf2 SimpleController\cf0 (\cf2 this\cf0 )\
			.put(\cf4 \\serverRunning\cf0 , \{\
					b0.enabled = serverRunning.not;\
					b1.enabled = serverRunning;\
			\});\
		\
	\}\
\}\
\
\cf2 Module\cf0  \{\
	\cf2 var\cf0  server, name, id, values, presets, presetIndex, <isOn = \cf2 false\cf0 ;\
	\
	*new \{ \cf2 arg\cf0  server, name, id;\
		^\cf2 super\cf0 .newCopyArgs(server, name, id).init\
	\}\
	init \{\
		\cf2 this\cf0 .load;\
	\}\
	store \{\
		if (presetIndex > presets.size, \{\
			presets = presets.add(values);\
		\});\
		presets.put(presetIndex, values);\
	\}\
	recall \{\
		if (presetIndex < presets.size, \{\
			values = presets.at(presetIndex).copy;\
			\cf5 // set gui elems and synth controls		\
\cf0 		\});\
	\}\
	save \{\
		presets.writeArchive(\cf3 "server/presets/"\cf0  ++ name ++ \cf3 ".scpreset"\cf0 );\
	\}\
	load \{\
		\cf2 var\cf0  filename;\
		filename = \cf3 "server/presets/"\cf0  ++ name ++ \cf3 ".scpreset"\cf0 ;\
		if (\cf2 File\cf0 .exists(filename), \{\
			presets = \cf2 Object\cf0 .readArchive(filename);\
		\});\
	\}\
	start \{\
		\cf2 var\cf0  msg;\
		isOn = \cf2 true\cf0 ;\
		msg = [\cf3 "/s_new"\cf0 , name, id, 0];\
		values.keysValuesDo(\{ \cf2 arg\cf0  key, value; msg = msg.addAll([key, value]); \});\
		server.addr.sendBundle(\cf2 nil\cf0 , msg); \
	\}\
	stop \{\
		isOn = \cf2 false\cf0 ;\
		server.sendMsg(\cf3 "/n_set"\cf0 , id, \cf4 \\gate\cf0 , 0); \
	\}\
\}\
\
\
}