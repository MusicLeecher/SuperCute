EnvEditorGui : ObjectGui {	guiBody { arg layout;				var curves;				// test button		//ActionButton(layout,"test",{		//	model.env.test		//});		ActionButton(layout,"#",{			model.env.asCompileString.postln;		});				layout.startRow;		CXLabel(layout,"times:   ");		model.times.do({ arg t,i;			NumberEditor(t,[0.0,100.0]).action_({ arg val; model.putTime(i,val) }).gui(layout);		});				layout.startRow;		CXLabel(layout,"levels:");				model.levels.do({ arg l,i;			NumberEditor(l,model.levelSpec).action_({ arg val; model.putLevel(i,val) }).gui(layout);		});//		ActionButton(layout,"set spec...",{//			var f,s;//			f=FlowLayout.new("",600,600);//			s=levels.spec.copy;//			s.gui(f);//			ActionButton(f,"DONE",{//				levels.do({ arg nv; nv.spec_(s) });	//				f.close;//			})//		});				layout.startRow;				CXLabel(layout,"curves:  ");		// curves		curves = model.env.curves;		if(curves.isKindOf(SimpleNumber),{			NumberEditor(curves,[-10.0,10.0]).action_({ arg val; model.setCurve(val);  })				.gui(layout);		},{			if(curves.isKindOf(SequenceableCollection),{					curves.do({ arg l,i;						NumberEditor(l,[-10.0,10.0]).action_({ arg val; model.putCurve(i,val) }).gui(layout);					});			},{				curves.gui(layout); //symbol \linear,\sine etc.			});		});		// loop node		CXLabel(layout,"loop");		CXLabel(layout,model.env.loopNode);				//release node		CXLabel(layout,"releaseNode:");		CXLabel(layout,model.env.releaseNode);				// the envelope itself		model.env.gui(layout);			}}