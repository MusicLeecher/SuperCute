{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Scheduler
\fs24 			schedules functions to be evaluated in the future
\f1\b0\fs18 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 superclass: Object\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 *new(clock, drift)
\f2\b0 \
			
\f0\b clock
\f2\b0 : 	a clock, like SystemClock.\
			
\f0\b drift
\f2\b0 : 	if true, it will schedule the events relative to Main.elapsedTime,\
					otherwise to the current seconds of the scheduler.\
	\

\f0\b play(aTask)
\f2\b0 \
			schedules the task to play, with the delta time returned from it.\
\

\f0\b sched(delta, aTask)
\f2\b0 \
			schedule the task \
\

\f0\b advance(bySeconds)
\f2\b0 \
			advance time by n seconds. Any task that is scheduled within the new time,\
			is evaluated, and, if it returns a new time, rescheduled.\
\

\f0\b seconds_(newSeconds)
\f2\b0 \
			set new time. Any task that is scheduled within the new time,\
			is evaluated, and, if it returns a new time, rescheduled.\
			\

\f0\b isEmpty
\f2\b0 \
			returns whether the scheduling queue is empty.\
			\

\f0\b clear
\f2\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 			
\f2\fs24 clear the scheduliong queue
\f1\fs18 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // example:\cf0 \
\
a = \cf3 Scheduler\cf0 (\cf3 SystemClock\cf0 );\
\
a.sched(3, \{ \cf4 "now it is 3 seconds."\cf0 .postln; \cf3 nil\cf0  \});\
a.sched(5, \{ \cf4 "now it is 5 seconds."\cf0 .postln; \cf3 nil\cf0  \});\
a.sched(1, \{ \cf4 "now it is 1 second."\cf0 .postln; \cf3 nil\cf0  \});\
\
a.advance(0.5);\
a.advance(0.5);\
a.advance(2);\
a.advance(2);\
\
\cf2 // the beats, seconds and clock are passed into the task function:\cf0 \
a.sched(1, \{ \cf3 arg\cf0  beats, secs, clock; [beats, secs, clock].postln \});\
a.advance(1);\
\
\cf2 // the scheduling is relative to "now":\cf0 \
a.sched(3, \{ \cf4 "now it was 3 seconds."\cf0 .postln \});\
a.sched(5, \{ \cf4 "now it was 5 seconds."\cf0 .postln \});\
a.sched(1, \{ \cf4 "now it was 1 second."\cf0 .postln \});\
\
a.advance(0.5);\
a.advance(0.5);\
a.advance(2);\
a.advance(2);\
\
\cf2 // play a Routine or a task:\cf0 \
a.play(\cf3 Routine\cf0  \{\'ca5.do \{ \cf3 arg\cf0  i; i.postln; 1.yield \} \});\
a.advance(0.9);\
\
\
\
\cf2 // scheduling tasks\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
x = \cf3 Scheduler\cf0 (\cf3 TempoClock\cf0 .default);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Task\cf0  \{ \
	\cf3 inf\cf0 .do \{ \cf3 |i|\cf0 \
		(\cf4 "next "\cf0  ++ i ++  \cf4 " in task."\cf0  + \cf3 Main\cf0 .elapsedTime).postln;\
		0.5.wait;\
	\}\
\}.play(x)\
)\
\
x.advance(0.1);\
x.seconds;\
x.advance(5);\
x.seconds;\
\
(\
\cf3 Routine\cf0  \{\
	loop \{ x.advance(0.1); 0.1.wait \}\
\}.play;\
)\
\
(\
\cf3 Task\cf0  \{ 5.do \{\
	x.advance(1);\
	2.0.rand.wait;\
	\}\
\}.play;\
)\
\
x.advance(8.1);\
\
\cf3 Pbind\cf0 (\cf5 \\degree\cf0 , \cf3 Pseries\cf0 (0, 2, 8), \cf5 \\dur\cf0 , 0.25).play(x);\
\
(\
\cf3 Task\cf0  \{ 5.do \{\
	x.advance(0.20);\
	1.0.wait;\
	\}\
\}.play;\
)\
\
}