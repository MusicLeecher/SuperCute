{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 NodeEvent\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
\
The methods 
\f0\b Event-synth
\f1\b0  and 
\f0\b Event-group 
\f1\b0 set the parent event of the receiver to specialized events that
\f0\b  
\f1\b0  duplicate the functionality of Synth and Group objects. These objects follow the naming conventions of patterns (i.e., groups and addActions are integer ID's) and have the same stop/play/pause/resume interface as the EventStreamPlayers created by Pattern-play.  So, they can be used interchangeably with patterns in control schemes and GUI's.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 The following example creates  a group with nodeID = 2 and plays a synth within it.  \
\

\f2 	g = (id: 2).group;\
	g.play;\
	a = (group: 2).synth\
	a.play;\
	g.release;\
	g.stop;\
\

\f1 	
\f0\b Caution
\f1\b0 : the play method returns a time value (Event-delta), so an expression of the form\
		a = (type: \\Group, id: 1).play\
	will assign the default duration of 1 to the variable a, not the group event!\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 interface:\
\
play				
\f1\b0 starts synth or group, returns this.delta\

\f0\b stop	
\f1\b0 			if ev[\\hasGate] == true set gate to 0, otherwise frees the node\

\f0\b pause				
\f1\b0 disables the node\

\f0\b resume				
\f1\b0 reenables the node\

\f0\b set( key, value)		
\f1\b0 sets control identified by key to value\

\f0\b split				
\f1\b0 returns an array of events, one for each synth or group specified\
					by the receiver
\f2 \

\f0\b \
map(key, busID)		
\f1\b0 maps control to control bus\

\f0\b before(nodeID)		
\f1\b0 moves to immediately before nodeID
\f0\b \
after(nodeID)\
headOf(nodeID)\
tailOf(nodeID)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\b0\fs24 \cf0 \

\f1 With the exception of ~server, ~latency, and ~instrument any key in the event can have an array as a \
value and the standard rules of multi-channel expansion will be followed.  \
\
Here is a simple example of its use:\
(\
	g = (id: [2,3,4,5,6], group: 0, addAction: 1).group ;  // define a multiple Group event\
	g.play;									     // play it\
\
	b = ( freq: [500,510], group: [2,3]).synth;           // make a Synth event\
	b.play;\
	\
	b.set(\\freq,[1000,1006])\
\
	g.release\
\
	b.play;		\
	h = g.split;                                                 // split into individual group events\
	c = b.split;						// and synth events\
	c[0].set(\\freq,700);\
	c[1].set(\\freq,400);\
	\
	h[0].stop;\
	h[1].stop;\
	\
	g.stop;\
)\
\
}