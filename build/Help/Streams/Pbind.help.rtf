{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Pbind\cf3 \

\fs24 \cf2 \
\cf0 Pbind(pattern pairs)\cf2 \
\
\cf0 The class Pbind provides a bridge between value patterns and event patterns. It binds symbols in each event to values obtained from a pattern. Pbind takes arguments in pairs, the first of a pair being a Symbol and the second being a value Pattern. Remember that any object can act as a Pattern, so you can use constants as the pattern.\
\
The Pbind stream returns nil whenever the first one of its streams ends.\
\
An event stream is created for a Pattern by sending it the asEventStream message. The asEventStream message takes an Event as an argument. This event is copied for each call to next to pass down and back up the tree of patterns so that each pattern can modify the event. What Pbind does is put the values for its symbols into the event, possibly overwriting previous bindings to those symbols.\
\cf2 \
This uses the default event.  in the next example we will supply our own event (synth function).\
(\
\cf4 //we need to read the synth description library so that event know's what kind of arguments\cf2 \
\cf4 //there are in each SynthDef.  This must be done AFTER any SynthDefs have been written.\cf2 \
\cf4 //in this case we aren't using any of our own SynthDefs, but we still need to read the default one.\cf2 \
\cf3 SynthDescLib\cf2 .global.read;\
\
\cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pseq\cf2 ([1,3,5,7], \cf3 inf\cf2 ), \cf5 \\dur\cf2 , 0.125, \cf5 \\octave\cf2 , 4, \cf5 \\root\cf2 , 3).play\
)\
\
\
\
Using our own SynthDef:\
(\
\cf3 SynthDef\cf2 (\cf5 \\cfstring1\cf2 .postln, \{ \cf3 arg\cf2  i_out, freq = 360, gate = 1, pan, amp=0.1;\
	\cf3 var\cf2  out, eg, fc, osc, a, b, w;\
	fc = \cf3 LinExp\cf2 .kr(\cf3 LFNoise1\cf2 .kr(\cf3 Rand\cf2 (0.25,0.4)), -1,1,500,2000);\
	osc = \cf3 Mix\cf2 .fill(8, \{ \cf3 LFSaw\cf2 .ar(freq * [\cf3 Rand\cf2 (0.99,1.01),\cf3 Rand\cf2 (0.99,1.01)], 0, amp) \}).distort * 0.2;\
	eg = \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .asr(1,1,1), gate, doneAction:2);\
	out = eg * \cf3 RLPF\cf2 .ar(osc, fc, 0.1);\
	#a, b = out;\
	\cf3 Out\cf2 .ar(i_out, \cf3 Mix\cf2 .ar(\cf3 PanAz\cf2 .ar(4, [a, b], [pan, pan+0.3])));\
\}).load(s);\
\
\cf3 SynthDescLib\cf2 .global.read;\
)\
\
e = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pwhite\cf2 (0,12), \cf5 \\dur\cf2 , 0.2, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 ).play; \cf4 // returns an EventStream\cf2 \
\
e.stream = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pseq\cf2 ([0,1,2,4,6,3,4,8],\cf3 inf\cf2 ), \cf5 \\dur\cf2 , \cf3 Prand\cf2 ([0.2,0.4,0.8],\cf3 inf\cf2 ), \cf5 \\amp\cf2 , 0.05, \cf5 \\octave\cf2 , 5, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 , \cf5 \\ctranspose\cf2 , 0).asStream;\
\
e.stream = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pseq\cf2 ([0,1,2,4,6,3,4,8],\cf3 inf\cf2 ), \cf5 \\dur\cf2 , \cf3 Prand\cf2 ([0.2,0.4,0.8],\cf3 inf\cf2 ), \cf5 \\amp\cf2 , 0.05, \cf5 \\octave\cf2 , 5, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 , \cf5 \\ctranspose\cf2 , 0).asStream;\
\
e.stream = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pxrand\cf2 ([0,1,2,4,6,3,5,7,8],\cf3 inf\cf2 ), \cf5 \\dur\cf2 , \cf3 Prand\cf2 ([0.2,0.4,0.8],\cf3 inf\cf2 ), \cf5 \\amp\cf2 , 0.05, \cf5 \\octave\cf2 , 5, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 ).asStream;\
\
e.stream = \cf3 Pbind\cf2 (\
	[\cf5 \\degree\cf2 , \cf5 \\dur\cf2 ], \cf3 Pseq\cf2 ([\
			\cf3 Pseq\cf2 ([[0,0.1],[2,0.1],[3,0.1],[4,0.1],[5,0.8]],2),\
			\cf3 Ptuple\cf2 ([\cf3 Pxrand\cf2 ([6,7,8,9],4), 0.4]),\
			\cf3 Ptuple\cf2 ([\cf3 Pseq\cf2 ([9,8,7,6,5,4,3,2]), 0.2])\
		],\cf3 inf\cf2 ),\
	\cf5 \\amp\cf2 , 0.05, \cf5 \\octave\cf2 , 5, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 , \cf5 \\mtranspose\cf2 , 0).asStream;\
\
e.stream = \cf3 Pbind\cf2 (\
	[\cf5 \\degree\cf2 , \cf5 \\dur\cf2 ], \cf3 Pseq\cf2 ([\
			\cf3 Pseq\cf2 ([[0,0.1],[2,0.1],[3,0.1],[4,0.1],[5,0.8]],2),\
			\cf3 Ptuple\cf2 ([\cf3 Pxrand\cf2 ([6,7,8,9],4), 0.4]),\
			\cf3 Ptuple\cf2 ([\cf3 Pseq\cf2 ([9,8,7,6,5,4,3,2]), 0.2])\
		],\cf3 inf\cf2 ),\
	\cf5 \\amp\cf2 , 0.05, \cf5 \\octave\cf2 , 6, \cf5 \\instrument\cf2 , \cf5 \\cfstring1\cf2 , \cf5 \\mtranspose\cf2 , 0).asStream;\
\
e.mute; \cf4 // keeps playing, but replaces notes with rests\cf2 \
\
e.unmute;\
\
e.reset;  \cf4 // reset the stream.\cf2 \
e.reset;  \cf4 // reset the stream.\cf2 \
e.reset;  \cf4 // reset the stream.\cf2 \
e.reset;  \cf4 // reset the stream.\cf2 \
\
e.pause;  \cf4 // will resume where paused.\cf2 \
\
e.play;\
\
e.stop;  \cf4 // will reset before resume.\cf2 \
\
e.play;\
\
\
\
\
Another example with a different SynthDef:\
\
(\
\cf3 SynthDef\cf2 (\cf5 \\berlinb\cf2 , \{ \cf3 arg\cf2  out=0, freq = 80, amp = 0.01, pan=0, gate=1;\
	\cf3 var\cf2  synth, env;\
	env = \cf3 Decay2\cf2 .kr(gate, 0.05, 8, 0.0003);\
	synth = \cf3 RLPF\cf2 .ar(\
		\cf3 LFPulse\cf2 .ar(freq, 0, \cf3 SinOsc\cf2 .kr(0.12,[0,0.5pi],0.48,0.5)),\
		freq * \cf3 SinOsc\cf2 .kr(0.21,0,18,20),\
		0.07\
	);\
	#a, b = synth*env;\
	\cf3 DetectSilence\cf2 .ar(a, 0.1, doneAction: 2);\
	\cf3 Out\cf2 .ar(out, \cf3 Mix\cf2 .ar(\cf3 PanAz\cf2 .ar(4, [a,b], [pan, pan+1])));\
\}).load(s);\
\
\cf3 SynthDescLib\cf2 .global.read;\
)\
\
f = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Pseq\cf2 ([0,1,2,4,6,3,4,8],\cf3 inf\cf2 ), \cf5 \\dur\cf2 , 0.8, \cf5 \\octave\cf2 , 3, \cf5 \\instrument\cf2 , \cf5 \\berlinb\cf2 ).play;\
\
f.stream = \cf3 Pbind\cf2 (\cf5 \\degree\cf2 , \cf3 Prand\cf2 ([0,1,2,4,6,3,4,8],\cf3 inf\cf2 ), \cf5 \\dur\cf2 , 0.5, \cf5 \\octave\cf2 , 2, \cf5 \\instrument\cf2 , \cf5 \\berlinb\cf2 , \cf5 \\pan\cf2 , \cf3 Pfunc\cf2 (\{1.0.rand2\}) ).asStream;\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Here is an example with more bindings; Here we have added a filter with cutoff and resonance arguments.\
You will need to hit command '.' before executing the next few pbind ex. without having them stack up.\
also, due to the synthdef's and synthdeclib, if the server is shut down you will have to reload the \
synthdef and re-read the synthdesclib.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
(\
\cf3 SynthDef\cf2 (\cf6 "acid"\cf2 , \{ \cf3 arg\cf2  out, freq = 1000, gate = 1, pan = 1, cut = 4000, rez = 0.8, amp = 1;\
	\cf3 Out\cf2 .ar(out,\
		\cf3 Pan2\cf2 .ar(\
			\cf3 RLPF\cf2 .ar(\
				\cf3 Pulse\cf2 .ar(freq,0.05),\
			cut, rez),\
		pan) * \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .linen(0.01, 1, 0.3), gate, amp, doneAction:2);\
	) \
	\}).load(s);\
\
\cf3 SynthDescLib\cf2 .global.read;\
)\
\
(\
\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25,0.5,0.25],\cf3 inf\cf2 ), \cf5 \\root\cf2 ,-24, \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([0,3,5,7,9,11,5,1],\cf3 inf\cf2 ), \cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}), \cf5 \\cut\cf2 ,\cf3 Pxrand\cf2 ([1000,500,2000,300],\cf3 inf\cf2 ), \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.5).play;\
)\
\
\
The 
\f1\b ListPatterns
\f0\b0  can be put around Event Streams to create sequences of Event Streams.\
(\
\cf3 Pseq\cf2 ([\
	\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25,0.5,0.25],4), \cf5 \\root\cf2 ,-24, \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([0,3,5,7,9,11,5,1],\cf3 inf\cf2 ), 	\cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}),\cf5 \\cut\cf2 ,\cf3 Pxrand\cf2 ([1000,500,2000,300],\cf3 inf\cf2 ), \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.5),\
\
	\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25],6), \cf5 \\root\cf2 ,-24, \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([18,17,11,9],\cf3 inf\cf2 ), 	\cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}),\cf5 \\cut\cf2 ,1500, \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.3)\
\
],\cf3 inf\cf2 ).play;\
)\
\
'
\f1\b Pseq
\f0\b0 ' in the above ex. can be any pattern object:\
(\
\cf3 Prand\cf2 ([\
	\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25,0.5,0.25],4), \cf5 \\root\cf2 ,-24, \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([0,3,5,7,9,11,5,1],\cf3 inf\cf2 ), 	\cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}),\cf5 \\cut\cf2 ,\cf3 Pxrand\cf2 ([1000,500,2000,300],\cf3 inf\cf2 ), \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.5),\
\
	\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25],6), \cf5 \\root\cf2 ,-24, \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([18,17,11,9],\cf3 inf\cf2 ), 	\cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}),\cf5 \\cut\cf2 ,1500, \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.3)\
\
],\cf3 inf\cf2 ).play;\
)\
\

\f1\b Multichannel Expansion.\

\f0\b0 If we supply an array for any argument, the synth node will \
automatically replicate to handle the additional arguments.\
When we give the 'root' argument an array, we should hear a chord....\
(\
\cf3 Pbind\cf2 (\cf5 \\instrument\cf2 ,\cf5 \\acid\cf2 , \cf5 \\dur\cf2 ,\cf3 Pseq\cf2 ([0.25,0.5,0.25],\cf3 inf\cf2 ), \cf5 \\root\cf2 ,[-24,-17], \cf5 \\degree\cf2 ,\cf3 Pseq\cf2 ([0,3,5,7,9,11,5,1],\cf3 inf\cf2 ), 	\cf5 \\pan\cf2 ,\cf3 Pfunc\cf2 (\{1.0.rand2\}),\cf5 \\cut\cf2 ,\cf3 Pxrand\cf2 ([1000,500,2000,300],\cf3 inf\cf2 ), \cf5 \\rez\cf2 ,\cf3 Pfunc\cf2 (\{0.7.rand +0.3\}), \cf5 \\amp\cf2 ,0.3).play;\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //
\f1\b \cf4 UGens as Event values.
\f0\b0 \cf2 \
\cf4 //The following example creates unit generators instead of scalar values for\cf2 \
\cf4 //the values bound to the arguments. This shows that you can use patterns\cf2 \
\cf4 //to dynamically build your patch. Score data is not limited to scalar values.\cf2 \
\cf4 //This example can generate 36 different patches: 3 instruments * 3 freqs\cf2 \
\cf4 //* 2 amps * 2 pans\cf2 \
\cf4 //\
//\cf2 \
\cf4 //I don't know if this is possible in sc3.  \cf2 \
\cf4 ////(\cf2 \
\cf4 //SynthDef(\\cfstring1.postln, \{ arg i_out, freq = 360, gate = 1, pan, amp=0.1;\cf2 \
\cf4 //	var out, eg, fc, osc, a, b, w;\cf2 \
\cf4 //	fc = LinExp.kr(LFNoise1.kr(Rand(0.25,0.4)), -1,1,500,2000);\cf2 \
\cf4 //	osc = Mix.fill(8, \{ LFSaw.ar(freq * [Rand(0.99,1.01),Rand(0.99,1.01)], 0, amp) \}).distort * 0.2;\cf2 \
\cf4 //	eg = EnvGen.kr(Env.asr(0.1,1,1), gate, doneAction:2);\cf2 \
\cf4 //	out = eg * RLPF.ar(osc, fc, 0.1);\cf2 \
\cf4 //	#a, b = out;\cf2 \
\cf4 //	Out.ar(i_out, Mix.ar(PanAz.ar(4, [a, b], [pan, pan+0.3])));\cf2 \
\cf4 //\}).load(s);\cf2 \
\cf4 //\cf2 \
\cf4 //SynthDef(\\berlinb, \{ arg out=0, freq = 80, amp = 0.01, pan=0, gate=1;\cf2 \
\cf4 //	var synth, env;\cf2 \
\cf4 //	env = Decay2.kr(gate, 0.05, 8, 0.0003);\cf2 \
\cf4 //	synth = RLPF.ar(\cf2 \
\cf4 //		LFPulse.ar(freq, 0, SinOsc.kr(0.12,[0,0.5pi],0.48,0.5)),\cf2 \
\cf4 //		freq * SinOsc.kr(0.21,0,18,20),\cf2 \
\cf4 //		0.07\cf2 \
\cf4 //	);\cf2 \
\cf4 //	#a, b = synth*env;\cf2 \
\cf4 //	DetectSilence.ar(a, 0.1, doneAction: 2);\cf2 \
\cf4 //	Out.ar(out, Mix.ar(PanAz.ar(4, [a,b], [pan, pan+1])));\cf2 \
\cf4 //\}).load(s);\cf2 \
\cf4 //\cf2 \
\cf4 //SynthDef("acid", \{ arg out, freq = 1000, gate = 1, pan = 0,  amp = 0.3;\cf2 \
\cf4 //	Out.ar(out,\cf2 \
\cf4 //		Pan2.ar(\cf2 \
\cf4 //				Pulse.ar(freq*0.125,0.05),\cf2 \
\cf4 //		pan) * EnvGen.kr(Env.linen(0.01, 1, 0.3), gate, amp, doneAction:2);\cf2 \
\cf4 //	) \cf2 \
\cf4 //	\}).load(s);\cf2 \
\cf4 //\cf2 \
\cf4 //SynthDescLib.global.read;\cf2 \
\cf4 //)\cf2 \
\cf4 //\cf2 \
\cf4 //(\cf2 \
\cf4 //var a, b, c, pattern, stream;\cf2 \
\cf4 //\cf2 \
\cf4 //pattern = Pbind(\cf2 \
\cf4 //	\\freq, Pfunc(\{Line.kr(40, 2000, 0.2)\}),\cf2 \
\cf4 //		\cf2 \
\cf4 //	\\amp, Pfunc(\{  \cf2 \
\cf4 //			[\cf2 \
\cf4 //				\{ SinOsc.kr(20.0.rand, 0, 0.1, 0.1) \},\cf2 \
\cf4 //				\{ XLine.kr(exprand(0.002, 0.2), exprand(0.002, 0.2), 2.2) \} \cf2 \
\cf4 //			].choose.value;\cf2 \
\cf4 //		\}),\cf2 \
\cf4 //	\\pan, Pfunc(\{  \cf2 \
\cf4 //			[\cf2 \
\cf4 //				\{ Line.kr(1.0.rand2, 1.0.rand2, 2.2)  \},\cf2 \
\cf4 //				\{ SinOsc.kr(4.0.rand) \}\cf2 \
\cf4 //			].choose.value;\cf2 \
\cf4 //		\}),\cf2 \
\cf4 //	\\instrument, Prand([ \\cfstring1, \\acid, \\berlinb ], inf)\cf2 \
\cf4 //);\cf2 \
\cf4 //\cf2 \
\cf4 //)\cf2 \
\cf4 //\cf2 \
}