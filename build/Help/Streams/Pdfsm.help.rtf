{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red0\green0\blue0;\red0\green115\blue0;\red96\green96\blue96;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 \
\cf3 Pdfsm\cf0  - deterministic finite state machine\
\

\fs32 by ccos
\fs36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \

\f0\b superclass: \cf3 ListPattern\cf0  \

\f1\b0 \
deterministic finite state machine with signal input.\
based on the fsm described by Minsky in 'Computation, Finite and Infinite Machines'.\
\

\f0\b startState -
\f1\b0  	 an integer index for the state to start with. defaults to 0.\

\f0\b repeats -
\f1\b0  		a cycle ends when the 
\f0\b signalStream
\f1\b0  ends or \cf3 nil\cf0  is given for the destination \
			state to a signal value, see below. defaults to 1\

\f0\b signalStream - 
\f1\b0 the stream or pattern used to supply signal values to pick substreams\
			and next states from the 
\f0\b states
\f1\b0  dictionaries. asStream is called on this \
			for each repeat. defaults to 0. ( remember that 0 is also an infinite stream of 0s )\

\f0\b states - 		
\f1\b0 states should be \cf3 IdentityDictionaries\cf0  or some other associative collection\
	\
	( \cf4 // state 0, \cf0 \
	 	
\f0\b signal value
\f1\b0   :  [
\f0\b destination state, return stream or pattern
\f1\b0 ],\
	 	
\f0\b signal value
\f1\b0   :  [
\f0\b destination state, return stream or pattern
\f1\b0 ]\
	 ),\
	 (   \cf4 // state 1\cf0 \
	 	0 : [ 1, \cf3 Pseq\cf0 ( [40,47,51],3) ],\
	 	3 : [ 0, 55 ],\
	 	\cf5 \\default\cf0  : [ 1, \cf3 Prand\cf0 ([40,47],4) ]\
	 ),\
	 ... \cf4 // state 2 ... N\cf0 \
\
any number of states can be given, and are indexed by the order in which they are given.\
if the fsm is in state x and it receives a 
\f0\b signal value
\f1\b0  y it looks up y in the state dictionary \
supplied for x, if there is no y entry, it looks for a \cf5 \\default\cf0  entry and uses that. if there is no \

\f0\b signal value
\f1\b0  for a signal, \cf6 and no \cf7 \\default\cf6  is s\cf0 upplied, you will get an error.\
the next state is then set to 
\f0\b destination state
\f1\b0 , and the stream yielded is given by 
\f0\b return stream or pattern.\

\f1\b0 that is unless the 
\f0\b destination state
\f1\b0  is given as \cf3 nil\cf0  in which case the cycle ends and any repeats left are\
then executed.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
\cf3 SynthDef\cf0 (\cf8 '\cf5 Help-Pdfsm1'\cf0 , \
	\{ \cf3 arg\cf0  out=0, freq=440, dur=0.05;\
		\cf3 var\cf0  env;\
		env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.01, dur, 0.2), doneAction:2);\
		\cf3 Out\cf0 .ar(out, \cf3 SinOsc\cf0 .ar([freq, freq + 0.1.rand2], 0, env))\
	\}).send(s);\
)\
\
(\
\
p = \cf3 Pdfsm\cf0 (\
	1, 					\cf4 // startState\
\cf0 	1, 					\cf4 // repeats \cf0 \
	\cf3 Prand\cf0 ([0,1,2],\cf3 inf\cf0 ), 	\cf4 // signalStream\cf0 \
\
	\cf3 IdentityDictionary\cf0 [ 	\cf4 // state 0\cf0 \
		0 -> [ 2, \cf3 Pseq\cf0 ([67,68,69], 2) ],\
		1 -> [ 0, 66 ],\
		2 -> [ 1, 65 ]\
	],\
	\cf3 IdentityDictionary\cf0 [ 	\cf4 // state 1\cf0 \
		1 -> [ 1, \cf3 Pseq\cf0 ([69,68,67],2) ],\
		\cf5 \\default\cf0  -> [ 0, 70 ]\
	],\
	\cf3 IdentityDictionary\cf0 [\
		0 -> [ 0, 71 ],\
		1 -> [ 0, 72 ],\
		2 -> [ \cf3 nil\cf0  ]  \cf4 // signalStream is infinitely long,\cf0 \
					\cf4 // so the fsm only ends because of this nil\cf0 \
	]\
).asStream;\
\
\cf3 Routine\cf0 (\{\
	\cf3 var\cf0  freq;\
	while(\{ (freq = p.next.postln).notNil \},\{\
		\cf3 Synth\cf0 ('\cf5 Help-Pdfsm1'\cf0 , [ \cf5 \\freq\cf0 , freq.midicps ]);\
		0.1.wait;\
	\})\
\}).play;\
\
)\
\
(\cf6 \
\cf2 SynthDef\cf6 (\cf7 'Help-Pdfsm2'\cf6 , \
	\{ \cf2 arg\cf6  freq, gate=1;\
		\cf2 var\cf6  n=8, env, osc, vib;\
		env = \cf2 Linen\cf6 .kr( gate, 0.01, 1, 0.03, 2 );\
		osc = \{\cf2 Mix\cf6 .fill( n, \{ \cf2 arg\cf6  i;\
			(\cf2 FSinOsc\cf6 .ar(freq + \cf2 Rand\cf6 (-2.0,2.0), \cf2 Rand\cf6 (0, 0.05pi)) ring4:\
			\cf2 FSinOsc\cf6 .ar(freq * (i+1))) ;\
		\})\}.dup * \cf2 FSinOsc\cf6 .kr(\cf2 Rand\cf6 (2.0,3.0),\cf2 Rand\cf6 (-0.1pi,0.1pi),0.6,env*0.4);\
		\cf2 Out\cf6 .ar(0, env * osc / n  )\
	\}).send(s);\
\cf0 )\
\
(\cf6 \
\cf2 var\cf6  n=3, base, penult, event;\
\
base = [3,4,4,0];\
\
for( 1, n, \{ \cf2 arg\cf6  i;\
	penult = \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pshuf\cf6 (base - (i*5), 2), \cf7 \\dur\cf6 , \cf2 Pseq\cf6 ([0.2],2) );\
	\cf2 Pset\cf6 (\
		\cf7 \\instrument\cf6 , \cf7 'Help-Pdfsm2'\cf6 ,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 		\cf2 Pdfsm\cf6 (\
			i%2, 	\cf9 // startState\cf6 \
			1, 		\cf9 // repeats \cf6 \
			\cf2 Pseq\cf6 ([	\cf9 // signalStream\cf6 \
				\cf2 Pn\cf6 (1,22 + i),\
				\cf2 Pn\cf6 (0,4),\
				\cf2 Pn\cf6 (1,8),\
				\cf2 Pseq\cf6 ([ 						\
					\cf2 Pn\cf6 (0,3), \
					\cf2 Prand\cf6 ([0,1],8), \
					\cf2 Pn\cf6 (1,8) \
				], 3 ),\
				\cf2 Pn\cf6 (2,2)\
			], 1 ), \
			(		\cf9 // state 0\cf6 \
				0 : [ 0, \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pseq\cf6 (base, 1) - i, \cf7 \\dur\cf6 , \cf2 Pxrand\cf6 ([0.2,0.3],4) ) ],\
				1 : [ 1, \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pseq\cf6 (base.reverse - (i*2), 2), \cf7 \\dur\cf6 , \cf2 Pseq\cf6 ([0.2,0.21],1) ) ],\
				2 :	[ 2, penult ]\
			),\
			(		\cf9 // state 1\cf6 \
				0 : [ 0, \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pshuf\cf6 (base * i.neg, 8), \cf7 \\dur\cf6 , \cf2 Pseq\cf6 ([0.08],8) ) ],\
				1 : [ 0, \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pseq\cf6 (base - (i*3),3+i), \cf7 \\dur\cf6 , \cf2 Pseq\cf6 ([0.11],3+i) ) ],\
				2 : [ 2, penult ]\
			),\
			(		\cf9 // state 2\cf6 \
				\cf7 \\default\cf6  : [ 2, \cf2 Pbind\cf6 ( \cf7 \\degree\cf6 , \cf2 Pxrand\cf6 (base - (i*7), 5), \cf7 \\dur\cf6 , \cf2 Prand\cf6 ([0.6,0.8],5) ) ]\
			)\
		)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 	).play;\
\})\
\cf0 )\
\
\
}