{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs40 \cf2 Pwalk : ListPattern
\f1\b0\fs24 \
\
A one-dimensional random walk.\
\

\f0\b *new(list, stepPattern, directionPattern, startPos)\

\f1\b0 \
list: The items to be walked over.\
stepPattern: Returns integers that will be used to increment the index into list.\
directionPattern: Used to determine the behavior at boundaries. When the index crosses a boundary, the next direction is drawn from this stream: 1 means use stepPattern as is, -1 means go in the reverse direction.\
\
Common patterns:	
\f0\b 1
\f1\b0  -- always wrap around to the other boundary.\
				
\f0\b \cf3 Pseq\cf2 ([1, -1], \cf3 inf\cf2 )
\f1\b0  -- go forward first, then backward, then forward again\
\
startPos: Where to start in the list.\
\

\f0\b Example:
\f1\b0 \

\f2\fs18 \cf2 \
p = \cf3 Pwalk\cf2 (\
	\cf3 Array\cf2 .series(20, 0, 1),		\cf4 // integers, 0-19\cf2 \
		\cf4 // steps up to 2 in either direction, weighted toward positive\cf2 \
	\cf3 Pwrand\cf2 ([-2, -1, 0, 1, 2], [0.05, 0.1, 0.15, 1, 0.1].normalizeSum, \cf3 inf\cf2 ),\
		\cf4 // reverse direction at boundaries\cf2 \
	\cf3 Pseq\cf2 ([1, -1], \cf3 inf\cf2 ),\
	10);	\cf4 // start in the middle\cf2 \
a = p.asStream;\
\
200.do(\{ a.next.post; \cf5 ", "\cf2 .post \});\
\
q = p.copy.directionPattern_(1);		\cf4 // this one will always wrap around\cf2 \
b = q.asStream;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 200.do(\{ b.next.post; \cf5 ", "\cf2 .post \});\
}