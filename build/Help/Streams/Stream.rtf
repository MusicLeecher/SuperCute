{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-BoldOblique;
\f3\fswiss\fcharset77 Helvetica-Oblique;\f4\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green0\blue0;
\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Stream
\f1\b0 \cf2 \

\f0\b\fs24 \cf0 \
superclass: AbstractFunction\
\

\f1\b0 Stream is an abstract class that is not used directly.  The following attempts to document some\
aspects of the use of Streams for music generation.\

\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs30 \cf0 Overview\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
A Stream represents a sequence of values that are obtained incrementally by repeated\

\f0\b next 
\f1\b0 messages.  A Stream can be restarted with a 
\f0\b reset 
\f1\b0 message. (Not all streams \
actually implement reset semantics.)\
\
The class Object defines 
\f0\b next
\f1\b0  to return the object itself.  Thus every object can be viewed\
as a stream and most simply stream themselves.  \
\

\f0\b Stream 
\f1\b0 is the base class for classes that define streams.\
\
In SuperCollider, Streams are primarily used for handling text and for generating music.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i\b\fs28 \cf0 Two Stream classes: FuncStream and Routine
\f1\i0\b0\fs30 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\

\f0\b FuncStream(nextFunction, resetFunction)\

\f1\b0 \
A Function defines a stream consisting of the Function itself, a FuncStream defines a stream\
that consists of 
\f3\i evaluations 
\f1\i0 of
\f3\i  
\f1\i0 its nextFunction.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf3 // Example 1: a Function vs. a FuncStream
\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf0 (	\
	f = \{ 33.rand \};\
	x = \cf2 FuncStream\cf0 (f);\
	10.do(\{ [f.next, x.next].postln \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // Example 2: the reset function\cf0 \
(	\
\
	f = \{ 33.rand \};\
	x = \cf2 FuncStream\cf0 (f, \{\cf2 thisThread\cf0 .randSeed_(345)\});\
	x.reset;\
	10.do(\{ [f.next, x.next].postln \});\
	x.reset;\
	10.do(\{ [f.next, x.next].postln \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \

\f0\b Routine(nextFunction, stacksize)\

\f1\b0 \
In a FuncStream, the nextFunction runs through to completion for each element of the stream.\
In a Routine, the nextFunction returns values with 
\f0\b yield
\f1\b0  and resumes execution (when it receives\
a 
\f0\b next 
\f1\b0  message) at the expression folowing the yield.  This allows a sequence of expressions in\
the function definition to represent a sequence of distinct events, like a musical score.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf3 \
// example\cf0 \
(\
	x = \cf2 Routine\cf0 (\{ \
				1.yield;\
				2.yield;\
				3.yield; \
		\});\
		4.do(\{ x.next.postln \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
Once the nextFunction completes execution, the Routine simply yields nil repeatedly.\
Control structures (such as 
\f0\b do
\f1\b0  or 
\f0\b while
\f1\b0 ) can be used within the nextFunction in a manner analogous\
to repeat marks in a score\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf3 // example
\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf0 (\
		x = \cf2 Routine\cf0 (\{ \
			4.do(\{\
				[1,2,3,4].do(\{ \cf2 arg\cf0  i; i.yield; \});\
			\})\
		\});\
		17.do(\{ x.next.postln \});\
)
\f1\fs24 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs30 \cf0 Iteration\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
	\
	
\f0\b do (function)\
		
\f1\b0 iterate until a nil is encountered
\f0\b \
		beware:
\f1\b0  applying do to an endless stream will lock up the interpreter!
\f0\b \
\

\f1\b0 	Where 
\f0\b do 
\f1\b0 effectively 'plays' a stream by iterating all of its contects,  the \
	following messages create a stream by filtering another stream in some way.\
\
	
\f0\b collect (function)\
		
\f1\b0 iterate indefinitely
\f0\b \
\
	reject (function)\
		
\f1\b0 return only those elements for which function.value(element) is false
\f0\b \
\
	select (function)\
		
\f1\b0 return only those elements for which function.value(element) is true
\f0\b \

\f1\b0 \
	
\f0\b dot(function, stream)\
		
\f1\b0 return function.value(this.next, stream.next)
\f0\b \

\f1\b0 \
	
\f0\b interlace(function, stream)\
		
\f1\b0 iterate all of stream for each element of this.  Combine the values using function.
\f0\b \
	\
	appendStream(stream)
\fs28 \

\fs24 		
\f1\b0 append stream after this
\f0\b  
\f1\b0 returns nil
\f0\b\fs28 \

\fs24 	
\f1\b0 \
	
\f0\b embedInStream(inval)\
		
\f1\b0 iterate all of this from within whatever Stream definition it is called.
\f0\b \
	
\f1\b0 \

\f0\b 	trace
\f1\b0 \
		print out the results of a stream while returning the original values
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs32 \cf0 Composite Streams\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs26 \cf0 Routines can be embedded in each other, using 
\f0\b embedInStream
\f1\b0 :
\f0\b\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\b0\fs18 \cf3 // example\cf0 \
(\
x = \cf2 Routine\cf0 (\{ \
			2.do(\{\
				[1,2,3,4].do(\{ \cf2 arg\cf0  i; i.yield; \});\
			\})\
		\});\
y = \cf2 Routine\cf0 (\{\
		100.yield;\
		30.yield;\
		x.embedInStream;\
		440.yield;\
		1910.yield\
\});\
17.do(\{ y.next.postln \});\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Routines can be 
\f0\b concatenated
\f1\b0  just like Streams:
\f4\fs18 \
\
(\
x = \cf2 Routine\cf0 (\{ \
			2.do(\{\
				[1,2,3,4].do(\{ \cf2 arg\cf0  i; i.yield; \});\
			\})\
		\});\
y = \cf2 Routine\cf0 (\{\
		100.yield;\
		30.yield;\
\});\
z = x ++ y;\
17.do(\{ z.next.postln \});\
)\
\

\f1\fs24 Routines can be combined with the 
\f0\b composition
\f1\b0  operator 
\f0\b <>
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf0 \
(\cf4 \
x = \cf5 Routine\cf4 (\{ \cf5 arg\cf4  inval;\
			2.do(\{\
				\
				[1,2,3,4].do(\{ \cf5 arg\cf4  i; \
					if(inval.isNil) \{ \cf5 nil\cf4 .alwaysYield \};\
					inval = (i * inval).yield; \
				\});\
			\})\
		\});\
		\
y = \cf5 Routine\cf4 (\{\
		100.yield;\
		30.yield;\
		4.do \{ 1.0.rand.yield \};\
\});\
\
z = x <> y;\
17.do(\{ z.value.postln \}); \cf6 // call .value here, as this is a function.\cf4 \
)
\f0\b\fs30 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 Composite Streams can be defined as combinations of Streams using the unary and binary \
messages.
\f0\b\fs30 \
\
Unary messages\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
	Streams support most of the unary messages  defined in AbstractFunction:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf4 (\
	a = \cf5 Routine\cf4 (\{ 20.do(\{ 33.rand.yield \}) \});\
	b = \cf5 Routine\cf4 (\{ [-100,00,300,400].do(\{ \cf5 arg\cf4  v; v.yield\}) \});\
\
	c = b.neg; \cf6 // define a composite stream		\cf4 \
	\
	\cf6 // enumerate and perform all of the unary messages	:	\cf4 \
	[ \
		\cf7 \\neg\cf4 , \cf7 \\reciprocal\cf4 , \cf7 \\bitNot\cf4 , \cf7 \\abs\cf4 , \cf7 \\asFloat\cf4 , \cf7 \\asInteger\cf4 , \cf7 \\ceil\cf4 , \
		\cf7 \\floor\cf4 , \cf7 \\frac\cf4 , \cf7 \\sign\cf4 , \cf7 \\squared\cf4 , \cf7 \\cubed\cf4 , \cf7 \\sqrt\cf4 , \cf7 \\exp\cf4 , \cf7 \\midicps\cf4 , \
		\cf7 \\cpsmidi\cf4 , \cf7 \\midiratio\cf4 , \cf7 \\ratiomidi\cf4 , \cf7 \\ampdb\cf4 , \cf7 \\dbamp\cf4 , \cf7 \\octcps\cf4 , \
		\cf7 \\cpsoct\cf4 , \cf7 \\log\cf4 , \cf7 \\log2\cf4 , \cf7 \\log10\cf4 , \cf7 \\sin\cf4 , \cf7 \\cos\cf4 , \cf7 \\tan\cf4 , \cf7 \\asin\cf4 , \cf7 \\acos\cf4 , \cf7 \\atan\cf4 , \
		\cf7 \\sinh\cf4 , \cf7 \\cosh\cf4 , \cf7 \\tanh\cf4 , \cf7 \\rand\cf4 , \cf7 \\rand2\cf4 , \cf7 \\linrand\cf4 , \cf7 \\bilinrand\cf4 , \cf7 \\sum3rand\cf4 , \
		\cf7 \\distort\cf4 , \cf7 \\softclip\cf4 , \cf7 \\coin\cf4 , \cf7 \\even\cf4 , \cf7 \\odd\cf4 , \cf7 \\isPositive\cf4 , \cf7 \\isNegative\cf4 ,\
		\cf7 \\isStrictlyPositive\cf4 \
	]\
	.do(\{ \cf5 arg\cf4  msg;\
			postf(\cf8 "\\n msg: % \\n"\cf4 , msg);\
			b.reset.perform(msg).do(\{\cf5 arg\cf4  v; v.post; \cf8 " "\cf4 .post;\}) \
	\}); \
	nil;\
	\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Binary messages\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
	Streams support the following binary messages  defined in AbstractFunction:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\fs18 \cf4 \
\
(\
	a = \cf5 Routine\cf4 (\{ 20.do(\{ 33.rand.yield \}) \});\
	b = \cf5 Routine\cf4 (\{ [-100,00,300,400].do(\{ \cf5 arg\cf4  v; v.yield\}) \});\
	[\
	\cf7 '+'\cf4  , \cf7 '-'\cf4  , \cf7 '*'\cf4 , \cf7 '/'\cf4 , \cf7 \\div\cf4 , \cf7 '%'\cf4 , \cf7 '**'\cf4 , \cf7 \\min\cf4 , \cf7 \\max\cf4 , \cf7 '<'\cf4 , \cf7 '<='\cf4 , \cf7 '>'\cf4 , \cf7 '>='\cf4 , \cf7 '&'\cf4 , \cf7 '|'\cf4 , \
	\cf7 \\bitXor\cf4 , \cf7 \\lcm\cf4 , \cf7 \\gcd\cf4 , \cf7 \\round\cf4 , \cf7 \\trunc\cf4 , \cf7 \\atan2\cf4 , \
	\cf7 \\hypot\cf4 , \cf7 '>>'\cf4 , \cf7 '+>>'\cf4 , \cf7 \\ring1\cf4 , \cf7 \\ring2\cf4 , \cf7 \\ring3\cf4 , \cf7 \\ring4\cf4 , \
	\cf7 \\difsqr\cf4 , \cf7 \\sumsqr\cf4 , \cf7 \\sqrdif\cf4 , \cf7 \\absdif\cf4 , \cf7 \\amclip\cf4 ,\
	\cf7 \\scaleneg\cf4 , \cf7 \\clip2\cf4 , \cf7 \\excess\cf4 , \cf7 '<!'\cf4 , \cf7 \\rrand\cf4 , \cf7 \\exprand\cf4 \
	]\
		.do(\{ \cf5 arg\cf4  msg;\
			postf(\cf8 "\\n msg: % \\n"\cf4 , msg);\
			b.reset.perform(msg).do(\{ \cf5 arg\cf4  v; v.post; \cf8 " "\cf4 .post; \}) \
		\}); \
		\cf5 nil\cf4 ;\
)
\f1\fs24 \cf0 \
 \
\
	}