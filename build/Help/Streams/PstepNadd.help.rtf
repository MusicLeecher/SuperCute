{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PstepNadd	
\f1\b0\fs18 		
\f0\b\fs24  pattern that returns combinatoric sums
\f2\b0 \
\
superclass: PstepNfunc\
\
\
combines an arbitrary number of patterns by summing (depth first traversal).\
when a stream ends it is recreated from its pattern until the top stream ends.\

\f1\fs18 \

\f2\fs24 see also: Pstep3add\

\f1\fs18 \
\
	
\f0\b\fs24 *new(pattern1, pattern2, ... patternN);\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 //examples\cf0 \
\
\
\cf2 // comparing PstepNadd and Pstep3add (test)\cf0 \
(\
x = \cf3 PstepNadd\cf0 (\cf3 Pseq\cf0 ([1, 2, 3]), \cf3 Pseq\cf0 ([10, 20, 30, 40]), \cf3 Pseq\cf0 ([100, 200, 300])).asStream;\
y = \cf3 Pstep3add\cf0 (\cf3 Pseq\cf0 ([1, 2, 3]), \cf3 Pseq\cf0 ([10, 20, 30, 40]), \cf3 Pseq\cf0 ([100, 200, 300])).asStream;\
\
50.do(\{ [x.next, y.next].postln \});\
)\
\
\cf2 // pattern return stream until the longest stream ended \cf0 \
(\
x = \cf3 PstepNadd\cf0 (\
		\cf3 Plazy\cf0 (\{ \cf4 "pattern1.asStream"\cf0 .postln; \cf3 Pseq\cf0 ([1, 2, 3], 2) \}), \
		\cf3 Plazy\cf0 (\{ \cf4 "pattern2.asStream"\cf0 .postln; \cf3 Pshuf\cf0 ([10, 20, 30, 40]) \}), \
		\cf3 Plazy\cf0 (\{ \cf4 "pattern3.asStream"\cf0 .postln; \cf3 Pseq\cf0 ([100, 200, 300]) \}),\
		\cf3 Plazy\cf0 (\{  \cf3 Pseries\cf0 (1, 1, 4) * 0.01 \})\
	).asStream;\
150.do(\{ x.next.postln \});\
)\
\
\cf2 // if the last pattern loops it the combinatorics loop there:\cf0 \
x = \cf3 PstepNadd\cf0 (\cf3 Pseq\cf0 ([1, 2, 3]), \cf3 Pseq\cf0 ([10, 20, 30, 40]), \cf3 Pseq\cf0 ([100, 200, 300], \cf3 inf\cf0 )).asStream;\
50.do(\{ x.next.postln \});\
\
\cf5 // if the first pattern loops, the whole iteration loops as if it was used in a Pn(.., inf):\cf6 \
x = \cf7 PstepNadd\cf6 (\cf7 Pseq\cf6 ([1, 2, 3], \cf7 inf\cf6 ), \cf7 Pseq\cf6 ([10, 20, 30, 40]), \cf7 Pseq\cf6 ([100, 200, 300])).asStream;\
y = \cf7 Pn\cf6 (\cf7 PstepNadd\cf6 (\cf7 Pseq\cf6 ([1, 2, 3]), \cf7 Pseq\cf6 ([10, 20, 30, 40]), \cf7 Pseq\cf6 ([100, 200, 300])), \cf7 inf\cf6 ).asStream;\
150.do(\{ [x.next, y.next].postln \});\cf0 \
\
\cf2 // sound example\cf0 \
(\
\cf3 Pbind\cf0 (\
	\cf8 \\octave\cf0 , 4,\
	\cf8 \\degree\cf0 , \cf3 PstepNadd\cf0 (\
				\cf3 Pseq\cf0 ([1, 2, 3]), \
				\cf3 Pseq\cf0 ([0, -2, [1, 3], -5]), \
				\cf3 Pshuf\cf0 ([1, 0, 3, 0], 2), \
				\cf3 Pseq\cf0 ([1, -1], 5)\
			),\
	\cf8 \\dur\cf0 , \cf3 PstepNadd\cf0 (\
				\cf3 Pseq\cf0 ([1, 0, 0, 1], 2),\
				\cf3 Pshuf\cf0 ([1, 1, 2, 1], 2)\
		).loop * (1/8),\
	\cf8 \\legato\cf0 , \cf3 Pn\cf0 (\cf3 Pshuf\cf0 ([0.2, 0.2, 0.2, 0.5, 0.5, 1.6, 1.4], 4), \cf3 inf\cf0 ),\
	\cf8 \\scale\cf0 , #[0, 1, 3, 4, 5, 7, 8]\
).play;\
)\
\
\
\
\
\
\
}