{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red0\green0\blue191;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Env						
\fs24 \cf2 envelope specification
\f1\b0 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
	An Env is a specification for a segmented envelope used by 
\f0\b EnvGen
\f1\b0 , \
	it can have any number of segments which can \
	stop at a particular value or loop several segments when sustaining.\
\
	An Env can have several shapes for its segments.\
	\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Creation
\f1\b0\fs24 \ulnone \
\
*
\f0\b new(levels, times, curves, releaseNode, loopNode)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
	Create a new envelope specification.\
	
\f0\b levels
\f1\b0  - an array of levels. The first level is the initial value of the envelope.\
	
\f0\b times
\f1\b0  - an array of durations of segments in seconds. There should be\
	one fewer duration than there are levels.\
	
\f0\b curve
\f1\b0  - this parameter determines the shape of the envelope segments.\
	The possible values are:\
		'step' - flat segments\
		'linear' - linear segments, the default\
		'exponential' - natural exponential growth and decay. In this case, the levels must all be nonzero\
					and the have the same sign.\
		'sine' - sinusoidal S shaped segments.\
		'welch' - sinusoidal segments shaped like the sides of a Welch window.\
		a Float - a curvature value for all segments.\
		An Array of Floats - curvature values for each segments.\
	
\f0\b releaseNode
\f1\b0  - an Integer or nil. The envelope will sustain at the release node until released.\
	
\f0\b loopNode
\f1\b0  - an Integer or nil. If not nil the sustain portion will loop from the releaseNode to\
	the loop node.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 		
\fs18 \cf3 // different shaped segments:\cf2 \
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],\cf5 'linear'\cf2 ).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],\cf5 'exponential'\cf2 ).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],\cf5 'sine'\cf2 ).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],\cf5 'welch'\cf2 ).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],\cf5 'step'\cf2 ).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4], -2).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4], 2).test;\
		\cf4 Env\cf2 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4],[0,3,-3,-1]).test;\
		\
	
\f1\fs24 \cf0 if a release node is given, and the gate input of the EnvGen is set to zero, \
	it outputs the nodes after the release node:\
	\
		
\f2\fs18 \cf3 //release node is node 2
\f1\fs24 \cf0 \
		
\f2\fs18 \cf6 Env\cf0 .new([0.001,1,0.3,0.8,0.001],[2,3,1,4] * 0.2, 2, 2).test(5); // releases after 5 sec\
		\cf6 Env\cf0 .new([0.001,1,0.3,0.8,0.5,0.8,0],[2,3,1,2,2,1] * 0.2, 2, 2).test(5); \
		\cf6 Env\cf0 .new([0.001,1,0.3,0.8,0.5,0.8,0],[2,3,1,2,2,1] * 0.2, 2, 2).test(0.1); //instant release
\f1\fs24 \
		\
	if a loop node is given, the EnvGen outputs the nodes between the release node and the loop node \
	until it is released:\
\cf2 		\
		
\f2\fs18 \cf7 //release node is node 3, loop node is node 1
\f1\fs24 \cf2 \
		
\f2\fs18 \cf6 Env\cf0 .new([0.001,1,0.3,0.8,0.5,0.8,0],[2,1,1,2,3,1] * 0.1, 'lin', 3, 1).test(3); 
\f1\fs24 \cf2 \
\cf0 \
	
\f0\b Note
\f1\b0 \
	\
	The starting level for an envelope segment is always the level you are  at right now.\
	For example when the gate is released and you jump to the release  segment, the level does not jump to the level at the 	beginning of the  release segment, it changes from the whatever the current level is to  the goal level of the release segment 	over the specified duration of  the release segment.\
\
	There is an extra level at the beginning of the envelope to set the  initial level. After that each node is a goal level and a 	duration, so  node zero has duration equal to times[0] and goal level equal to  levels[1].\
	\
	The loop jumps back to the loop node. The endpoint of  that segment is the goal level for that segment and 	the duration of  that segment will be the time over which the level changed from the  current level to the goal level.\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Fixed Duration Envelope Creation Methods
\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
	The following class methods create some frequently used envelope shapes which\
	have a fixed duration.\
	\
	*
\f0\b linen(attackTime, sustainTime, releaseTime, level, curve)\
	
\f1\b0  \
		 Creates a new envelope specification which has a trapezoidal shape.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 		 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
		 
\f0\b sustainTime
\f1\b0  - the duration of the sustain portion.\
		 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\
		 
\f0\b level
\f1\b0  - the level of the sustain portion.\
		 
\f0\b curve
\f1\b0  - the curvature of the envelope.\
	\
		 \
			
\f2\fs18 \cf4 Env\cf2 .linen(1, 2, 3, 0.6).test;\
\cf0 	\cf2 		\cf4 Env\cf2 .linen(0.1, 0.2, 0.1, 0.6).test;\
\cf0 	\cf2 		\cf4 Env\cf2 .linen(1, 2, 3, 0.6, \cf5 'sine'\cf2 ).test;\
\cf0 	\cf2 		\cf4 Env\cf2 .linen(1, 2, 3, 0.6, \cf5 'welch'\cf2 ).test;\
\cf0 	\cf2 		\cf4 Env\cf2 .linen(1, 2, 3, 0.6, -3).test;\
\cf0 	\cf2 		\cf4 Env\cf2 .linen(1, 2, 3, 0.6, -3).test;
\fs24 \cf0 \
		
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	*
\f0\b triangle(duration, level)\
	
\f1\b0  \
		 Creates a new envelope specification which has a triangle shape.\
		 
\f0\b duration
\f1\b0  - the duration of the envelope.\
		 
\f0\b level
\f1\b0  - the peak level of the envelope.\
		 \
		 \
		 
\f2\fs18 \cf2 	\cf4 Env\cf2 .triangle(1, 1).test;
\fs24 \cf0 \
	
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	*
\f0\b sine(duration, level)\
	
\f1\b0  \
		 Creates a new envelope specification which has a hanning window shape.\
		 
\f0\b duration
\f1\b0  - the duration of the envelope.\
		 
\f0\b level
\f1\b0  - the peak level of the envelope.\
		 \
		 	
\f2\fs18 \cf4 Env\cf2 .sine(1,1).test;\

\f1\fs24 \cf0 		\cf7 \
		\cf0 	\
	*
\f0\b perc(attackTime, releaseTime, peakLevel, curve)\
	
\f1\b0  \
		 Creates a new envelope specification which (usually) has a percussive shape.\
		 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
		 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\
		
\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\
		
\f0\b curve
\f1\b0  - the curvature of the envelope.\
		 \
			
\f2 \
			
\fs18 \cf4 Env\cf2 .perc(0.05, 1, 1, -4).test;\
			\cf4 Env\cf2 .perc(0.001, 1, 1, -4).test;	\cf3 // sharper attack\cf2 \
			\cf4 Env\cf2 .perc(0.001, 1, 1, -8).test;	\cf3 // change curvature\cf2 \
			\cf4 Env\cf2 .perc(1, 0.01, 1, 4).test;	\cf3 // reverse envelope
\fs24 \cf0 \
			
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Sustained Envelope Creation Methods
\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
The following methods create some frequently used envelope shapes which have a sustain segment.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	*
\f0\b adsr(attackTime, decayTime, sustainLevel,  releaseTime, peakLevel, curve)\
		
\f1\b0  \
		Creates a new envelope specification which is shaped like traditional analog \
		attack-decay-sustain-release (adsr) envelopes.\
		
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
		
\f0\b decayTime
\f1\b0  - the duration of the decay portion.\
		
\f0\b sustainLevel
\f1\b0  - the level of the sustain portion as a ratio of the peak level.\
		
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\
		
\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\
		
\f0\b curve
\f1\b0  - the curvature of the envelope.\
		 \

\f2 	
\fs18 \cf2 		\cf4 Env\cf2 .adsr(0.02, 0.2, 0.25, 1, 1, -4).test(2);\
			\cf4 Env\cf2 .adsr(0.001, 0.2, 0.25, 1, 1, -4).test(2);		\
			\cf3 //release after 0.45 sec\cf2 \
			\cf4 Env\cf2 .adsr(0.001, 0.2, 0.25, 1, 1, -4).test(0.45);
\fs24 \cf7 	
\f1 \cf0 \
	\
	*
\f0\b asr(attackTime, sustainLevel,  releaseTime, peakLevel, curve)\
	
\f1\b0  \
		Creates a new envelope specification which is shaped like traditional analog \
		attack-sustain-release (asr) envelopes.\
		 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
		
\f0\b sustainLevel
\f1\b0  - the level of the sustain portion as a ratio of the peak level.\
		 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\
		
\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\
		
\f0\b curve
\f1\b0  - the curvature of the envelope.\
		 \
		
\f2 \

\fs18 \cf2 			\cf4 Env\cf2 .asr(0.02, 0.5, 1, 1, -4).test(2);\
			\cf4 Env\cf2 .asr(0.001, 0.5, 1, 1, -4).test(2); \cf3 // sharper attack\cf2 \
			\cf4 Env\cf2 .asr(0.02, 0.5, 1, 1, \cf5 'linear'\cf2 ).test(2) \cf3 // linear segments
\f1\fs24 \cf2 \
		
\f2 \cf0 \
	
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Instance Methods
\f1\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\
	
\f0\b blend(anotherEnv, blendFraction)\
	
\f1\b0 \
	Blend two envelopes. Returns a new Env.\
	
\f0\b anotherEnv
\f1\b0  - an Env.\
	
\f0\b blendFraction
\f1\b0  - a number from zero to one.\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 			
\fs18 \cf2 a = \cf4 Env\cf2 ([0, 0.2, 1, 0.2, 0.2, 0], [0.5, 0.01, 0.01, 0.3, 0.2]);\
			a.test;\
			b = \cf4 Env\cf2 ([0, 0.4, 1, 0.2, 0.5, 0], [0.05, 0.4, 0.01, 0.1, 0.4]);\
			b.test;\
				\
			(\
			\cf4 Task\cf2 (\{\
				(0, 0.2 .. 1).do \{ \cf4 |u|\cf2 \
					blend(a, b, u).test;\
					2.wait;\
				\}\
			\}).play;\
			)
\fs24 \cf0 \
						}