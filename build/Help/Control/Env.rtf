{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red191\green0\blue0;\red0\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Env
\f1\b0\fs24 \
\

\f0\b superclass: Object\

\f1\b0 \
An Env is a specification for a segmented envelope used by EnvGen.\
An Env can have any number of segments. \
They can stop at a particular value or loop several segments when sustaining.\
\
An Env can have several shapes for its segments.\
\

\f0\b\fs28 \ul Creation
\f1\b0\fs24 \ulnone \
\
*
\f0\b new(levels, times, curves, releaseNode, loopNode)\

\f1\b0 \
Create a new envelope specification.\

\f0\b levels
\f1\b0  - an array of levels. The first level is the initial value of the envelope.\

\f0\b times
\f1\b0  - an array of durations of segments in seconds. There should be\
one fewer duration than there are levels.\

\f0\b curve
\f1\b0  - this parameter determines the shape of the envelope segments.\
The possible values are:\
	'step' - flat segments\
	'linear' - linear segments, the default\
	'exponential' - natural exponential growth and decay. In this case, the levels must all be nonzero\
				and the have the same sign.\
	'sine' - sinusoidal S shaped segments.\
	'welch' - sinusoidal segments shaped like the sides of a Welch window.\
	a Float - a curvature value for all segments.\
	An Array of Floats - curvature values for each segments.\

\f0\b releaseNode
\f1\b0  - an Integer or nil. The envelope will sustain at the release node until released.\

\f0\b loopNode
\f1\b0  - an Integer or nil. If not nil the sustain portion will loop from the releaseNode to\
the loop node.
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf2 // These examples are currently broken as plot is not implemented.
\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf3 //Env.new([0,1,0.7,0],[2,3,2],'linear').plot;\cf4 \
\cf3 //\cf4 \
\cf3 //// different shaped segments:\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],'linear').plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],'exponential').plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],'sine').plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],'welch').plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],'step').plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4], -2).plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4], 2).plot;\cf4 \
\cf3 //Env.new([0.001,1,0.3,0.8,0.001],[2,3,1,4],[0,3,-3,-1]).plot;\cf4 \
\cf0 \
\

\f0\b\fs28 \ul Fixed Duration Envelope Creation Methods
\f2\b0\fs24 \ulnone \

\f1 \
The following class methods create some frequently used envelope shapes which\
have a fixed duration.\
\
*
\f0\b linen(attackTime, sustainTime, releaseTime, sustainLevel)\

\f1\b0  \
 Creates a new envelope specification which has a trapezoidal shape.\
 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
 
\f0\b sustainTime
\f1\b0  - the duration of the sustain portion.\
 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\
 
\f0\b sustainLevel
\f1\b0  - the level of the sustain portion.\
 \
\cf3 //
\f2 Env.linen(1, 2, 3, 0.6).plot;\cf4 \
\cf3 //Env.linen(1, 2, 3, 0.6).test;\cf4 \
\cf3 //Env.linen(1, 2, 3, 0.6, 'sine').plot;\cf4 \
\cf3 //Env.linen(1, 2, 3, 0.6, 'welch').plot;\cf4 \
\cf3 //Env.linen(1, 2, 3, 0.6, -3).plot;\cf0 \

\f1 \
\
*
\f0\b triangle(duration, level)\

\f1\b0  \
 Creates a new envelope specification which has a triangle shape.\
 
\f0\b duration
\f1\b0  - the duration of the envelope.\
 
\f0\b level
\f1\b0  - the peak level of the envelope.\
 \
\cf3 //
\f2 Env.triangle(1, 1).plot;\cf4 \
\cf3 //Env.triangle(1, 1).test;\cf0 \

\f1 \
\
*
\f0\b sine(duration, level)\

\f1\b0  \
 Creates a new envelope specification which has a hanning window shape.\
 
\f0\b duration
\f1\b0  - the duration of the envelope.\
 
\f0\b level
\f1\b0  - the peak level of the envelope.\
 \
\cf3 //
\f2 Env.sine(1, 1).plot;\cf4 \
\cf3 //Env.sine(1, 1).test;\cf0 \

\f1 \
\
*
\f0\b perc(attackTime, releaseTime, peakLevel, curve)\

\f1\b0  \
 Creates a new envelope specification which (usually) has a percussive shape.\
 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\
 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\

\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\

\f0\b curve
\f1\b0  - the curvature of the envelope.\
 \
\cf3 //
\f2 Env.perc(0.01, 1, 1, -4).plot;\cf4 \
\cf3 //Env.perc(0.01, 1, 1, -4).test;\cf4 \
\cf3 //Env.perc(0.001, 1, 1, -4).test;	// sharper attack\cf4 \
\cf3 //Env.perc(0.001, 1, 1, -8).test;	// change curvature\cf4 \
\cf3 //Env.perc(1, 0.01, 1, 4).test;	// reverse envelope\cf0 \

\f1 \
\

\f0\b\fs28 \ul Sustained Envelope Creation Methods
\f2\b0\fs24 \ulnone \

\f1 \
The following methods create some frequently used envelope shapes which\
have a sustain segment.\
\
*
\f0\b adsr(attackTime, decayTime, sustainLevel,  releaseTime, peakLevel, curve)\

\f1\b0  \
Creates a new envelope specification which is shaped like traditional analog \
attack-decay-sustain-release (adsr) envelopes.\

\f0\b attackTime
\f1\b0  - the duration of the attack portion.\

\f0\b decayTime
\f1\b0  - the duration of the decay portion.\

\f0\b sustainLevel
\f1\b0  - the level of the sustain portion as a ratio of the peak level.\
 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\

\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\

\f0\b curve
\f1\b0  - the curvature of the envelope.\
 \
\cf3 //
\f2 Env.adsr(0.02, 0.2, 0.25, 1, 1, -4).plot;\cf4 \
\cf3 //Env.adsr(0.02, 0.2, 0.25, 1, 1, -4).test(2);\cf4 \
\cf3 //Env.adsr(0.001, 0.2, 0.25, 1, 1, -4).test(2);	// sharper attack\cf0 \

\f1 \
\
*
\f0\b asr(attackTime, sustainLevel,  releaseTime, peakLevel, curve)\

\f1\b0  \
Creates a new envelope specification which is shaped like traditional analog \
attack-sustain-release (asr) envelopes.\
 
\f0\b attackTime
\f1\b0  - the duration of the attack portion.\

\f0\b sustainLevel
\f1\b0  - the level of the sustain portion as a ratio of the peak level.\
 
\f0\b releaseTime
\f1\b0  - the duration of the release portion.\

\f0\b peakLevel
\f1\b0  - the peak level of the envelope.\

\f0\b curve
\f1\b0  - the curvature of the envelope.\
 \
\cf3 //
\f2 Env.asr(0.02, 0.5, 1, 1, -4).plot;\cf4 \
\cf3 //Env.asr(0.02, 0.5, 1, 1, -4).test(2);\cf4 \
\cf3 //Env.asr(0.001, 0.5, 1, 1, -4).test(2);	// sharper attack\cf4 \
\cf3 //Env.asr(0.02, 0.5, 1, 1, 'linear').test(2);	// linear segments\cf0 \

\f1 \
\

\f0\b\fs28 \ul Utilities
\f1\b0\fs24 \ulnone \

\cf3 \
// ** not implemented\
//
\f0\b \cf3 plot
\f1\b0 \cf4 \
\cf3 //\cf4 \
\cf3 //Plot the Envelope in a window. For examples look at those given above.\cf0 \
\

\f0\b blend(anotherEnv, blendFraction)\

\f1\b0 \
Blend two envelopes. Returns a new Env.\

\f0\b anotherEnv
\f1\b0  - an Env.\

\f0\b blendFraction
\f1\b0  - a number from zero to one.\
\

\f2 \
\
}