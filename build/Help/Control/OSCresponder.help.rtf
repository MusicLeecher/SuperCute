{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf380
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-BoldOblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 OSCresponder				
\fs26 client side network responder
\f1\b0\fs24 \
\
\
Register a function to be called upon receiving a specific command from a specific OSC address.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i\b \cf0 Examples: see [\ul OSCresponderNode\ulnone ]\

\f0\i0 \
	*new(addr,cmdName,action);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	
\f0\b addr
\f1\b0 		\
		the address the responder 
\f2\i\b receives from
\f1\i0\b0  (an instance of NetAddr, e.g. Server.default.addr)\
		an address of 
\f0\b nil
\f1\b0  will respond to messages from anywhere.\
	\
	
\f0\b cmdName
\f1\b0 \
		an OSC command eg. '/done'\
	\
	
\f0\b action
\f1\b0 \
		a function that will be evaluated when a cmd of that name is received from addr.\
		
\f0\b arguments
\f1\b0 : 
\f0\b time, theResponder, message, addr
\f1\b0 \
		note that OSCresponder evaluates its function in the system process.\
		in order to access the application process (e.g. for GUI access ) use 
\f0\b \{ ... \}.defer
\f1\b0 ;\
				\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Note:
\f1\b0 \
	A single OSCresponder may be set up for each addr and cmdName combination.  \
	Subsequent registrations will overwrite previous ones.  See 
\f0\b [\ul OSCresponderNode\ulnone ]
\f1\b0 .
\f0\b\fs26 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
	Whenever an OSC message is sent to the SuperCollider application (the language, not the server), either 	Main-recvOSCmessage or Main-recvOSCbundle is called.  There, the messages are forwarded to the 	OSCresponder class using the OSCresponder-respond class method.  \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	add\
		
\f1\b0 add this responder instance to the list of active responders.  \
		The OSCresponder is not active until this is done.\
\

\f0\b 	remove
\f1\b0 \
		remove and deactivate the OSCresponder\
\

\f0\b 	removeWhenDone
\f3\b0\fs18 \
		
\f1\fs24 remove and deactivate the OSCresponder when action is done.
\f3\fs18 \
	\
	//syntax:	\
	\cf2 OSCresponder\cf0 (addr,cmdName,action).add.removeWhenDone;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	\
	*add(oscResponder)
\f1\b0 \
		 add the responder instance \

\f0\b 	\
	\
	*remove(oscResponder)
\f1\b0 \
		remove the responder instance \

\f0\b 	\
	\
	*removeAddr(addr)
\f1\b0 \
		remove all OSCresponders for that addr.\
\
\
\
\
\
\
\
}