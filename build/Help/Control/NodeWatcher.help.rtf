{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 NodeWatcher\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs26 \cf0 keeps track of node start and stop messages from the server.
\f0\b\fs36 \

\f1\b0\fs26 in order to know whether a synth / group is playing or not.\
usually this is not needed, but in some cases it can be essential.
\f2\fs18 \
\

\f0\b\fs26 *new(server)\

\f1\b0 	create a new instance listening to the server's address\
\

\f0\b *newFrom(server)
\f1\b0 \
	 create a new instance listening to the server's address\
	 if there is one present already return that one\
\

\f0\b *register(aNode)
\f1\b0 \
	aNode can be a Group or a Synth.\
	the NodeWatcher is created internally\
\

\f0\b *unregister(aNode)
\f1\b0 \
	remove the node from the list of nodes.\
	this happens also when a node is freed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf0 start
\f1\b0 \
	add the OSCresponderNode to listen to the address\
\

\f0\b stop
\f1\b0 \
	remove the OSCresponderNode to stop listen to the address 
\f2\fs18 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // example:\
\cf3 \
	a = \cf4 Group\cf3 .basicNew(1000, s); \cf2 //create a node object\cf3 \
	\cf4 NodeWatcher\cf3 .register(a);\
	a.isPlaying;\
	a.nodeToServer; \cf2 //start the node on the server\cf3 \
	a.isPlaying;\
	a.isRunning;\
	a.run(\cf4 false\cf3 );\
	a.isRunning;\
	s.freeAll; \cf2 //free all nodes\cf3 \
	a.isPlaying;\
	a.isRunning;\
	\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 DebugNodeWatcher\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs26 \cf0 for debugging, it can be useful to see every node start and end\
it doesn't require registration, reacts to each message.
\f2\fs18 \
\
\

\f0\b\fs26 nodeIsPlaying(nodeID)
\f1\b0 \
	check if the node with the nodeID is playing\
	
\f2\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // example:\cf3 \
	n = \cf4 DebugNodeWatcher\cf3 (s);\
	n.start;\
	x = \cf4 Group\cf3 (s);\
	x.run(\cf4 false\cf3 );\
	x.free;\
	n.stop;\cf0 \
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 NodeIDWatcher\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs26 \cf0 in the server it is only important to free nodeIDs from the nodeIDAllocator.\
this is done by NodeIDWatcher within the server. normally you should not need \
to make your own.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
\
}