{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red96\green96\blue96;\red0\green0\blue191;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 CmdPeriod			
\fs26 register objects to be cleared when Cmd-. is pressed
\fs36 \

\fs24 \
Superclass: Object\
\

\f1\b0 CmdPeriod allows you to register objects to perform an action when the user presses Cmd-. These objects must implement a method called -cmdPeriod which performs the necessary tasks. (You can add such a method in your custom classes.) Note that since 
\f0\b [\ul Function\ulnone ] 
\f1\b0 implements -cmdPeriod as a synonym for -value, it is possible to register any function (and thus any arbitrary code) for evaluation when Cmd-. is pressed.\
\

\f0\b N.B. 
\f1\b0 Cmd-. uses an 
\f0\b [\ul IdentitySet\ulnone ]
\f1\b0  to store its registered objects. For this reason you cannot rely on the order in which the objects will be cleared. If you need -cmdPeriod to be called on a set of objects in a given order then it is best to wrap those within a 
\f0\b [\ul Function\ulnone ]
\f1\b0  and register that. (See example below.)
\f2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Class Methods\ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \ulnone \

\f0\b *add(object)\

\f1\b0 \
Registers an object to be cleared when Cmd-. is pressed. This object will stay registered until it is explicitly removed, and will thus respond to additional presses of Cmd-.\
\

\f0\b *remove(object)
\f1\b0 \
\
Removes an object that was previously registered.\
\

\f0\b *doOnce(object)
\f1\b0 \
\
Registers an Object o be evaluated once, and then unregistered.\
\

\f0\b *objects
\f1\b0 		return the list of objects that are called when CmdPeriod is evaluated.\
\

\f0\b *objects_(array)
\f1\b0 	set the list of objects that are called when CmdPeriod is evaluated.\
\

\f0\b *era
\f1\b0 			number of times CmdPeriod has been called since startup.
\f2 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Examples\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
f = \{\cf2 "foo"\cf0 .postln \};\
g = \{\cf2 "bar"\cf0 .postln \};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .add(f);\
\cf3 CmdPeriod\cf0 .add(g);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // Now press Cmd-.\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .remove(g);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // Now press Cmd-. Only f executes\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .remove(f); \cf4 // must explicitly cleanup\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //// Controlling order of execution\cf0 \
(\
f = \{\cf2 "first"\cf0 .postln \};\
g = \{\cf2 "second"\cf0 .postln \};\
\
\cf4 // order is arbitrary, so wrap in a function\cf0 \
\
h = \{ f.cmdPeriod; g.cmdPeriod;\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .add(h);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // Now press Cmd-.\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .remove(h);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // note that often you want to automatically remove the function once it is evaluated\cf0 \
\cf4 // instead of\cf0 \
\
f = \{ \cf2 "foo"\cf0 .postln; \cf3 CmdPeriod\cf0 .remove(f) \};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .add(f);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // you can write:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .doOnce \{ \cf2 "foo"\cf0 .postln \}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // a typical example:\cf0 \
(\
w = \cf3 SCWindow\cf0 .new(\cf2 "close on cmd-."\cf0 ).front;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 CmdPeriod\cf0 .doOnce \{\'caw.close \};\
)\
\
}