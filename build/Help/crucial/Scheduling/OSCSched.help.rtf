{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 OSCSched
\f1\b0\fs24 \
\
A scheduler for sending OSC messages to servers.  \
\
The message is actually sent to the server in a time stamped bundle, just before it is due to be executed.\
\
Messages can be scheduled for precise execution using relative seconds, relative beats, absolute seconds or absolute beats.\
\
Messages can be easily cancelled up until the time they are sent to the server.\
\
The Tempo class is used to specify what the tempo is, and is used for all beat <-> second calculations. A default global Tempo object is used, or you can create a specific Tempo instance if y'all got your own separate grooves.\
\
Likewise, there is a global OSCSched that can be addressed through class methods, and you may also create individual instances that maintain their own scheduling queues, tempii, and time epochs.  All methods exist in \
\
The default clock used is the SystemClock, but you may also specify to use the AppClock.\
\
The OSC message may be a single message or a bundle.\
\
An optional clientSideFunction can also be supplied that will be evaluated on the client at the exact time as the OSC message is scheduled to happen.  This could be used to show a change in the gui or to update some setting on a client side object.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 All of these methods exist in both class (the default global scheduler) and instance methods (a specific scheduler).\

\f1\b0 \

\f0\b tsched(seconds,server,message,clientSideFunction)\

\f1\b0        time based scheduling\
        delta specified in seconds\

\f0\b xtsched( seconds,server,message,clientSideFunction)\

\f1\b0 	exclusive time based schedule\
	any previous messages scheduling using xtsched, xsched or xqsched will be cancelled.\
	this is incredibly useful in situations where several messages might be sent and you only want the \
	last one to be used as the final answer.\
	example:  a monkey is hitting many buttons, changing his mind about which sound to play next.\
	this would result in many messages being stacked up all at the same time, and the server would choke\
	trying to execute them all.  this is a kind of enforced monophony.\
	another example:  a sequence plays successive notes.  you switch the sequence.  you don't want the note that\
	was scheduled from the previous sequence to happen.  using one of the x-methods, you don't have to worry about it.\

\f0\b sched(beats,server,message,clientSideFunction)\

\f1\b0         delta specified in beats\

\f0\b xsched(beats,server,message,clientSideFunction)\

\f1\b0 	exclusive beat based scheduling\

\f0\b 	\
qsched(quantize,server,message,clientSideFunction)\

\f1\b0         will happen at the next even division ( 4.0 means on the downbeat of a 4/4 bar ),\
        or immediately if you happen to be exactly on a division.\

\f0\b xqsched(quantize,server,message,clientSideFunction)\

\f1\b0 	exclusive quantized beat based scheduling\

\f0\b 	\
tschedAbs(time,server,message,clientSideFunction)\

\f1\b0         will happen at the time specified in seconds\

\f0\b schedAbs(beat,server,message,clientSideFunction)\

\f1\b0         will happen at the beat specified.  changing the Tempo before this occurs\
        will cause unpredictable results.  actually, its quite predictable:  you're screwed. for now.\
        an SC2 style solution to this is pending.\
\

\f0\b xblock\

\f1\b0 	blocks any and all pending x-scheduled messages.\
	\

\f0\b time\

\f1\b0         get the scheduler's time\

\f0\b time_(seconds)\

\f1\b0         set the scheduler's time        \

\f0\b beat\

\f1\b0         get the scheduler's current beat\

\f0\b beat_(beat)\

\f1\b0         set the scheduler's current beat.\
        this is also used to start a "song":  zero the beat, and all absolute times\
        previously scheduled events will be unpredictable\
        \

\f0\b clear\

\f1\b0         clear all scheduled events. \
        \
        }