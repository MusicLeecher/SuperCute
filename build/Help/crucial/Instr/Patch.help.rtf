{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Patch
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 could be known as InstrPlayer.\
An Instr is a function with a name.\
A Patch supplies arguments to that function.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
	\cf2 Patch\cf0 (instr,args)\
	\
(\
\cf2 Instr\cf0 (\cf3 \\bubbles\cf0 , \{ \cf2 arg\cf0  amp=1.0;\
	\cf2 var\cf0  f, zout;\
	f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps;\
	zout = \cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
	zout * amp\
\});\
\
\cf2 Instr\cf0 (\cf3 \\rlpf\cf0 ,\{ \cf2 arg\cf0  audio=0,freq=500,rq=0.1;\
	\cf2 RLPF\cf0 .ar(audio, freq, rq)\
\});\
\
p = \cf2 Patch\cf0 (\cf3 \\rlpf\cf0 ,[\
	q = \cf2 Patch\cf0 (\cf3 \\bubbles\cf0 )\
]);\
\
p.gui\
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Instr can be specified as \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 an Instr
\f1\fs18 	\
(\
	i = \cf2 Instr\cf0 (\cf4 "help-Patch"\cf0 ,\{ \cf2 arg\cf0  freq=100,amp=1.0;\
			\cf2 SinOsc\cf0 .ar([freq,freq + 30],0,amp)\
		\});\
	p = \cf2 Patch\cf0 (i,[ 500,	0.3 ]);\
	p.gui\
)\

\f2\fs24 a Function\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
	p = \cf2 Patch\cf0 (\{ \cf2 arg\cf0  freq=100,amp=1.0;\
		\cf2 SinOsc\cf0 .ar([freq,freq + 30],0,amp)\
	\},[\
		500,\
		0.3\
	]);\
	p.gui\cf2 \
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 or by the Instr name\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
\cf5 // the Instr stores itself when created\
\cf0 (\
	\cf2 Instr\cf0 (\cf3 \\bubbles\cf0 , \{ \cf2 arg\cf0  amp=1.0;\
		\cf2 var\cf0  f, zout;\
		f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps;\
		zout = \cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
		zout * amp\
	\});\
	\
	\cf5 // the patch retrieves it\
\cf0 	p = \cf2 Patch\cf0 (\cf3 \\bubbles\cf0 ,[0.4] );\
	p.gui\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 if \\bubbles is not found, Instr will automatically look for a file called 'bubbles.rtf' in the Instr directory.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Patch can be easily saved to disk, and make use of a large library of Instr functions.  Compared to a simple SynthDef function, an Instr can produce many SynthDefs, varying in output rate or number of channels or internal structure.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
(\
\cf5 // write Instr as in SC2, without Out.ar\cf0 \
\cf2 Instr\cf0 (\cf3 \\bubbles\cf0 , \{ \cf2 arg\cf0  amp=1.0;\
	\cf2 var\cf0  f, zout;\
	f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps;\
	zout = \cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
	zout * amp\
\});\
\
p = \cf2 Patch\cf0 (\cf3 \\bubbles\cf0 );\
\
\cf5 // default server will be booted, def written and loaded\
\cf0 p.play;\
\
)\
\
\
\
p.stop;\
\
\cf5 // command-. will also stop all sounds\
\cf0 \
p.play;\
\
p.run(\cf2 false\cf0 );\
\
p.run(\cf2 true\cf0 );\
\
p.insp; //inspect it\
\
p.gui;\
\
\cf5 // close the window\
\cf0 \
\cf5 // open it again\
\cf0 p.gui;\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Patch inside Patch\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
(\
\cf5 // lets collect the cast...\cf0 \
\cf2 Instr\cf0 (\cf3 \\bubbles\cf0 , \{ \cf2 arg\cf0  amp=1.0;\
	\cf2 var\cf0  f, zout;\
	f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps;\
	zout = \cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
	zout * amp\
\});\
\
\
\cf5 //note that the same function will work stereo or mono\
//depending on what gets put into it\
\cf2 Instr\cf0 (\cf3 \\rlpf\cf0 ,\{ \cf2 arg\cf0  audio=0,freq=500,rq=0.1;\
	\cf2 RLPF\cf0 .ar(audio, freq, rq)\
\});\
\
\cf5 // put bubbles into the filter\
\cf0 p = \cf2 Patch\cf0 (\cf3 \\rlpf\cf0 ,[\
	q = \cf2 Patch\cf0 (\cf3 \\bubbles\cf0 )\
]);\
\
p.gui\
)\
\
\
\cf5 // watch the ugen count in the default server window\
// and also the error window results\
\cf0 \
p.play;\
\
\
\
\cf5 // stops the parent and the child q\
\cf0 p.stop;\
\
\
\cf5 // allocates new everything\
\cf0 p.play;\
\
\cf5 // additional play\
// does not start an additional process\
\cf0 p.play;\
\
\
\
\cf5 // stop q, but the filter p is still reading from its old bus\
\cf0 q.stop;\
\
\cf5 // should still have 6 ugens playing\
\cf0 \
\cf5 // sent the play message, q defaults to play out of the main outputs\
// not through the filter p\
\cf0 q.play;\
\
\cf5 // stopping p now still stops q because it is still a child of p\
\cf0 p.stop;\
\
\cf5 // replaying the whole structures\
\cf0 p.play;\
\
\cf5 // note the AudioPatchOut and the inputs: PatchIn classes\
\cf0 p.insp;\
q.insp;\
\
\
\
\cf5 // and the gui all works\
\cf0 \
p.gui;\
\
\
\
\

\f0\b\fs24 Fixed Arguments\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
Floats and other scalar values including Envelopes, are transparently dealt with by Patch.  These items are passed to the Instr function, but not to the SynthDef or the Synth.  They are not modulateable.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\cf5 // fixing arguments\
\cf0 \
\cf2 Instr\cf0 ([\cf3 \\jmcExamples\cf0 ,\cf3 'moto-rev'\cf0 ],\{ \cf2 arg\cf0  lfo=0.2,freq=1000,rq=0.1;\
	\cf2 RLPF\cf0 .ar(\cf2 LFPulse\cf0 .ar(\cf2 SinOsc\cf0 .kr(lfo, 0, 10, 21), [0,0.1], 0.1), freq, rq).clip2(0.4);\
\});\
\
q = \cf2 Patch\cf0 ([\cf3 \\jmcExamples\cf0 ,\cf3 'moto-rev'\cf0 ],[\
	0.2\
]);\
\
q.gui;\
\
)\
\
\
}