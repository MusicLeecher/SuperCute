{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 Patch
\f1\b0\fs18 \cf0 \
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // write Instr as in SC2, without Out.ar\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Instr\cf0 (\cf4 \\bubbles\cf0 , \{ \cf2 arg\cf0  amp=1.0;\
	\cf2 var\cf0  f, zout;\
	f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps;\
	zout = \cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
	zout * amp\
\});\
\
p = \cf2 Patch\cf0 (\cf4 \\bubbles\cf0 );\
\
\cf3 // default server will be booted, def written and loaded\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 p.play;\
\
p.stop;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // command-. will also stop all sounds\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
p.play;\
\
p.run(\cf2 false\cf0 );\
\
p.run(\cf2 true\cf0 );\
\
p.insp; //inspect it\
\
p.topGui;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // close the window\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // open it again\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 p.topGui;\
\
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf5 Fixed Arguments\

\f2\b0 \
Floats and other scalar values including Envelopes, are transparently dealt with by Patch.  The SynthDef that it produces does not have a separate control input for that argument.  It doesn't need one.  The value is fixed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 ( \cf6 // fixing arguments\
\cf5 \
\cf7 Instr\cf5 ([\cf8 \\jmcExamples\cf5 ,\cf8 'moto-rev'\cf5 ],\{ \cf7 arg\cf5  lfo=0.2,freq=1000,rq=0.1;\
	\cf7 RLPF\cf5 .ar(\cf7 LFPulse\cf5 .ar(\cf7 SinOsc\cf5 .kr(lfo, 0, 10, 21), [0,0.1], 0.1), freq, rq).clip2(0.4);\
\});\
\
q = \cf7 Patch\cf5 ([\cf8 \\jmcExamples\cf5 ,\cf8 'moto-rev'\cf5 ],[\
	0.2\
]);\
\
q.topGui;\
\
)\
(actually for now floats will have a control input, eventually it will be optimised so they use .ir inputs)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Patch inside Patch\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\cf5 ( \cf6 // lets collect the cast...\
\cf5 \
\cf7 Instr\cf5 (\cf8 \\bubbles\cf5 , \{ \cf7 arg\cf5  amp=1.0;\
	\cf7 var\cf5  f, zout;\
	f = \cf7 LFSaw\cf5 .kr(0.4, 0, 24, \cf7 LFSaw\cf5 .kr([8,7.23], 0, 3, 80)).midicps;\
	zout = \cf7 CombN\cf5 .ar(\cf7 SinOsc\cf5 .ar(f, 0, 0.04), 0.2, 0.2, 4);\
	zout * amp\
\},[\
	\cf8 \\amp\cf5 \
],\cf7 AudioSpec\cf5 (2)); \cf6 // stereo out\
\cf5 \
\
\cf7 Instr\cf5 (\cf8 \\rlpf\cf5 ,\{ \cf7 arg\cf5  audio=0,freq=500,rq=0.1;\
	\cf7 RLPF\cf5 .ar(audio, freq, rq)\
\},[\
	\cf6 // this will not multi channel expand !\
\cf5 	\cf6 // must specify input and output specs with correct numChannels\
\cf5 	\cf6 // or this will assume to build a mono filter\
\cf5 	\cf8 \\stereo\cf5 ,\
	\cf8 \\freq\cf5 ,\
	\cf8 \\rq\cf5 \
], \cf7 AudioSpec\cf5 (2) );\
\
\
\cf6 // put bubbles into the filter\
\cf5 p = \cf7 Patch\cf5 (\cf8 \\rlpf\cf5 ,[\
	q = \cf7 Patch\cf5 (\cf8 \\bubbles\cf5 )\
]);\
\
\
)\
\
\
\cf6 // watch the ugen count in the default server window\
// and also the error window results\
\cf5 \
p.play;\
\
\
\
\cf6 // stops the parent and the child q\
\cf5 p.stop;\
\
\
\cf6 // allocates new everything\
\cf5 p.play;\
\
\cf6 // additional play returns the same output object,\
// does not start an additional process\
\cf5 p.play;\
\
\
\
\cf6 // stop q, but the filter p is still reading from its old bus\
\cf5 q.stop;\
\
\cf6 // should still have 5 ugens playing\
\cf5 \
\cf6 // sent the play message, q defaults to play out of the main outputs\
// not through the filter p\
\cf5 q.play;\
\
\cf6 // stopping p now still stops q because it is still a child of p\
\cf5 p.stop;\
\
\cf6 // replaying the whole structures\
\cf5 p.play;\
\
\cf6 // note the AudioPatchOut and the inputs: PatchIn classes\
\cf5 p.ins;\
q.ins;\
\
\
\
\cf6 // and the gui all works\
\cf5 \
p.topGui;\
\
\
\
\cf0 \
}