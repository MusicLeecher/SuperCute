{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
\f3\fmodern\fcharset77 Courier;\f4\fnil\fcharset77 Verdana-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs50 \cf0 Instr 	- Instrument\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
An Instrument is a named sound function that is stored in the Library.\
\
Storing:\
	\
	
\f2\fs18 \cf2 Instr\cf0 (\cf3 \\sin\cf0 , \{ \cf2 arg\cf0  freq,amp;\
		\cf2 SinOsc\cf0 .ar(freq,0.0, amp)\
	\});\

\f1\fs24 \
Retreiving:\
\

\f2\fs18 \cf2 	Instr\cf0 .at(\cf3 \\sin\cf0 )
\f1\fs24 \
\
	or:\
\

\f2\fs18 \cf2 	Instr\cf0 (\cf3 \\sin\cf0 )
\f1\fs24 \
\
\
If the Instr is not found in the Library it will search in the Instr directory and 
\f0\b load it from a file
\f1\b0 .\
\
By default the directory Instr.dir is "build/Instr" or you may set Instr.dir in your startup.\
\

\f2\fs18 	\cf2 Instr\cf0 .dir = \cf4 "~/Documents/SuperCollider/Instr"\cf0 ;\

\f1\fs24 \
Specify by 
\f0\b dot notation
\f1\b0  to look for a file named 'oscillators' :\

\f2\fs18 \cf2 \
	Instr\cf0 ( \cf4 "oscillators.sin"\cf0 )
\f1\fs24 \

\f2\fs18 \cf2 	Instr\cf0 ( \cf4 "folder.subfolder.oscillators.sin"\cf0 )\
\

\f1\fs24 It will look for the files oscillators.rtf, oscillators.txt, oscillators.sc or oscillators
\f2\fs18 \

\f1\fs24 \
it expects to find in one of those files an Instr named "oscillators.sin"\
\
The older form 
\f0\b array notation
\f1\b0  also works:\

\f2\fs18 \cf2 \
	Instr\cf0 ([\cf3 \\oscillators\cf0 ,\cf3 \\sin\cf0 ])\

\f1\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Instr(name,function,inputSpecs.outputSpec);
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 name
\f1\b0  - 	\\sin\
		"oscillators.sin"\
			in file oscillators\
		"folder.subfolder.oscillators.sin"\
			in folder/subfolder/oscillators\
		[\\oscillators, \\sin]\
			\

\f0\b function
\f1\b0  - the Instr's ugenFunc\
	\
	When using your Instrument with Patch THERE IS NO NEED TO USE Out.ar\
	though you may explicitly use it if you wish.\
	It will be appended to your ugen graph func if needed.\
\

\f0\b inputSpecs
\f1\b0 \
	Specify what kind of input is required, and the working range of values.
\f0\b \

\f1\b0 	somewhat optional - these can be guessed from the argnames.\

\f0\b \
	see [Spec] and  [ControlSpec]\
	
\f1\b0 \
	if no spec is supplied, Instr will use the function's argument name to\
	lookup a spec in Spec.specs.  eg arg  freq ->  looks for Spec.specs.at(\\freq)\
	If nothing is found there, it will default to a  ControlSpec with a range of 
\f3\fs28 0 .. 1
\f2\fs18 \

\f1\fs24 \
	These specs are used by Patch to determine the suitable type of input.\
	They may be used in many other situations, and you will find many uses\
	where you will wish to query the specs.\

\f2\fs18 \

\f1\fs24 	The default/initial value for the Spec is taken from the function
\f0\b  
\f1\b0 defaults
\f0\b .
\f1\b0 \

\f2\fs18 	\
\

\f1\fs24 	different lazy ways to specify the spec...
\f2\fs18 \cf5 \
\cf0 	\
(\
	\cf2 Instr\cf0 (\cf4 "minimoog.one"\cf0 ,\{ \cf2 arg\cf0  freq=440,int1=5,int2 = -5,\
							width1=0.1,width2=0.1,width3=0.1,\
							ffreqInterval=0,rq=0.4;\
		\cf2 var\cf0  p;\
		p=\cf2 Pulse\cf0 .ar([ freq  * int1.midiratio, freq, freq * int2.midiratio],\
				[ width1,width2,width3],0.3);\
		\cf2 RLPF\cf0 .ar(\cf2 Mix\cf0 .ar(p),freq * ffreqInterval.midiratio,rq)\
	\},#[ \
		\cf2 nil\cf0 , \cf5 // nil, so use function's arg name (\\freq) \cf0 \
			\cf5 // to look up in Spec.specs\cf0 \
		[-48,48,\cf3 \\linear\cf0 ,1], \cf5 // as(Spec,[-48,48,\\linear,1]) \cf0 \
							\cf5 //   =>   ControlSpec.new(-48,48,\\linear,1)\cf0 \
		[-48,48,\cf3 \\linear\cf0 ,1],\
		\cf3 \\unipolar\cf0 , 		\cf5 // try Spec.specs.at(\\unipolar)\cf0 \
		\cf2 nil\cf0 ,				\cf5 // try the argname width2, that fails,\cf0 \
						\cf5 //  so the default is ControlSpec(0,1,\\linear)\cf0 \
		\cf3 \\unipolar\cf0 ,\
		[-48,48,\cf3 \\linear
\fs20 \cf0 ,1]\
	]);\
)\

\f1\fs24 \

\f0\b outSpec
\f1\b0 \
	optional - InstrSynthDef can determine the outputSpec by evaluating the ugenGraph\
	and finding what the spec of the result is.\
	An Instr can be .ar, .kr or can even return an object, a player, or a pattern.\
\

\f2\fs18 	
\f1\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\b\fs28 \cf0 Playing
\f0\fs24 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
\cf2 Instr\cf0 .new("minimoog.two",\{ \cf2 arg\cf0  freq=440,int1=5,int2 = -5,\
						width1=0.1,width2=0.1,width3=0.1,\
						ffreqInterval=0,rq=0.4;\
	\cf2 var\cf0  p;\
	\
	p=\cf2 Pulse\cf0 .ar([ freq  * int1.midiratio, freq, freq * int2.midiratio],\
			[ width1,width2,width3],0.3);\
			\
	\cf2 RLPF\cf0 .ar(\cf2 Mix\cf0 .ar(p),freq * ffreqInterval.midiratio,rq)\
			\
\},#[ \cf5 // specs\
\cf0 	\cf3 \\freq\cf0 ,\
	[-48,48,\cf3 \\linear\cf0 ,1],\
	[-48,48,\cf3 \\linear\cf0 ,1],\
	\cf3 \\unipolar\cf0 ,\
	\cf3 \\unipolar\cf0 ,\
	\cf3 \\unipolar\cf0 ,\
	[-48,48,\cf3 \\linear\cf0 ,1]\
]);\
\
)
\f0\b\fs28 \

\fs24 \
(\

\f2\b0\fs18 \cf2 	Instr\cf0 .at("minimoog.two").play\
)\
\
(\
	\{\
		"minimoog.two".ar( \cf2 LFNoise1\cf0 .kr(0.1,300,700) )\
	\}.play\
)\
\
(\
	\{\
		\cf2 Instr\cf0 .at("minimoog.two")\
			.ar( \cf2 LFNoise1\cf0 .kr(0.1,300,700) );\
	\}.play\
)\
\
(\
	\{\
		\cf2 Instr\cf0 .ar(\
			"minimoog.two",\
			[ \cf2 LFNoise1\cf0 .kr(0.1,300,700) ]\
			);  \
	\}.play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 but by far the best way is to use Patch :\

\f2\fs18 \
\cf2 Patch\cf0 (\cf4 "minimoog.two"\cf0 ,[1000]).play\
\
\cf2 Patch\cf0 (\cf4 "minimoog.two"\cf0 ).gui
\f0\b\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf5 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f4\b\fs28 \cf0 Patterns
\f2\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
	\cf2 Instr\cf0 ([\cf3 \\minimoog\cf0 ,\cf3 \\two\cf0 ],\{ \cf2 arg\cf0  freq=440,int1=5,int2 = -5,width1=0.1,width2=0.1,width3=0.1,\
			ffreqInterval=0,rq=0.4;\
		\cf2 var\cf0  p;\
		\
		p=\cf2 Pulse\cf0 .ar([ freq  * int1.midiratio, freq, freq * int2.midiratio],\
				[ width1,width2,width3],0.3);\
				\
		\cf2 RLPF\cf0 .ar(\cf2 Mix\cf0 .ar(p),freq * ffreqInterval.midiratio,rq)\
			* \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .perc,doneAction: 2)\
	\
	\});\
\
	p = \cf2 Patch\cf0 ([\cf3 \\minimoog\cf0 ,\cf3 \\two\cf0 ]); \cf5 // no args, Patch automagically creates KrNumberEditors\cf0 \
\

\f1\fs24 	
\f2\fs18 SynthDescLib.global.read;\
	d = p.asSynthDef.store;\
\
	\cf2 Pbind\cf0 (\
		\cf3 \\instrument\cf0 , d.name,\
		\cf5 // note is converted to freq by things in NotePlayer\cf0 \
		\cf3 \\note\cf0 ,\cf2 Prand\cf0 ([10,20,30],\cf2 inf\cf0 ),\
		\cf5 // args are passed into the function\cf0 \
		\cf3 \\int1\cf0 , \cf2 Prand\cf0 ([-3,0,7,11,13],\cf2 inf\cf0 )\
	).play\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 )\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 \
see also InstrGateSpawner and InstrSpawner\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \
An Instr is not a SynthDef\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
An Instr creates an InstrSynthDef  (a subclass of SynthDef)\
\
Each argument in the function for a SynthDef creates a Control input to the Synth that will eventually play on the server.  \
\
An Instr can also include extra arguments that will be used in building the synth def, but will not be Control inputs in the final synth.\
\
For instance an Integer may be passed in:\
\
// caution: mind the feedback. AudioIn\
(
\f2\fs18 \
\cf2 Instr\cf0 (\cf3 \\qAllpassA\cf0 ,\{	\cf2 arg\cf0  audio,decay=1,maxDelay=0.3,
\f0\b\fs24 quantity
\f2\b0\fs18 =4,chanDiff=0.1;\
\
	(
\f0\b\fs24 quantity
\f2\b0\fs18 .asInteger).do(\{\
	 		\cf2 var\cf0  x; \
	 		audio = \
 				\cf2 AllpassL\cf0 .ar(audio, maxDelay, 	\
 				[rrand(0.01,maxDelay),rrand(0.01,maxDelay)],\
 				decay)\
 		 \});\
	audio\
\});\
\
\cf2 Patch\cf0 (\cf3 \\qAllpassA\cf0 ,[\
	\{ \cf2 AudioIn\cf0 .ar([1,2]) \},\
	1,\
	0.3,\
	8\
]).play\
\
)\
\

\f1\fs24 The first input to the synth is a stereo audio rate input, the others were fixed floats that did not require synth inputs.\
\
Envelopes, fixed floats, fixed integers, Samples etc. can be passed into Instr functions.\
\
When Patch is used to specify the inputs to the function some of these inputs will be reduced to fixed values (integers, floats, Envelopes etc.), and the resulting SynthDef will contain those inputs hard-coded.  Using different Patches, it is possible to write many SynthDefs from the same Instr.\
\

\f2\fs18 	\cf2 Instr\cf0 (\cf3 \\rlpf\cf0 ,\{ \cf2 arg\cf0  input,ffreq=400,rq=0.1;\
		\cf2 RLPF\cf0 .ar( input, ffreq, rq )\
	\});\
	
\f1\fs24 \
	If the input supplied is stereo, the synthDef produced will be stereo.  \
(\

\f2\fs18 	\cf2 Patch\cf0 (\cf3 \\rlpf\cf0 ,[\
		\cf2 Patch\cf0 (\{ \cf2 Saw\cf0 .ar([400,440],0.1) \}) // in stereo\
	]).play\

\f1\fs24 )\
	\
It is possible to play another Instr inside of your Instr:\
\
(\

\f2\fs18 	\cf2 Instr\cf0 (\cf3 \\sawfilter\cf0 ,\{ \cf2 arg\cf0  freq,ffreq,rq;\
		\cf2 Instr\cf0 .ar(\cf3 \\rlpf\cf0 , [ \cf2 Saw\cf0 .ar(freq,0.1) , ffreq, rq ])\
	\})\
)\
	
\f1\fs24 	\
and thus get further reuse out of your library of functions.  Here the \\rlpf that is used inside doesn't produce a synth def, but is used as a simple function in the ugenGraph of the \\sawfilter Instr which does make a synthDef.\
\
It is not generally possible to use the .ar method on a player inside of an Instrument function.  This was possible in sc2.   You cannot use a sound file player in this way:\
\
	sfp = SFP("path/to/soundfile");\

\f2\fs18 	Instr('no-can-do',\{ arg sfp,amp=1.0;\
		sfp.ar * amp\
	\});
\f1\fs24 \
\
Because an SFP (soundfile player) will require a buffer, a bus, and various stages of preparation.  It is a complex process that cannot be compiled into a SynthDef.\

\f2\fs18 \

\f1\fs24 the better approach is :\

\f2\fs18 \
	Instr("can-do",\{ arg input,amp=1.0;\
	  input * amp\
	\});\
	\
	Patch("can-do",[\
		SFP("path/to/soundfile")\
	])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 .gui\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The gui for Instr is a simple display of the arguments and specs.\

\f2\fs18 \
\
	\cf5 // default gui display for Instr\
\cf0 	\cf2 Instr\cf0 .at("minimoog.one").gui\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 see [Patch] [InstrGateSpawner]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\
	\
	\
}