{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red96\green96\blue96;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Interface
\f1\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
This sets up an environment in which you can build a player, \
build a gui for that player, and respond to midi and keyboard control.\
\
The gui is quite optional, and in fact non-screen-staring is one of its primary\
goals.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 GUI
\f1\b0\fs18 \

\f2\fs24 You can set a custom gui function.\
	This can use any combination of .gui style and normal SCViews\
	The Interface can be placed on any other windows of any style.\
	You may decline to customize your gui.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 MIDI\

\f2\b0 If you set any of these handler functions:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	onNoteOn\
	onNoteOff\
	onPitchBend\
	onCC\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 then appropriate midi responders will be enabled when the player starts to play\
and disabled when it stops.  This includes if the player is being started/stopped by\
external mixers, PlayerPool etc.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 KeyDown/KeyUp\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 	keyDownAction\
	keyUpAction\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	(only when guied, only when focus is within the MetaPatch's views)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Interface is great for having no gui at all. 
\f2\b0  Personally I use the gui stuff to \
set up parameters for performing, and then when performing I use no gui, only MIDI \
controllers and key commands.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 simplistic example\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 (\cf2 \
\
m = \cf3 Interface\cf2 (\{\
	\cf4 // an environment is in place here\cf2 \
	~freq = \cf3 KrNumberEditor\cf2 (400,[100,1200,\cf5 \\exp\cf2 ]);\
	~syncFreq = \cf3 KrNumberEditor\cf2 (800,[100,12000,\cf5 \\exp\cf2 ]); \
	~amp = \cf3 KrNumberEditor\cf2 (0.1,\cf5 \\amp\cf2 ); \
\
	\cf3 Patch\cf2 (\{ \cf3 arg\cf2  freq,syncFreq,amp=0.3;\
		\cf3 SyncSaw\cf2 .ar(syncFreq,freq) * amp\
	\},[\
		~freq,\
		~syncFreq,\
		~amp\
	])\
\
\});\
\
\cf4 // setting the gui\cf2 \
m.gui = \{ \cf3 arg\cf2  layout,metaPatch;\
	\cf3 var\cf2  joy;\
	\
	\cf4 // the same environment is again in place\cf2 \
	~freq.gui(layout);\
	\
	\cf3 ActionButton\cf2 (layout,\cf6 "twitch"\cf2 ,\{\
		\cf3 var\cf2  x,y;\
		\cf4 // action button now remembers the environment !\cf2 \
		~freq.setUnmappedValue( x = 1.0.rand );\
		~syncFreq.setUnmappedValue( y = 1.0.rand );\
		joy.x_(x).y_(y).changed;\
	\});\
	\
	joy = \cf3 SC2DSlider\cf2 (layout, 100 @ 100)\
		.action_(\{ \cf3 arg\cf2  sl;\
			\cf4 // at this time not in environment\cf2 \
			metaPatch.use(\{ \cf4 // use the metaPatch's environment\cf2 \
				~freq.setUnmappedValue(sl.x);\
				~syncFreq.setUnmappedValue(sl.y );\
			\})\
		\});\
		\
	\cf3 EZNumber\cf2 (layout,30 @ 30,\cf6 "amp"\cf2 ,[0.01,0.4,\cf5 \\exp\cf2 ],\{ \cf3 arg\cf2  ez; \
		metaPatch.use(\{\
			~amp.value_(ez.value).changed;\
		\})\
	\});\
\
\};\
\
\cf4 // creating a gui\cf2 \
m.gui\
\
\
\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 You can place them on any window\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
w = \cf7 SCWindow\cf0 .new(\cf8 "other"\cf0 ,\cf7 Rect\cf0 (20,20,700,200));\
w.front;\
\
g = m.gui(w,\cf7 Rect\cf0 (30,30,500,200));\
\
g.background = \cf7 Color\cf0 .blue(alpha:0.4);\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 MIDI handler installed on play\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0  takes some seconds to start up, then play your midi keyboard\
(\
\
\cf7 Instr\cf0 ([\cf9 \\klankperc\cf0 ,\cf9 \\k2a\cf0 ],\{ \cf7 arg\cf0  trig=0.0,sfreqScale=1.0,sfreqOffset=0.0,stimeScale=1.0,foldAt=0.1;\
	\cf7 Klank\cf0 .ar(\
				`[\
					\cf7 FloatArray\cf0 [ 87.041, 198.607 ],\
					\cf7 nil\cf0 ,\
					\cf7 FloatArray\cf0 [ 0.165394, 0.15595 ]\
				],\
				\cf7 K2A\cf0 .ar(trig),\
				sfreqScale,sfreqOffset,stimeScale\
			).squared.fold2(foldAt)		\
\},[\
	\cf7 nil\cf0 ,\
	[0.01,100],\
	[0,10000],\
	[0.01,100]\
]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf10 // Create 5 patches, cycle through them on each midi key\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 Interface\cf0 (\{ \cf7 arg\cf0  quantity=5;\
\
	~quantity = quantity.poll;\
	~a = \cf7 Array\cf0 .fill(~quantity,\{ \cf7 arg\cf0  i;\
		\cf7 Patch\cf0 .new([\cf9 \\klankperc\cf0 ,\cf9 \\k2a\cf0 ],\
		[\
			\cf7 BeatClockPlayer\cf0 (16),\
			i * (3.midiratio),\
			i * (3.midiratio),\
			1.0,\
			~foldAt = \cf7 KrNumberEditor\cf0 (0.1,[1.0,0.01])\
		]);\
	\});\
\
	~pool = \cf7 PlayerPool\cf0 ( ~a,\
			env: \cf7 Env\cf0 .asr(0.01,releaseTime: 0.01),\
			round: 0.25);\
			\
			\
\}).onNoteOn_(\{ \cf7 arg\cf0  note,vel;\
	\cf10 // the same environment is in place here\cf0 \
	\cf10 //~foldAt.setUnmappedValue(vel / 127.0).changed;\cf0 \
	~pool.select(note % ~quantity)\
\}).play\
\
)\
// fast triggering still trips it up.  working on it.\
\
\
\cf7 Simple\cf0  \cf7 CC\cf0  example\
\
\
(\
\
\cf7 Interface\cf0 (\{\
\
	~freq = \cf7 KrNumberEditor\cf0 (400,[100,1200,\cf9 \\exp\cf0 ]);\
	~syncFreq = \cf7 KrNumberEditor\cf0 (800,[100,12000,\cf9 \\exp\cf0 ]); \
	~amp = \cf7 KrNumberEditor\cf0 (0.1,\cf9 \\amp\cf0 ); \
\
	\cf7 Patch\cf0 (\{ \cf7 arg\cf0  freq,syncFreq,amp=0.3;\
		\cf7 SyncSaw\cf0 .ar(syncFreq,freq) * amp\
	\},[\
		~freq,\
		~syncFreq,\
		~amp\
	])\
\
\}).onCC_(\{ arg src,chan,num,value;\
	if(num == 80,\{  ~freq.setUnmappedValue(value/127);\});\
	if(num == 81,\{  ~syncFreq.setUnmappedValue(value/127);\});\
	if(num == 82,\{  ~amp.setUnmappedValue(value/127);\});\
\})\
.play\
\
)\
(\
\
\cf7 Interface\cf0 (\{\
\
	~freq = \cf7 KrNumberEditor\cf0 (400,[100,1200,\cf9 \\exp\cf0 ]);\
	~syncFreq = \cf7 KrNumberEditor\cf0 (800,[100,12000,\cf9 \\exp\cf0 ]); \
	~amp = \cf7 KrNumberEditor\cf0 (0.1,\cf9 \\amp\cf0 ); \
\
	\cf7 Patch\cf0 (\{ \cf7 arg\cf0  freq,syncFreq,amp=0.3;\
		\cf7 SyncSaw\cf0 .ar(syncFreq,freq) * amp\
	\},[\
		~freq,\
		~syncFreq,\
		~amp\
	])\
\
\}).onCC_(\
	\cf7 ResponderArray\cf0 (\
		\cf10 // these normally install themselves immediately, but the Interface will be handling that\cf0 \
		\cf7 CCResponder\cf0 (80,\{ \cf7 arg\cf0  value; ~freq.setUnmappedValue(value/127);\},install: \cf7 false\cf0 ),\
		\cf7 CCResponder\cf0 (81,\{ \cf7 arg\cf0  value; ~syncFreq.setUnmappedValue(value/127);\},install: \cf7 false\cf0 ),\
		\cf7 CCResponder\cf0 (82,\{ \cf7 arg\cf0  value; ~amp.setUnmappedValue(value/127);\},install: \cf7 false\cf0 )\
	)\
)\
.play\
\
)\
\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf10 // beat juggler\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 Interface\cf0 (\{ \cf7 arg\cf0  sample;\
	\
	~beatStart1 = \cf7 NumberEditor\cf0 (0.0,[0.0,8.0,\cf9 \\lin\cf0 ,0.25]);\
	~beatStart2 = \cf7 NumberEditor\cf0 (0.0,[0.0,8.0,\cf9 \\lin\cf0 ,0.25]);\
	~durations = [ 2.0,2.0];\
\
	~patch = \cf7 InstrGateSpawner\cf0 (\{ \cf7 arg\cf0  sample,dur, pchRatio,beatStart,amp=0.3,envadsr,tempo;\
	\
			\cf7 var\cf0  gate;\
			gate = \cf7 Trig1\cf0 .kr(1.0,dur / tempo);\
\
			pchRatio = pchRatio * sample.pchRatioKr;\
			beatStart = beatStart * sample.beatsizeIr;\
	\
			\cf7 PlayBuf\cf0 .ar(sample.numChannels,\
					sample.bufnumIr,\
					pchRatio,\
					1.0,\
					beatStart,\
					1.0)\
		\
				* \cf7 EnvGen\cf0 .kr(envadsr, gate,amp,doneAction: 2 )\
		\},[\
			sample,\
			\cf10 // dur uses a Pfunc to ask the delta till the next event\cf0 \
			\cf7 Pfunc\cf0 (\{ \cf7 arg\cf0  igs;  (igs.delta * 0.9) \}),\
			\
			\cf10 // get an .ir input into the synth function\cf0 \
			~pchRatio = \cf7 IrNumberEditor\cf0 (1.0,[-2,2,\cf9 \\lin\cf0 ,0.25]),\
\
			\cf10 // patterns naturally create an .ir input\cf0 \
			\cf7 Pswitch1\cf0 ([\
				~beatStart1,\
				~beatStart2\
			],\cf7 Pseq\cf0 ([0,1],\cf7 inf\cf0 ))	\cf10 // juggle back and forth\cf0 \
\
		],\
		\cf10 // stream of beat durations\cf0 \
		\cf7 Pseq\cf0 (~durations,\cf7 inf\cf0 ));\
		\
	~patch				\
		\
\},[\
	\cf10 // a blank sample\cf0 \
	\cf7 Sample\cf0 .new(\cf7 nil\cf0 )\
])\
.gui_(\{ \cf7 arg\cf0  layout; \cf10 // we are given a FlowView\cf0 \
\
	\cf7 var\cf0  env,ddsp,bdsp;\
\
	\cf7 CXLabel\cf0 (layout,\cf8 "Click the sample path (nil) to browse for a sample. You can choose new samples even while playing."\cf0 );\
	layout.startRow;\
	\cf10 /* the environment from the build function above is available here */\cf0 \
	~sample.gui(layout,500@100);\
\
	\cf10 /* but when view actions fire you will be in a different environment\
		so save it here in a variable for use later */\cf0 \
	env = currentEnvironment;\
\
	\cf10 // .vert returns an SCVLayoutView so we can stack each 2d over its caption \cf0 \
	layout.vert(\{ \cf7 arg\cf0  layout;\
		\cf7 SC2DSlider\cf0 (layout,100@100)\
			.action_(\{ \cf7 arg\cf0  sl;\
				env.use(\{\
					\cf10 // set a 0..1 value, map it to the spec ranges of the NumberEditors\cf0 \
					~beatStart1.setUnmappedValue(sl.x);\
					~beatStart2.setUnmappedValue(sl.y);\
					bdsp.object_( [~beatStart1.value,~beatStart2.value]).changed;\
				\})\
			\});\
		\cf7 SCStaticText\cf0 (layout,100@13).object_(\cf8 "Beat starts:"\cf0 );\
		bdsp = \cf7 SCStaticText\cf0 (layout,100@13).object_([~beatStart1.value,~beatStart2.value].asString);\
	\},100@120);\
	\
	layout.vert(\{ \cf7 arg\cf0  layout;\
		\cf7 SC2DSlider\cf0 (layout,100@100)\
			.action_(\{ \cf7 arg\cf0  sl;\
				env.use(\{\
					\cf7 var\cf0  stride,part;\
					stride = 2 ** [3,4,5,6].at((sl.x * 3).asInteger) * 0.125;\
					part = (stride * (1.0 - sl.y)).round(0.25).clip(0.25,stride - 0.25);\
					~durations.put(0,part);\
					~durations.put(1,stride - part);\
					ddsp.object_(~durations.sum.asString + \cf8 "="\cf0  + ~durations).changed;\
				\});\
			\});\
		\cf7 SCStaticText\cf0 (layout,100@13).object_(\cf8 "beats"\cf0 );\
		ddsp = \cf7 SCStaticText\cf0 (layout,100@13).object_(~durations.sum.asString + \cf8 "="\cf0  + ~durations);\
	\},100@120);\
	\cf7 CXLabel\cf0 (layout,\cf8 "pchRatio:"\cf0 );\
	~pchRatio.gui(layout);\
\})\
.gui\
\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 <>onCC
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 the control change handler is installed (via CCResponder) when play starts and unistalled when\
play stops.\
\
It can be a simple function:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 interface.onCC = \{ arg src,chan,num,value;\
	[num,value].postln;\
\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
a CCResponder that responds on a specific number.\
(note: tell it NOT to install itself, because the Interface\
will install and uninstall it when play starts or stops)\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	onCC = \cf7 CCResponder\cf0 (num,\{ \},install: \cf7 false\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
or a custom class:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 onCC = \cf7 KorgMicroKontrolCC\cf0 (\
				[\cf9 \\slider\cf0 ,0,\{  \}],\
				[\cf9 \\slider\cf0 ,1,\{  \}],\
				[\cf9 \\encoder\cf0 ,0,\{  \}],\
				[\cf9 \\encoder\cf0 ,1,\{  \}],\
				[\cf9 \\x\cf0 ,\{ \}],\
				[\cf9 \\y\cf0 , \{ \}]\
			);\
			\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 whatever it is will be asked to respond to 'value' :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	thing.value(src,chan,num,value);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\
\

\f0\b <>onPlay\
<>onStop\
<>onFree\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
(\
\
\cf7 Interface\cf0 (\{\
\
	~freq = \cf7 KrNumberEditor\cf0 (400,[100,1200,\cf9 \\exp\cf0 ]);\
	~amp = \cf7 KrNumberEditor\cf0 (0.1,[0.01,0.4,\cf9 \\exp\cf0 ]); \
\
	\cf7 Patch\cf0 (\{ \cf7 arg\cf0  freq,amp;\
		\cf7 SinOsc\cf0 .ar(freq) * amp\
	\},[\
		~freq,\
		~amp\
	])\
	\
\})\
.onPlay_(\{\
	\cf8 "playing"\cf0 .postln;\
\})\
.onStop_(\{ \cf10 // also on command-.\cf0 \
	\cf8 "stopping"\cf0 .postln;	\
\})\
.onFree_(\{\
	\cf8 "freeing"\cf0 .postln;\
\}).play\
\
)\
\
\

\f0\b\fs36 \cf0 InterfaceDef
\f1\b0\fs18 \cf0 \
\

\f2\fs24 \cf0 the function that builds the player is actually an InterfaceDef.  These can be created and stored in the same fashion as Instr and kept in the same folder.  You can then address them by name, supply paramaters as you do for Patch and you will get an Interface which will use the gui and midi functions from the InterfaceDef.\

\f1\fs18 \cf0 \
}