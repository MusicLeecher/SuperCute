{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 InstrSpawner
\f1\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 superclass: Patch\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 InstrSpawner( instr , args, delta )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
	
\f0\b instr
\f2\b0  - as per Patch, may be a function or an Instr name.\
	
\f0\b args
\f2\b0   - as per Patch, nil args will be auto-created.\
		args that are Players will play continously in their own synths and be patched into\
		each spawn event synth.\
		args that are of rate \\stream (all Patterns) will be streamed.\
		args that are of rate \\scalar (floats, Envs, samples) will be passed into the instr\
		function and are subsequently fixed.\
	
\f0\b delta
\f2\b0  - a float or pattern.\
		in 
\f0\b seconds
\f2\b0 \
		see 
\f0\b InstrGateSpawner
\f2\b0  for beats and for variable legato\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\cf2 // start and pchRatio are streamed\cf0 \
(\
\cf3 InstrSpawner\cf0 (\{ \cf3 arg\cf0  sample,start=0,pchRatio=1.0,env;\
	\cf3 PlayBuf\cf0 .ar( \
		sample.numChannels, \
		sample.bufnumIr,\
		pchRatio,\
		1,\
		start * sample.bufFramesIr,\
		1 \
	) * \cf3 EnvGen\cf0 .kr(env,doneAction: 2)\
\},[\
	\cf3 Sample\cf0 (\cf4 "a11wlk01.wav"\cf0 ),\
	\cf3 Pbrown\cf0 (0,1,0.1,\cf3 inf\cf0 ),\
	\cf3 Prand\cf0 (\
		\cf3 Array\cf0 .fill(4,\{\
			\cf3 Pseries\cf0 (rrand(-20,30),[2,-2].choose,rrand(5,20))\
		\}),\cf3 inf\cf0 ).midiratio,\
	\cf3 Env\cf0 .sine(0.2,0.4)\
\
],0.06).play\
\
)\
\
\
\cf2 // pchRatio will not stream, is fixed at -1\cf0 \
(\
\
\cf3 InstrSpawner\cf0 (\{ \cf3 arg\cf0  sample,start=0,pchRatio=1.0,env;\
	\cf3 PlayBuf\cf0 .ar( sample.numChannels, sample.bufnumIr,pchRatio,1,start * sample.bufFramesIr,1 )\
		 * \cf3 EnvGen\cf0 .kr(env,doneAction: 2)\
\},[\
	\cf3 Sample\cf0 (\cf4 "a11wlk01.wav"\cf0 ),\
	\cf3 Pbrown\cf0 (0,1,0.1,\cf3 inf\cf0 ),\
	-1,\
	\cf3 Env\cf0 .sine(0.2,0.4)\
\
],0.125).play\
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0  the \cf3 Patch\cf0  in the width input plays continuously and is patched into each spawn event\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 (\
	\cf3 InstrSpawner\cf0 (\{ \cf3 arg\cf0  freq,rq,width,fenv,fenvmod,envperc;\
 		width.debug(\cf4 "width"\cf0 );  \cf2 // an OutputProxy\cf0 \
		\cf3 RLPF\cf0 .ar(\
			\cf3 Pulse\cf0 .ar(\
				freq,\
				width\
			),\
			\cf3 EnvGen\cf0 .kr(fenv,levelScale: fenvmod),\
			rq)\
	 		  * \cf3 EnvGen\cf0 .kr(envperc, 1.0,0.3,doneAction: 2)\
	\},[\
		\cf3 Pfunc\cf0 (\{  15.rand.degreeToKey([ 0, 2, 3, 5, 7, 8, 10 ]).midicps * 3 \}),\
		0.1,\
		\cf3 Patch\cf0 (\{ \cf3 FSinOsc\cf0 .kr(0.05).range(0.01,0.99) \}),\
		\cf3 Env\cf0 .asr,\
		6000,\
		\cf3 Env\cf0 .perc(releaseTime: 0.8)\
	],0.125).play\
) \
note: for beats see InstrGateSpawner\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0  the stereo \cf3 Patch\cf0  in the width input causes the \cf3 InstrSpawner\cf0  to expand to stereo\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 (\
	\cf3 InstrSpawner\cf0 (\{ \cf3 arg\cf0  freq,rq,width,fenv,fenvmod,envperc;\
 		width.debug(\cf4 "width"\cf0 );  \cf2 // an OutputProxy\cf0 \
		\cf3 RLPF\cf0 .ar(\
			\cf3 Pulse\cf0 .ar(\
				freq,\
				width\
			),\
			\cf3 EnvGen\cf0 .kr(fenv,levelScale: fenvmod),\
			rq)\
	 		  * \cf3 EnvGen\cf0 .kr(envperc, 1.0,0.3,doneAction: 2)\
	\},[\
		\cf3 Pfunc\cf0 (\{  15.rand.degreeToKey([ 0, 2, 3, 5, 7, 8, 10 ]).midicps * 3 \}),\
		0.1,\
		\cf3 Patch\cf0 (\{ \
			[	\cf3 FSinOsc\cf0 .kr(0.05,0.0).range(0.01,0.99),\
				\cf3 FSinOsc\cf0 .kr(0.05,0.5).range(0.01,0.99),\
			]		\
			 \}),\
		\cf3 Env\cf0 .asr,\
		6000,\
		\cf3 Env\cf0 .perc(releaseTime: 0.8)\
	],0.125).play\
)\
\
\
\
\
(\
\
\cf3 Instr\cf0 (\cf5 \\InstrSpawner\cf0 ,\{ \cf3 arg\cf0  freq=1000,amp=0.1,env;\
	\
		\cf3 SinOsc\cf0 .ar(freq,mul: amp)\
		* \cf3 EnvGen\cf0 .kr(env,doneAction: 2)\
\});\
\
i = \cf3 InstrSpawner\cf0 (\cf5 \\InstrSpawner\cf0 ,[\
				\cf3 Pbrown\cf0 (45,90,3,\cf3 inf\cf0 ).midicps,\
				0.1,\
				\cf3 Env\cf0 .sine \cf2 // does not get streamed\cf0 \
			],\
			0.1\
			);\
	\
i.play\
			\
)\
\
\
sliders are polled on the gui\
(\
\
\cf3 Instr\cf0 (\cf5 \\InstrSpawner\cf0 ,\{ \cf3 arg\cf0  freq=1000,amp=0.1,env;\
	\
		\cf3 SinOsc\cf0 .ar(freq,mul: amp)\
		* \cf3 EnvGen\cf0 .kr(env,doneAction: 2)\
\});\
\
\cf3 InstrSpawner\cf0 (\cf5 \\InstrSpawner\cf0 ,[\
				nil, \cf2 // accept a default KrNumberEditor\cf0 \
				\cf3 nil\cf0 , \cf2 // accept a default KrNumberEditor\cf0 \
				\cf3 Env\cf0 .sine \cf2 // does not get streamed\cf0 \
			],\
			\cf3 NumberEditor\cf0 (0.1,[0.05,1.0]) \cf2 // polled each time\cf0 \
	).gui		\
)\
\
\
\
\
\
\cf2 // how to get eventCount like sc2 Spawn\cf0 \
(\
\
	\cf3 InstrSpawner\cf0 (\{ \cf3 arg\cf0  eventCount=0, freq,rq,width,fenv,fenvmod,envperc;\
\
		\cf2 // do something with eventCount if you need it...\cf0 \
\
		\cf3 RLPF\cf0 .ar(\
			\cf3 Pulse\cf0 .ar(\
				freq,\
				width\
			),\
			\cf3 EnvGen\cf0 .kr(fenv,levelScale: fenvmod),\
			rq)\
	 		  * \cf3 EnvGen\cf0 .kr(envperc, doneAction: 2)\
	\},[\
		\
		\cf3 Pseries\cf0 (0,1,\cf3 inf\cf0 ), \cf2 // infinite counting\
		\
		//aeolian\cf0 \
		\cf3 Pfunc\cf0 (\{  15.rand.degreeToKey([ 0, 2, 3, 5, 7, 8, 10 ]).midicps * 3 \}),\
		0.1,\
		\cf3 Patch\cf0 (\{ \cf3 LFTri\cf0 .kr(0.1,[0.0,0.5],0.5,0.5) \}),\
		\cf3 Env\cf0 .asr,\
		6000,\
		\cf3 Env\cf0 .perc(releaseTime: 0.1)\
	],0.25).play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 this is more flexible, is only on when you need it, and lets you do wrapping or scaling etc.\
of the event count all in the pattern domain.
\f1\fs18 \
\
\
\
\
\
\
}