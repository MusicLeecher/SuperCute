{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs38 \cf0 Sample
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 This class can be used as an argument to a Patch.  It will take care of all the troubles of loading, allocating, measuring, and even beat synchronizing of a small sound file.\
\
It will not play by itself, but it holds all the intelligence to allow other things to play it very easily.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
s = \cf2 Server\cf0 .local;\
l = \cf2 Sample\cf0 (\cf3 "sounds/a11wlk01.wav"\cf0 );\
\
b = \cf2 List\cf0 .new; \cf4 // bundle\
\cf0 l.prepareForPlay(s,b);\
b.postln;\
s.listSendBundle(nil,b);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "help-Sample"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 PlayBuf\cf0 .ar(1,bufnum,\cf2 BufRateScale\cf0 .kr(bufnum))\
	)\
\}).play(s,[\\out,0,\cf5 \\\cf0 bufnum,l.bufnum]);\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 When used in a Patch, it does its job quite effortlessly:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
\
Instr([\\help,\\Sample],\{ arg sample;\
	\cf2 PlayBuf\cf0 .ar(sample.numChannels,sample.bufnum,sample.sampleRate / 44100,1.0,0.0,0.0);\
\},outSpec: \\mono );\
\
\
Patch([\\help,\\Sample],\
[\
	\cf2 Sample\cf0 (\cf3 "sounds/\cf0 a11wlk01.wav\cf3 "\cf0 )\
]).play\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 this Patch object:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
p = Patch([\\help,\\Sample],\
[\
	\cf2 Sample\cf0 (\cf3 "sounds/\cf0 a11wlk01.wav\cf3 "\cf0 )\
]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 can be saved, and will fully encapsulate this complete sound.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
p.topGui\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // helpSampleo8NEut\
// same synth def name as above\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //beatlock\
\cf2 Instr\cf0 ([\cf5 \\help\cf0 ,\cf5 \\Sample\cf0 ],\{ \cf2 arg\cf0  sample,tempo;\
	tempo.insp("handed in to Instr function");\
	\cf2 PlayBuf\cf0 .ar(sample.numChannels,sample.bufnum,\
		sample.sampleRate / 44100 * tempo * sample.tempo.reciprocal,\
		1.0,0.0,1.0);\
\},[\
	\cf5 \\sample\cf0 ,\
	\cf5 \\tempo\cf0 \
],\
	\cf5 \\mono\cf0 \
);\
\
\
\cf2 Patch\cf0 ([\cf5 \\help\cf0 ,\cf5 \\Sample\cf0 ],\
[\
	\cf2 Sample\cf0 (\cf3 "sounds/a11wlk01.wav"\cf0 ),\
	\cf2 TempoPlayer\cf0 .new\
]).play\
\
)\
\
\
\
\
\
\
\
\
\
Sample.new(soundFilePath,tempo);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 bufnum\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
soundFilePath\
sampleRate\
end\
	signal.size - 1\
	the last indexable position in the signal\
numChannels\
duration\
totalMemory\
	numFrames * numChannels\
\
\
\
\
The following methods are relevant if the sample is some kind of loop.\
\
\
tempo\
	beats per second the original recording is regarded to have.\
beats\
	number of beats\
beatsize\
	the number of samples per beat\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
sample.playBuf\
\
\
\
 \cf4 // click on load to browse your hardrive for a different sample\
\
\cf0 \
( \cf4 // move the tempo knob \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Patch\cf0 (\{\cf2 arg\cf0  sample;\
	\cf2 PlayBuf\cf0 .ar(sample.signal,sample.sampleRate,sample.pchRatioKr,0,0,sample.end);\
\},\
[\
	\cf2 Sample\cf0 (\cf3 ":Sounds:floating_1"\cf0 )\
]).topGui\
)\
\
\
( \
\cf4 // hit load and select a rhythm\
// will stay beat locked and the beat will flow despite the cutting\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 q = rrand(8,32);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Patch\cf0 (\{\cf2 arg\cf0  gate,env,sample,pchRatio;\
	\cf2 var\cf0  pchRatioKr,start;\
	pchRatioKr = sample.pchRatioKr * pchRatio;\
	start = \cf2 LFSaw\cf0 .kr(\cf2 GetTempo\cf0 .kr * sample.beats.reciprocal, sample.end * 0.5, sample.end * 0.5);\
	\
	\cf2 ReTrigger2\cf0 .ar(\{ \
		\cf2 PlayBuf\cf0 .ar(sample.signal,sample.sampleRate,pchRatioKr,start.poll,0,sample.end);\
	\},gate,env,sample.numChannels)\
\},\
[\
	\cf2 Stream2Trig\cf0 (\
		1.0,\
		\cf2 Pseq\cf0 (\cf2 Array\cf0 .geom(8.rand,2 ** -5,  2.0).scramble,\cf2 inf\cf0 )\
	),\
	\cf2 Env\cf0 .asr(release:0.1),\
	\cf2 Sample\cf0 (\cf3 ":Sounds:floating_1"\cf0 ),\
	\cf2 StreamKrDur\cf0 (\
		\cf2 Pslide\cf0 (\cf2 Array\cf0 .series(q,0.0,4.0 / q),\cf2 inf\cf0 ,rrand(3,5),rrand(1,6)),\
		rrand(0.125,0.5)\
	)\
]).topGui\
\
)\
\
\
( \cf4 // will stay beat locked and the beat will flow despite the cutting\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 q = rrand(8,32);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Patch\cf0 (\{\cf2 arg\cf0  gate,env,sample,pchRatio;\
	\cf2 var\cf0  pchRatioKr,start;\
	pchRatioKr = sample.pchRatioKr * pchRatio;\
	start = \cf2 LFSaw\cf0 .kr(\cf2 GetTempo\cf0 .kr * sample.beats.reciprocal, sample.end * 0.5, sample.end * 0.5);\
	\
	\cf2 ReTrigger2\cf0 .ar(\{ \
		\cf2 PlayBuf\cf0 .ar(sample.signal,sample.sampleRate,pchRatioKr,start.poll,0,sample.end);\
	\},gate,env,sample.numChannels)\
\},\
[\
	\cf2 Stream2Trig\cf0 (\
		1.0,\
		\cf2 Pseq\cf0 (\cf2 Array\cf0 .geom(8.rand,2 ** -5,  2.0).scramble,\cf2 inf\cf0 )\
	),\
	\cf2 Env\cf0 .asr(release:0.1),\
	\cf2 Sample\cf0 (\cf3 ":Sounds:floating_1"\cf0 ),\
	\cf2 StreamKrDur\cf0 (\
		\cf2 Pslide\cf0 (\cf2 Array\cf0 .series(q,-2.0,2.0 / q).scramble,\cf2 inf\cf0 ,rrand(3,5),rrand(2,5)),\
		rrand(0.125,1.0)\
	)\
]).topGui\
\
)\
\
\
( \cf4 \
\cf2 Patch\cf0 (\{\cf2 arg\cf0  gate,env,sample;\
	\cf2 var\cf0  p;\
	p = \cf2 PlayBuf\cf0 .ar(sample.signal,sample.sampleRate,sample.pchRatioKr,0,0,sample.end);\
	\cf2 Enveloper2\cf0 .ar(p,gate,env,sample.numChannels)\
\},\
[\
	\cf2 Stream2Trig\cf0 (`([1,0,1,0,0,1,0,1]),`(\cf2 Array\cf0 .fill(8,\{ 2 ** rrand(-5,-1) \}))),\
	\cf2 Env\cf0 .perc(release:0.2),\
	\cf2 Sample\cf0 (\cf3 ":Sounds:floating_1"\cf0 )\
]).topGui\
\
)\
\
(\
\cf2 Patch\cf0 (\{\cf2 arg\cf0  gate,env,sample,startBeat;\
	\cf2 var\cf0  p,s,e;\
	p = sample.pchRatioKr;\
	s = startBeat * sample.beatsize;\
	e = s + \cf2 LFNoise1\cf0 .kr(0.2,9000.0,5000.0);\
	\cf2 Enveloper\cf0 .ar(\{ \cf2 PlayBuf\cf0 .ar(sample.signal,sample.sampleRate,p,s,s,e); \},gate,env,4,sample.numChannels)\
\},\
[\
	\cf2 Stream2Trig\cf0 (`(\cf2 Array\cf0 .fill(128.rand,\{[1,0.125,0,0].choose\})),`(\cf2 Array\cf0 .fill(128.rand,\{ 2 ** rrand(-7,-1) \}))),\
	\cf2 Env\cf0 .perc(release:3.0),\
	s = \cf2 Sample\cf0 (\cf3 ":Sounds:floating_1"\cf0 ),\
	\cf2 StreamKrDur\cf0 ( \cf2 Pfunc\cf0 (\{ s.beats.rand.round(0.25) \}),\cf2 Pfunc\cf0 (\{ 2 ** rrand(-4,2)\}))\
]).topGui\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
Under sc3 this class becomes invaluable in that it will handle all the drudgery \
of allocating and messaging to the server to ready the sound for play buff use.  \
And discarding it later.\
\
}