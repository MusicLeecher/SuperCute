{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\froman\fcharset77 Times-Roman;
\f3\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 UnicodeResponder
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3 \cf0 This can be used to replace a function in a view's keydownAction.  \
It matches modifier/unicode combinations and .values functions.\
\
This is the best way to accurately match the exact modifier combination you want.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 register( unicode, shift, caps, option, control, function )\
	
\f3\b0 true/false/nil:\
		must be present\
		should not be present\
		doesn't matter\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
k = \cf2 UnicodeResponder\cf0 .new;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // option down arrow\cf0 \
k.register( 63233, \cf2 false\cf0 ,\cf2 false\cf0 ,\cf2 true\cf0 ,\cf2 false\cf0 , \{\
    	\cf4 "option down"\cf0 .postln;\
\});\
\
\cf3 // shift-option down arrow\cf0 \
k.register( 63233 , \cf2 true\cf0 ,\cf2 false\cf0 ,\cf2 true\cf0 ,\cf2 false\cf0 , \{\
	\cf4 "shift option down"\cf0 .debug;\
\});\
\
w = \cf2 SCWindow\cf0 .new.front;\
v = \cf2 SCSlider\cf0 .new(w,\cf2 Rect\cf0 (10,10,100,100));\
\
v.keyDownAction = k;\
\
v.focus;\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs24 \cf0 \
\
Use this to post the codes:\
(\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 UnicodeResponder\cf0 .tester
\f3\fs24 \
\
)\
it prints a code template for you:
\f1\fs18 \
\
//  shift :\
k.register(   41  ,   true, false, false, false, \{\
\
\});\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 normal( unicode -> function [, unicode -> function ] )\
shift( unicode -> function [, unicode -> function ] )\
control( unicode -> function [, unicode -> function ] )\
option( unicode -> function [, unicode -> function ] )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
The view in this example is merely to have something to focus on, it \
does nothing else.\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  w, l;\
w= \cf2 SCWindow\cf0 (\cf4 "test"\cf0 ).front;\
l= \cf2 SCListView\cf0 (w, \cf2 Rect\cf0 (10, 10, 350, 350))\
	.items_(\{\cf4 "eggs"\cf0 .scramble\}.dup(12))\
	.focus\
	.keyDownAction_(\
		\cf2 UnicodeResponder\cf0 .new\
			.normal(63232 -> \{\
				\cf4 "normal arrow"\cf0 .postln;\
			\})\
			.shift(63232 -> \{\
				\cf4 "shift arrrow"\cf0 .postln;\
			\})\
			.register( 63232, \cf2 true\cf0 , \cf2 nil\cf0 , \cf2 false\cf0 , \cf2 true\cf0 , \{\
				\cf4 "shift control, with or without CAPS"\cf0 .postln;\
			\})\
			.normal( 97 -> \{\
				"normal a".postln\
			\})\
			.shift( $A -> \{\
				"shift a".postln\
			\})\
	)\
)\
Note that to match shift-a you have to specify "A", not "a"\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs24 \cf0 You can also specify with ascii characters\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  w, l;\
w= \cf2 SCWindow\cf0 (\cf4 "test"\cf0 ).front;\
l= \cf2 SCListView\cf0 (w, \cf2 Rect\cf0 (10, 10, 350, 350))\
	.items_(\{\cf4 "eggs"\cf0 .scramble\}.dup(12))\
	.focus\
	.keyDownAction_(\
		\cf2 UnicodeResponder\cf0 .new\
			.normal(\
				$a -> \{\
					\cf4 "a "\cf0 .postln;\
				\},\
				$b -> \{\
					\cf4 "b"\cf0 .postln;\
				\},\
				$; -> \{\
					\cf4 ";"\cf0 .postln;\
				\},\
				$' -> \{\
					\cf4 "'"\cf0 .postln;\
				\}\
			)\
			.shift(\
				$A -> \{\
					\cf4 "shift a"\cf0 .postln;\
				\},\
				$B -> \{\
					\cf4 "shift b"\cf0 .postln;\
				\},\
				$: -> \{\
					\cf4 "shift ;"\cf0 .postln;\
				\},\
				$" -> \{\
					\cf4 "shift '"\cf0 .postln;\
				\}\
			);\
\
	)\
)\
\
\
\
\
see also KeyCodeResponder
\f2\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
	\
	
\f3\fs24 \
If you merely check the modifier like so:\
	(modifer & optionModifier ) == optionModifier\
you will detect the presence of the options key, \
but not if only the option key is present ( eg.  for shift-option )\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3 \cf0 \
}