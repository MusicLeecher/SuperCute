{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red19\green34\blue255;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 KeyCodeResponder
\f1\b0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs22 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
Handles multiple registrations for keycode and modifier combinations.  \
This object should be used as the keydown or keyup action for a view in place of a function.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 KeyCodes are hardware dependant, and change from machine to machine. 
\f1\b0  \
Its a simple way to hook up keys to respond, but it won't transfer to other people's computers.\
\
see also [
\f0\b UnicodeResponder
\f1\b0 ] which matches based on the unicode, though the physical location\
of the key may still vary according zee nationality ov der keyboard.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 see [
\f0\b SCView]
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Use this to post the keycodes\
(\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 KeyCodeResponder\cf0 .tester
\f1\fs24 \
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 it prints
\f2\fs18 \cf0 \
\
//  shift :\
k.register(   41  ,   true, false, false, false, \{\
\
\});\
\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 k = \cf3 KeyCodeResponder\cf0 .new;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // match single modifiers exclusively\cf0 \
k.normal( 36 -> \{  \cf5 "return"\cf0 .postln \});\
k.option( 36 -> \{ \cf5 "option return"\cf0 .postln \});\
k.shift( 36 -> \{ \cf5 "shift return"\cf0 .postln \});\
\cf4 // overwrites previous registration\cf0 \
k.shift( 36 -> \{ \cf5 "SHIFT RETURN only"\cf0 .postln; \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // match multiple modifier combinations\cf0 \
	\cf4 //        shift caps opt   control\cf0 \
k.register( 36, \cf3 true\cf0 ,  \cf3 nil\cf0 ,  \cf3 true\cf0 , \cf3 false\cf0 , \{\
	\cf4 //         yes   either  yes   no\cf0 \
	\cf5 "return: shift-option regardless of CAPS"\cf0 .postln;\
\});\
\
\
k.registerKeycode(\cf3 KeyCodeResponder\cf0 .normalModifier, 52 , \{ \cf5 "enter"\cf0 .postln; \});\
\
\cf4 // arrow keys are considered function keys and must be bit ORd with function key modifier\cf0 \
k.registerKeycode(\cf3 KeyCodeResponder\cf0 .normalModifier | \cf3 KeyCodeResponder\cf0 .functionKeyModifier , 123 , \{ 	\cf5 "<-"\cf0 .postln; \
\});\
\
k.registerKeycode(\cf3 KeyCodeResponder\cf0 .controlModifier | \cf3 KeyCodeResponder\cf0 .functionKeyModifier , 123 , \{\
	\cf5 "control <-"\cf0 .postln; \
\});\
\
w = \cf3 SCWindow\cf0 .new.front;\
v = \cf3 SCSlider\cf0 .new(w,\cf3 Rect\cf0 (10,10,100,100));\
v.keyDownAction = k;\
v.focus;\
\
)
\f1\fs24 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 register(keycode, shift, caps, opt, cntl, function)\
	
\f1\b0 \
	for shift, caps,opt,cntl\
		
\f0\b true
\f1\b0  indicates a required modifier\
		
\f0\b false
\f1\b0  indicates an excluded modifier\
		
\f0\b nil
\f1\b0   expresses that you really don't care one way or the other
\f2\fs18 \
	\
\

\f0\b\fs24 normal(keycode -> function)\
normal(keycode -> fuction, keycode2 -> function2 , ... keycodeN -> functionN )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 	note the association ( key  -> value )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 shift(keycode -> function)\
shift(keycode -> fuction, keycode2 -> function2 , ... keycodeN -> functionN )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 option(keycode -> function)\
option(keycode -> fuction, keycode2 -> function2 , ... keycodeN -> functionN )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 control(keycode -> function)\
control(keycode -> fuction, keycode2 -> function2 , ... keycodeN -> functionN )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Any player's gui can have its keyDownAction set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 \
(\
\
p = \cf3 Patch\cf0 (\{ \cf3 arg\cf0  freq=440; \cf3 SinOsc\cf0 .ar(freq,mul: 0.1) \});\
g = p.gui;\
g.keyDownAction =  \{\
	\cf5 "you touched me"\cf0 .postln;\
\};\
\
)\
focus on the slider.  notice that every key stroke is passed,\
the slider does not swallow them.\
\
\
or you can use KeyCodeResponder\
\
kcr = \cf3 KeyCodeResponder\cf0 .new;\
kcr.option( 36 -> \{ \cf5 "option 36"\cf0 .postln \});\
kcr.shift( 36 -> \{ \cf5 "shift 36"\cf0 .postln \});\
aPatchGui = aPatch.gui;\
aPatchGui.keyDownAction = kcr;\
\
This means that when ever the player is focused (any of its controls is in focus), these keys will be active providing that the view that is actually in focus doesn't handle the key event (it should have a nil keyDownAction function or pass nil).\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 You can concatenate KeyCodeResponders using ++
\f2\b0\fs18 \
\
\
\
\
global keydowns not yet tested....\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 KeyCodeResponder\cf0 .clear;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 /*\
this will fire on shift-'r'\
	shift must be held down\
	caps must NOT be down\
	cntl or opt status is irrelevant\
*/\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 KeyCodeResponder\cf0 .register(15,\cf3 true\cf0 ,\cf3 false\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\{ \cf5 "shift, no caps"\cf0 .postcln \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 /*\
this will fire on shift-'r'\
	shift must be held down\
	caps may or may not be down\
	cntl or opt status is irrelevant\
*/\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 KeyCodeResponder\cf0 .register(15,\cf3 true\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\{ \cf5 "shift, yes/no caps"\cf0 .postcln \});\
\cf3 Sheet\cf0 (\{ \cf3 arg\cf0  f; \cf3 ActionButton\cf0 (f).focus \});\
\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	\
This is very useful when using CAPS-LOCK to switch interface modes etc.\
\
Only one function per deny/require mask combination is possible per keycode:\
(\cf2 \
\cf0 // hit shift - r\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 KeyCodeResponder\cf0 .register(15,\cf3 true\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\{ \cf5 "shift r"\cf0 .postcln \});\
\cf3 KeyCodeResponder\cf0 .register(15,\cf3 true\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\cf3 nil\cf0 ,\{ \cf5 "overwrote the previous one"\cf0 .postcln \});\
\cf3 Sheet\cf0 (\{ \cf3 arg\cf0  f; \cf3 ActionButton\cf0 (f).focus \});\
\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf0 The simpler, older method is :\
\
	
\f2\b0\fs18 \cf3 KeyCodeResponder\cf0 .registerKeycode(2,28,\{      \});\cf4 // *\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 whereby that modifier and only that modifier will fire the funtion.\
see SCView for modifier values or use this :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
(\
\
	\cf3 KeyCodeResponder\cf0 .tester\
\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // using characters  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 KeyCodeResponder\cf0 .registerChar(0,$q,\{  \}); \cf4 // q no modifier\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Gotcha
\f1\b0 : it is easy to forget that you registered a function with KeyCodeResponder\
that holds a reference to a large object.  Garbage Collection will not remove the object until\
you have released your reference.\
\
solution:\
	// place this at the top of your performance code to start with a clean \shad\shadx-40\shady-50\shadr123\shado85 \shadc0 slate\shad0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	\cf3 KeyCodeResponder\cf0 .clear;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs22 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 		\
	\
}