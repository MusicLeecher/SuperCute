{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs34 \cf0 BusPlug\

\f1\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 superclass: AbstractFunction\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs16 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs26 \cf0 a superclass to node proxy that listens to a bus.\
it is mainly a basic subclass of nodeproxy, but it can be used as well for some things.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
see also [the_lazy_proxy]\
\
\cf2 \
\cf3 //using as a control bus listener\
\cf2 \
s.boot;\
z = \cf4 Bus\cf2 .control(s, 16);\
a = \cf4 BusPlug\cf2 .for(z);\
\
m = \{ \cf4 Mix\cf2 (\cf4 SinOsc\cf2 .ar(a.kr(16), 0, 0.1)) \}.play;\
\
z.setn(\cf4 Array\cf2 .rand(16, 300, 320).put(16.rand, rrand(500, 1000)));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 z.setn(\cf5 Array\cf0 .rand(16, 300, 320).put(16.rand, rrand(500, 1000)));\
z.setn(\cf5 Array\cf0 .rand(16, 300, 320).put(16.rand, rrand(500, 1000)));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
m.free;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 m = \{ \cf4 SinOsc\cf2 .ar(a.kr(2, \cf4 MouseX\cf2 .kr(0, 19)), 0, 0.1) \}.play; \cf3 //modulate channel offset\cf2 \
\
z.setn(\cf4 Array\cf2 .rand(16, 300, 1320).put(16.rand, rrand(500, 1000)));\
\
\
m.free; z.free;\
\
\cf3 //using as a audio monitor\cf2 \
\
p = \cf4 BusPlug\cf2 .audio(s,2);\
d = \{ \cf4 Out\cf2 .ar(p.index, \cf4 PinkNoise\cf2 .ar([0.1, 0.1])) \}.play;\
\
\
p.play; \cf3 //monitor whatever plays in p (the execution order does not matter)\cf2 \
\
p.toggle; //toggle on and off\
\cf0 p.toggle;\
\cf2 \
\
d.free;\
d = \{ \cf4 Out\cf2 .ar(p.index, \cf4 PinkNoise\cf2 .ar([0.1, 0.1])) \}.play;\
\
p.stop;\
p.play;\
\
\cf3 //also p can play to another bus:\cf2 \
\
p.stop;\
p.play(12);\
\
\cf3 //listen to that bus for a test:\cf2 \
\{ \cf4 In\cf2 .ar(12,2) \}.play;\
\
\
\
\
}