{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 Client				
\fs24 represents a remote sclang application
\fs36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 	Client
\f2\b0  and 
\f0\b LocalClient
\f2\b0  together represent a sender / reciever pair for sclang side osc messages. \
	Using SynthDef like global function definitions, 
\f0\b ClientFunc
\f2\b0 , an sclang application \
	can evaluate code on a remote sclang app.
\f1\fs18 \cf2 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 \ul Class Methods
\fs28 \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 	*new(name, netAddr) \
			
\f2\b0 returns a new instance and stores it in a global dictionary\
			the port is set to defaultPort, which is hardcoded presently.\
			if no address is passed in, localhost is used.
\f1\fs18 \cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 \ul Instance Methods\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 	send(key, args ...)\
		
\f2\b0 evaluates a client function that is stored at that key\
	
\f0\b \
	password_ (symbol)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf2 		set the password for interpreter access\
	
\f0\b \
	interpret(string)\
		
\f2\b0 if the remote client has the same password, it interprets  the string
\f0\b \
\
\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 LocalClient		
\fs24 represents a listener to a remote sclang application
\fs36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 	\
	
\f0\b\fs24 \cf2 superclass: Client\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf2 \ul \
	
\f1\b0\fs18 \cf2 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 	Note that passing a 
\f0\b nil address
\f2\b0  to LocalClient will make it respond to 
\f0\b any
\f2\b0  remote client \
	and try to match any message that is sent from a client object. \
	If it is expected to listen to a specific remote client, the address of that client should be used.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf2 \ul \

\fs24 \ul Instance Methods\ulnone 	
\f1\b0\fs18 \cf2 \
	\
	
\f0\b\fs24 \cf2 start \
		
\f2\b0 start listening to the world\
		
\f0\b \
	stop \
		
\f2\b0 stop listening to the world\
		
\f0\b \
	isListening \
		
\f2\b0 returns whether it is listening to the world\
		
\f0\b \
	password_ (symbol)\
		
\f2\b0 set the password for interpreter access from outside\
		
\f0\b \
	allowInterpret \
		
\f2\b0 open the interpreter to the world (potential hacking danger)\
		
\f0\b \
	disallow \
		
\f2\b0 close the interpreter access
\f1\fs18 \cf2 \
	\
	\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 ClientFunc		
\fs24 similar to SynthDef - represents a client side stored function
\f1\b0\fs18 \cf2 \
	\
	
\f0\b\fs24 \cf2 *new(name, func)\
		
\f1\b0\fs18 \cf2 \

\f0\b\fs24 \cf2 Note:
\f2\b0 \
\
	for accessing a gui element or a document from an OSCResponder such as the one \
	in LocalClient, one has to defer the action:\
	\
	ClientFunc(\\ok, \{ defer(\{ ... \}) \});
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \
\
\
\
\cf3 // example\cf2 \
\cf3 // instantiate a remote-local pair (in this case both are local of course)\cf2 \
a = \cf4 LocalClient\cf2 .default; 	\cf3 // this one listens to any remote client and evaluates the functions. \cf2 \
b = \cf4 Client\cf2 .new;		\cf3 // this one sends the messages\cf2 \
\
\cf3 // eqivalent to the above defaults:\cf2 \
a = \cf4 LocalClient\cf2 (\cf5 \\default\cf2 , \cf4 nil\cf2 ); \cf3 //addr is nil : listen to all\cf2 \
b = \cf4 Client\cf2 (\cf5 \\default\cf2 , \cf4 NetAddr\cf2 (\cf6 "127.0.0.1"\cf2 , 57120));\
\
\cf3 // store some client functions to be accessible from outside (analogous to SynthDef)\cf2 \
\cf4 ClientFunc\cf2 (\cf5 \\ok\cf2 , \{ \cf4 arg\cf2  ... args; args.postln \});\
\cf4 ClientFunc\cf2 (\cf5 \\yes\cf2 , \{ \cf4 arg\cf2  ... args; \cf5 \\ok2\cf2 .postln \});\
\
\cf3 // start the local client\cf2 \
a.start;\
\
\cf3 // send messages\cf2 \
b.send(\cf5 \\ok\cf2 , \cf6 "rrere"\cf2 , 39);\
b.send(\cf5 \\ok\cf2 , \cf6 "rrxxxre"\cf2 );\
b.send(\cf5 \\ok\cf2 , 2, 3, 4, 5, 6);\
b.send(\cf5 \\yes\cf2 , \cf6 "rrere"\cf2 , 39);\
b.send(\cf5 \\yes\cf2 );\
\
\cf3 // open interpreter\cf2 \
a.password = \cf5 \\xyz\cf2 ;\
b.password = \cf5 \\xyz\cf2 ;\
a.allowInterpret;\
\
\cf3 // remote interpret\cf2 \
b.interpret(\cf6 " Array.fill(8, \{ [1,0].choose \}).postln "\cf2 );\
b.interpret(\cf6 " String.fill(80, \{ [$u, $n].choose \}).postln"\cf2 );\
\
\cf3 // remote GUI\cf2 \
b.interpret(\cf6 " SCWindow.new(\\"\cf2 aLl uR mAchIneZ are bEloNg to us!\\\cf6 ").front;\{ SinOsc.ar(500, 0, LFPulse.kr(4)) \}.play;"\cf2 );  \
\
\cf3 // close interpret\cf2 \
a.disallow\
\
\cf3 //test: this should not interpret\cf2 \
b.interpret(\cf6 " String.fill(8, \{ [$u, $n].choose \}).postln"\cf2 );\
\
a.stop; \cf3 //stop local responder\cf2 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 writing a chat
\f1\b0\fs18 \cf2 \
\
\
(\
n = "John";\
d = \cf4 Document\cf2 (\cf6 "chat"\cf2 ).background_(\cf4 Color\cf2 .rand).bounds_(\cf4 Rect\cf2 (30, 10, 400, 200));\
e = \cf4 Document\cf2 (\cf6 "chat-write"\cf2 ).background_(\cf4 Color\cf2 .rand).bounds_(\cf4 Rect\cf2 (30, 210, 400, 50));\
\
a = \cf4 LocalClient\cf2 .default.start; 	\
b = \cf4 Client\cf2 .new;\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 ClientFunc\cf2 (\cf5 \\chat\cf2 , \{ \cf4 arg\cf2  str; \{ d.string = \cf0  \cf2 d.string\cf0  ++ \cf2 str ++ Char.nl \}.defer \});\
\
(\
e.keyDownAction_(\{\'ca\cf4 arg\cf2  char;\cf0 \
\cf2 	 if(char === \cf4 $<\cf2 ) \
	 \{ \
	 	b.send(\cf5 \\chat\cf2 , \cf0 n + ":" + \cf2 e.currentLine); \
	 	\cf4 AppClock\cf2 .sched(0.1, \{ e.string = \cf6 ""\cf2  \}); \cf3 // time is the original crime\cf2 \
	 \} \
\});\
\cf0 )\
\cf2 \
\
}