{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PatternProxy	
\f1\b0\fs18 			 
\f0\b\fs24 stream reference
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 superclass: Pattern\
\
\
\
keeps a reference to a stream that can be replaced while playing.\
Multiple streams are thus handled without creating dependancies.\
\
related: [
\f0\b \ul Pdefn
\f2\b0 \ulnone ]\
\
	
\f0\b *basicNew(source)
\f2\b0 \
		create a new instance with a pattern (the source).\
		the pattern should be a 
\f3\i value pattern
\f2\i0  (see 
\f0\b Pdefn
\f2\b0 )\
		(*new is implemented for Pdefn to avoid a dispatch)\
		for event pattern proxy, see: 
\f3\i EventPatternProxy\
		
\f2\i0 instead of a pattern, a 
\f0\b function
\f2\b0  can be passed in, creating a routine. \
	\
	
\f0\b *default
\f2\b0 \
		a default source, if none is given. the default is 1.0 (it is not 0.0 in order to make it safe for durations)\
	\
	
\f0\b source_(obj)
\f2\b0 \
		set the source. If a quantization is given, schedule this change to the next beat\
		\
	
\f0\b quant_
\f2\b0 \
		set the quantization value\
		\
	
\f0\b quant
\f2\b0 \
		get the quantization value\
		\
	\
	
\f0\b *defaultQuant_
\f2\b0 \
		set the default quantization value for the class. (default: nil)\
	\
	
\f0\b condition_(func)
\f2\b0 \
			provide a condition under which the pattern is switched when a new one is inserted.\
			the stream value and a count is passed into the function\
			the methods 
\f0\b count_(n) 
\f2\b0 simply counts up to n and switches the pattern then\
		\
	
\f0\b reset
\f2\b0 		\
			switch the pattern immediately. (stuck conditions can be subverted by this)\
\
\
	
\f0\b embedInStream(inval)\
			
\f2\b0 just like any pattern, embeds itself in stream\
	\
	PatternProxy implements some methods for the benefits of its subclasses Pdefn/Pdef/Tdef which\
	are not useful for PatternProxy, EventStreamProxy and TaskProxy.\
	\
	
\f0\b envir_(event)
\f2\b0 \
			provide a default environment for the proxy. \
			If given,  it is used as an environment for the routine \
			function. When set for the first time, the routine pattern is rebuilt.\
	\
	
\f0\b set(key, val, key2, val2, ...)
\f2\b0 \
			set arguments in the environment. \
			If there is none, it is created and the pattern is rebuilt.\
\
	
\f0\b endless
\f2\b0 \
			returns a Proutine that plays the proxy endlessly, replacing 
\f0\b nil
\f2\b0  with a 
\f0\b default
\f2\b0 \
			value (1). This allows to create streams that idle on until a new pattern is inserted.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // example\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 a = PatternProxy.basicNew(Pseq\cf0 ([1, 2, 3],\cf3 inf\cf0 ));\
\
x = \cf3 Pseq\cf0 ([0, 0, \cf3 a\cf0 ], \cf3 inf\cf0 ).asStream;\
\
\cf3 t = Task\cf0 (\{ loop(\{ x.next.postln; 0.3.wait \}) \}).play;\
\
\
\cf3 a.source = Pseq\cf0 ([55, 66, 77],\cf3 inf\cf0 );\
\cf3 a.source = Pseq\cf0 ([55, 66, 77],\cf3 1\cf0 );\
\
t.stop;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // PatternProxy, like Pdefn can be accessed in multiple streams\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\cf0 (\
\cf3 SynthDef\cf0 (\cf4 "Pdefhelp"\cf0 , \{ \cf3 arg\cf0  out, freq, sustain=1, amp=1, pan;\
	\cf3 var\cf0  env, u=1;\
	env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.03, sustain), 1, doneAction:2);\
	5.do \{ var d; d = exprand(0.01, 1); u = \cf3 SinOsc\cf0 .ar(d * 300, u, rrand(0.1,1.2) * d, 1) \};\
	\cf3 Out\cf0 .ar(out, \cf3 Pan2\cf0 .ar(\cf3 SinOsc\cf0 .ar(u + 1 * freq, 0, amp * env), pan));\
\
\}).store;\
s.boot;\
)\
\
(\
x = \cf3 PatternProxy\cf0 .basicNew;\
x.source = \cf3 Pseq\cf0 ([0, 3, 2],\cf3 inf\cf0 );\
\
\cf3 Pset\cf0 (\cf5 \\instrument\cf0 , \cf5 \\Pdefhelp\cf0 , \
	\cf3 Ppar\cf0 ([\
	\cf3 Pbind\cf0 (\cf5 \\degree\cf0 , x),\
	\cf3 Pbind\cf0 (\cf5 \\degree\cf0 , x, \cf5 \\dur\cf0 , 1/3)\
])\
).play;\
)\
\
x.source = \cf3 Prand\cf0 ([0, 3, [1s, 4]],\cf3 inf\cf0 );\
\
x.source = \cf3 Pn\cf0 (\cf3 Pshuf\cf0 ([0, 3, 2, 7, 6],2),\cf3 inf\cf0 );\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // if quant is set, the update is done at the next beat or whatever is specified:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 x\cf0 .quant = 4;\
\cf3 x.source = Pn\cf0 (\cf3 Pseries\cf0 (0, 1, 8),\cf3 inf\cf0 );\
\
\cf3 x\cf0 .quant = \cf3 nil\cf0 ; \cf2 // reactivate immediacy\
\
\cf0 (\
x.source = \cf3 Prout\cf0  \{\
	loop \{\
	4.do \{ \cf3 |i|\cf0 \
		#[2, 3, 4].choose.yield;\
		#[5, 0, 11].choose.yield;\
		#[6, 3, 4].choose.do \{ \cf3 |j|\cf0 \'ca(i % j).yield \};\
	\}\
	\}\
\})\
)\
\
\
}