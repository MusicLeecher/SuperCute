{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red95\green95\blue95;\red0\green114\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 Pbindef
\f1\b0\fs18  			
\f0\b\fs24 incremental event pattern reference definition\
\

\f2\b0 superclass: Pdef\
\
\
\
keeps a reference to a Pbind in which single keys can be replaced, just like in 
\f0\b PbindProxy
\f2\b0 .\
It plays on when the old stream ended and a new stream is set and schedules the changes to the beat.\
\
the difference to Pdef is that it allows to incrementally change the the elementary patterns (patternpairs)\
of a Pbind - also of an already existing Pbind in a Pdef.\
\
\
\

\f0\b *new(key, paramKey1, pattern1, ... )\
\

\f2\b0 	store the pattern in the global dictionary of 
\f0\b Pdef
\f2\b0  under key.\
	if there is already a Pdef there, replace its pattern with the new one.\
	If there is already a 
\f0\b Pbindef
\f2\b0  there, set the parameters only, or add a new one (the whole pattern is 	replaced).\
\
\

\f0\b *new(key)\
\

\f2\b0 	acess the pattern at that key (if none is there, a default pattern is created)\
	see 
\f0\b Pdef\
\
\
\
\

\f1\b0\fs18 \cf3 // example:\
\
\cf2 (\
\cf4 SynthDef\cf2 (\cf5 "Pdefhelp"\cf2 , \{ \cf4 arg\cf2  out, freq, sustain=1, amp=1, pan;\
\cf4 var\cf2  env, u=1;\
env = \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .perc(0.01, sustain), 1, doneAction:2);\
5.do \{ \cf4 var\cf2  d; d = exprand(0.01, 1); u = \cf4 SinOsc\cf2 .ar(d * 300, u, rrand(0.1,1.2) * d, 1) \};\
\cf4 Out\cf2 .ar(out, \cf4 Pan2\cf2 .ar(\cf4 SinOsc\cf2 .ar(u + 1 * freq, 0, amp * env), pan));\
\
\}).store;\
)\
s.boot;\
\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\instrument\cf2 , \cf6 \\Pdefhelp\cf2 ).play;\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([0, 2, 5b, 1b], \cf4 inf\cf2 ));\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\dur\cf2 , 0.1);\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1b, 5, 3, 1b, 6, 2, 5, 0, 3, 0, 2], \cf4 inf\cf2 ));\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\legato\cf2 , \cf4 Prand\cf2 ([1.0, 2.4, 0.2], \cf4 inf\cf2 ), \cf6 \\mtranspose\cf2 , -3);\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\mtranspose\cf2 , \cf4 nil\cf2 ); \cf3 // remove key\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1, 2, 3, 4, 5, 6], 1));\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1, 2, 3, 4, 5, 6], 3), \cf6 \\dur\cf2 , 0.02);\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1, 2, 3, 4, 5, 6], 3), \cf6 \\dur\cf2 , 0.1);\
\
\cf3 // apart from this Pbindef behaves like Pdef:\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 ).quant = 0.0;\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1, 2, 3, 4, 5, 6], 1));\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 ).stop;\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([1, 2, 3, 4, 5, 6], 1)); \cf3 // does not resume now\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 ).playOnce; \cf3 // play single instance\
\cf4 Pseq\cf2 ([\cf4 Pbindef\cf2 (\cf6 \\a\cf2 ), \cf4 Pdef\cf2 (\cf6 \\a\cf2 )]).play; \cf3 // same here (Pdef(\\a) is the same pattern as Pbindef))\
\
\cf4 Pbindef\cf2 (\cf6 \\a\cf2 ) === \cf4 Pdef\cf2 (\cf6 \\a\cf2 ) \cf3 // identical.\
\
\
\
// an already existing Pdef can be incrementally changed\
\
\cf4 Pdef\cf2 (\cf6 \\x\cf2 , \cf4 Pbind\cf2 (\cf6 \\instrument\cf2 , \cf6 \\Pdefhelp\cf2 , \cf6 \\dur\cf2 , 0.3));\
\cf4 Pdef\cf2 (\cf6 \\x\cf2 ).play;\
\
\cf4 Pbindef\cf2 (\cf6 \\x\cf2 , \cf6 \\degree\cf2 , 7.rand);\
\cf4 Pbindef\cf2 (\cf6 \\x\cf2 , \cf6 \\degree\cf2 , \cf4 Pseq\cf2 ([0, 7, 3, 7, 4], \cf4 inf\cf2 ), \cf6 \\dur\cf2 , \cf4 Pn\cf2 (\cf4 Pseries\cf2 (0.2, -0.02, 10)));\
\cf4 Pbindef\cf2 (\cf6 \\x\cf2 , \cf6 \\stretch\cf2 , 2);\
\
\
\
\
\
}