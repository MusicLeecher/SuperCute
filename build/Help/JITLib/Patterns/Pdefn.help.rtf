{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Pdefn     
\fs24 pattern definition that references a value pattern
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 superclass: PatternProxy
\f1\fs18 \
\
\
\
\

\f2\fs24 access and assignment are done by *new\
\
keeps a reference to a task that can be replaced while playing.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Pdefn(key)
\f2\b0  returns the instance, 
\f0\b Pdefn(key, pat) 
\f2\b0 defines the pattern \
and returns the instance, like Pdef, Tdef and Ndef.\
it is very similar to 
\f0\b PatternProxy
\f2\b0 \
\
it can be used to store value patterns globally (for event patterns, see Pdef).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 	*new(key, pattern)
\f2\b0 \
			store the pattern in a global dictionary under key.\
			the pattern can be anything that embeds in a stream by returning numbers\
			\
	
\f0\b *new(key)
\f2\b0 \
			acess the pattern at that key (if none is there, a default pattern is created)\
		\
	
\f0\b *default
\f2\b0 \
		a default source, if none is given. the default is 1.0 (it is not 0.0 in order to make it safe for durations)		\
	
\f0\b *removeAll
\f2\b0 \
			remove all patterns\
	
\f0\b *all
\f2\b0 \
			dict that stores all Pdefn\
				\
	
\f0\b quant_(beats)
\f2\b0 \
			set the quantisation time for beat accurate scheduling\
	\
	
\f0\b defaultQuant_(beats)
\f2\b0 \
			set the default quantisation for new instances (default: nil)\
\
	\ul \
	
\f0\b \ulnone source_	\
			
\f2\b0 set the pattern (internally done by *new(key, pattern).\
			if quant is not nil, the change is scheduled to the beat\
			(
\f0\b pattern_
\f2\b0 (..) is equivalent)\
	\
	
\f0\b embedInStream(inval)\
			
\f2\b0 just like any stream, embeds itself in stream.\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\
\
\cf2 // example\cf0 \
\
\cf3 Pdefn\cf0 (\cf4 \\x\cf0 , \cf3 Pseq\cf0 ([1, 2, 3],\cf3 inf\cf0 ));\
\
x = \cf3 Pseq\cf0 ([0, 0, \cf3 Pdefn\cf0 (\cf4 \\x\cf0 )], \cf3 inf\cf0 ).asStream;\
\
\cf3 t = Task\cf0 (\{ loop(\{ x.next.postln; 0.3.wait \}) \}).play;\
\
\
\cf3 Pdefn\cf0 (\cf4 \\x\cf0 , \cf3 Pseq\cf0 ([55, 66, 77],\cf3 inf\cf0 ));\
\cf3 Pdefn\cf0 (\cf4 \\x\cf0 , \cf3 Pseq\cf0 ([55, 66, 77],\cf3 1\cf0 ));\
\
t.stop;\
\
\cf2 // Pdefn can be accessed in multiple streams\cf0 \
\cf3 \
\cf0 (\
\cf3 SynthDef\cf0 (\cf5 "Pdefhelp"\cf0 , \{ \cf3 arg\cf0  out, freq, sustain=1, amp=1, pan;\
	\cf3 var\cf0  env, u=1;\
	env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.03, sustain), 1, doneAction:2);\
	5.do \{ var d; d = exprand(0.01, 1); u = \cf3 SinOsc\cf0 .ar(d * 300, u, rrand(0.1,1.2) * d, 1) \};\
	\cf3 Out\cf0 .ar(out, \cf3 Pan2\cf0 .ar(\cf3 SinOsc\cf0 .ar(u + 1 * freq, 0, amp * env), pan));\
\
\}).store;\
s.boot;\
)\
\
(\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 , \cf3 Pseq\cf0 ([0, 3, 2],\cf3 inf\cf0 ));\
\
\cf3 Pset\cf0 (\cf4 \\instrument\cf0 , \cf4 \\Pdefhelp\cf0 , \
	\cf3 Ppar\cf0 ([\
	\cf3 Pbind\cf0 (\cf4 \\degree\cf0 , \cf3 Pdefn\cf0 (\cf4 \\deg\cf0 )),\
	\cf3 Pbind\cf0 (\cf4 \\degree\cf0 , \cf3 Pdefn\cf0 (\cf4 \\deg\cf0 ), \cf4 \\dur\cf0 , 1/3)\
])\
).play;\
)\
\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 , \cf3 Prand\cf0 ([0, 3, [1s, 4]],\cf3 inf\cf0 ));\
\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 , Pn(\cf3 Pshuf\cf0 ([0, 3, 2, 7, 6],\cf3 2\cf0 ),inf));\
\
\
\
\cf2 // if quant is set, the update is done at the next beat or whatever is specified:\cf0 \
\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 ).quant = 4;\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 , \cf3 Pn\cf0 (\cf3 Pseries\cf0 (0, 1, 8),\cf3 inf\cf0 ));\
\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 ).quant = \cf3 nil\cf0 ; \cf2 // activate immediately again\
\cf0 (\
\cf3 Pdefn\cf0 (\cf4 \\deg\cf0 , \cf3 Prout\cf0  \{\
	loop \{\
	5.do \{ \cf3 |i|\cf0 \
		#[1, 3, 4].choose.yield;\
		#[5, 0, 12].choose.yield;\
		#[14, 3, 4].choose.do \{ \cf3 |j|\cf0 \'ca(i % j).postln.yield \};\
	\}\
	\}\
\})\
)\
\
\
}