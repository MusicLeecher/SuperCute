{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Pdefn     		
\fs24 value-stream reference definition
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 superclass: PatternProxy
\f1\fs18 \
\
\
\
\

\f2\fs24 access and assignment are done by *new\
\
keeps a reference to a task that can be replaced while playing.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Pdefn(key)
\f2\b0  returns the instance, 
\f0\b Pdefn(key, pat) 
\f2\b0 defines the pattern \
and returns the instance, like Pdef, Tdef and Ndef.\
it is very similar to [
\f0\b \ul PatternProxy\ulnone ]
\f2\b0 \
\
it can be used to store value patterns globally (for event patterns, see 
\f0\b Pdef
\f2\b0 ).\

\f1\fs18 \
\

\f0\b\fs24 	*new(key, pattern)
\f2\b0 \
			store the pattern in a global dictionary under key.\
			the pattern can be anything that embeds in a stream by returning numbers\
			\
	
\f0\b *new(key)
\f2\b0 \
			acess the pattern at that key (if none is there, a default pattern is created)\
		\
	
\f0\b *default
\f2\b0 \
			a default source, if none is given. \
			the default is 1.0 (it is not 0.0 in order to make it safe for durations)		\
	
\f0\b *removeAll
\f2\b0 \
			remove all patterns\
	
\f0\b *all
\f2\b0 \
			dict that stores all Pdefn\
	\
	
\f0\b *all_(envir)
\f2\b0 \
			set the global environment\
				\
	
\f0\b quant_(beats)
\f2\b0 \
			set the quantisation time for beat accurate scheduling\
			can be a pair [quant, offset]\
				\
	*
\f0\b defaultQuant_(beats)
\f2\b0 \
			set the default quantisation for new instances (default: nil)\
			can be a pair [quant, offset]\
	\ul \
	
\f0\b \ulnone source_	\
			
\f2\b0 set the pattern (internally done by *new(key, pattern).\
			if quant is not nil, the change is scheduled to the beat\
			(
\f0\b pattern_
\f2\b0 (..) is equivalent)\
	\
	
\f0\b embedInStream(inval)\
			
\f2\b0 just like any stream, embeds itself in stream.\
	\

\f1\fs18 	
\f2\fs24 \
	
\f0\b envir_(event)
\f2\b0 \
			provide a default environment for the proxy. \
			If given,  it is used as an environment for the routine \
			function. When set for the first time, the routine pattern is rebuilt.\
	\
	
\f0\b set(key, val, key2, val2, ...)
\f2\b0 \
			set arguments in the environment. \
			If there is none, it is created and the pattern is rebuilt.\
			\
	
\f0\b map(key, pdefKey, key, pdefKey ...)
\f2\b0 \
			map one Pdefn to the other. the patterns can be accessed via the currentEnvironment
\f1\fs18 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
Pdefn is similar to [\ul Pdef\ulnone ]  and [\ul Tdef\ulnone ]  . see the other helpfiles for comparison.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\fs24 \cf0 Pdefn in expressions
\f1\i0\fs18 \cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Pdefn\cf2 (\cf4 \\c\cf2 , \cf3 Pdefn\cf2 (\cf4 \\a\cf2 ) + \cf3 Pdefn\cf2 (\cf4 \\b\cf2 ));\
\
t = \cf3 Pdefn\cf2 (\cf4 \\c\cf2 ).asStream; \cf5 // create a stream from Pdefn(\\c)\cf2 \
\
t.value; \cf5 // default value for a Pdefn is 1, so that it is a good time value default.\cf2 \
\
\cf3 Pdefn\cf2 (\cf4 \\a\cf2 , 100); \cf5 // (re)define Pdefn(\\a) as 100\cf2 \
\
t.value;\
\
\cf3 Pdefn\cf2 (\cf4 \\b\cf2 , \cf3 Pseq\cf2 ([1, 2, 3], \cf3 inf\cf2 )); \cf5 // (re)define Pdefn(\\b) as Pseq([1, 2, 3], inf)\cf2 \
\
3.do \{ t.value.postln \};\
\
\cf3 Pdefn\cf2 (\cf4 \\c\cf2 , \cf3 Pdefn\cf2 (\cf4 \\a\cf2 ) * \cf3 Pdefn\cf2 (\cf4 \\b\cf2 ) - \cf3 Pdefn\cf2 (\cf4 \\a\cf2 )); \cf5 // (re)define Pdefn(\\c) \cf2 \
\
8.do \{ t.value.postln \};\
\
\cf3 Pdefn\cf2 (\cf4 \\a\cf2 , \cf3 Prand\cf2 ([1, 4, 2], \cf3 inf\cf2 ));  \cf5 // (re)define Pdefn(\\a) \cf2 \
\cf0 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\fs24 \cf0 Embedding Pdefn in other patterns\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\i0\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\x\cf0 , \cf6 Pseq\cf0 ([1, 2, 3],\cf6 inf\cf0 ));\
\
x = \cf6 Pseq\cf0 ([0, 0, \cf6 Pdefn\cf0 (\cf7 \\x\cf0 )], \cf6 inf\cf0 ).asStream;\
\
\cf6 t = Task\cf0 (\{ loop(\{ x.next.postln; 0.3.wait \}) \}).play;\
\
\
\cf6 Pdefn\cf0 (\cf7 \\x\cf0 , \cf6 Pseq\cf0 ([55, 66, 77],\cf6 inf\cf0 ));\
\cf6 Pdefn\cf0 (\cf7 \\x\cf0 , \cf6 Pseq\cf0 ([55, 66, 77],\cf6 1\cf0 ));\
\
t.stop;\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // Pdefn can be accessed in multiple streams\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 SynthDef\cf0 (\cf9 "Pdefhelp"\cf0 , \{ \cf6 arg\cf0  out, freq, sustain=1, amp=1, pan;\
	\cf6 var\cf0  env, u=1;\
	env = \cf6 EnvGen\cf0 .kr(\cf6 Env\cf0 .perc(0.03, sustain), 1, doneAction:2);\
	5.do \{ var d; d = exprand(0.01, 1); u = \cf6 SinOsc\cf0 .ar(d * 300, u, rrand(0.1,1.2) * d, 1) \};\
	\cf6 Out\cf0 .ar(out, \cf6 Pan2\cf0 .ar(\cf6 SinOsc\cf0 .ar(u + 1 * freq, 0, amp * env), pan));\
\
\}).store;\
s.boot;\
)\
\
(\
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \cf6 Pseq\cf0 ([0, 3, 2],\cf6 inf\cf0 ));\
\
\cf6 Pset\cf0 (\cf7 \\instrument\cf0 , \cf7 \\Pdefhelp\cf0 , \
	\cf6 Ppar\cf0 ([\
		\cf6 Pbind\cf0 (\cf7 \\degree\cf0 , \cf6 Pdefn\cf0 (\cf7 \\deg\cf0 )),\
		\cf6 Pbind\cf0 (\cf7 \\degree\cf0 , \cf6 Pdefn\cf0 (\cf7 \\deg\cf0 ), \cf7 \\dur\cf0 , 1/3)\
])\
).play;\
)\
\
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \cf6 Prand\cf0 ([0, 3, [1s, 4]],\cf6 inf\cf0 ));\
\
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , Pn(\cf6 Pshuf\cf0 ([0, 3, 2, 7, 6],\cf6 2\cf0 ),inf));\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 (\
\cf3 Pdefn\cf2 (\cf4 \\deg\cf2 , \cf3 Plazy\cf2  \{ var pat;\
				pat = \cf0 [\cf6 Pshuf\cf0 ([0, 3, 2, 7, 6],2), \cf6 Pseries\cf0 (0, 1, 11), \cf6 Pseries\cf0 (11, -1, 11)].choose;\cf2 \
				\cf6 Pn\cf0 (pat, inf)\cf2 \
		\});\
)\
\cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\fs24 \cf0 Timing: when does the definition change?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\i0\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // if quant is set, the update is done at the next beat or whatever is specified:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 ).quant = 4;\
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \cf6 Pn\cf0 (\cf6 Pseries\cf0 (0, 1, 8),\cf6 inf\cf0 ));\
\
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 ).quant = \cf6 nil\cf0 ; \cf8 // activate immediately again\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \{\
	loop \{\
	5.do \{ \cf6 |i|\cf0 \
		#[1, 3, 4].choose.yield;\
		#[5, 0, 12].choose.yield;\
		#[14, 3, 4].choose.do \{ \cf6 |j|\cf0 \'ca(i % j).postln.yield \};\
	\}\
	\}\
\})\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\fs24 \cf0 Functions as arguments to Pdefn:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\i0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \{ loop \{ yield(0.1.rand.round(0.01) + [2, 3, 9].choose) \} \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // equivalent to:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\deg\cf0 , \cf6 Proutine\cf0  \{ loop \{ yield(0.1.rand.round(0.01) + [2, 3, 9].choose) \} \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // this is not exactly true, see below..\cf0 \
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\fs24 \cf0 The (inner) environment\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\i0\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).set(\cf7 \\a\cf0 , 1, \cf7 \\b\cf0 , 0);\
\
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 , \{ \cf6 |a, b|\cf0  (a + b) + 0.1.rand.round(0.01) \}); \cf5 // [1]\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 t = \cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).asStream;\
\
t.nextN(3);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).set(\cf7 \\a\cf0 , 3);\
\
t.next;\
\
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).set(\cf7 \\a\cf0 , \cf6 Pseq\cf0 ([1, 2, 3], \cf6 inf\cf0 ));\
\
t.nextN(3);\
\
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).envir; \cf8 // post the envir\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // the above [1] is a syntactic shortcut and equivalent to:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 , \cf6 Proutine\cf0  \{ \cf6 |inval|\cf0  ((~a + ~b) + 0.1.rand.round(0.01)).embedInStream(inval) \});\
\
t.nextN(3);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // and also to:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 , \{ (~a + ~b) + 0.1.rand.round(0.01) \});\
\
t.nextN(3);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // using the "map" message one can map one Pdefn to the other:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Pdefn\cf0 (\cf7 \\z\cf0 ).map(\cf7 \\a\cf0 , \cf7 \\other\cf0 );\
\
t.nextN(3); \cf8 // Pdefn default value (1) is used\cf0 \
\
\cf6 Pdefn\cf0 (\cf7 \\other\cf0 , \cf6 Prand\cf0 ([200, 300, 400], \cf6 inf\cf0 )); \cf8 // assign a pattern to \\other\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 t.nextN(3);\cf8 \
\cf0 \
\
\
}