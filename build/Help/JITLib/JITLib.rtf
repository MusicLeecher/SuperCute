{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;\f4\fnil\fcharset77 Georgia-Bold;}
{\colortbl;\red255\green255\blue255;\red163\green146\blue90;}
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b\fs36 \cf0 Just In Time Programming
\f1\b0\fs24 \
\

\f2\i\fs20 "Passenger to taxtidriver: take me to number 37. I'll give you the street name when we are there." \
						(an austrian math teacher's joke)
\f1\i0\fs24 \
\
\
Disclaimer: there is no time, really; punctuality is your personal responsibility though.
\f3\fs18 \

\f1\fs24 \
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f2\i \cf0 Just in time programming
\f1\i0  (or: 
\f2\i live coding
\fs20 \super 1
\fs24 \nosupersub , on-the fly-programming, interactive programming 
\fs20 \super 2
\f1\i0\fs24 \nosupersub ) is a paradigm that includes the programming activity itself in the program's operation. This means a program is not seen as a tool that is made first, then to be productive, but a dynamic construction process of description and conversation - writing code becomes a closer part of musical practice. SuperCollider, being a dynamic programming language, provides several possibilities for modification of a running program - this library attempts to extend, simplify and develop them, mainly by providing placeholders
\f2\i  (proxies)
\f1\i0  that can be modified and used in calcuations while playing. There is some specific networking classes which are made to simplify the distribution of  live coding activity.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
Jitlib consists of a number of 
\f2\i placeholders
\f1\i0  (server side and client side) and 
\f2\i schemes of access
\f1\i0 .\
These two aspects of space corresponding to 
\f2\i inclusion
\f1\i0  and 
\f2\i reference,
\f1\i0  depend on their context - here the placeholders are like roles which have a certain behaviour and can be fulfilled by certain objects.\
It is useful to be aware of the three aspects of such a placeholder: a certain set of elements can be their source, they can be used in a certain set of contexts and they have a certain default source, if none is given.\
\
\
\
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Tutorial: Interactive Programming with SuperCollider and jitlib
\fs30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 This tutorial focusses on some basic concepts used in JITLib. There are many possibilities,\
such as server messaging and pattern proxies which are not covered in tutorial form presently.\
\
\
content:\
\
	
\f0\b placeholders in sc
\f1\b0  				[\ul jitlib_basic_concepts_01\ulnone ]\
	
\f0\b referencing and environments
\f1\b0  	[\ul jitlib_basic_concepts_02\ulnone ]\
	
\f0\b internal structure of node proxy
\f4\fs22  	
\f1\b0\fs24 [\ul jitlib_basic_concepts_03\ulnone ]\
	
\f0\b timing in node proxy
\f1\b0  			[\ul jitlib_basic_concepts_04\ulnone ]\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\
\
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b \cf0 Overview of the different classes and techniques:
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\'a5 One way or style of access is the 
\f2\i 'def' 
\f1\i0 classes (Pdef, Ndef etc.)\
	it binds a symbol to an object in a specific way:\
	Pdef(\\name) returns the proxy\
	Pdef(\\name, object) sets the source and returns the proxy.\
	the rest of the behaviour depends on its use.\
	\
	client side: 	
\f0\b [\ul Pdef\ulnone ] [\ul Pdefn\ulnone ], [\ul Tdef\ulnone ], [\ul Pbindef\ulnone ]
\f1\b0 \
	server side: 	[
\f0\b \ul Ndef\ulnone ]\
	
\f1\b0 \
\'a5 Another way, for server side NodeProxies, is an 
\f2\i environment
\f1\i0  that returns placeholders on demand:\
	ProxySpace.push\
	~out = \{ ...\}\
	helpfile: 		[
\f0\b \ul ProxySpace\ulnone ] 
\f1\b0 for the use together with other environments, see [\ul jitlib_basic_concepts_02\ulnone ]
\f0\b \
	
\f1\b0 \
\'a5 there is also direct access 
\f2\i without
\f1\i0  using the access schemes: NodeProxy, TaskProxy etc. provide it.\
	internally the former use these as base classes.\
\
	client side: 	[
\f0\b \ul PatternProxy\ulnone ], [\ul EventPatternProxy\ulnone ]
\f1\b0 , [
\f0\b \ul TaskProxy\ulnone ]
\f1\b0 , [
\f0\b \ul PbindProxy\ulnone ], [\ul Pdict\ulnone ]\

\f1\b0 	server side: 	[
\f0\b \ul NodeProxy\ulnone ], [\ul RecNodeProxy\ulnone ]
\f1\b0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\'a5 in remote and local networks thanks to sc-architecture node proxies can be used on any server, \
	as long as it notifies the client and has a correctly initialized default node.\
	note that the client id should be set.\
	using the network classes, groups of participants can interfere into each other's composition\
	by sharing a common server, using SharedNodeProxy and exchanging code and comments \
	in a chat (see Client)\
	networking classes:	\
			experimental:\
			
\f0\b [\ul Public\ulnone ]
\f1\b0  distribute environments over networks.\
			
\f0\b [\ul public_proxy_space\ulnone ] 
\f1\b0 how to distribute a ProxySpace	\
			[
\f0\b \ul Client\ulnone ] 
\f1\b0 simplifies client-to-client networking. \
			\
			stable:\
			[
\f0\b \ul BroadcastServer
\f1\b0 \ulnone ]\
			
\f0\b [\ul OSCBundle\ulnone ]
\f1\b0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b \cf0 	
\f1\b0 \
\
					
\f0\b 			\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f1\b0 \cf0 tutorials:	
\f0\b 		[\ul proxyspace_examples\ulnone ]\
			[\ul jitlib_efficiency\ulnone ]\
			[\ul the_lazy_proxy\ulnone ]\
			[\ul jitlib_fading\ulnone ]\
			[\ul jitlib_asCompileString\ulnone ]\
			[\ul recursive_phrasing\ulnone ]\
			[\ul jitlib_networking\ulnone ]\
			\
			\

\f1\b0 live coding without jitlib:	
\f0\b [\ul basic_live_coding_techniques\ulnone ]\
\
\

\f1\b0 storage:			[\ul NodeMap\ulnone ] storing control setting\
			[\ul Order\ulnone ] 	ordered collection
\f0\b \

\f1\b0 \
\
\
\
unconnected other classes:\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b \cf0 	
\f1\b0 \

\f0\b UGens	\
	
\f1\b0 [\ul TChoose\ulnone ]
\f0\b \
	[
\f1\b0 \ul TWChoose\ulnone ]\
	\
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f3\fs18 \cf0 \
\
\
\

\f1\fs24 for suggestions / comments contact me\
Julian Rohrhuber,  rohrhuber@uni-hamburg.de\
\
Thanks a lot for all the feedback and ideas!
\f3\fs18 \
\
\

\f1\fs24 [1] see for example 
\f2\i \ul http://toplap.org\ulnone \

\f1\i0 [2] 
\f2\i dynamic programming
\f1\i0  would have been a good term, but it is in use for something else already\
	compare: \
		\ul http://en.wikipedia.org/wiki/Dynamic_programming\ulnone \
		\ul http://en.wikipedia.org/wiki/Dynamic_programming_language
\f3\fs18 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\
\
\
\
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b\fs24 \cf0 RECENT CHANGES:
\f1\b0 \
\
2007\
	february		added prime method for NodeProxy to allow setting sources quietly\
\
2006	\
	december		added quantize method\
			fixed addAction bug in Monitor, updated helpfile\
	august		EnvironmentRedirect (and so ProxySpace) now return the source when \
			using the setter envirPut: ~out = 8; returns 8 now.\
			NodeProxy  adapts inputs to appropriate rate.\
	\
	july		optimized graph layout in NodeProxy to minimize latency\
\
}