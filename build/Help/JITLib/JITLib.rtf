{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red163\green146\blue90;}
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b\fs36 \cf0 Just In Time Programming
\f1\b0\fs24 \
\

\f2\i\fs20 "Passenger to taxtidriver: take me to number 37. I'll give you the street name when we are there." \
						(an austrian math teacher's joke)
\f1\i0\fs24 \
\
\
Disclaimer: there is no time, really; punctuality is your personal responsibility though.
\f3\fs18 \

\f1\fs24 \
\
\

\f2\i Just in time programming
\f1\i0  (or: 
\f2\i live coding
\fs20 \super 1
\fs24 \nosupersub , interactive programming, realtime programming 
\fs20 \super 2
\f1\i0\fs24 \nosupersub ) is a paradigm that includes the programming activity itself in the program's operation. This means a program is not seen as a tool that is made first, then to be productive, but a dynamic construction process of description and conversation - writing code becomes a closer part of musical practice. SuperCollider, being a dynamic programming language, provides several possibilities for modification of a running program - this library attempts to extend, simplify and develop them, mainly by providing placeholders
\f2\i  (proxies)
\f1\i0  that can be modified and used in calcuations while playing. There is some specific networking classes which are made to simplify the distribution of  live coding activity.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
Jitlib consists of a number of 
\f2\i placeholders
\f1\i0  (server side and client side) and 
\f2\i schemes of access
\f1\i0 .\
These two aspects of space correspond to 
\f2\i inclusion
\f1\i0  and 
\f2\i reference,
\f1\i0  depend on their context - here the placeholders are like roles which have a certain behaviour and can be fulfilled by certain objects.\
It is useful to be aware of the three aspects of such a placeholder: a certain set of elements can be their source, they can be used in a certain set of contexts and they have a certain default source, if none is given.\
\
\
\
\'a5 One way or style of access is the 
\f2\i 'def' 
\f1\i0 classes (Pdef, Ndef etc.)\
	it binds a symbol to an object in a specific way:\
	Pdef(\\name) returns the proxy\
	Pdef(\\name, object) sets the source and returns the proxy.\
	the rest of the behaviour depends on its use.\
	\
	client side: 	
\f0\b [\ul Pdef\ulnone ] [\ul Pdefn\ulnone ], [\ul Tdef\ulnone ], [\ul Pbindef\ulnone ]
\f1\b0 \
	server side: 	[
\f0\b \ul Ndef\ulnone ]\
	
\f1\b0 \
\'a5 Another way, for server side NodeProxies, is an 
\f2\i environment
\f1\i0  that returns placeholders on demand:\
	ProxySpace.push\
	~out = \{ ...\}\
	helpfile: 		[
\f0\b \ul ProxySpace\ulnone ]\
	
\f1\b0 \
\'a5 there is also direct access 
\f2\i without
\f1\i0  using the access schemes: NodeProxy, TaskProxy etc. provide it.\
	internally the former use these as base classes.\
\
	client side: 	[
\f0\b \ul PatternProxy\ulnone ], [\ul EventPatternProxy\ulnone ]
\f1\b0 , [
\f0\b \ul TaskProxy\ulnone ]
\f1\b0 , [
\f0\b \ul PbindProxy\ulnone ], [\ul Pdict\ulnone ]\

\f1\b0 	server side: 	[
\f0\b \ul NodeProxy\ulnone ], [\ul RecNodeProxy\ulnone ]
\f1\b0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\'a5 in remote and local networks thanks to sc-architecture node proxies can be used on any server, \
	as long as it notifies the client and has a correctly initialized default node.\
	note that the client id should be set.\
	using the network classes, groups of participants can interfere into each other's composition\
	by sharing a common server, using SharedNodeProxy and exchanging code and comments \
	in a chat (see Client)\
	networking classes:		\
			[
\f0\b \ul Client\ulnone ] 
\f1\b0 simplifies client-to-client networking\
			BroadcastServer, Router (no help yet)\
			[\ul OSCBundle\ulnone ]\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b \cf0 	
\f1\b0 \
\
					
\f0\b 			\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f1\b0 \cf0 tutorials:	
\f0\b 		[\ul jitlib_efficiency\ulnone ][\ul the_lazy_proxy\ulnone ][\ul jitlib_fading\ulnone ][\ul jitlib_asCompileString\ulnone ]\
			[\ul recursive_phrasing\ulnone ][\ul jitlib_networking\ulnone ]\
\

\f1\b0 storage:			[\ul NodeMap\ulnone ] storing control setting\
			[\ul Order\ulnone ] 	ordered collection
\f0\b \

\f1\b0 \
\
\
\
unconnected other classes:\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f0\b \cf0 	
\f1\b0 \

\f0\b UGens	\
	
\f1\b0 [\ul TChoose\ulnone ]
\f0\b \
	[
\f1\b0 \ul TWChoose\ulnone ]\
	\
\
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural

\f3\fs18 \cf0 \
\
\
\

\f1\fs24 for suggestions / comments contact me\
Julian Rohrhuber,  rohrhuber@uni-hamburg.de
\f3\fs18 \
\
\

\f1\fs24 [1] see for example 
\f2\i http://toplap.org\

\f1\i0 [2] 
\f2\i dynamic programming
\f1\i0  would have been a good term, but it is in use for something else already\
	compare: \
		http://en.wikipedia.org/wiki/Dynamic_programming\
		http://en.wikipedia.org/wiki/Dynamic_programming_language
\f3\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx0\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\ql\qnatural
\cf0 \
\
\

\f1\fs24 RECENT CHANGES:\
\
	\
2004\
	october\
	fixed a bug in Tdef/Pdef where the clock wasn't passed in (.play) properly when it was set before.\
	NodeProxy is more efficient in building SynthDefs.\
	ProxySynthDef can be used independent of NodeProxy now\
	\
	september\
	refactored Pdef: new subclasses\
	improvements in NodeMap and NodeProxy\
	added role scheme (helpfiles to come)\
	\
	august\
	nodeProxy.mapn expands to multiple controls. (not by arrays of keys anymore!)\
	some small efficiency improvements\
	\
	july\
	Pdef/Tdef: pause and resume are now beat quantized\
	embedInStream is more efficient now, fadeTime is only applied for transitions\
	added recursive phrasing event\
	corrected Client bundle size calculation\
	NodeProxy remove/stop now differentiated, to allow ressource freeing in future (mainly cx players)\
	nodeMap_( ) fixed (unmaps synth now)\
	filter method for node proxy\
	\
	\
	\
	june\
	removed N / Debug class to reduce number of classes.\
	NodeProxy/ProxySpace:\
	wrapForNodeProxy improved (Bus works now, NodeProxy more tolerant)\
	simplified object wrapping\
	added monitor class, separated monitoing from BusPlug\
	channel expansion works with .play now (converting number of channels)\
	removed toggle method. \
	onClear, monitorGroup, vol slots are removed (monitorGroup, vol is in monitor)\
	node order in multi object node proxy works more efficiently\
	multiple put: a[2..5] = \{ ... \}\
	Pdef:\
	added fadeTime\
	Pdefn default is 1.0 now, which is safer for use in time patterns.\
	avoid occasional duplicate notes when changing pattern\
	Tdef is more error proof.\
	ProxySpace has a parent. the proto slot is used to store the tempo proxy.\
	\
	bugfixes:\
	SynthDef-hasGateControl fixed\
	InBus static float index works now\
	bugfix in Order-detect\
	fix unset/unmap bug\
	supplementNodeMap also works for non functions.\
	\
	\
	may\ul \
	\ulnone loading large proxyspaces now works - no late messages anymore\
	fixed bug in NodeProxy.clear when using patterns\
	fixed group order\
	added crossfade support for Patterns (EventStreams)\
	added crossfaded input offset (using e.g. .ar(1, offset))\
	removed Channel ugen, added XIn Ugens\
	lineAt, xlineAt messages work now\
	fixed the read example in [jitlib_efficiency]\
	nodeProxy.send now sends all if no index is given\
	refactoring, readability improved.\
	\
	april\
	fixed bug on ProxySpace-reduce that caused infinite recursion in some cases\
	fixed bug in BinaryOpPlug (account for function.rate returning \\stream)\
	\
	new version of Pdef/Pdefn/Tdef\
	\
	experimental: \
	added .storeOn, .document methods for ProxySpace. see [jitlib_asCompileString] \
	\
	\
	march\
	fixed Pattern support for NodeProxy/ProxySpace due to change in Event implementation\
	fixed Prefn\
	removed Penvir, Sfin etc, Ensemble etc. (removed classes can be found on sc-swiki)\
	simplifications\
	\
	feb\
	added garbage collector to ProxySpace\
	fixed unmap\
	control rate proxies do not wrap channels anymore.\
	\
	jan \ul \
	\ulnone Pref / Prefn are tested, update properly. I'm thinking of merging them with Pdef.\
	fixed wakeUp bug in NodeProxy.\
	fixed bug in load when no server is present\
	\
	embed control proxies in streams as bus index, allow multichannel mapping in patterns\
	added possibility to use \\offset key in event streams to have offset index in multichannel proxy\
	fixed bug in lazy init\
	\
2003\
	\
	nov\ul \
	\ulnone Pdef, Tdef work now, also with NodeProxy.\
	NodeProxy-releaseAndFree is replaced by .end.\
	\
	oct\
	symbol input is assumed to represent a synthdef that has a gate and frees.\
	functions and synthdefs are searched for their inner envelopes and the appropriate\
	method of freeing / releasing is chosen accordingly.\
	\
	earlier:\
	input channels now wrap. so any number of channels can be set to any proxy.\
	\
	ar and kr take a second argument for the channel offset within the proxy\
	checked all helpfiles\
	\
	put now has a different arg order! a.put(0, obj) or a[0] = obj\
	prependargs were removed for now.\
	lag can be set by name a.lag(\\freq, 1)\
	a shortcut was added to efficiently read from another proxy: a.read(b) or a.read([b, c])\
\
	added granular / xtexture functionality: gspawner / spawner (experimental, might change)\
\
\
	a.play now does not create multiple synths if evaluated repeatedly (unless multi: true)\
	lazy init works now.\
	\
	bin/unops work fully now again like any math op.\
\
\
\
\
	\
TODO:	\
		\
\
	allow save synthdefs\
	improve interface to crucial lib\
	finish PlayerSpace\

\f3\fs18 \
\
	
\f1\fs24 _____________________________________\

\f3\fs18 \
\
}