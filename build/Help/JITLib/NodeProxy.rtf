{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 NodeProxy\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf0 superclass: AbstractFunction\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs26 \cf0 Objects that reference nodes on a server which can be replaced,\
mapped and patched. Any unary or binary operator that can be used\
with UGens can be applied.
\f1\fs18 \
\
\

\f2\fs26 \
	
\f0\b NodeProxy.new(server)\
	NodeProxy.audio(server, numChannels)\
	NodeProxy.control(server, numChannels)\
\
___________________________________________________\
\
	source_(anObject)\
		
\f2\b0 play a new synth through me, release old one.\
		anObject can be a Function, an Instr, any valid UGen input\
		
\f0\b \
	add(anObject)\
		
\f2\b0 play a new synth, add it to the present ones\
		anObject can be a Function, an Instr, any valid UGen input
\f0\b \
	\
	send(argList)\
		
\f2\b0 send a new synth without releasing the old one.\
		the argument list is applied to the synth only.
\f0\b \
	\
	setObj(anObject, sendFlag, replaceFlag, add, completionFunc, latency)\
		
\f2\b0 set the source:\
			sendFlag: send it or not -  default:false\
			replaceFlag: replace current synth or not - default:true\
			add: add the new synthDef to the present ones - default:false\
			completionFunc: is evaluated as soon as synth is running\
			latency: 	nil: wait for '/done' message (doesn't work always)\
					a number is the time to wait for the loading.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	\
	free\
		
\f2\b0 free all my running synths and the group
\f0\b \
	\
	release\
		
\f2\b0 fade out my running synths
\f0\b \
	\
	set(key, val, ...)\
		
\f2\b0 I behave like my nodeMap: see [NodeMap]\
		set, setn, map, unset, unmap\
	\
	
\f0\b run(flag)
\f2\b0 \
		pause/unpause all synths in the group
\f0\b \
	\
	play(index, numChannels)\
		
\f2\b0 play output on specified bus index (default: public busses)
\f0\b \
	\
	ar(numChannels)\
	kr(numChannels)\
	\
		
\f2\b0 return a link to my output, which is limited by [NumChannels]\
		
\f0\b \
	record(path, headerFormat, sampleFormat)\
		
\f2\b0 record output to file (returns a RecNodeProxy)\
		
\f0\b \
	fadeTime_(time)\
		
\f2\b0 set the attack/release time\
	\
	
\f0\b clock_(aClock)
\f2\b0 \
		use a clock for scheduling beat accurate\
_________________________________________________________	\
		
\f1\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //examples\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 s.boot;\
\
a = \cf3 NodeProxy.audio\cf0 (s, 2);\
x = a.play; \cf2 //play to hardware output, return a group with synths\
\cf0 a.source = \{ \cf3 SinOsc\cf0 .ar([350, 390], 0, 0.1) \};\
a.source = \{ \cf3 SinOsc\cf0 .ar([390, 290], 0, 0.1) \};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //feedback\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 a.source = \{ \cf3 SinOsc\cf0 .ar(a.ar*2000*\cf3 LFNoise1\cf0 .kr(1, 1, 1) + 200, 0, 0.1) \};\
\
a.fadeTime = 2.0;\
a.source = \{ \cf3 arg\cf0  f=400; \cf3 SinOsc\cf0 .ar(f*[1,1.2], 0, 0.1) \};\
a.set(\cf4 \\f\cf0 , 700);\
a.source = \{ \cf3 arg\cf0  f=400; \cf3 LPF\cf0 .ar(\cf3 Pulse\cf0 .ar(f*[1,1.2], 0.5, 0.1), f*2) \};\
\
\
c = \cf3 NodeProxy.control\cf0 (s,1);\
c.source = \{ \cf3 SinOsc\cf0 .kr(10, 0, 100, 300) \};\
a.map(\cf4 \\f\cf0 , c);\
a.source = \{ \cf3 arg\cf0  f=400; \cf3 LPF\cf0 .ar(\cf3 Pulse\cf0 .ar(f*[0.4,1], 0.2, 0.1), f*3) \};\
c.source = \{ \cf3 Line\cf0 .kr(300, 500, 10) + \cf3 SinOsc\cf0 .kr(20, 0, 10) \};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
//stop synthesis, then wake up proxies:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
x = a.play;\
a.release;\
a.free;\
x.free;\
\
x = a.play;\
a.add(\{ \cf3 SinOsc\cf0 .ar([350, 390]*1.25, 0, 0.1) \});\
 \
 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //beat accurate playing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 a.clock = \cf3 QuantClock\cf0 (2.0); \cf2 //round to every 2.0 seconds\
\cf0 a.source = \{ \cf3 Ringz\cf0 .ar(\cf3 Impulse\cf0 .ar(0.5, 0, 0.3), 3000, 0.01) \};\
a.add(\{ \cf3 Ringz\cf0 .ar(\cf3 Impulse\cf0 .ar([0.5, 1], 0, 0.3), 1000, 0.01) \});\
a.add(\{ \cf3 Ringz\cf0 .ar(\cf3 Impulse\cf0 .ar([3, 5]/2, 0, 0.3), 8000, 0.01) \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
_\cf0 _\cf3 __\cf0 _\cf3 ___\cf0 __\cf3 __\cf0 _____\cf3 ___\cf0 __\cf3 __\cf0 ___\cf3 _\cf0 _\
\
presently, NodeProxy can be used implicitly using the following shortcut:\
(just a suggestion)\
\
\{ \cf3 SinOsc\cf0 .ar([350, 390], 0, 0.1) \}.play(\\out);\
\\out.play;\
\
\{ \cf3 SinOsc\cf0 .ar([350, 390]+20, 0, 0.1) \}.play(\\out);\
\
\
}