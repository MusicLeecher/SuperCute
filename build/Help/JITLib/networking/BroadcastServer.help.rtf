{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 BroadcastServer
\f1\b0\fs18 	
\f0\b\fs24 dispatches osc messages to multiple servers
\f2\b0 \
\
\
superclass: Server\
\
\

\f0\b 	*new(name, homeAddr, options, clientID)
\f2\b0 \
		create a new instance. name, homeAddr, options and clientID are used for the\
		home server's properties. The other servers are represented by their addresses (allAddr)\
		in multiclient situation, 
\f3\i\b clientID
\f2\i0\b0  needs to be different with each participant!\
	\
	
\f0\b *for(homeServer, allAddr)
\f2\b0 \
		like *new, but directly pass in an already existing server.\
		\
\
		\
	
\f0\b allAddr_(list of net addr)
\f2\b0 \
		set the addresses the server is supposed to broadcast to\
	\
	
\f0\b homeServer
\f2\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 		return the home server, which is a server that is used for id allocation and all normal\
		functions of a individual server model.\
	\
	
\f0\b name
\f2\b0 \
		returns the name of the server. The name is always the homeServer's name extended by "broadcast"\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	
\f0\b at(index)
\f2\b0 \
		returns the nth web address.\
		\
	
\f0\b wrapAt(index)
\f2\b0 \
		returns the nth web address, if index too large, starts from beginning.\
		\
	
\f0\b do(function)
\f2\b0 \
		iterate over all addresses\
		\
	\
	
\f0\b autoConfigure
\f2\b0 \
		use rendezvous (only os x) to search for other sc servers on the local network\
		and configure the broadcast to send to all of them.
\f1\fs18 \
		\
	\
	\
	\
\cf2 	\
\cf3 // example\cf2 \
	\
	\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 x = \cf4 NetAddr\cf2 (\cf5 "127.0.0.1"\cf2 , 57201);\
y = \cf4 NetAddr\cf2 (\cf5 "127.0.0.1"\cf2 , 57202);\
\
a = \cf4 BroadcastServer\cf2 (\cf6 \\broad1\cf2 , x, \cf4 nil\cf2 , 0).allAddr_( [x, y]);\
b = \cf4 BroadcastServer\cf2 (\cf6 \\broad2\cf2 , y, \cf4 nil\cf2 , 1).allAddr_( [x, y]);\
\
a.boot;\
b.boot;\
a.makeWindow;\
b.makeWindow;\
)\
\
a.sendMsg(\cf5 "/s_new"\cf2 , \cf5 "default"\cf2 , 1980); \cf3 // create 2 synths, one on each server\cf2 \
b.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf5 "freq"\cf2 , 300); \cf3 // set both their freq control\cf2 \
a.homeServer.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf5 "freq"\cf2 , 550); \cf3 // set only the home server's synth control\cf2 \
\
\cf3 // set them to different freqs, from a\cf2 \
(\
a.do \{ \cf4 arg\cf2  addr;\
	addr.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf5 "freq"\cf2 , 450 + 100.rand2);\
\}\
)\
\
\
\cf3 // set them to different freqs, from b\cf2 \
(\
b.do \{ \cf4 arg\cf2  addr;\
	addr.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf5 "freq"\cf2 , 450 + 100.rand2);\
\}\
)\
\
b.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf5 "gate"\cf2 , 0.0); \cf3 // release all, from b\cf2 \
\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
}