{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 BroadcastServer
\f1\b0\fs18 	
\f0\b\fs24 dispatches osc messages to multiple servers
\f2\b0 \
\
\
superclass: Object (adaptor class)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	*new(name, homeAddr, options, clientID)
\f2\b0 \
		create a new instance. name, homeAddr, options and clientID are used for the\
		home server's properties. The other servers are represented by their addresses (allAddr)\
		in multiclient situation, 
\f3\i\b clientID
\f2\i0\b0  needs to be different with each participant!\
	\
	
\f0\b *for(homeServer, allAddr)
\f2\b0 \
		like *new, but directly pass in an already existing server.\
		\
\
		\
	
\f0\b addresses_(list of net addr)
\f2\b0 \
		set the addresses the server is supposed to broadcast to.\
		This usually should include the home address.\
	\
	
\f0\b homeServer
\f2\b0 \
		return the home server, which is a server that is used for id allocation and all normal\
		functions of a individual server model.\
	\
	
\f0\b name
\f2\b0 \
		returns the name of the server. The name is always the homeServer's name extended by "broadcast"\
	\
	
\f0\b at(index)
\f2\b0 \
		returns the nth web address.\
		\
	
\f0\b wrapAt(index)
\f2\b0 \
		returns the nth web address, if index too large, starts from beginning.\
		\
	
\f0\b do(function)
\f2\b0 \
		iterate over all addresses\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 		\
	\
	\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // example\cf0 \
	\
	\
(\
x = \cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57201);\
y = \cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57202);\
\
a = \cf3 BroadcastServer\cf0 (\cf5 \\broad1\cf0 , x, \cf3 nil\cf0 , 0).addresses_( [x, y]);\
b = \cf3 BroadcastServer\cf0 (\cf5 \\broad2\cf0 , y, \cf3 nil\cf0 , 1).addresses_( [x, y]);\
\
a.boot;\
b.boot;\
a.makeWindow;\
b.makeWindow;\
)\
\
\
a.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "default"\cf0 , 1980); \cf2 // create 2 synths, one on each server\cf0 \
b.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf4 "freq"\cf0 , 300); \cf2 // set both their freq control\cf0 \
a.homeServer.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf4 "freq"\cf0 , 550); \cf2 // set only the home server's synth control\cf0 \
\
\cf2 // set them to different freqs, from a\cf0 \
(\
a.do \{ \cf3 arg\cf0  addr;\
	addr.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf4 "freq"\cf0 , 450 + 100.rand2);\
\}\
)\
\
\
\cf2 // set them to different freqs, from b\cf0 \
(\
b.do \{ \cf3 arg\cf0  addr;\
	addr.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf4 "freq"\cf0 , 450 + 100.rand2);\
\}\
)\
\
b.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf4 "gate"\cf0 , 0.0); \cf2 // release all, from b\cf0 \
\
\
\
\
\
}