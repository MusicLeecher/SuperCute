{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PublicProxySpace
\f1\b0\fs18 				
\f0\b\fs24 distributed system
\f1\b0\fs18 \

\f0\b\fs24 \
\
experimental.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 superclass: ProxySpace\
\
PublicProxySpace acts like a normal ProxySpace, but can be connected to other proxy spaces on\
the network (or, of course on the local computer). Changes of proxies key that are in the list of sendingKeys\
are made public within the channel. These changes affect all shared proxy spaces that hve this key in the list \
of listeningKeys. The behaviour can be dynamically changed. \
\
The change is transmitted by code and is compiled on each computer. This is very flexible and leightweight but it also means that one has to be careful not to do harm to other systems. Code is only sent if it interprets without error on the sender side. Timing is still not yet synchronized, although it works pretty well for not too costly code.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b \cf0 class methods:
\f2\i0\b0 \
\
	
\f0\b *new(server, name
\f2\b0 , clock) \
						create a new instance. a name should be given.\
	\
	
\f0\b *all
\f2\b0 					a dictionary of all available spaces. spaces with the same name send to and 						receive from each other (alternative: provide a sendToName)\
	\
	
\f0\b *startListen(addr)
\f2\b0 		start to receive messages from the network\
						addr:  whom to listen to. 
\f0\b nil
\f2\b0 : listen to all. (default)\
						\
	
\f0\b *stopListen
\f2\b0 			stop listening\
\
\
\

\f3\i\b instance methods:
\f2\i0\b0 \
\
	\
	
\f0\b addresses_(list)
\f2\b0 		a list of addresses (NetAddr) to which to send to.\
						this list can contain also the sender's address, which it then sends to,\
						but does not get evaluated.\
							\
	
\f0\b sendingKeys_(list)
\f2\b0 		keys from which to send (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	
\f0\b listeningKeys_(list)
\f2\b0 		keys at which to receive (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	\
	
\f0\b put(key, obj)
\f2\b0 			put an object in the proxyspace (see superclass).\
						if this key is sending, send object to all. object must be reproducible\
						as a 
\f0\b compileString!
\f2\b0 . (closed functions, patterns with no open functions)\
	\
	
\f0\b at(key)				
\f2\b0 returns an object from the proxyspace at that key (see superclass).\
	\
	\
	
\f0\b join(channel, nickname)
\f2\b0 	join a channel with a nickname\
	\
	
\f0\b leave
\f2\b0 				leave the channel\
	\
	
\f0\b public_(bool)	
\f2\b0 		if public is set to 
\f0\b false
\f2\b0 , the public proxy space acts like a normal proxy space\
	\
	
\f0\b logSelf_(bool)			
\f2\b0 if logSelf is set to true, my own changes are passed into\
						the action function (e.g. the log window)\
	\
	
\f0\b logAll_(bool)
\f2\b0 			if logAll is true, I can see all messages that are coming in, \
						even if they do not effect me (listeningKeys != \\all). \
						This is only allowed if sendingKeys are set to \\all\
			
\f3\i\b \
	
\f0\i0 channel_(name)
\f2\b0 		set / get channel name
\f3\i\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i0\b0 \cf0 \
	
\f0\b nickname_(string)
\f2\b0 		set / get nickname\
	\
	
\f0\b action_(func
\f2\b0 )			action to be evaluated when receiving a message (optional)						function args: 
\f4\i proxyspace, nickname,  key, receivedString
\f2\i0 \
						
\f0\b note
\f2\b0 : if you want to call the os from this action (e.g. for GUI), you need to\
						use defer \{ \}\
	\
	
\f0\b makeLogWindow
\f2\b0 		create a log window.	\
	\
	
\f0\b lurk / boss / merge
\f2\b0 		change behaviour diametrically (just try it out)\
			\
\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // example\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
\cf3 var\cf0  addresses;\
\
\cf3 PublicProxySpace\cf0 .startListen;\
addresses = [\cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57120)];\
\
a = \cf3 PublicProxySpace\cf0 (s);\
b = \cf3 PublicProxySpace\cf0 (s);\
b.addresses = addresses;\
a.addresses = addresses;\
\
a.join(\cf5 \\waitingroom\cf0 , \cf5 \\eve\cf0 );\
b.join(\cf5 \\waitingroom\cf0 , \cf5 \\ade\cf0 );\
a.sendingKeys = \cf5 \\all\cf0 ;\
b.sendingKeys = \cf5 \\all\cf0 ;\
b.listeningKeys = \cf5 \\all\cf0 ;\
a.listeningKeys = \cf5 \\all\cf0 ;\
)\
\
(\
a.makeLogWindow; \cf2 // see what is going on\cf0 \
b.makeLogWindow;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // modify space\cf0 \
\
s.boot; \cf2 // boot server\cf0 \
\
\
a[\cf5 \\out\cf0 ].play; \cf2 // play here \cf0 \
a[\cf5 \\out\cf0 ] = \{ \cf3 PinkNoise\cf0 .ar(0.1 ! 2) \}; \cf2 // set here\cf0 \
b[\cf5 \\out\cf0 ].play; \cf2 // play here too\cf0 \
b[\cf5 \\out\cf0 ] = \{\'ca\cf3 SinOsc\cf0 .ar(rrand(300, 400)) ! 2 * 0.1 \}; \cf2 // two different tones\cf0 \
b[\cf5 \\out\cf0 ] = \{\'ca\cf3 SinOsc\cf0 .ar(300) ! 2 * 0.1 \}; \cf2 // same tone\cf0 \
a.public = \cf3 false\cf0 ; \cf2 // be private\cf0 \
b[\cf5 \\out\cf0 ] = \{ \cf3 PinkNoise\cf0 .ar(0.1 ! 2) \}; \
a.public = \cf3 true\cf0 ;\
\
\cf2 // you can also enter the space:\cf0 \
a.push;\
	~out.free;\
a.pop; \cf2 // exit\cf0 \
\
\
\
\cf2 // now you can type into both of them, just as in examples in ProxySpace.help:\cf0 \
(\
\cf3 var\cf0  str;\
str = \cf4 "\\n ~out = \{ LFNoise2.ar(3000 + exprand(1.0, 2000), 0.1) \}; "\cf0 ; \cf2 // example string\cf0 \
\cf3 EnvirDocument\cf0 (a, "a", str);\
\cf3 EnvirDocument\cf0 (b, "b", str);\
)\
\
\
\
\
}