{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PublicProxySpace
\f1\b0\fs18 				
\f0\b\fs24 distributed system
\f1\b0\fs18 \

\f0\b\fs24 \
\
experimental.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 superclass: ProxySpace\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b \cf0 class methods:
\f2\i0\b0 \
\
	
\f0\b *new(server, name, clock) 
\f2\b0 \
						create a new instance. a name should be given.\
	\
	
\f0\b *all
\f2\b0 					a dictionary of all available spaces. spaces with the same name send to and 						recieve from each other\
	\
	\
	
\f0\b *startListen(addr)
\f2\b0 		start to recieve messages from the network\
						addr:  whom to listen to. 
\f0\b nil
\f2\b0 : listen to all. (default)\
						\
	
\f0\b *stopListen
\f2\b0 			stop listening\
\
\
\

\f3\i\b instance methods:
\f2\i0\b0 \
\
\
	
\f0\b addressList_(list)
\f2\b0 		a list of addresses (NetAddr) to which to send to.	\
	
\f0\b sendingKeys_(list)
\f2\b0 		keys from which to send (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	
\f0\b listeningKeys_(list)
\f2\b0 		keys at which to receive (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	
\f0\b put(key, obj)
\f2\b0 			put an object in the proxyspace (see superclass).\
						if this key is sending, send object to all. object must be reproduceable\
						as a 
\f0\b compileString!
\f2\b0 . (closed functions, patterns with no open functions)\
	\
	
\f0\b at(key)				
\f2\b0 get an object from the proxyspace (see superclass).\
	\
	\
	\
\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // example\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
a = \cf4 PublicProxySpace\cf0 .new(s, \cf5 \\p1\cf0 );\
b = \cf4 PublicProxySpace\cf0 .new(s, \cf5 \\p1\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 PublicProxySpace\cf0 .startListen;\
\cf4 PublicProxySpace\cf0 .resp;\
a.addressList = [\cf4 NetAddr\cf0 (\cf6 "127.0.0.1"\cf0 , 57120)];\
b.addressList = [\cf4 NetAddr\cf0 (\cf6 "127.0.0.1"\cf0 , 57120)];\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // now you can type into both of them:\cf3 \
(\
a.sendingKeys = \cf7 \\all\cf3 ;\
b.sendingKeys = \cf7 \\all\cf3 ;\
a.listeningKeys = \cf7 \\all\cf3 ;\
b.listeningKeys = \cf7 \\all\cf3 ;\
\
\cf8 EnvirDocument\cf3 (a);\
\cf8 EnvirDocument\cf3 (b);\
)\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // or add objects from here\
\cf3 \
a[\cf7 \\out\cf3 ].play; \cf2 // play here \cf3 \
b[\cf7 \\out\cf3 ] = #\{ \cf8 PinkNoise\cf3 .ar(0.1 ! 2) \}; \cf2 // add here\cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
}