{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 PublicProxySpace
\f1\b0\fs18 				
\f0\b\fs24 distributed system
\f1\b0\fs18 \

\f0\b\fs24 \
\
experimental.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf2 superclass: ProxySpace\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b \cf2 class methods:
\f2\i0\b0 \
\
	
\f0\b *new(server, name
\f2\b0 , clock) \
						create a new instance. a name should be given.\
	\
	
\f0\b *all
\f2\b0 					a dictionary of all available spaces. spaces with the same name send to and 						receive from each other (alternative: provide a sendToName)\
	\
	
\f0\b *startListen(addr)
\f2\b0 		start to receive messages from the network\
						addr:  whom to listen to. 
\f0\b nil
\f2\b0 : listen to all. (default)\
						\
	
\f0\b *stopListen
\f2\b0 			stop listening\
\
\
\

\f3\i\b instance methods:
\f2\i0\b0 \
\
\
	
\f0\b addressList_(list)
\f2\b0 		a list of addresses (NetAddr) to which to send to.	\
	
\f0\b sendingKeys_(list)
\f2\b0 		keys from which to send (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	
\f0\b listeningKeys_(list)
\f2\b0 		keys at which to receive (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	\
	
\f0\b put(key, obj)
\f2\b0 			put an object in the proxyspace (see superclass).\
						if this key is sending, send object to all. object must be reproducible\
						as a 
\f0\b compileString!
\f2\b0 . (closed functions, patterns with no open functions)\
	\
	
\f0\b at(key)				
\f2\b0 returns an object from the proxyspace at that key (see superclass).\
	\
	
\f0\b public_(bool)	
\f2\b0 		if public is set to 
\f0\b false
\f2\b0 , the public proxy space acts like a normal proxy space\
	\
	\
	\

\f3\i\b optional:\
\
	
\f0\i0 destination_(name)
\f2\b0 		name of proxyspace to which it sends (default: own name)\
						
\f0\b note:
\f2\b0  when on multiple clients, this is not necessarily necessary.\
						on one client, there is only one proxyspace per name.
\f3\i\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i0\b0 \cf2 \
	
\f0\b nickname_(string)
\f2\b0 		sender nickname (default: anybody)\
	\
	
\f0\b action_(func
\f2\b0 )			action to be evaluated when receiving a message (optional)						function args: 
\f4\i proxyspace, nickname,  key, receivedString
\f2\i0 \
						
\f0\b note
\f2\b0 : if you want to call the os from this action (e.g. for GUI), you need to\
						use defer \{ \}\
\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf3 // example\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
(\
\
\cf4 PublicProxySpace\cf2 .startListen;\
\
a = \cf4 PublicProxySpace\cf2 (s, \cf5 \\harry\cf2 );\
b = \cf4 PublicProxySpace\cf2 (s, \cf5 \\eliza\cf2 );\
a.destination = \cf5 \\eliza\cf2 ;\
b.destination = \cf5 \\harry\cf2 ;\
a.sendingKeys = \cf5 \\all\cf2 ;\
b.sendingKeys = \cf5 \\all\cf2 ;\
a.listeningKeys = \cf5 \\all\cf2 ;\
b.listeningKeys = \cf5 \\all\cf2 ;\
\
a.addressList = [\cf4 NetAddr\cf2 (\cf6 "127.0.0.1"\cf2 , 57120)];\
b.addressList = [\cf4 NetAddr\cf2 (\cf6 "127.0.0.1"\cf2 , 57120)];\
\
)\
\
a.makeLogWindow; \cf3 // see what is going on in a\cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf3 // or add objects from here\cf2 \
\
s.boot;\
a[\cf5 \\out\cf2 ].play; \cf3 // play here \cf2 \
b[\cf5 \\out\cf2 ] = #\{ \cf4 PinkNoise\cf2 .ar(0.1 ! 2) \}; \cf3 // set here\cf2 \
b[\cf5 \\out\cf2 ].play; \cf3 // play here too\cf2 \
b[\cf5 \\out\cf2 ] = #\{\'ca\cf4 SinOsc\cf2 .ar(rrand(300, 400)) ! 2 * 0.1 \}; \cf3 // two different tones\cf2 \
b[\cf5 \\out\cf2 ] = #\{\'ca\cf4 SinOsc\cf2 .ar(300) ! 2 * 0.1 \}; \cf3 // same tone\cf2 \
a.public = \cf4 false\cf2 ; \cf3 // be private\cf2 \
b[\cf5 \\out\cf2 ] = #\{ \cf4 PinkNoise\cf2 .ar(0.1 ! 2) \}; \
a.public = \cf4 true\cf2 ;\
\
\
a.push;\
\
~out.free;\
\
a.pop;\
\
\
\cf3 // now you can type into both of them, just as in examples in ProxySpace.help:\cf2 \
(\
\cf4 var\cf2  str;\
str = \cf6 "\\n ~out = #\{ LFNoise2.ar(3000 + 2000.0.exprand, 0.1) \}; "\cf2 ; \cf3 // example string\cf2 \
\cf4 EnvirDocument\cf2 (a, a.name.asString, str);\
\cf4 EnvirDocument\cf2 (b, b.name.asString, str);\
)\
\
\
linienzugbeeinflussung\
}