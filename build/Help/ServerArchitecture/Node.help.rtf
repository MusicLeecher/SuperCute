{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Node					
\fs24 abstract super class of Synth and Group\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
superclass: Object\
\
See 
\f0\b Server-Architecture 
\f1\b0 for the definition of a Node.\
\
\
This class is the abstract super class of Synth and Group.  Node objects are not made explicitly, but Synth and Group are subclasses, and inherit their behavior from Node.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b\fs28 \cf0 \ul Node Commands
\f1\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\
	See also the 
\f0\b Node Commands
\f1\b0  section in [
\f0\b Server-Command-Reference] .\

\f1\b0 	\
	\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 		
\f0\b free\
		
\f1\b0 	"/n_free"\
			stop this node, remove from its parent group\
			Once a Node has been freed, you cannot restart it.\
			\
		
\f0\b run(boolean)\
		
\f1\b0 	"/n_run"\
			pause or resume processing for this node.  See examples in Synth.\
		\
		
\f0\b set(controlNameOrIndex, floatValue ... moreArgs)\
		
\f1\b0 	"/n_set"\
			set the input to the 
\f2\i floatValue
\f1\i0 . \
			more 
\f2\i controlNames
\f1\i0  and 
\f2\i floatValues
\f1\i0  may be sent with this message:\
				controlNameOrIndex2,floatValue2,\
				controlNameOrIndex3,floatValue3,\
				...\
				controlNameOrIndexN, floatValueN\
				\
			see an example in Synth. \
			\
		
\f0\b setn(controlNameOrIndex,values ... moreArgs)\
		
\f1\b0 	"/n_setn"\
			set multiple inputs to multiple values in one command.\
			starting at  
\f2\i controlNameOrIndex
\f1\i0 , each input is set with\
				each value in the array 
\f2\i values
\f1\i0 \
			moreArgs may be sent with this message:\
				[controlNameOrIndex2,values2 ],\
				[controlName3, values3],\
				...\
				[controlNameN, valuesN]\
		
\f0\b \
		fill(controlNameOrIndex,numControls,value)
\f1\b0 \
			"/n_fill"\
			set multiple inputs to the same value.\
			starting at 
\f2\i controlNameOrIndex,
\f1\i0  for 
\f2\i numControls
\f1\i0  inputs.\
			\
		
\f0\b map(controlNameOrIndex,busIndex ... moreArgs)
\f1\b0 \
			"/n_map"\
			cause the input to begin reading from a bus. \
			this will be cancelled by any subsequent (set, setn, fill) commands\
			moreArgs may be sent with this message:\
				controlNameOrIndex2,busIndex2,\
				controlNameOrIndex3,busIndex3,\
				...\
				controlNameOrIndexN, busIndexN\
		
\f0\b release
\f1\b0 \
		
\f0\b\fs28 \ul 	
\f1\b0\fs24 \ulnone causes synths to set the gate control to zero and release\
			if they have an envelope defined.\
			\
		
\f0\b\fs28 \ul \
changing the order of execution\
\ulnone 	
\fs24 \
		moveAfter(aNode)\
		\
		moveBefore(aNode)\
		\
		moveToHead(aGroup)\
	
\f1\b0 		will use aGroup.asGroup:\
				if the target is \
				a group\
					move to the head of that group\
				a synth\
					move to the head of that synth's group\
	\
	
\f0\b 	moveToTail(aGroup)\
	
\f1\b0 		will use aGroup.asGroup:\
				if the target is \
				a group\
					move to the tail of that group\
				a synth\
					move to the tail of that synth's group\
	\
	
\f0\b \
		moveNodeToHead(aNode)\
	
\f1\b0 		you can also get the group to do the move\
	
\f0\b 	\
		\
		moveNodeToTail(aNode)\
	
\f1\b0 		you can also get the group to do the move\
	
\f3\fs18 \
	
\f1\fs24 \
	
\f3\fs18 \
}