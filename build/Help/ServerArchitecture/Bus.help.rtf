{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Bus
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 The clientside representation of an audio or control bus on a server.  Encapsulates all the OSC messages a Bus can receive.  Manages allocation and deallocation of bus indices so that you don't need to worry about conflicts. The number of control busses, audio busses, and input and output busses is fixed and cannot be changed after the server has been booted. For more information see 
\f0\b ClientVsServer
\f2\b0  and 
\f0\b Server-Architecture
\f2\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Note that using the 
\f0\b Bus
\f2\b0  class to allocate a multichannel bus simply reserves a series of adjacent bus indices with the 
\f0\b Server
\f2\b0  object's bus allocators. abus.index simply returns the first of those indices. When using a Bus with an 
\f0\b In
\f2\b0  or 
\f0\b Out
\f2\b0  ugen there is nothing to stop you from reading to or writing from a larger range, or from hardcoding to a bus that has been allocated. You are responsible for making sure that the number of channels match and that there are no conflicts.
\f1\fs18 \

\f2\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Class Methods\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \ulnone \
Bus.control(server, numChannels);\

\f2\b0 	Allocate a control bus on the server.  \
	Defaults: default server, 1 channel.\
	\

\f0\b Bus.audio(server, numChannels);\

\f2\b0 	Allocate an audio bus on the server. \
	Defaults: default server, 1 channel.\
	\

\f0\b Bus.alloc(rate, server, numChannels);\

\f2\b0 	Allocate a bus of either rate as specified by the symbols: \
		\\control or \\audio\
		\

\f0\b Bus.new(rate, index, numChannels);\

\f2\b0 	This method does not allocate a bus index, but assumes that you\
	already have allocated the appropriate bus index and can supply it\
	yourself.
\f1\fs18 \
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul \
Instance Methods
\fs24 \ulnone \
\
index\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 	Get the Bus' index.\

\f0\b \
value_(aFloat)\

\f2\b0 	Set all channels to this float value.\
	\

\f0\b set(...values)\

\f2\b0 	A list of values for each channel of the bus.  The list of values\
	supplied should not be greater than the number of channels.\
	\

\f0\b free\

\f2\b0 	Return the bus' indices to the server's bus allocator so they can be reallocated.\
	\

\f0\b rate\

\f2\b0 	Get the Bus' rate. This is a symbol, either \\control or \\audio.\
	\

\f0\b numChannels\

\f2\b0 	Get the Bus' number of channels.\
\

\f0\b server\

\f2\b0 	Get the Bus' server object.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 s = \cf2 Server\cf0 .local;\
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	
\f1\fs18 \
(\cf3 \
// something to play with\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "help-Bus"\cf0 , \{ \cf2 arg\cf0  out=0,ffreq=100;\
	\cf2 var\cf0  x;\
	x = \cf2 RLPF\cf0 .ar(\cf2 LFPulse\cf0 .ar(\cf2 SinOsc\cf0 .kr(0.2, 0, 10, 21), [0,0.1], 0.1),\
			 ffreq, 0.1)\
			 .clip2(0.4);\
	\cf2 Out\cf0 .ar(out, x);\
\}).send(s);\
\
)\
\
x = \cf2 Synth\cf0 (\cf4 "help-Bus"\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // get a bus\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b = \cf2 Bus\cf0 .control(s);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // map the synth's second input (ffreq) to read\
// from the bus' output index\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 x.map(1,b.index);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // By setting the bus' value you send a /c_fill message\
// to each channel of the bus setting it to supplied float value\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b.value = 100;\
b.value = 1000;\
b.value = 30;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // Since this is a single channel bus this has the same effect\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b.set(300);\
b.numChannels.postln;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // multi-channel:  b.set(300,350);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
x.free;\
\
b.free; \cf3 // release it so it may be reallocated!\
\cf0 \
\
\
	\
}