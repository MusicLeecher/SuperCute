{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green115\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Group					
\fs24 client-side representation of a group node on the server
\fs36 	
\fs28 \

\fs24 superclass: Node
\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 A Group is the client-side representation of a group node on the server, which is a collection of other nodes organized as a linked list. The Nodes within a Group may be controlled together, and may be both Synths and other Groups. Groups are thus useful for controlling a number of nodes at once, and when used as targets can be very helpful in controlling order of execution. (See 
\f0\b Order-of-execution 
\f2\b0 for more details on this topic).\
\
For more on the crucial distinction between client objects and server nodes, see 
\f0\b ClientVsServer
\f2\b0 . For information on creating nodes without using objects, see 
\f0\b NodeMessaging
\f2\b0 .\
\

\f0\b N.B. 
\f2\b0 Group is a subclass of 
\f0\b Node
\f2\b0 , and thus many of its most useful and important methods are documented in the 
\f0\b Node
\f2\b0  help file. Please refer to it for more information.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b\fs28 \cf0 \ul \ulc0 RootNode and the default group\

\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 When a 
\f0\b Server
\f2\b0  is booted there is a top level group with an ID of zero that defines the root of the tree. This is represented by a subclass of Group: 
\f0\b RootNode
\f2\b0 . If the Server was booted from within SCLang (as opposed to from the command line) then a 
\f0\b default_group
\f2\b0  with an ID of 1 will be automatically created. This group is the default enclosing group for all Nodes, i.e. it's what you get if you don't specify. In general you should create new Nodes within the default group of a Server rather than in its RootNode. See 
\f0\b Server
\f2\b0 , 
\f0\b default_group
\f2\b0  and 
\f0\b RootNode 
\f2\b0 for more detail.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b\fs28 \cf0 \ul Bundling
\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Some of the methods below have two versions: a regular one which sends its corresponding message to the server immediately, and one which returns the message in an 
\f0\b Array
\f2\b0  so that it can be added to a bundle. It is also possible to capture the messages generated by the regular methods using Server's automated bundling capabilities. See 
\f0\b Server
\f2\b0  and 
\f0\b bundledCommands
\f2\b0  for more detail.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b\fs28 \cf0 \ul Creation with Immediate Instantiation on the Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural

\f1\b0\fs18 \cf0 \ulnone \

\f0\b\fs24 	*new(target, addAction)\
	\
		
\f2\b0 Create and return a Group.\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1700\fi-1700\ql\qnatural
\cf0 		
\f0\b target 
\f2\b0 - A target for this Group. If target is not a Group or 
\f0\b Synth
\f2\b0 , it will be converted as follows: If it is a 
\f0\b Server
\f2\b0 , it will be converted to the 
\f0\b default_group
\f2\b0  of that server. If it is nil, to the 
\f0\b default_group
\f2\b0  of the default 
\f0\b Server
\f2\b0 . 
\f0\b Note: 
\f2\b0 A Synth is not a valid target for 
\f1\fs18 \cf2 \\addToHead
\f2\fs24 \cf0  and 
\f1\fs18 \cf2 \\addToTail
\f2\fs24 \cf0 .\
		\
		
\f0\b addAction
\f2\b0  - one of the following Symbols:		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1700\fi-1700\ql\qnatural

\f1\fs18 \cf0 			\cf2 \\addToHead 	
\f2\fs24 \cf0 - (the default) add at the head of the group specified by 
\f0\b target
\f2\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural

\f1\fs18 \cf0 			\cf2 \\addToTail 	
\f2\fs24 \cf0 - add at the tail of the group specified by 
\f0\b target
\f2\b0 \

\f1\fs18 			\cf2 \\addAfter
\f2\fs24 \cf0  	- add immediately after 
\f0\b target 
\f2\b0 in its server's node order\

\f1\fs18 			\cf2 \\addBefore
\f2\fs24 \cf0  	- add immediately before 
\f0\b target 
\f2\b0 in its server's node order\
			
\f1\fs18 \cf2 \\addReplace
\f2\fs24 \cf0  	- replace 
\f0\b target
\f2\b0  and take its place in its server's node order\
		\
			\

\f1\fs18 		s.boot;\
		g = \cf3 Group\cf0 .new; \cf4 // add a Group at the head of the default Server's default group\cf0 \
		h = \cf3 Group\cf0 .new(g, \cf2 \\addAfter\cf0 );\
		s.queryAllNodes; \cf4 // note the Group within the default group (ID 1)\cf0 \
		g.free; h.free;
\f2\fs24 \
			\
The following convenience methods correspond to the add actions above:\

\f1\fs18 \

\f0\b\fs24 	*after(aNode)\
		\
		
\f2\b0 Create and return a Group and add it immediately after 
\f0\b aNode
\f2\b0 . \

\f0\b \
	*before(aNode)\
		\
		
\f2\b0 Create and return a Group and add it immediately before 
\f0\b aNode
\f2\b0 .\

\f0\b \

\f1\b0\fs18 	
\f0\b\fs24 *head(aGroup)\
	\
		
\f2\b0 Create and return a Group. If 
\f0\b aGroup
\f2\b0  is a Group add it at the head of that group. If it is a 
\f0\b Server
\f2\b0 , add it at the head of the 
\f0\b default_group
\f2\b0  of that server. If it is nil, add it at the head of the 
\f0\b default_group
\f2\b0  of the default 
\f0\b Server.
\f2\b0 \
				\

\f1\fs18 	
\f0\b\fs24 *tail(aGroup)\
		\
		
\f2\b0 Create and return a Group. If 
\f0\b aGroup
\f2\b0  is a Group add it at the tail of that group. If it is a 
\f0\b Server
\f2\b0 , add it at the tail of the 
\f0\b default_group
\f2\b0  of that server. If it is nil, add it at the tail of the 
\f0\b default_group
\f2\b0  of the default 
\f0\b Server.\

\f2\b0 		\
	
\f0\b *replace(nodeToReplace)\
		\
		
\f2\b0 Create and return a Group and use it to replace 
\f0\b nodeToReplace
\f2\b0 , taking its place in its server's node order.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b\fs28 \cf0 \ul Creation without Instantiation on the Server\

\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 For use in message bundles it is also possible to create a Group object in the client app without immediately creating a group node on the server. Once done one can call methods which create messages to add to a bundle, which when sent to the server will instantiate the group or perform other operations. (See \ul Control\ulnone , below.)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural
\cf0 \
	
\f0\b *basicNew(server, nodeID)\
	\
		
\f2\b0 Create and return a Group object without creating a group node on the server. (This method is inherited from 
\f0\b Node
\f2\b0  and is documented here only for convenience.)\
		\
		
\f0\b server
\f2\b0  - An optional instance of 
\f0\b Server
\f2\b0 . If nil this will default to the default 
\f0\b Server
\f2\b0 . \
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1700\fi-1700\ql\qnatural
\cf0 		
\f0\b nodeID 
\f2\b0 - An optional node ID number. If not supplied one will be generated by the Server's NodeIDAllocator. Normally you should not need to supply an ID.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural
\cf0 		\
		
\f1\fs18 s.boot;\
		g = \cf3 Group\cf0 .basicNew(s); \cf4 // Create without sending\cf0 \
		s.sendBundle(\cf3 nil\cf0 , g.newMsg;); \cf4 // Now send a message; create at the head of s' default group\cf0 \
		s.queryAllNodes;\
		g.free;
\f2\fs24 \
		\
	
\f0\b newMsg(target, addAction
\f2\b0 )
\f0\b \
	\
		
\f2\b0 Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group. If target is nil, it will default to the 
\f0\b default_group
\f2\b0  of the Server specified in 
\f0\b *basicNew
\f2\b0  when this Group was created. The default addAction is 
\f1\fs18 \cf2 \\addToHead
\f2\fs24 \cf0 . (See 
\f0\b *new
\f2\b0  above for details of addActions.\
		\
	
\f0\b addToHeadMsg(aGroup)
\f2\b0 \
	\
		Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group. If 
\f0\b aGroup
\f2\b0  is a Group it will be added at the head of that group. If it is nil, it will be added at the head of the 
\f0\b default_group
\f2\b0  of this Group's server (as specified when *
\f0\b basicNew
\f2\b0  was called).\
		\
	
\f0\b addToTailMsg(target)
\f2\b0 \
	\
		Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group. If 
\f0\b aGroup
\f2\b0  is a Group it will be added at the tail of that group. If it is nil, it will be added at the tail of the 
\f0\b default_group
\f2\b0  of this Group's server (as specified when *
\f0\b basicNew
\f2\b0  was called).\
		\
	
\f0\b addBeforeMsg(aNode
\f2\b0 )
\f0\b \
	\
		
\f2\b0 Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group, immediately before 
\f0\b aNode
\f2\b0 .\
		\
	
\f0\b addAfterMsg(aNode
\f2\b0 )
\f0\b \
	\
		
\f2\b0 Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group, immediately after 
\f0\b aNode
\f2\b0 .\
		\
	
\f0\b addReplaceMsg(nodeToReplace
\f2\b0 )
\f0\b \
	\
		
\f2\b0 Returns a message of the type 
\f0\b g_new
\f2\b0  which can be bundled. When sent to the server this message will instantiate this group, replacing 
\f0\b nodeToReplace
\f2\b0  in the server's node order.\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural

\f0\b\fs28 \cf0 \ul Control\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 For further methods of controlling Groups (set, map, busMap, etc.), see the 
\f0\b Node
\f2\b0  help file.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural
\cf0 	\

\f0\b 	moveNodeToHead(aNode)\
	moveNodeToHeadMsg(aNode)\
	
\f2\b0 	\
		Move 
\f0\b aNode
\f2\b0  to the head of this group	
\f0\b 	\
		\
	moveNodeToTail(aNode)\
	moveNodeToTailMsg(aNode)\
	\
	
\f2\b0 	Move 
\f0\b aNode
\f2\b0  to the tail of this group	\
		\

\f0\b 	freeAll\
	freeAllMsg\
	\

\f2\b0 		Free all the nodes in this group, but do not free this group itself.\
\

\f0\b 	deepFree\
	deepFreeMsg\
	\

\f2\b0 		Free all Synths in the group, and all Synths in any enclosed groups, but do not free this group or any of its enclosed groups.
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural

\fs28 \cf0 \ul Examples
\f2\b0\fs24 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
s = \cf3 Server\cf0 .default; \cf4 // just to be sure\cf0 \
s.boot;\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf5 "help-Group-moto-rev"\cf0 , \{ \cf3 arg\cf0  out=0,freq=100,ffreq=120;\
	\cf3 var\cf0  x;\
	x = \cf3 RLPF\cf0 .ar(\cf3 LFPulse\cf0 .ar(\cf3 SinOsc\cf0 .kr(0.2, 0, 10, freq), [0,0.1], 0.1), \
		ffreq, 0.1).clip2(0.4);\
	\cf3 Out\cf0 .ar(out, x);\
\}).send(s);\
\
\
\cf3 SynthDef\cf0 (\cf5 "help-Group-wah"\cf0 , \{ \cf3 arg\cf0  out, rate = 1.5, cfreq = 1400, mfreq = 1200, rq=0.1;\
	\cf3 var\cf0  zin, zout, q;\
\
	zin = \cf3 In\cf0 .ar(out, 2);\
	cfreq = \cf3 Lag3\cf0 .kr(cfreq, 0.1);\
	mfreq = \cf3 Lag3\cf0 .kr(mfreq, 0.1);\
	q   = \cf3 Ramp\cf0 .kr(rq, 0.1);\
	zout = \cf3 RLPF\cf0 .ar(zin, \cf3 LFNoise1\cf0 .kr(rate, mfreq, cfreq), q, 10).distort \
		* 0.15;\
\
	\cf4 // replace the incoming bus with the effected version\cf0 \
	\cf3 ReplaceOut\cf0 .ar( out , zout ); \
	\
\}).send(s);\
)\
\
g = \cf3 Group\cf0 .new;\
\
(\
l = \cf3 Array\cf0 .fill(3,\{\
	\cf4 // random freq for each synth, added to g at the head\cf0 \
	\cf3 Synth\cf0 (\cf5 "help-Group-moto-rev"\cf0 ,[\cf5 "out"\cf0 ,0,\cf5 "freq"\cf0 ,rrand(10,120)],g,\cf2 \\addToHead\cf0 );\
\});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // set all controls that match "ffreq" in all nodes in g to 90\cf0 \
g.set(\cf5 "ffreq"\cf0 ,300);\
\
g.set(\cf5 "freq"\cf0 ,80);\
\
\cf4 // since we stored the Synths in an Array, we can also control them individually\cf0 \
(\
r = \cf3 Routine\cf0 (\{\
	\cf3 inf\cf0 .do(\{\
		l.do(\{ \cf3 arg\cf0  node;\
			node.set(\cf5 "freq"\cf0 ,rrand(10,120));\
			1.0.wait;\
		\});\
	\})\
\});\
\
r.play;\
)\
\
\cf4 // g is in a group too. Since we didn't specify it's the default group (ID 1) of the default Server\cf0 \
g.group.inspect;\
\
\cf4 // asking a wah to go order-of-execution after g, in the same group as g.\cf0 \
x = \cf3 Synth\cf0 .after(g,\cf5 "help-Group-wah"\cf0 ,[\cf5 "out"\cf0 ,0]); \
\
x.free;\
\
\cf4 // free all nodes in g, but not g itself\cf0 \
g.freeAll;\
\
\cf4 // don't forget the Routine is still running...\cf0 \
r.stop;\
\
\cf4 // oh, and set l to nil so the Synths and Array can be garbage collected\cf0 \
l = \cf3 nil\cf0 ;\
\
\cf4 // and i'm still on the server, its just my children that were freed\cf0 \
g.query;\
\
\cf4 // don't need the individual synth objects this time\cf0 \
(\
3.do(\{\
	\cf4 // random freq for each synth, added to g at the head\cf0 \
	\cf3 Synth\cf0 (\cf5 "help-Group-moto-rev"\cf0 ,[\cf5 "out"\cf0 ,0,\cf5 "freq"\cf0 ,rrand(10,1200)],g,\cf2 \\addToHead\cf0 );\
\});\
)\
\
\cf4 // kill me and my children\cf0 \
g.free;\
\
\cf4 // see, I'm gone\cf0 \
g.query;\
}