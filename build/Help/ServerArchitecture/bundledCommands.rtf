{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red191\green0\blue0;
\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf0 Bundled Server Commands\
\

\fs22 Using Synth/Node/Group sclang objects to build classes often\
there is the need to construct bundles to send commands together.\
One example is you want to start a synth that should be mapped\
instantly to certain buses.\
\
This extension uses a list that is passed to all command methods\
which add their command to it and do all needed preparation on \
language side. \
\

\f1\b Note
\f0\b0 : you have to use this with care. Normally the other ways\
of creating Synths and Groups are more safe.\
\
aNode.
\f1\b addCommand
\f0\b0 (cmdList, cmdName, argList) \
	adds a command to the list\
aNode.
\f1\b getCommand
\f0\b0 (cmdName or number, argList) \
	returns a command\
Synth.
\f1\b newCommand
\f0\b0 (cmdList, defname, target, addAction) \
	adds a command to the list and returns a new registered synth\
Group.
\f1\b newCommand
\f0\b0 (cmdList, target, addAction) \
	adds a command to the list and returns a new registered group\
\
aNode.
\f1\b moveBeforeCommand
\f0\b0 (cmdList, aNode)\
	adds a command to the list that causes the server to move this node before another one\
\
analogous commands: \

\f1\b moveAfterCommand / moveToHeadCommand / moveToTailCommand / \
moveNodeToHeadCommand / moveNodeToTailCommand
\f2\b0\fs18 \
\
\
//prepare some def\
s = \cf2 Server\cf0 .local;\
s.boot;
\f0\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
SynthDef("void", \{ arg freq=800, out=0;\
	Out.ar(out, SinOsc.ar(SinOsc.ar(SinOsc.kr([2,1.1],0,8,12),freq*0.3,freq), 0, 0.2));\
\}).load(s);\
)
\f0\fs22 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 \
\cf4 //create a list to add all commands\
\cf3 b = \cf5 List\cf3 .new; \
\cf4 //return an in instance of synth (registered) and adds the command to the list \
\cf3 y = \cf5 Synth\cf3 .newCommand(b, \cf6 "void"\cf3 ); \
\cf4 //add a couple of commands\
\cf3 y.addCommand(b, \cf6 "/n_set"\cf3 , [\cf7 \\freq\cf3 , 300]);\
y.addCommand(b, \cf6 "/n_set"\cf3 , [\cf7 \\out\cf3 , 0]);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //create a second list to add command\cf0 \
c = \cf2 List\cf0 .new;\
y.addCommand(c, "/n_free");\
\
\cf8 //send the commands (do this only once.)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
s.sendCmdList(b, 1); \cf8 //start after one sec.\
\cf0 s.sendCmdList(c, 1.1);\cf8 //runs for exactly 0.1 sec.\
\cf0 )\
\
\
}