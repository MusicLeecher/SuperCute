{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 Courier;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green112\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Control Structures\

\f1\b0\fs24 \
Control structures in SuperCollider are implemented via message sends.\
Here are a few of those available. \
\

\f0\b\fs36 If\

\f1\b0\fs24 \
Conditional execution is implemented via the 
\f0\b if
\f1\b0  message. The 
\f0\b if
\f1\b0  message is sent to an expression\
which must return a Boolean value. In addition it takes two arguments: a function to execute if the\
expression is true and another optional function to execute if the expression is false. \
The 
\f0\b if
\f1\b0  message returns the value of the function which is executed. If the falseFunc is not present \
and the expression is false then the result of the 
\f0\b if
\f1\b0  message is nil.\
\
syntax:\
\

\f2 if (expr, trueFunc, falseFunc);\
..or..\
expr.if (trueFunc, falseFunc);\

\f1 \
examples:\
\

\f3 if ( [\cf2 false\cf0 , \cf2 true\cf0 ].choose,				\cf3 // Boolean expression (chooses one at random)\
\cf0 	\{ \cf4 "expression was true"\cf0 .postln \},	\cf3 // true function\
\cf0 	\{ \cf4 "expression was false"\cf0 .postln \}	\cf3 // false function\
\cf0 )\
\
(\
\cf2 var\cf0  a = 1, z;\
z = if (a < 5, \{ 100 \},\{ 200 \});\
z.postln;\
)\
\
(\
\cf2 var\cf0  x;\
if (x.isNil, \{ x = 99 \});\
x.postln;\
)\
\
'
\f1 If' expressions are optimized by the compiler if they do not contain variable declarations in the trueFunc \
and the falseFunc.\
\

\f0\b\fs36 While\

\f1\b0\fs24 \
The 
\f0\b while
\f1\b0  message implements conditional execution of a loop. If the testFunc answers true\
when evaluated, then the bodyFunc is evaluated and the process is repeated. Once the\
testFunc returns false, the loop terminates.\
\
syntax:\
\

\f2 while ( testFunc, bodyFunc );\
..or..\
testFunc.while( bodyFunc );\

\f1 \
example:\
\
(\

\f3 i = 0;\
while ( \{ i < 5 \}, \{ i = i + 1; \cf4 "boing"\cf0 .postln \});\
)\
\
'
\f1 While' expressions are optimized by the compiler if they do not contain variable declarations in the\
testFunc and the bodyFunc.\
\

\f0\b\fs36 For\

\f1\b0\fs24 \
The 
\f0\b for
\f1\b0  message implements iteration over an integer series from a starting value to an end value\
stepping by one each time.\
A function is evaluated each iteration and is passed the iterated numeric value as an argument.\
\
syntax:\
\

\f2 for ( startValue, endValue, function )\
..or..\
startValue.for ( endValue, function )\

\f1 \
example:\
\

\f3 for (3, 7, \{ \cf2 arg\cf0  i; i.postln \}); \cf3 // prints values 3 through 7\
\cf0 \

\f0\b\fs36 ForBy\

\f1\b0\fs24 \
The 
\f0\b forBy
\f1\b0  selector implements iteration over an integer series with a variable step size.\
A function is evaluated each iteration and is passed the iterated numeric value as an argument.\
\
syntax:\
\

\f2 forBy ( startValue, endValue, stepValue, function );\
..or..\
startValue.forBy ( endValue, stepValue, function );\
\

\f1 \
example:\
\

\f3 forBy (0, 8, 2, \{ \cf2 arg\cf0  i; i.postln \}); \cf3 // prints values 0 through 8 by 2's\

\f1 \cf0 \

\f0\b\fs36 Do\

\f1\b0\fs24 \

\f0\b Do
\f1\b0  is used to iterate over a collection. Positive Integers also respond to 'do' by iterating from zero \
up to their value. Collections iterate, calling the function for each object they contain.\
Other kinds of Objects respond to do by passing themselves to the function one time.\
The function is called with two arguments, the item, and an iteration counter.\
\
syntax:\
\

\f2 do ( collection, function )\
..or..\
collection.do(function)\
\

\f1 example:\
\

\f3 [ 1, 2, \cf4 "abc"\cf0 , (3@4) ].do(\{ \cf2 arg\cf0  item, i; [i, item].postln; \});\
\
5.do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // iterates from zero to four\
\cf0 \
\cf4 "you"\cf0 .do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // a String is a collection of characters\
\cf0 \
\cf5 'they'\cf0 .do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // a Symbol is a singular item\
\cf0 \

\f0\b\fs36 Other Control Structures\

\f1\b0\fs24 \
Using Functions, many control structures can be defined like the ones above.\
In the class Collection there are many more messages defined for iterating over Collections.\
\
}