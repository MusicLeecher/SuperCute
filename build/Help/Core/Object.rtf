{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Object
\f1\b0\fs24 \
\

\f0\b superclass: nil\

\f1\b0 \
Object is the root class of all other classes. All objects are indirect instances of class Object.\
\

\f0\b\fs28 \ul Class membership:\

\f1\b0\fs24 \ulnone \

\f0\b class\

\f1\b0 \
Answer the class of the object.\
\

\f2 5.class.name.postln;\

\f1 \

\f0\b respondsTo(selector)\

\f1\b0 \
Answer a Boolean whether the receiver understands the message selector. \
Selector must be a Symbol.\
\

\f2 5.respondsTo('+').postln;\

\f1 \

\f0\b isKindOf(aClass)\

\f1\b0 \
Answer a Boolean whether the receiver is a direct or indirect instance of aClass.\
Use of this message in code must be questioned, because it often indicates a missed\
opportunity to exploit object polymorphism.\
\

\f2 5.isKindOf(Magnitude).postln;\

\f1 \

\f0\b isMemberOf(aClass)\

\f1\b0 \
Answer a Boolean whether the receiver is a direct instance of aClass.\
Use of this message in code is almost always a design mistake.\
\

\f2 5.isMemberOf(Integer).postln;\

\f1 \
\

\f0\b\fs28 \ul Accessing:\

\f1\b0\fs24 \ulnone \

\f0\b size
\f1\b0 \
\
Different classes interpret this message differently.  Object always returns 0.\
\
\

\f0\b\fs28 \ul Copying:
\f1\b0 \ulnone \

\fs24 \

\f0\b copy
\f1\b0 \
\
Make a copy of the receiver. The implementation of this message depends on the object's class.  In class Object, copy calls shallowCopy.\
\

\f0\b shallowCopy
\f1\b0 \
\
Makes a copy of the object. The copy's named and indexed instance variables refer to the same objects as the receiver.\
\

\f0\b deepCopy
\f1\b0 \
\
Recursively copies the object and all of the objects contained in the instance variables, and so on down the structure. This method works with cyclic graphs.\
\
\

\f0\b\fs28 \ul Equality, Identity:\

\f1\b0\fs24 \ulnone \

\f0\b == anotherObject\

\f1\b0 \
Answer whether the receiver equals anotherObject. The definition of equality depends on the class\
of the receiver. The default implementation in Object is to answer if the two objects are identical (see below).\
\

\f0\b === anotherObject\

\f1\b0 \
Answer whether the receiver is the exact same object as anotherObject.\
\

\f0\b != anotherObject\

\f1\b0 \
Answer whether the receiver does not equal anotherObject.\
The default implementation in Object is to answer if the two objects are not identical (see below).\
\

\f0\b !== anotherObject\

\f1\b0 \
Answer whether the receiver is not the exact same object as anotherObject.\
\

\f0\b hash
\f1\b0 \
\
Answer a code used to index into a hash table. This is used by Dictionaries and Sets to implement fast object lookup.  Objects which are equal == should have the same hash values. Whenever == is overridden in a class, hash should be overridden as well.\
\

\f0\b identityHash\

\f1\b0 \
Answer a code used to index into a hash table. This method is implemented by a primitive and is not overridden. Objects which are identical === should have the same hash values.\
\
\

\f0\b\fs28 \ul Testing:
\f1\b0 \ulnone \

\fs24 \

\f0\b isNil
\f1\b0 \
\
Answer whether the receiver is nil.\
\

\f0\b notNil
\f1\b0 \
\
Answer whether the receiver is not nil.\
\

\f0\b isNumber
\f1\b0 \
\
Answer whether the receiver is an instance of Number.\
\

\f0\b isInteger
\f1\b0 \
\
Answer whether the receiver is an instance of Integer.\
\

\f0\b isFloat
\f1\b0 \
\
Answer whether the receiver is an instance of Float.\
\

\f0\b pointsTo(anObject)\

\f1\b0 \
Answer whether one of the receiver's instance variables refers to anObject.\
\

\f0\b ? anObject\

\f1\b0 \
If the receiver is nil then answer anObject, otherwise answer the receiver.\
\

\f0\b ?? aFunction
\f1\b0 \
\
If the receiver is nil, value the function and return the result.\
\
\

\f0\b\fs28 \ul Messaging:
\f1\b0\fs24 \ulnone \
\

\f0\b perform(selector ... args)\
\

\f1\b0 The selector argument must be a Symbol.\
Sends the method named by the selector with the given arguments to the receiver.\
\

\f0\b performList(selector, ...args..., listOrArray)\

\f1\b0 \
The selector argument must be a Symbol.\
Sends the method named by the selector with the given arguments to the receiver. If the last\
argument is a List or an Array, then its elements are unpacked and passed as arguments.\
\

\f0\b performMsg(listOrArray)\

\f1\b0 \
The argument must be a List or Array whose first element is a Symbol representing a method selector.  \
The remaining elements are unpacked and passed as arguments to the method named by the selector\
\
\

\f0\b\fs28 \ul Printing:\

\f1\b0\fs24 \ulnone \

\f0\b post
\f1\b0 \
\
Print a string representation of the receiver.\
\

\f0\b postln
\f1\b0 \
\
Print a string representation of the receiver followed by a newline.\
\

\f0\b dump
\f1\b0 \
\
Print a detailed low level representation of the receiver.\
\
\

\f0\b\fs28 \ul Dependancy:\

\f1\b0\fs24 \ulnone \

\f0\b addDependant(aDependant)\

\f1\b0 \
Add aDependant to the receiver's list of dependants.\
\

\f0\b removeDependant(aDependant)\

\f1\b0 \
Remove aDependant from the receiver's list of dependants.\
\

\f0\b dependants
\f1\b0 \
\
Answer an IdentitySet of all dependants of the receiver.\
\

\f0\b changed(theChanger)\

\f1\b0 \
Notify the receiver's dependants that it has changed. The object making the change should be passed\
as theChanger.\
\

\f0\b update(theChanged, theChanger)\

\f1\b0 \
An object upon which the receiver depends has changed. theChanged is the object that changed and\
theChanger is the object that made the change.\
\

\f0\b release
\f1\b0 \
\
Remove all dependants of the receiver. Any object that has had dependants added must be\
released in order for it or its dependants to get garbage collected.\
\

\f0\b\fs28 \ul Routines
\f1\b0\fs24 \ulnone \
\

\f0\b yield\

\f1\b0 \
Must be called from inside a 
\f0\b Routine. 
\f1\b0 Yields control to the calling thread. The receiver is the result\
passed to the calling thread's method. The result of yield will be the value passed to the Routine's 
\f0\b next
\f1\b0 \
method the next time it is called.\
\

\f0\b yieldAndReset
\f1\b0 \
\
Must be called from inside a 
\f0\b Routine. 
\f1\b0 Yields control to the calling thread. The receiver is the result\
passed to the calling thread's method. The Routine is reset so that the next time it is called, it will\
start from the beginning. yieldAndReset never returns within the Routine.\
\

\f0\b alwaysYield\
\

\f1\b0 Must be called from inside a 
\f0\b Routine. 
\f1\b0 Yields control to the calling thread. The receiver is the result\
passed to the calling thread's method. The Routine, when called subsequently\
will always yield the receiver until it is reset. alwaysYield never returns within the Routine.\
}