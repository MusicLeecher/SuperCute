{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Phasor
\f1\b0\fs18 			
\f0\b\fs24 a resettable linear ramp between two levels
\f1\b0\fs18 \
\

\f0\b\fs24 superclass: UGen\
\

\f2\b0 Phasor is a linear ramp between start and end values. When its trigger input crosses from non-positive to positive, Phasor's output will jump to its reset position. Upon reaching the end of its ramp Phasor will wrap back to its start. 
\f0\b N.B.
\f2\b0  Since 
\f0\b end
\f2\b0  is defined as the wrap point, its value is never actually output.\
\
Phasor is commonly used as an index control with 
\f0\b [\ul BufRd\ulnone ] 
\f2\b0 and
\f0\b  [\ul BufWr\ulnone ]
\f2\b0 .
\f0\b \
\
	\
	*ar(trig, rate, start, end, resetPos)\
	*kr(trig, rate, start, end, resetPos)\
\

\f1\b0\fs18 		
\f0\b\fs24 trig
\f2\b0 \
			whan resetPos (default: 0, equivalent to start)\
		
\f0\b rate
\f2\b0 \
			the amount of change per sample\
			i.e at a rate of 1 the value of each sample will be 1 greater than the preceding sample\
		\
		
\f0\b start, end
\f2\b0 \
			start and end points of ramp. \
		\
		
\f0\b resetPos
\f2\b0 \
			the value to jump to upon receiving a trigger.\
\

\f1\fs18 \
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // phasor controls sine frequency: end frequency matches a second sine wave.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\{ \cf3 var\cf0  trig, rate, x, sr;\
	rate = \cf3 MouseX\cf0 .kr(0.2, 2, 1);\
	trig = \cf3 Impulse\cf0 .ar(rate);\
	sr = \cf3 SampleRate\cf0 .ir;\
	x = \cf3 Phasor\cf0 .ar(trig, rate / sr);\
	\cf3 SinOsc\cf0 .ar(\
		[\
			\cf3 LinLin\cf0 .kr(x, 0, 1, 600, 1000), \cf2 // convert range from 0..1 to 600..1000\cf0 \
			1000 \cf2 // constant second frequency\cf0 \
		], 0, 0.2)\
\
\}.play;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // two phasors control two sine frequencies: mouse y controls resetPos of the second\cf0 \
(\
\{ \cf3 var\cf0  trig, rate, x, sr;\
	rate = \cf3 MouseX\cf0 .kr(1, 200, 1);\
	trig = \cf3 Impulse\cf0 .ar(rate);\
	sr = \cf3 SampleRate\cf0 .ir;\
	x = \cf3 Phasor\cf0 .ar(trig, rate / sr, 0, 1, [0, \cf3 MouseY\cf0 .kr(0, 1)]);\
	\cf3 SinOsc\cf0 .ar(x * 500 + 500, 0, 0.2)\
\}.play;\
)\
\
\
\cf4 // use phasor to index into a sound file\cf5 \
\
\cf4 // allocate a buffer with a sound file\cf5 \
b = \cf6 Buffer\cf5 .read(s, \cf7 "sounds/a11wlk01.wav"\cf5 );\
\
\cf4 // simple playback (more examples: see BufRd)\
// Start and end here are defined as 0 and the number of frames in the buffer.\
// This means that the Phasor will output values from 0 to numFrames - 1 before looping,\
// which is perfect for driving BufRd. (See note above)\cf5 \
\{ \cf6 BufRd\cf5 .ar(1, b.bufnum, \cf6 Phasor\cf5 .ar(0, \cf6 BufRateScale\cf5 .kr(b.bufnum), 0, \cf6 BufFrames\cf5 .kr(b.bufnum))) \}.play;\
\
\
\cf4 // two phasors control two sound file positions: mouse y controls resetPos of the second\cf5 \
(\
\{ \cf6 var\cf5  trig, rate, framesInBuffer;\
	rate = \cf6 MouseX\cf5 .kr(0.1, 100, 1);\
	trig = \cf6 Impulse\cf5 .ar(rate);\
	framesInBuffer = \cf6 BufFrames\cf5 .kr(b.bufnum);\
	x = \cf6 Phasor\cf5 .ar(trig, \cf6 BufRateScale\cf5 .kr(b.bufnum), 0, framesInBuffer, \
		[0, \cf6 MouseY\cf5 .kr(0, framesInBuffer)]);\
	\cf6 BufRd\cf5 .ar(1, b.bufnum, x);\
\}.play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\
}