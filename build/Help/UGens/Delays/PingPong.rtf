{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PingPong		stereo ping pong delay\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
PingPong.ar(bufnum, inputArray, delayTime, feedback, rotate)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Bounces sound between two outputs ...  like a ping-pong ball.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 PingPong is actually a compound built upon 
\f0\b RecordBuf
\f1\b0  and 
\f0\b PlayBuf
\f1\b0 .\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 bufnum
\f1\b0  - first index of a multi channel buffer .\

\f0\b inputArray
\f1\b0  - an array of audio inputs, the same size as your buffer.\

\f0\b delaytime
\f1\b0  - delay time in seconds..\

\f0\b feedback
\f1\b0  - feedback coefficient.\

\f0\b rotate
\f1\b0  - default 1: which rotates the inputArray by one step.  (left -> right, right -> left)\
	rotation of 0 (or 2) would result in no rotation to the inputArray\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
(\
s = \cf3 Server\cf0 .local;\
s.waitForBoot(\{\
\
b = \cf3 Buffer\cf0 .alloc(s,44100 * 2, 2);\
\
\cf3 SynthDef\cf0 (\cf4 "help-PingPong"\cf0 ,\{ \cf3 arg\cf0  out=0,bufnum=0,feedback=0.5,delayTime=0.2; \
	\cf3 var\cf0  left, right;\
	left = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.7, 0.25), 0.01, 0.25, \
		\cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.7,0,200,500)));\
	right = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.5, 0.25), 0.01, 0.25, \
		\cf3 Resonz\cf0 .ar(\cf3 PinkNoise\cf0 .ar(4), \cf3 SinOsc\cf0 .kr(2.7,0,1000,2500), 0.2));\
		\
	\cf3 Out\cf0 .ar(0,\
		\cf3 PingPong\cf0 .ar(bufnum, [left,right], delayTime, feedback, 1)\
	)\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum\cf0 , b.bufnum,\\feedback,0.5,\\delayTime,0.1]);\
\});\
)\
\
\
(\
s = \cf3 Server\cf0 .local;\
s.waitForBoot(\{\
\
b = \cf3 Buffer\cf0 .alloc(s,44100 * 2, 2);\
\
\cf3 SynthDef\cf0 (\cf4 "help-PingPong"\cf0 ,\{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  left, right;\
	left = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.7, 0.25), 0.01, 0.25,\
		\cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.7,0,200,500)));\
	right = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.5, 0.25), 0.01, 0.25,\
		\cf3 Resonz\cf0 .ar(\cf3 PinkNoise\cf0 .ar(4), \cf3 SinOsc\cf0 .kr(2.7,0,1000,2500),\
0.2));\
\
	\cf3 Out\cf0 .ar(0,\
		\cf3 PingPong\cf0 .ar(bufnum, [left,right] *  \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 ([1, 1, 0], [2, 0.1])), \
			0.1, 0.8, 1)\
	)\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum\cf0 , b.bufnum]);\
\});\
)\
\
\
\
\
\
(\
\
Patch(\{ \cf3 arg\cf0  buffer,feedback=0.5,delayTime=0.2; \
	\cf3 var\cf0  left, right;\
	left = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.7, 0.25), 0.01, 0.25, \
		\cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.7,0,200,500)));\
	right = \cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(0.5, 0.25), 0.01, 0.25, \
		\cf3 Resonz\cf0 .ar(\cf3 PinkNoise\cf0 .ar(4), \cf3 SinOsc\cf0 .kr(2.7,0,1000,2500), 0.2));\
		\
	\cf3 PingPong\cf0 .ar(buffer.bufnumIr, [left,right], delayTime, feedback, 1)\
\
\}).gui\
\
)\
}