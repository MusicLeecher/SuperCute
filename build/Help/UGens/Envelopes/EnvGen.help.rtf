{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 EnvGen
\f1\b0\fs18 				
\f0\b\fs26 envelope generator
\f1\b0\fs18 \
\

\f0\b\fs24 superclass: UGen\
\

\f2\b0 Plays back break point envelopes. The envelopes are instances of the Env class. See the 
\f0\b [\ul Env\ulnone ]
\f2\b0  for more info. The arguments for 
\f0\b levelScale
\f2\b0 , 
\f0\b levelBias
\f2\b0 , and 
\f0\b timeScale
\f2\b0  are polled when the EnvGen is triggered and remain constant for the duration of the envelope.
\f0\b \
	\
*ar(envelope, gate, levelScale, levelBias, timeScale, doneAction)\
*kr(envelope, gate, levelScale, levelBias, timeScale, doneAction)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1120\fi-1120\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1120\fi-1120\ql\qnatural
\cf0 	
\f0\b\fs24 envelope
\f2\b0  	- an instance of 
\f0\b Env
\f2\b0 , or an Array of Controls. (See 
\f0\b [\ul Control\ulnone ]
\f2\b0  and the example below for how to use this.)\
	
\f0\b gate	
\f2\b0 -
\f0\b  
\f2\b0 this triggers the envelope and holds it open while > 0. If the Env is fixed-length (e.g. Env.linen, Env.perc), the gate argument is used as a simple trigger. If it is an sustaining envelope (e.g. Env.adsr, Env.asr), the envelope is held open until the gate becomes 0, at which point is released.
\f0\b \
	levelScale
\f2\b0  - scales the levels of the breakpoints.\
	
\f0\b levelBias
\f2\b0 	- offsets the levels of the breakpoints.\
	
\f0\b timeScale
\f2\b0  - scales the durations of the segments.\
	
\f0\b doneAction
\f2\b0  - an integer representing an action to be executed when the env is finished playing. This can be used to free the enclosing synth, etc. See 
\f0\b [\ul UGen-doneActions\ulnone ]
\f2\b0  for more detail.
\f1\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
	\{ \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .perc, 1.0, doneAction: 2) * \cf2 SinOsc\cf0 .ar(440,0,0.1) \}.play;\
	\
	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // example\cf0 \
\
	(\
	\cf2 SynthDef\cf0 (\cf4 "env-help"\cf0 , \{ \cf2 arg\cf0  out, gate; \
		\cf2 var\cf0  z;\
		z =  \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr,gate) * \cf2 SinOsc\cf0 .ar(440,0,0.1);\
		\cf2 Out\cf0 .ar(out, z)\
	\}).send(s);\
	)\
	\
	s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "env-help"\cf0 , 1980); \cf3 // start a synth (silently, as gate defaults to 0)\cf0 \
	\
	\
	\cf3 // turn on\cf0 \
	s.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf5 \\gate\cf0 , 1);\
	\
	\cf3 // turn off\cf0 \
	s.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf5 \\gate\cf0 , 0);\
	\
	\cf3 // it does not matter to what value the gate is set, as long as it is > 0\cf0 \
	s.sendMsg(\cf4 "/n_set"\cf0 , 1980, \cf5 \\gate\cf0 , 2);\
	\
	s.sendMsg(\cf4 "/n_free"\cf0 , 1980);\
	
\f2\fs24 \
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Changing an Env while playing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
	
\f1\fs18 (\
	\cf2 SynthDef\cf0 (\cf4 "env"\cf0 , \{ \cf2 arg\cf0  i_outbus=0;\
		\cf2 var\cf0  env, envctl;\
		\
		\cf3 // make a dummy 8 segment envelope\
\cf0 		env = \cf2 Env.\cf0 newClear(\cf2 8\cf0 );\
		\
		\cf3 // create a control argument array\
\cf0 		envctl = \cf2 Control\cf0 .names([\cf5 \\env\cf0 ]).kr( env.asArray );\
		\
		\cf2 ReplaceOut\cf0 .kr(i_outbus, \cf2 EnvGen\cf0 .kr(envctl, doneAction: 2));\
	\}).send(s);\
	)\
	\
	(\
	\cf2 SynthDef\cf0 (\cf4 "sine"\cf0 , \{\
		\cf2 Out\cf0 .ar(0, \cf2 SinOsc\cf0 .ar(\cf2 In\cf0 .kr(0), 0, 0.2));\
	\}).send(s);\
	)\
	\
	s.sendMsg(\cf5 \\c_set\cf0 , 0, 800);\
	\
	s.sendMsg(\cf5 \\s_new\cf0 , \cf5 \\sine\cf0 , 1001, 1, 0);\
	\
	e = \cf2 Env\cf0 ([700,900,900,800], [1,1,1]*0.4, \cf5 \\exp\cf0 ).asArray;\
	s.sendBundle(\cf2 nil\cf0 ,[\cf5 \\s_new\cf0 , \cf5 \\env\cf0 , 1002, 2, 1001],[\cf5 \\n_setn\cf0 , 1002, \cf5 \\env\cf0 , e.size] ++ e);\
	\
	f = \cf2 Env\cf0 ([1000,1000,800,1000,900,1000], [1,1,1,1,1]*0.3, \cf5 \\step\cf0 ).asArray;\
	s.sendBundle(\cf2 nil\cf0 ,[\cf5 \\s_new\cf0 , \cf5 \\env\cf0 , 1003, 2, 1001],[\cf5 \\n_setn\cf0 , 1003, \cf5 \\env\cf0 , f.size] ++ f);\
	\
	s.sendMsg(\cf5 \\n_free\cf0 , 1001);\

\f2\fs24 \
\
\

\f1\fs18 	\

\f2\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Forced release of the EnvGen\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
	If the gate of an EnvGen is set to -1 or below, then the envelope will cutoff immediately. The time for it to 	cutoff is the amount less than -1, with -1 being as fast as possible, -1.5 being a cutoff in 0.5 seconds, etc. 	The cutoff shape is linear.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 	(\
	SynthDef\cf0 (\cf4 "stealMe"\cf0 , \{ \cf2 arg\cf0  gate = 1;\
		\cf2 Out\cf0 .ar(0, \{\cf2 BrownNoise\cf0 .ar\}.dup * \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr, gate, doneAction:2))\
	\}).send(s);\
	)\
	\
	s.sendMsg(\cf5 \\s_new\cf0 , \cf5 \\stealMe\cf0 , 1001, 1, 0);\
	\
	s.sendMsg(\cf5 \\n_set\cf0 , 1001, \cf5 \\gate\cf0 , -1.1); \cf3 // cutoff in 0.1 seconds\cf0 \
	\
	
\f2\fs24 If the synthDef has an arg named "gate", the convienience method of Node can be used:\
	
\f1\fs18 \
	Node-release(releaseTime)\
	\
	d = \{ \cf2 arg\cf0  gate=1; \{\cf2 BrownNoise\cf0 .ar\}.dup * \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr, gate, doneAction:2) \}.play;\
	d.release(3);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Fast triggering tests\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
	
\f1\fs18 (\
		\cf2 \{\
\cf0 	\cf2 		EnvGen\cf0 .kr(\
					Env.new([ 0.001, 1, 0.5, 0 ], [ 0.01, 0.3, 1 ], -4, 2, nil),\
					Impulse.kr(10)\
			) * \cf2 SinOsc\cf0 .ar(440,0,0.1)		\
		\}.play;\
	)\
	\
	(\
		\cf2 \{ \
\cf0 	\cf2 		EnvGen\cf0 .kr(\
					\cf2 Env\cf0 .perc( 0.1, 0.0, 0.5, 1, \cf5 \\welch\cf0  ),\
					Impulse.kr(100),\
					timeScale: 0.1\
				) * \cf2 SinOsc\cf0 .ar(440,0,0.3)\
		\}.play;\
	)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Modulating the levelScale\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \

\f2\fs24 no,it doesn't take a ugen in\

\f1\fs18 (\
	\cf2 \{ \
		EnvGen\cf0 .kr(\
				\cf2 Env\cf0 .asr( 0.1, 1.0, 0.5, \cf5 \\welch\cf0  ),\
				1.0,\
				FSinOsc.ar(1.0).range(0.0,1.0),\
				timeScale: 0.1\
			) * \cf2 SinOsc\cf0 .ar(440,0,0.3)\
	\}.play;\
\
)\

\f2\fs24 an .ir rate input, a float or an ir rate ugen like Rand would work\
(
\f1\fs18 \
	\cf2 \{ \
		EnvGen\cf0 .kr(\
				\cf2 Env\cf0 .asr( 0.1, 1.0, 0.5, \cf5 \\welch\cf0  ),\
				1.0,\
				Rand(0.1,1.0),\
				timeScale: 0.1\
			) * \cf2 SinOsc\cf0 .ar(440,0,0.3)\
	\}.play;
\f2\fs24 \
)\
\
\
}