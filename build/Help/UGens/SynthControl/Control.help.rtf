{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Control
\f1\b0\fs24 \
\
superclass: MultiOutUGen\
\
Used to bring signals and floats into the ugenGraph function of your SynthDef.  This is the UGen that delivers the args into your function.  \
\
Generally you do not create Controls yourself. (See Arrays example below)\
\
The rate may be either .kr (continous control rate signal) or .ir (a static value, set at the time the synth starts up, and subsequently unchangeable).\
\
SynthDef creates these when compiling the ugenGraph function.   They are created for you, you use them, and you don't really need to worry about them if you don't want to.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 SynthDef\cf0 (\cf3 "help-Control"\cf0 ,\{ \cf2 arg\cf0  freq=200;\
\
	freq.inspect; \cf4 // at the time of compiling the def\
\cf0 \
\}).writeDefFile;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
What is passed into the ugenGraph function is an OutputProxy, and its source is a Control.\
\
\
The main explicit use of Control is to allow Arrays to be sent to running Synths:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\cf4 // a synth def that has 4 partials\
\cf0 (\
s = Server.local;\
\cf2 SynthDef\cf0 (\cf3 "help-Control"\cf0 , \{ \cf2 arg\cf0  out=0,i_freq;\
	\cf2 var\cf0  klank, n, harm, amp, ring;\
	n = 9;\
	\
	\cf4 // harmonics\
\cf0 	harm = \cf2 Control\cf0 .names([\cf5 \\harm\cf0 ]).ir(\cf2 Array\cf0 .series(4,1,1).postln);\
	\cf4 // amplitudes\
\cf0 	amp = \cf2 Control\cf0 .names([\cf5 \\amp\cf0 ]).ir(\cf2 Array\cf0 .fill(4,0.05));\
	\cf4 // ring times\
\cf0 	ring = \cf2 Control\cf0 .names([\cf5 \\ring\cf0 ]).ir(\cf2 Array\cf0 .fill(4,1));\
	\
	klank = \cf2 Klank\cf0 .ar(`[harm,amp,ring], \{\cf2 ClipNoise\cf0 .ar(0.003)\}.dup, i_freq);\
	\
	\cf2 Out\cf0 .ar(out, klank);\
\}).send(s);\
)\
\
\cf4 // nothing special yet, just using the default set of harmonics.\
\cf0 a = \cf2 Synth\cf0 (\cf3 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 300]);\
b = \cf2 Synth\cf0 (\cf3 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 400]);\
c = \cf2 Synth\cf0 (\cf3 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 533.33]);\
d = \cf2 Synth\cf0 (\cf3 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 711.11]);\
\
a.free;\
b.free;\
c.free;\
d.free;\
\
\cf4 // in order to set the harmonics amps and ring times at\
// initialization time we need to use an OSC bundle.\
\cf0 (\
s.sendBundle(\cf2 nil\cf0 ,\
	[\cf3 "/s_new"\cf0 , \cf3 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf4 // start note\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "harm"\cf0 , 4, 1, 3, 5, 7] \cf4 // set odd harmonics\
\cf0 	);\
)\
\
s.sendMsg(\cf3 "/n_free"\cf0 , 2000);\
\
(\
s.sendBundle(\cf2 nil\cf0 ,\
	[\cf3 "/s_new"\cf0 , \cf3 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf4 // start note\
\cf0 	\cf4 // set geometric series harmonics\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "harm"\cf0 , 4] ++ \cf2 Array\cf0 .geom(4,1,1.61)\
	);\
)\
\
s.sendMsg(\cf3 "/n_free"\cf0 , 2000);\
\
(\
\cf4 // set harmonics, ring times and amplitudes\
\cf0 s.sendBundle(\cf2 nil\cf0 ,\
	[\cf3 "/s_new"\cf0 , \cf3 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf4 // start note\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "harm"\cf0 , 4, 1, 3, 5, 7], \cf4 // set odd harmonics\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "ring"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.1), \cf4 // set shorter ring time\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "amp"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.2) \cf4 // set louder amps\
\cf0 	);\
)\
\
s.sendMsg(\cf5 \\n_trace\cf0 , 2000);\
s.sendMsg(\cf5 \\n_free\cf0 , 2000);\
\
(\
\cf4 // same effect as above, but packed into one n_setn command\
\cf0 s.sendBundle(\cf2 nil\cf0 ,\
	[\cf3 "/s_new"\cf0 , \cf3 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf4 // start note\
\cf0 	[\cf3 "/n_setn"\cf0 , 2000, \cf3 "harm"\cf0 , 4, 1, 3, 5, 7,\
		\cf3 "ring"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.1)\
		++ [\cf3 "amp"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.2)\
	);\
)\
\
s.sendMsg(\cf5 \\n_trace\cf0 , 2000);\
s.sendMsg(\cf5 \\n_free\cf0 , 2000);
\f1\fs24 \
}