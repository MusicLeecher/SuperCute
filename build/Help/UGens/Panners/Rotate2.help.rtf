{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Rotate2			
\fs28 Rotate a sound field
\fs36 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Rotate2.kr(x, y, pos)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Rotate2 can be used for rotating an ambisonic B-format sound field around an axis.\
Rotate2 does an equal power rotation so it also works well on stereo sounds.\
It takes two audio inputs (x, y) and an angle control (pos).\
It outputs two channels (x, y).\
It computes this:\
\
xout = cos(angle) * xin + sin(angle) * yin;\
yout = cos(angle) * yin - sin(angle) * xin;\
\
where angle = pos * pi,  so that -1 becomes -pi and +1 becomes +pi. \
This allows you to use an LFSaw to do continuous rotation around a circle.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 x, y
\f1\b0  - input signals\

\f0\b pos
\f1\b0  - angle to rotate around the circle from -1 to +1. \
-1 is 180 degrees, -0.5 is left, 0 is forward, +0.5 is right, +1 is behind.\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\cf2 \
\{\
	\cf3 var\cf2  w, x, y, p, q, a, b, c, d;\
	\
	p = \cf3 WhiteNoise\cf2 .ar(0.05); \cf4 // source\cf2 \
	q = \cf5 LFSaw\cf0 .ar(200,0,0.03)+\cf5 LFSaw\cf0 .ar(200.37,0,0.03)+\cf5 LFSaw\cf0 .ar(201,0,0.03)\cf2 ;\
	\
	\cf4 // B-format encode 2 signals at opposite sides of the circle\cf2 \
	#w, x, y = \cf3 PanB2\cf2 .ar(p, -0.5) + \cf3 PanB2\cf2 .ar(q, 0.5); \
	\
	#x, y = \cf3 Rotate2\cf2 .ar(x, y, \cf3 MouseX\cf2 .kr(-1,1));\
	\
	\cf4 // B-format decode to quad\cf2 \
	#a, b, c, d = \cf3 DecodeB2\cf2 .ar(4, w, x, y);\
	\
	[a, b, d, c] \cf4 // reorder to my speaker arrangement: Lf Rf Lr Rr\cf2 \
\}.play;\
\cf0 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf4 // Rotation of stereo sound:\cf2 \
\
\{\
	\cf4 // rotation via lfo\cf2 \
	\cf3 var\cf2  x, y;\
	x = \cf3 PinkNoise\cf2 .ar(0.4);\
	y = \cf3 LFTri\cf2 .ar(800) * \cf3 LFPulse\cf2 .kr(3,0,0.3,0.2);\
	#x, y = \cf3 Rotate2\cf2 .ar(x, y, \cf3 LFSaw\cf2 .kr(0.1));\
	[x,y]\
\}.play;\
\
\{\
	\cf4 // rotation via mouse\cf2 \
	\cf3 var\cf2  x, y;\
	x = \cf3 Mix\cf2 .fill(4, \{ \cf3 LFSaw\cf2 .ar(200 + 2.0.rand2, 0, 0.1) \});\
	y = \cf3 SinOsc\cf2 .ar(900) * \cf3 LFPulse\cf2 .kr(3,0,0.3,0.2);\
	#x, y = \cf3 Rotate2\cf2 .ar(x, y, \cf3 MouseX\cf2 .kr(0,2));\
	[x,y]\
\}.play;\
\
\
\cf4 // Rotate B-format about Z axis:\cf2 \
\
wout = win;\
zout = zin;\
#xout, yout = \cf3 Rotate2\cf2 .ar(xin, yin, pos);\
\
\cf4 // Rotate B-format about Y axis:\cf2 \
\
wout = win;\
yout = yin;\
#xout, zout = \cf3 Rotate2\cf2 .ar(xin, zin, pos);\
\
\cf4 // Rotate B-format about X axis:\cf2 \
\
wout = win;\
xout = xin;\
#yout, zout = \cf3 Rotate2\cf2 .ar(yin, zin, pos);\
\
\
\
}