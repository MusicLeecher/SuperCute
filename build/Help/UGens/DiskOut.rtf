{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 DiskOut
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 DiskOut.ar(bufnum, channelsArray)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 Record to a soundfile to disk. Uses a 
\f0\b Buffer
\f2\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 bufnum
\f2\b0  - the number of the buffer to write to (prepared with /b-write or Buffer.write) \

\f0\b channelsArray
\f2\b0  - the Array of channels to write to the file.
\f1\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 s.boot; \cf3 // start the server\cf2 \
\
\cf3 // something to record\cf2 \
(\
\cf4 SynthDef\cf2 (\cf5 "bubbles"\cf2 , \{\
	\cf4 var\cf2  f, zout;\
	f = \cf4 LFSaw\cf2 .kr(0.4, 0, 24, \cf4 LFSaw\cf2 .kr([8,7.23], 0, 3, 80)).midicps; \cf3 // glissando function\cf2 \
	zout = \cf4 CombN\cf2 .ar(\cf4 SinOsc\cf2 .ar(f, 0, 0.04), 0.2, 0.2, 4); \cf3 // echoing sine wave\cf2 \
	\cf4 Out\cf2 .ar(0, zout);\
\}).send(s);\
)\
\
\cf3 // this will record to the disk\cf2 \
(\
\cf4 SynthDef\cf2 (\cf5 "diskout"\cf2 , \{\cf4 arg\cf2  bufnum;\
	\cf4 DiskOut\cf2 .ar(bufnum, \cf4 In\cf2 .ar(0,2));\
\}).send(s)\
)\
\
\cf3 // Object Style\cf2 \
\
\cf3 // start something to record\cf2 \
x = \cf4 Synth\cf2 .new(\cf5 "bubbles"\cf2 );\
\
\cf3 // allocate a disk i/o buffer\cf2 \
b= \cf4 Buffer\cf2 .alloc(s, 65536, 2);
\f2\fs24 \

\f1\fs18 \cf3 \
// create an output file for this buffer, leave it open
\f2\fs24 \cf2 \

\f1\fs18 b.write(\cf5 "diskouttest.aiff"\cf2 , \cf5 "aiff"\cf2 , \cf5 "int16"\cf2 , 0, 0, \cf4 true\cf2 );\
\cf3 // create the diskout node; making sure it comes after the source\cf2 \
d = \cf4 Synth\cf2 .tail(\cf4 nil\cf2 , \cf5 "diskout"\cf2 , [\cf5 "bufnum"\cf2 , 0]);\
\cf3 // stop recording\cf2 \
d.free;\
\cf3 // stop the bubbles\cf2 \
x.free;\
\cf3 // close the buffer and the soundfile\cf2 \
b.close;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
\cf3 /////////////////////////////////\cf2 \
\
\cf3 // The same thing done in Messaging Style (less overhead but without the convienence of objects)\cf2 \
\cf3 // start something to record\cf2 \
s.sendMsg(\cf5 "/s_new"\cf2 , \cf5 "bubbles"\cf2 , 2003, 1, 0);\
\
\cf3 // allocate a disk i/o buffer\cf2 \
s.sendMsg(\cf5 "/b_alloc"\cf2 , 0, 65536, 2); \cf3 // Buffer number is 0\cf2 \
\
\cf3 // create an output file for this buffer, leave it open\cf2 \
s.sendMsg(\cf5 "/b_write"\cf2 , 0, \cf5 "diskouttest.aiff"\cf2 , \cf5 "aiff"\cf2 , \cf5 "int16"\cf2 , 0, 0, 1);\
\
\cf3 // create the diskout node\cf2 \
s.sendMsg(\cf5 "/s_new"\cf2 , \cf5 "diskout"\cf2 , 2004, 3, 2003, [\cf5 "bufnum"\cf2 , 0]);\
\
s.sendMsg(\cf5 "/n_free"\cf2 , 2004); \cf3 // stop recording\cf2 \
s.sendMsg(\cf5 "/n_free"\cf2 , 2003); \cf3 // stop the bubbles\cf2 \
\
s.sendMsg(\cf5 "/b_close"\cf2 , 0); \cf3 // close the file.\cf2 \
s.sendMsg(\cf5 "/quit"\cf2 ); \cf3 // quit the server\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf3 //see DiskIn for playing this same soundfile\cf2 \
}