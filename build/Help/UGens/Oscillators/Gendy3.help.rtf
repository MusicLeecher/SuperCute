{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red191\green0\blue0;
\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs44 \cf0 Gendy3
\f1\b0\fs24 \
\
See Gendy1 help file for background. This variant of GENDYN normalises the durations in each period to force oscillation at the desired pitch. The breakpoints still get perturbed as in Gendy1. \
\
There is some glitching in the oscillator caused by the stochastic effects- control points as they vary cause big local jumps of amplitude. Put ampscale and durscale low to minimise the rate of this. \
\

\f0\b \ul Class Methods
\f1\b0 \ulnone \
\

\f0\b *ar(ampdist=1, durdist=1, adparam=1.0, ddparam=1.0, freq=440, ampscale= 0.5, durscale=0.5, initCPs=12, knum=12, mul=1.0, add=0.0)\

\f1\b0 \
All parameters can be modulated at control rate except for initCPs which is used only at initialisation.\
\

\f0\b ampdist
\f1\b0  - Choice of probability distribution for the next perturbation of the amplitude of a control point. \
\
The distributions are (adapted from the GENDYN program in Formalized Music):\
0- LINEAR\
1- CAUCHY\
2- LOGIST\
3- HYPERBCOS\
4- ARCSINE\
5- EXPON\
6- SINUS\
Where the sinus (Xenakis' name) is in this implementation taken as sampling from a third party oscillator. See example below.\
\

\f0\b durdist-
\f1\b0  Choice of distribution for the perturbation of the current inter control point duration. \
\

\f0\b adparam-
\f1\b0  A parameter for the shape of the amplitude probability distribution, requires values in the range 0.0001 to 1 (there are safety checks in the code so don't worry too much if you want to modulate!)\
\

\f0\b ddparam-
\f1\b0  A parameter for the shape of the duration probability distribution, requires values in the range 0.0001 to 1\
\

\f0\b freq-
\f1\b0  Oscillation frquency.\
\

\f0\b ampscale-
\f1\b0  Normally 0.0 to 1.0, multiplier for the distribution's delta value for amplitude. An ampscale of 1.0 allows the full range of  -1 to 1 for a change of amplitude.\
\

\f0\b durscale-
\f1\b0  Normally 0.0 to 1.0, multiplier for the distribution's delta value for duration. An ampscale of 1.0 allows the full range of  -1 to 1 for a change of duration.\
\

\f0\b initCPs-
\f1\b0  Initialise the number of control points in the memory. Xenakis specifies 12. There would be this number of control points per cycle of the oscillator, though the oscillator's period will constantly change due to the duration distribution. \
\

\f0\b knum-
\f1\b0  Current number of utilised control points, allows modulation.  \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i \cf0 Examples\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i0\fs18 \cf0 	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs26 \cf2 //warning- if you have lots of CPs and you have fast frequencies, the CPU cost goes up a lot because a new CP move happens every sample!
\fs18 	\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
	\
\cf4 //LOUD! defaults like a rougher Gendy1	\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(mul:0.5))\}.play\
\
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(freq:\cf5 MouseX\cf3 .kr(220,880,\cf6 'exponential'\cf3 ), durscale:0.01, ampscale:0.02, mul:0.2))\}.play\
\
\cf4 //stochastic waveform distortion- also play me at the same time as the previous example...\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(1,2,0.3,-0.7,\cf5 MouseX\cf3 .kr(55,110,\cf6 'exponential'\cf3 ),0.03,0.1))\}.play\
\
\
(\
\{\cf5 Pan2\cf3 .ar(\
\cf5 Normalizer\cf3 .ar(\
\cf5 RLPF\cf3 .ar(\
\cf5 RLPF\cf3 .ar(\cf5 Mix\cf3 .ar(\cf5 Gendy3\cf3 .ar(freq:[230, 419, 546, 789])),\
\cf5 MouseX\cf3 .kr(10,10000,\cf6 'exponential'\cf3 ),0.05),\
\cf5 MouseY\cf3 .kr(10,10000,\cf6 'exponential'\cf3 ),0.05)\
,0.9)\
,\cf5 Lag\cf3 .kr(\cf5 LFNoise0\cf3 .kr(1),0.5))\}.play\
)\
\
\
\cf4 //concrete pH? \cf3 \
(\
\{\cf5 Pan2\cf3 .ar(\
\cf5 Mix\cf3 .ar(\cf5 Gendy3\cf3 .ar(freq:([1,1.2,1.3,1.76,2.3]*\cf5 MouseX\cf3 .kr(3,17,\cf6 'exponential'\cf3 )),mul:0.2)))\}.play\
)\
\
\cf4 //glitch low, mountain high\cf3 \
(\
\{\cf5 Pan2\cf3 .ar(\
\cf5 Mix\cf3 .ar(\cf5 Gendy3\cf3 .ar(3,5,1.0,1.0,(\cf5 Array\cf3 .fill(5,\{\cf5 LFNoise0\cf3 .kr(1.3.rand,1,2)\})*\cf5 MouseX\cf3 .kr(100,378,\cf6 'exponential'\cf3 )),\cf5 MouseX\cf3 .kr(0.01,0.05),\cf5 MouseY\cf3 .kr(0.001,0.016),5,mul:0.1)))\}.play\
)\
\
\cf4 //play me	\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 RLPF\cf3 .ar(\cf5 Gendy3\cf3 .ar(1,3,freq:\cf5 MouseX\cf3 .kr(100,1000), durscale:0.0, ampscale:\cf5 MouseY\cf3 .kr(0.0,0.1), initCPs:7, knum: \cf5 MouseY\cf3 .kr(7,2)), 500,0.3, 0.2), 0.0)\}.play\
\
\
\
\cf4 //used as an LFO	\cf3 \
(\
\{\cf5 Pan2\cf3 .ar(\cf5 SinOsc\cf3 .ar(\cf5 Gendy3\cf3 .kr(2,5,\cf5 SinOsc\cf3 .kr(0.1,0,0.49,0.51),\cf5 SinOsc\cf3 .kr(0.13,0,0.49,0.51), 0.34, \cf5 SinOsc\cf3 .kr(0.17,0,0.49,0.51), \cf5 SinOsc\cf3 .kr(0.19,0,0.49,0.51),10,10,mul:50, add:350), 0, 0.3), 0.0)\}.play\
)\
	\
\cf4 //buzzpipes\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Mix\cf3 .ar(\cf5 Gendy3\cf3 .ar(0, 0, \cf5 SinOsc\cf3 .kr(0.1, 0, 0.1, 0.9),1.0, [100,205,410], 0.011,0.005, 12, 12, 0.12)), 0.0)\}.play\
\
\
\cf4 //modulate distributions\cf3 \
\cf4 //change of pitch as distributions change the duration structure and spectrum\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(\cf5 MouseX\cf3 .kr(0,7),\cf5 MouseY\cf3 .kr(0,7),mul:0.2), 0.0)\}.play\
\
\
\cf4 //modulate num of CPs\cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(knum:\cf5 MouseX\cf3 .kr(2,13),mul:0.2), 0.0)\}.play\
\
\
\cf4 //Gendy1 into Gendy2 into Gendy3...with cartoon side effects\cf3 \
(\
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(1,2,freq:\cf5 Gendy2\cf3 .ar(maxfreq:\cf5 Gendy1\cf3 .kr(5,4,0.3, 0.7, 0.1, \cf5 MouseY\cf3 .kr(0.1,10), 1.0, 1.0, 5,5, 25,26),minfreq:24, knum:\cf5 MouseX\cf3 .kr(1,13),mul:150, add:200), durscale:0.01, ampscale:0.01, mul:0.1), 0.0)\}.play\
)\
\
\cf4 //use SINUS to track any oscillator and take CP positions from it, use adparam and ddparam as the inputs to sample \cf3 \
\{\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(6,6,\cf5 LFPulse\cf3 .kr(\cf5 LFNoise0\cf3 .kr(19.0,0.5,0.6), 0, 0.4, 0.5), \cf5 Gendy1\cf3 .kr(durscale:0.01,ampscale:0.01), \cf5 MouseX\cf3 .kr(10,100),mul:0.2), 0.0)\}.play\
\
\
\
\cf4 //wolf tones\cf3 \
(\
\{\
\cf5 Mix\cf3 .arFill(10,\{\
\cf5 var\cf3  freq;\
\
freq= exprand(130,1160.3);\
\cf5 Pan2\cf3 .ar(\cf5 SinOsc\cf3 .ar(\cf5 Gendy3\cf3 .ar(6.rand,6.rand,\cf5 SinOsc\cf3 .kr(0.1,0,0.49,0.51),\cf5 SinOsc\cf3 .kr(0.13,0,0.49,0.51),freq, \cf5 SinOsc\cf3 .kr(0.17,0,0.0049,0.0051), \cf5 SinOsc\cf3 .kr(0.19,0,0.0049,0.0051), 12, 12, 200, 400), 0, 0.1), 1.0.rand2)\
\});\
\}.play\
)\
\
\cf4 //CAREFUL! mouse to far right causes explosion of sound-\cf3 \
\cf4 //notice how high frequency and num of CPs affects CPU cost\cf3 \
(\
\{\cf5 Pan2\cf3 .ar(\
\cf5 CombN\cf3 .ar(\
\cf5 Resonz\cf3 .ar(\
\cf5 Gendy3\cf3 .ar(2,3,freq:\cf5 MouseX\cf3 .kr(10,700), initCPs:100),\
\cf5 MouseY\cf3 .kr(50,1000), 0.1)\
,0.1,0.1,5, 0.16\
)\
, 0.0)\}.play\
)\
\
\
\cf4 //storm\cf3 \
(\
\{\
\cf5 var\cf3  n;\
n=15;\
\
0.5*\cf5 Mix\cf3 .arFill(n,\{\
\cf5 var\cf3  freq, numcps;\
\
freq= rrand(130,160.3);\
numcps= rrand(2,20);\
\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(6.rand,6.rand,10.0.rand,10.0.rand,freq*exprand(1.0,2.0), 10.0.rand, 10.0.rand, numcps, \cf5 SinOsc\cf3 .kr(exprand(0.02,0.2), 0, numcps/2, numcps/2), 0.5/(n.sqrt)), 1.0.rand2)\
\});\
\}.play\
)\
\
\
\
\cf4 //another glitchy moment\cf3 \
(\
\{\
\cf5 var\cf3  n;\
n=10;\
\
\cf5 Resonz\cf3 .ar(\
\cf5 Mix\cf3 .arFill(n,\{\
\cf5 var\cf3  freq, numcps;\
\
freq= rrand(50,560.3);\
numcps= rrand(2,20);\
\cf5 Pan2\cf3 .ar(\cf5 Gendy3\cf3 .ar(6.rand,6.rand,1.0.rand,1.0.rand,freq, 1.0.rand, 1.0.rand, numcps, \cf5 SinOsc\cf3 .kr(exprand(0.02,0.2), 0, numcps/2, numcps/2), 0.5/(n.sqrt)), 1.0.rand2)\
\})\
,\cf5 MouseX\cf3 .kr(100,2000), \cf5 MouseY\cf3 .kr(0.01,1.0), 0.3)\
;\
\}.play\
)\
\
\
\cf4 //SuperCollider implementation by Nick Collins (sicklincoln.org)}