{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 TBall
\f1\b0\fs24 					
\f0\b physical model of bouncing object
\f1\b0 \
\
superclass: UGen\
\
\
models the impacts of a bouncing object that is reflected by a vibrating surface \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 *ar(in, g, damp, friction)
\f1\b0 \
\
	
\f0\b in
\f1\b0 			modulated surface level\
	
\f0\b g
\f1\b0 			gravity\
	
\f0\b damp
\f1\b0 		damping on impact\
	
\f0\b friction		
\f1\b0 proximity from which on attraction to surface starts\
	
\f2\fs18 \
	\
	\cf2 // examples\cf0 \
	\
	\
	\cf2 // mouse x controls switch of level\
	// mouse y controls gravity\cf0 \
	(\
	\{ \
		\cf3 var\cf0  t, sf;\
		sf = \cf3 K2A\cf0 .ar(\cf3 MouseX\cf0 .kr > 0.5) > 0;\
		t = \cf3 TBall\cf0 .ar(sf, \cf3 MouseY\cf0 .kr(0.01, 1.0, 1), 0.01);\
		Pan2.ar(\cf3 Ringz\cf0 .ar(t * 10, 1200, 0.1), MouseX.kr(-1,1)); \
	\}.play;\
	)\
\
	\
	\cf2 // mouse x controls step noise modulation rate\cf0 \
	\cf2 // mouse y controls gravity\cf0 \
	(\
	\{ \
		\cf3 var\cf0  t, sf, g;\
		sf = \cf3 LFNoise0\cf0 .ar(\cf3 MouseX\cf0 .kr(0.5, 100, 1));\
		g = \cf3 MouseY\cf0 .kr(0.01, 10, 1);\
		t = \cf3 TBall\cf0 .ar(sf, g, 0.01, 0.002);\
		\cf3 Ringz\cf0 .ar(t * 4, [600, 645], 0.3); \
	\}.play;\
	)\
	\
	\cf2 // mouse x controls sine modulation rate\cf0 \
	\cf2 // mouse y controls friction\cf0 \
	\cf2 // gravity changes slowly\cf0 \
	(\
	\{ \
		\cf3 var\cf0  f, g, h, fr;\
		fr = \cf3 MouseX\cf0 .kr(1, 1000, 1);\
		h = \cf3 MouseY\cf0 .kr(0.0001, 0.001, 1);\
		g = \cf3 LFNoise1\cf0 .kr(0.1, 3, 5);\
		f = \cf3 TBall\cf0 .ar(\cf3 SinOsc\cf0 .ar(fr), g, 0.1, h);\
		Pan2.ar(\cf3 Ringz\cf0 .ar(f, 1400, 0.04),0,5)\
	\}.play;\
	)\
	\
	\cf2 // sine frequency rate is modulated with a slow sine\cf0 \
	\cf2 // mouse y controls friction\cf0 \
	\cf2 // mouse x controls gravity\cf0 \
	(\
	\{ \
		\cf3 var\cf0  f, g, h, fr;\
		fr = \cf3 LinExp\cf0 .kr(\cf3 SinOsc\cf0 .kr(0.1), -1, 1, 1, 600);\
		h = \cf3 MouseY\cf0 .kr(0.0001, 0.001, 1);\
		g = \cf3 MouseX\cf0 .kr(1, 10);\
		f = \cf3 TBall\cf0 .ar(\cf3 SinOsc\cf0 .ar(fr), g, 0.1, h);\
		Pan2.ar(\cf3 Ringz\cf0 .ar(f, 1400, 0.04),0,5)\
	\}.play;\
	)\
\
	\cf2 // this is no mbira: vibrations of a bank of resonators that are \
	// triggered by some bouncing things that bounce one on each resonator\
	\cf0 \
	\cf2 // mouse y controls friction\cf0 \
	\cf2 // mouse x controls gravity\cf0 \
	(\
		\{ \
		\cf3 var\cf0  sc, g, d, z, lfo, rate;\
		g = \cf3 MouseX\cf0 .kr(0.01, 100, 1);\
		d = \cf3 MouseY\cf0 .kr(0.00001, 0.2);\
		sc = #[451, 495.5, 595, 676, 734.5]; \cf2 //azande harp tuning by B. Guinahui\cf0 \
		lfo = \cf3 LFNoise1\cf0 .kr(1, 0.005, 1);\
		rate = 2.4;\
		rate = rate * sc.size.reciprocal;\
		z = sc.collect \{ \cf3 |u,i|\cf0 \
			\cf3 var\cf0  f, in;\
			in = \cf3 Decay\cf0 .ar(\
					\cf3 Mix\cf0 (\cf3 Impulse\cf0 .ar(rate, [1.0, \cf3 LFNoise0\cf0 .kr(rate / 12)].rand, 0.1)), 					0.001\
				);\
			in = \cf3 Ringz\cf0 .ar(in, \
						\cf3 Array\cf0 .fill(4, \{ |i| (i+1) + 0.1.rand2 \}) / 2\
						* \cf3 Decay\cf0 .ar(in,0.02,rand(0.5,1), lfo)						* u, \
						\cf3 Array\cf0 .exprand(4, 0.2, 1).sort\
						);\
			in = \cf3 Mix\cf0 (in);\
			f = \cf3 TBall\cf0 .ar(in * 10, g, d, 0.001);\
			\
			in + Mix(Ringz.ar(f, u * \cf3 Array\cf0 .fill(4, \{ |i| (i+1) + 0.3.rand2 \}) * 2, 0.1))\
		\};\
		\cf3 Splay\cf0 .ar(z) * 0.8\
		\}.play;\
	)\
	\
	\
}