{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 EnvGen
\f1\b0\fs18 				
\f0\b\fs26 envelope generator
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 superclass: UGen\
\
	*ar(envelope, gate, levelScale, levelBias, timeScale, doneAction)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
	Plays back break point envelopes. The envelopes are instances of the Env class. \
	See the 
\f0\b Env
\f2\b0  help file for more info.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\
	
\f0\b\fs24 envelope
\f2\b0  		an instance of Env (or an array of Controls)\
	
\f0\b gate			
\f2\b0 a control signal that holds the EnvGen open (except Env.linen)
\f0\b \
	levelScale
\f2\b0  	scales the levels of the breakpoints.\
	
\f0\b levelBias
\f2\b0 		offsets the levels of the breakpoints.\
	
\f0\b timeScale
\f2\b0 	scales the breakpoint durations.\
	
\f0\b doneAction
\f2\b0 	the doneAction arg causes the EnvGen to stop or end the \
		 		synth without having to use a PauseSelfWhenDone or FreeSelfWhenDone ugen. \
				It is more efficient to use a doneAction (see below)\
	
\f1\fs18 \
\
		\cf2 \{ \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc, 1.0, doneAction: 2) * \cf3 SinOsc\cf2 .ar(440,0,0.1) \}.play;\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \ul doneActions:
\f2\b0 \ulnone \
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	
\f1\fs18  0   do nothing when the envelope has ended.\
	 1   pause the synth running, it is still resident.\
	 2   remove the synth and deallocate it.\
	 3   remove and deallocate both this synth and the preceeding node.\
	 4   remove and deallocate both this synth and the following node.\
	 5   remove and deallocate this synth \
	 	and if the preceeding node is a group then do g_freeAll on it, else n_free it.\
	 6   remove and deallocate this synth \
	 	and if the following node is a group then do g_freeAll on it, else n_free it.\
	 7   remove and deallocate this synth and all preceeding nodes in this group\
	 8   remove and deallocate this synth and all following nodes in this group\
	\
	 9   remove and deallocate this synth and pause the preceeding node\
	 10  remove and deallocate this synth and pause the following node\
	 11  remove and deallocate this synth \
	 	and if the preceeding node is a group then do g_deepFree on it, else n_free it.\
	 12  remove and deallocate this synth \
	 	and if the following node is a group then do g_deepFree on it, else n_free it.
\f2\fs24 \
	
\f1\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\cf4 // example\cf2 \
\
(\
\cf3 SynthDef\cf2 (\cf5 "env-help"\cf2 , \{ \cf3 arg\cf2  out, gate; \
	\cf3 var\cf2  z;\
	z =  \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .adsr,gate) * \cf3 SinOsc\cf2 .ar(440,0,0.1);\
	\cf3 Out\cf2 .ar(out, z)\
\}).send(s);\
)\
\
s.sendMsg(\cf5 "/s_new"\cf2 , \cf5 "env-help"\cf2 , 1980); \cf4 // start a synth (silently, as gate defaults to 0)\cf2 \
\
\
\cf4 // turn on\cf2 \
s.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf6 \\gate\cf2 , 1);\
\
\cf4 // turn off\cf2 \
s.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf6 \\gate\cf2 , 0);\
\
\cf4 // it does not matter to what value the gate is set, as long as it is > 0\cf2 \
s.sendMsg(\cf5 "/n_set"\cf2 , 1980, \cf6 \\gate\cf2 , 2);\
\
s.sendMsg(\cf5 "/n_free"\cf2 , 1980);\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Changing an Env while playing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 SynthDef\cf0 (\cf8 "env"\cf0 , \{ \cf7 arg\cf0  i_outbus=0;\
	\cf7 var\cf0  env, envctl;\
	\
	\cf9 // make a dummy 8 segment envelope\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	env = \cf7 Env.\cf0 newClear(\cf7 8\cf0 );\
	\
	\cf9 // create a control argument array\
\cf0 	envctl = \cf7 Control\cf0 .names([\cf10 \\env\cf0 ]).kr( env.asArray );\
	\
	\cf7 ReplaceOut\cf0 .kr(i_outbus, \cf7 EnvGen\cf0 .kr(envctl, doneAction: 2));\
\}).send(s);\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 SynthDef\cf0 (\cf8 "sine"\cf0 , \{\
	\cf7 Out\cf0 .ar(0, \cf7 SinOsc\cf0 .ar(\cf7 In\cf0 .kr(0), 0, 0.2));\
\}).send(s);\
)\
\
s.sendMsg(\cf10 \\c_set\cf0 , 0, 800);\
\
s.sendMsg(\cf10 \\s_new\cf0 , \cf10 \\sine\cf0 , 1001, 1, 0);\
\
e = \cf7 Env\cf0 ([700,900,900,800], [1,1,1]*0.4, \cf10 \\exp\cf0 ).asArray;\
s.sendBundle(\cf7 nil\cf0 ,[\cf10 \\s_new\cf0 , \cf10 \\env\cf0 , 1002, 2, 1001],[\cf10 \\n_setn\cf0 , 1002, \cf10 \\env\cf0 , e.size] ++ e);\
\
f = \cf7 Env\cf0 ([1000,1000,800,1000,900,1000], [1,1,1,1,1]*0.3, \cf10 \\step\cf0 ).asArray;\
s.sendBundle(\cf7 nil\cf0 ,[\cf10 \\s_new\cf0 , \cf10 \\env\cf0 , 1003, 2, 1001],[\cf10 \\n_setn\cf0 , 1003, \cf10 \\env\cf0 , f.size] ++ f);\
\
s.sendMsg(\cf10 \\n_free\cf0 , 1001);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Forced release of the EnvGen\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
If you set the gate of an EnvGen to -1 or below, then the envelope will cutoff immediately. The time for it to cutoff is the amount less than -1, with -1 being as fast as possible, -1.5 being a cutoff in 0.5 seconds, etc. The cutoff shape is linear.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf7 SynthDef\cf0 (\cf8 "stealMe"\cf0 , \{ \cf7 arg\cf0  gate = 1;\
	\cf7 Out\cf0 .ar(0, \{\cf7 BrownNoise\cf0 .ar\}.dup * \cf7 EnvGen\cf0 .kr(\cf7 Env\cf0 .linen(2, 4, 2, 0.3), gate, doneAction:2))\
\}).send(s);\
\
s.sendMsg(\cf10 \\s_new\cf0 , \cf10 \\stealMe\cf0 , 1001, 1, 0);\
\
s.sendMsg(\cf10 \\n_set\cf0 , 1001, \cf10 \\gate\cf0 , -1.1); \cf9 // cutoff in 0.1 seconds\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf7 If\cf0  your synthDef has an \cf7 arg\cf0  named \cf8 "gate"\cf0 , you can use the convienience method of Node:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	\cf7 Node\cf0 -release(releaseTime)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Fast triggering tests\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
	\cf7 SynthDef\cf0 (\cf8 "help-EnvGen"\cf0 ,\{ \cf7 arg\cf0  out=0;		\
		\cf7 Out\cf0 .ar(out,	\
			\cf7 EnvGen\cf0 .kr(\
				Env.new([ 0, 1, 0.5, 0 ], [ 0.01, 0.3, 1 ], -4, 2, nil),\
				Impulse.kr(100)\
			) * \cf7 SinOsc\cf0 .ar(440,0,0.1)		\
		)\
	\}).play;\
)\
\
(\
	\cf7 SynthDef\cf0 (\cf8 "help-EnvGen"\cf0 ,\{ \cf7 arg\cf0  out=0;		\
		\cf7 Out\cf0 .ar(out,	\
			\cf7 EnvGen\cf0 .kr(\
				\cf7 Env\cf0 .perc( 0.1, 0.0, 0.5, 1, \cf10 \\welch\cf0  ),\
				Impulse.kr(100),\
				timeScale: 0.1\
			) * \cf7 SinOsc\cf0 .ar(440,0,0.3)		\
		)\
	\}).play;\
)\
\
\
\
\
			
\f2\fs24 \
see also Linen, Line, XLine, InTrig\
\
(not yet done: an EnvGenBuffer class)\
\
\
\
}