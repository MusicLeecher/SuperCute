{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red191\green0\blue0;\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 EnvGen
\f1\b0\fs18 				
\f0\b\fs28 EnvelopeGenerator
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 EnvGen.ar(envelope, gate, levelScale, levelBias, timeScale, doneAction)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
Plays back break point envelopes. The envelopes are instances of the Env class. \
See the 
\f0\b Env
\f2\b0  help file for more info.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 envelope
\f2\b0  - an instance of Env (or an array of Controls)\

\f0\b gate    
\f2\b0  -    a control signal that holds the EnvGen open (except Env.linen)
\f0\b \
levelScale
\f2\b0  - scales the levels of the breakpoints.\

\f0\b levelBias
\f2\b0  - offsets the levels of the breakpoints.\

\f0\b timeScale
\f2\b0  - scales the breakpoint durations.\

\f0\b doneAction
\f2\b0  -\
	 the doneAction \cf2 arg\cf0  lets you cause the \cf2 EnvGen\cf0  to stop or end the \
	 synth without having to use a \cf2 PauseSelfWhenDone\cf0  or \cf2 FreeSelfWhenDone\cf0  ugen. \
	 It is more efficient to use a doneAction.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\cf3 (\
	\cf4 SynthDef\cf3 (\cf5 "help-EnvGen"\cf3 ,\{ \cf4 arg\cf3  out=0;\
		\cf4 Out\cf3 .ar(out,\
			\cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .perc,1.0,doneAction: 2) \
				* \cf4 SinOsc\cf3 .ar(440,0,0.1)\
		)\
	\}).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0  doneAction = 0   do nothing when the envelope has ended.\
 doneAction = 1   pause the synth running, it is still resident.\
 doneAction = 2   remove the synth and deallocate it.\
 doneAction = 3   remove and deallocate both \cf2 this\cf0  synth and the preceeding node.\
 doneAction = 4   remove and deallocate both \cf2 this\cf0  synth and the following node.\
 doneAction = 5   remove and deallocate \cf2 this\cf0  synth and if the preceeding node is a group then do g_freeAll on it, else n_free it.\
 doneAction = 6   remove and deallocate \cf2 this\cf0  synth and if the following node is a group then do g_freeAll on it, else n_free it.\
 doneAction = 7   remove and deallocate \cf2 this\cf0  synth and all preceeding nodes in \cf2 this\cf0  group\
 doneAction = 8   remove and deallocate \cf2 this\cf0  synth and all following nodes in \cf2 this\cf0  group\
\
 doneAction = 9   remove and deallocate \cf2 this\cf0  synth and pause the preceeding node\
 doneAction = 10   remove and deallocate \cf2 this\cf0  synth and pause the following node\
 doneAction = 11   remove and deallocate \cf2 this\cf0  synth and if the preceeding node is a group then do g_deepFree on it, else n_free it.\
 doneAction = 12   remove and deallocate \cf2 this\cf0  synth and if the following node is a group then do g_deepFree on it, else n_free it.
\f2\fs24 \

\f1\fs18 \
\
(\
s = Server.local;\
b = \cf2 Bus\cf0 .control(s,1);\
\
SynthDef("help-EnvGen",\{ arg out=0,bus=0;\
	Out.ar(out,\
		\cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr,\cf2 In\cf0 .kr(bus) ) * \cf2 SinOsc\cf0 .ar(440,0,0.1)\
	)\
\}).play(s,[\\out,0,\\bus,b.index]);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 // turn on\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b.value = 1.0;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 // turn off\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b.value = 0.0;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 // same as 1.0\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 b.value = 0.2;\
\
b.free;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Then Envelope will be encoded in the synthDef file as a constant.  It is then not possible with EnvGen to change the Envelope while playing or to pass in a different Envelope as an argument.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Changing an Env while playing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf7 "env"\cf0 , \{ \cf2 arg\cf0  i_outbus=0;\
	\cf2 var\cf0  env, envctl;\
	\
	\cf6 // make a dummy 8 segment envelope\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	env = \cf2 Env.\cf0 newClear(\cf2 8\cf0 );\
	\
	\cf6 // create a control argument array\
\cf0 	envctl = \cf2 Control\cf0 .names([\cf8 \\env\cf0 ]).kr( env.asArray );\
	\
	\cf2 ReplaceOut\cf0 .kr(i_outbus, \cf2 EnvGen\cf0 .kr(envctl, doneAction: 2));\
\}).load(s);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf7 "sine"\cf0 , \{\
	\cf2 Out\cf0 .ar(0, \cf2 SinOsc\cf0 .ar(\cf2 In\cf0 .kr(0), 0, 0.2));\
\}).load(s);\
\
\
s.sendMsg(\cf8 \\c_set\cf0 , 0, 800);\
\
s.sendMsg(\cf8 \\s_new\cf0 , \cf8 \\sine\cf0 , 1001, 1, 0);\
\
e = \cf2 Env\cf0 ([700,900,900,800], [1,1,1]*0.4, \cf8 \\exp\cf0 ).asArray;\
s.sendBundle(\cf2 nil\cf0 ,[\cf8 \\s_new\cf0 , \cf8 \\env\cf0 , 1002, 2, 1001],[\cf8 \\n_setn\cf0 , 1002, \cf8 \\env\cf0 , e.size] ++ e);\
\
f = \cf2 Env\cf0 ([1000,1000,800,1000,900,1000], [1,1,1,1,1]*0.3, \cf8 \\step\cf0 ).asArray;\
s.sendBundle(\cf2 nil\cf0 ,[\cf8 \\s_new\cf0 , \cf8 \\env\cf0 , 1003, 2, 1001],[\cf8 \\n_setn\cf0 , 1003, \cf8 \\env\cf0 , f.size] ++ f);\
\
s.sendMsg(\cf8 \\n_free\cf0 , 1001);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Forced release of the EnvGen\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \
If you set the gate of an EnvGen to -1 or below, then the envelope will cutoff immediately. The time for it to cutoff is the amount less than -1, with -1 being as fast as possible, -1.5 being a cutoff in 0.5 seconds, etc. The cutoff shape is linear.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 SynthDef\cf0 (\cf7 "stealMe"\cf0 , \{ \cf2 arg\cf0  gate = 1;\
	\cf2 Out\cf0 .ar(0, \{\cf2 BrownNoise\cf0 .ar\}.dup * \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(2, 4, 2, 0.3), gate, doneAction:2))\
\}).load(s);\
\
s.sendMsg(\cf8 \\s_new\cf0 , \cf8 \\stealMe\cf0 , 1001, 1, 0);\
\
s.sendMsg(\cf8 \\n_set\cf0 , 1001, \cf8 \\gate\cf0 , -1.1); \cf6 // cutoff in 0.1 seconds\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 If\cf0  your synthDef has an \cf2 arg\cf0  named \cf7 "gate"\cf0 , you can use the convienience method of Node:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 	\cf2 Node\cf0 -release(releaseTime)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Fast triggering tests\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 (\
	\cf2 SynthDef\cf0 (\cf7 "help-EnvGen"\cf0 ,\{ \cf2 arg\cf0  out=0;		\
		\cf2 Out\cf0 .ar(out,	\
			\cf2 EnvGen\cf0 .kr(\
				Env.new([ 0, 1, 0.5, 0 ], [ 0.01, 0.3, 1 ], -4, 2, nil),\
				Impulse.kr(100)\
			) * \cf2 SinOsc\cf0 .ar(440,0,0.1)		\
		)\
	\}).play;\
)\
\
(\
	\cf2 SynthDef\cf0 (\cf7 "help-EnvGen"\cf0 ,\{ \cf2 arg\cf0  out=0;		\
		\cf2 Out\cf0 .ar(out,	\
			\cf2 EnvGen\cf0 .kr(\
				\cf2 Env\cf0 .perc( 0.1, 0.0, 0.5, 1, \cf8 \\welch\cf0  ),\
				Impulse.kr(100),\
				timeScale: 0.1\
			) * \cf2 SinOsc\cf0 .ar(440,0,0.3)		\
		)\
	\}).play;\
)\
\
\
\
\
			
\f2\fs24 \
see also [InTrig]\
\
(not yet done: an EnvGenBuffer class)\
\
\
\
}