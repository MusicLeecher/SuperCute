{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;\red0\green0\blue0;\red96\green96\blue96;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Klank			bank of resonators\

\fs24 \
Klank.ar(specificationsArrayRef, input, freqscale, freqoffset, decayscale)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Klank is a bank of fixed frequency resonators which can be used to simulate the resonant modes of an object. Each mode is given a ring time, which is the time for the mode to decay by 60 dB.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 specificationsArrayRef
\f1\b0  - a Ref to an Array of three Arrays :\
	
\f0\b frequencies
\f1\b0  - an Array of filter frequencies.\
	
\f0\b amplitudes
\f1\b0  - an Array of filter amplitudes, or nil. If nil, then amplitudes default to 1.0\
	
\f0\b ring
\f1\b0  
\f0\b times
\f1\b0  - an Array of 60 dB decay times for the filters.\
All subarrays, if not nil, should have the same length.\

\f0\b input
\f1\b0  - the excitation input to the resonant filter bank.\

\f0\b freqscale
\f1\b0  - a scale factor multiplied by all frequencies at initialization time.\

\f0\b freqoffset
\f1\b0  - an offset added to all frequencies at initialization time.\

\f0\b decayscale
\f1\b0  - a scale factor multiplied by all ring times at initialization time.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \{ \cf2 Klank\cf0 .ar(`[[800, 1071, 1153, 1723], \cf2 nil\cf0 , [1, 1, 1, 1]], \cf2 Impulse\cf0 .ar(2, 0, 0.1)) \}.play;\
\
\{ \cf2 Klank\cf0 .ar(`[[800, 1071, 1353, 1723], \cf2 nil\cf0 , [1, 1, 1, 1]], \cf2 Dust\cf0 .ar(8, 0.1)) \}.play;\
\
\{ \cf2 Klank\cf0 .ar(`[[800, 1071, 1353, 1723], \cf2 nil\cf0 , [1, 1, 1, 1]], \cf2 PinkNoise\cf0 .ar(0.007)) \}.play;\
\
\{ \cf2 Klank\cf0 .ar(`[[200, 671, 1153, 1723], \cf2 nil\cf0 , [1, 1, 1, 1]], \cf2 PinkNoise\cf0 .ar([0.007,0.007])) \}.play;\
\
(\
play(\{\
	\cf2 Klank\cf0 .ar(`[ \
		\cf2 Array\cf0 .rand(12, 800.0, 4000.0),		\cf3 // frequencies\
\cf0 		\cf2 nil\cf0 ,  							\cf3 // amplitudes (default to 1.0)\
\cf0 		\cf2 Array\cf0 .rand(12, 0.1, 2)				\cf3 // ring times\
\cf0 		], \cf2 Decay\cf0 .ar(\cf2 Impulse\cf0 .ar(4), 0.03, \cf2 ClipNoise\cf0 .ar(0.01)))\
\})\
)\
\
\
\
\cf3 // a synth def that has 4 partials\
\cf0 (\
s = \cf2 Server\cf0 .local;\
\cf2 SynthDef\cf0 (\cf4 "help-Control"\cf0 , \{ \cf2 arg\cf0  out=0,i_freq;\
	\cf2 var\cf0  klank, n, harm, amp, ring;\
	\
	\cf3 // harmonics\cf0 \
	harm = \cf2 Control\cf0 .names([\cf5 \\harm\cf0 ]).ir(\cf2 Array\cf0 .series(4,1,1).postln);\
	\cf3 // amplitudes\cf0 \
	amp = \cf2 Control\cf0 .names([\cf5 \\amp\cf0 ]).ir(\cf2 Array\cf0 .fill(4,0.05));\
	\cf3 // ring times\cf0 \
	ring = \cf2 Control\cf0 .names([\cf5 \\ring\cf0 ]).ir(\cf2 Array\cf0 .fill(4,1));\
	\
	klank = \cf2 Klank\cf0 .ar(`[harm,amp,ring], \{\cf2 ClipNoise\cf0 .ar(0.003)\}.dup, i_freq);\
	\
	\cf2 Out\cf0 .ar(out, klank);\
\}).send(s);\
)\
\
\cf3 // nothing special yet, just using the default set of harmonics.\
\cf0 a = \cf2 Synth\cf0 (\cf4 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 300]);\
b = \cf2 Synth\cf0 (\cf4 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 400]);\
c = \cf2 Synth\cf0 (\cf4 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 533.33]);\
d = \cf2 Synth\cf0 (\cf4 "help-Control"\cf0 ,[\cf5 \\i_freq\cf0 , 711.11]);\
\
a.free;\
b.free;\
c.free;\
d.free;\
\
\cf3 // in order to set the harmonics amps and ring times at\
// initialization time we need to use an OSC bundle.\
\cf0 (\
s.sendBundle(\cf2 nil\cf0 ,\
	[\cf4 "/s_new"\cf0 , \cf4 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf3 // start note\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "harm"\cf0 , 4, 1, 3, 5, 7] \cf3 // set odd harmonics\
\cf0 	);\
)\
\
s.sendMsg(\cf4 "/n_free"\cf0 , 2000);\
\
(\
s.sendBundle(\cf2 nil\cf0 ,\
	[\cf4 "/s_new"\cf0 , \cf4 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf3 // start note\
\cf0 	\cf3 // set geometric series harmonics\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "harm"\cf0 , 4] ++ \cf2 Array\cf0 .geom(4,1,1.61)\
	);\
)\
\
s.sendMsg(\cf4 "/n_free"\cf0 , 2000);\
\
(\
\cf3 // set harmonics, ring times and amplitudes\
\cf0 s.sendBundle(\cf2 nil\cf0 ,\
	[\cf4 "/s_new"\cf0 , \cf4 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf3 // start note\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "harm"\cf0 , 4, 1, 3, 5, 7], \cf3 // set odd harmonics\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "ring"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.1), \cf3 // set shorter ring time\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "amp"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.2) \cf3 // set louder amps\
\cf0 	);\
)\
\
s.sendMsg(\cf5 \\n_trace\cf0 , 2000);\
s.sendMsg(\cf4 "/n_free"\cf0 , 2000);\
\
(\
\cf3 // same effect as above, but packed into one n_setn command\
\cf0 s.sendBundle(\cf2 nil\cf0 ,\
	[\cf4 "/s_new"\cf0 , \cf4 "help-Control"\cf0 , 2000, 1, 0, \cf5 \\i_freq\cf0 , 500], \cf3 // start note\
\cf0 	[\cf4 "/n_setn"\cf0 , 2000, \cf4 "harm"\cf0 , 4, 1, 3, 5, 7,\
		\cf4 "ring"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.1)\
		++ [\cf4 "amp"\cf0 , 4] ++ \cf2 Array\cf0 .fill(4,0.2)\
	);\
)\
\
\cf6 s.sendMsg(\cf7 "/n_free"\cf6 , 2000);\
\
\
\cf8 \
\
//////////////\cf3 ////////////////////////////////////////////////////////\cf6 \
\
\cf8 //-- overlap texture\cf6 \
\cf0 (\
\cf2 SynthDef\cf0 (\cf4 "help-KlankOverlapTexture"\cf0 , \{\cf2 |out = 0, freqs = #[0,0,0,0,0,0,0,0,0,0,0,0], rings = #[0,0,0,0,0,0,0,0,0,0,0,0], atk = 5, sus = 8, rel = 5, pan = 0|\cf0 \
	\cf2 var\cf0  e = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(atk, sus, rel, 1, 4), doneAction:2);\
	\cf2 var\cf0  i = \cf2 Decay\cf0 .ar(\cf2 Impulse\cf0 .ar(\cf2 Rand\cf0 (0.8, 2.2)), 0.03, \cf2 ClipNoise\cf0 .ar(0.01));\
	\cf2 var\cf0  z = \cf2 Klank\cf0 .ar(\
		`[freqs, \cf2 nil\cf0 , rings],	\cf3 // specs\cf0 \
		i					\cf3 // input\cf0 \
	);\
	\cf2 Out\cf0 .ar(out, \cf2 Pan2\cf0 .ar(z*e, pan));\
\}).send(s);\
\
r = \cf2 Routine\cf0 \{\
	\cf2 var\cf0  sustain = 8, transition = 3, overlap = 4;\
	\cf2 var\cf0  period = transition*2+sustain/overlap;\
	0.5.wait;			\cf3 //wait for the synthdef to be sent to the server\cf0 \
	\cf2 inf\cf0 .do\{\
		\cf2 Synth\cf0 (\cf4 "help-KlankOverlapTexture"\cf0 , [\
			\cf5 \\atk\cf0 , transition,\
			\cf5 \\sus\cf0 , sustain,\
			\cf5 \\rel\cf0 , transition,\
			\cf5 \\pan\cf0 , 1.0.rand2\
		]).setn(\
			\cf5 \\freqs\cf0 , \{200.0.rrand(4000)\}.dup(12),\
			\cf5 \\rings\cf0 , \{0.1.rrand(2)\}.dup(12)\
		);\
		period.wait;\
	\}\
\};\
r.play;\
)\
\
r.stop;	\cf3 //stop spawning new synths\cf0 \
\
\
\
\cf3 //-- frequency and decay scaling\cf0 \
(\
\cf2 SynthDef\cf0 (\cf4 "help-KlankScaling"\cf0 , \{\cf2 |out = 0, freq = 0, rings = #[0,0,0,0,0,0,0,0,0,0,0,0], pan = 0|\cf0 \
	\cf2 var\cf0  e = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 (#[1, 1, 0], #[0.4, 0.01]), doneAction:2);\
	\cf2 var\cf0  i = \cf2 Decay\cf0 .ar(\cf2 Impulse\cf0 .ar(0), 0.03, \cf2 ClipNoise\cf0 .ar(0.01));\
	\cf2 var\cf0  z = \cf2 Klank\cf0 .ar(\
		`[(1..12), \cf2 nil\cf0 , rings],				\cf3 // specs (partials, amplitudes, ringtimes)\cf0 \
		i,								\cf3 // input\cf0 \
		freq,							\cf3 // scale to this frequency\cf0 \
		0,								\cf3 // frequency offset\cf0 \
		\cf2 MouseX\cf0 .kr(0.2, 3)					\cf3 // scale decay times\cf0 \
	);\
	\cf2 Out\cf0 .ar(out, \cf2 Pan2\cf0 .ar(z*e, pan));\
\}).send(s);\
\
r = \cf2 Routine\cf0 \{\
	\cf2 var\cf0  sustain = 8, transition = 3;\
	\cf2 var\cf0  mode = #[0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 17, 19, 21, 23, 24];\
	0.5.wait;			\cf3 //wait for the synthdef to be sent to the server\cf0 \
	\cf2 inf\cf0 .do\{\cf2 |i|\cf0 \
		\cf2 Synth\cf0 (\cf4 "help-KlankScaling"\cf0 , [\
			\cf5 \\freq\cf0 , (72 + (mode @@ i)).midicps\
		]).setn(\cf5 \\rings\cf0 , \{0.1.rrand(2)\}.dup(12));\
		0.2.wait;\
	\}\
\};\
r.play;\
)\
\
r.stop;\
\
\
\cf3 //-- overlap texture 2\cf0 \
(\
\cf2 SynthDef\cf0 (\cf4 "help-KlankOverlapTexture2"\cf0 , \{\cf2 |out = 0, freqs = #[0,0,0,0,0,0,0,0,0,0,0,0], rings = #[0,0,0,0,0,0,0,0,0,0,0,0], atk = 5, sus = 8, rel = 5, pan = 0|\cf0 \
	\cf2 var\cf0  e = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(atk, sus, rel, 1, 4), doneAction:2);\
	\cf2 var\cf0  i = \cf2 BrownNoise\cf0 .ar(0.0012);\
	\cf2 var\cf0  z = \cf2 Klank\cf0 .ar(\
		`[freqs, \cf2 nil\cf0 , rings],	\cf3 // specs\cf0 \
		i					\cf3 // input\cf0 \
	);\
	\cf2 Out\cf0 .ar(out, \cf2 Pan2\cf0 .ar(z*e, pan));\
\}).send(s);\
\
r = \cf2 Routine\cf0 \{\
	\cf2 var\cf0  sustain = 6, transition = 4, overlap = 5;\
	\cf2 var\cf0  period = transition*2+sustain/overlap;\
	0.5.wait;			\cf3 //wait for the synthdef to be sent to the server\cf0 \
	\cf2 inf\cf0 .do\{\
		\cf2 Synth\cf0 (\cf4 "help-KlankOverlapTexture2"\cf0 , [\
			\cf5 \\atk\cf0 , transition,\
			\cf5 \\sus\cf0 , sustain,\
			\cf5 \\rel\cf0 , transition,\
			\cf5 \\pan\cf0 , 1.0.rand2\
		]).setn(\
			\cf5 \\freqs\cf0 , \{6000.0.linrand+80\}.dup(12),\
			\cf5 \\rings\cf0 , \{0.1.rrand(3)\}.dup(12)\
		);\
		period.wait;\
	\}\
\};\
r.play;\
)\
\
r.stop;\
\
\
\cf3 //-- overlap texture 3\cf0 \
(\
\cf2 SynthDef\cf0 (\cf4 "help-KlankOverlapTexture3"\cf0 , \{\cf2 |out = 0, freqs = #[0,0,0,0,0,0,0,0,0,0,0,0], rings = #[0,0,0,0,0,0,0,0,0,0,0,0], pan = 0|\cf0 \
	\cf2 var\cf0  e = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 (#[1, 1, 0], #[18, 3]), doneAction:2);\
	\cf2 var\cf0  i = \cf2 Decay\cf0 .ar(\cf2 Impulse\cf0 .ar(\cf2 Rand\cf0 (0.2, 0.6)), 0.8, \cf2 ClipNoise\cf0 .ar(0.001));\
	\cf2 var\cf0  z = \cf2 Klank\cf0 .ar(\
		`[freqs, \cf2 2\cf0 , rings],	\cf3 // specs\cf0 \
		i					\cf3 // input\cf0 \
	);\
	\cf2 Out\cf0 .ar(out, \cf2 Pan2\cf0 .ar(z*e, pan));\
\}).send(s);\
\
r = \cf2 Routine\cf0 \{\
	0.5.wait;			\cf3 //wait for the synthdef to be sent to the server\cf0 \
	\cf2 inf\cf0 .do\{\
		\cf2 Synth\cf0 (\cf4 "help-KlankOverlapTexture3"\cf0 , [\
			\cf5 \\pan\cf0 , 1.0.rand2\
		]).setn(\
			\cf5 \\freqs\cf0 , \{12000.0.linrand+80\}.dup(12),\
			\cf5 \\rings\cf0 , \{3.rrand(10)\}.dup(12)\
		);\
		3.wait;\
	\}\
\};\
r.play;\
)\
\
r.stop;\
\
}