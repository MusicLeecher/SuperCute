{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red0\green115\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 DynKlank			bank of resonators\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
DynKlank.ar(specificationsArrayRef, input, freqscale, freqoffset, decayscale)\

\f1\b0 \
DynKlank is a bank of frequency resonators which can be used to simulate the resonant modes of an object. Each mode is given a ring time, which is the time for the mode to decay by 60 dB.\
\
Unlike Klank, the frequencies in DynKlank can be changed after it has been started.\
\

\f0\b specificationsArrayRef
\f1\b0  - a Ref to an Array of three Arrays :\
	
\f0\b frequencies
\f1\b0  - an Array of filter frequencies.\
	
\f0\b amplitudes
\f1\b0  - an Array of filter amplitudes, or nil. If nil, then amplitudes default to 1.0\
	
\f0\b ring
\f1\b0  
\f0\b times
\f1\b0  - an Array of 60 dB decay times for the filters.\
All subarrays, if not nil, should have the same length.\

\f0\b input
\f1\b0  - the excitation input to the resonant filter bank.\

\f0\b freqscale
\f1\b0  - a scale factor multiplied by all frequencies at initialization time.\

\f0\b freqoffset
\f1\b0  - an offset added to all frequencies at initialization time.\

\f0\b decayscale
\f1\b0  - a scale factor multiplied by all ring times at initialization time.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\cf2 s.boot;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \{ \cf3 DynKlank\cf2 .ar(`[[800, 1071, 1153, 1723], \cf3 nil\cf2 , [1, 1, 1, 1]], \cf3 Impulse\cf2 .ar(2, 0, 0.1)) \}.play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\{ \cf3 DynKlank\cf2 .ar(`[[800, 1071, 1353, 1723], \cf3 nil\cf2 , [1, 1, 1, 1]], \cf3 Dust\cf2 .ar(8, 0.1)) \}.play;\
\
\{ \cf3 DynKlank\cf2 .ar(`[[800, 1071, 1353, 1723], \cf3 nil\cf2 , [1, 1, 1, 1]], \cf3 PinkNoise\cf2 .ar(0.007)) \}.play;\
\
\{ \cf3 DynKlank\cf2 .ar(`[[200, 671, 1153, 1723], \cf3 nil\cf2 , [1, 1, 1, 1]], \cf3 PinkNoise\cf2 .ar([0.007,0.007])) \}.play;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 (\
\cf4 // change freqs and ringtimes with mouse\cf2 \
\{	\cf3 var\cf2  freqs, ringtimes;\
	freqs = [800, 1071, 1153, 1723] * \cf3 MouseX\cf2 .kr(0.5, 2, 1);\
	ringtimes = [1, 1, 1, 1] * \cf3 MouseY\cf2 .kr(0.1, 10, 1);\
	\cf3 DynKlank\cf2 .ar(`[freqs, \cf3 nil\cf2 , ringtimes ], \cf3 Impulse\cf2 .ar(2, 0, 0.1))\
\}.play;\
)\
\
(\
\cf4 // set them from outside later:\cf2 \
\pard\pardeftab720\ql\qnatural
\cf3 SynthDef\cf2 (\cf5 'help-dynKlank'\cf2 , \{\
	\cf3 var\cf2  freqs, ringtimes, signal;\
	freqs = \cf3 Control\cf2 .names([\cf6 \\freqs\cf2 ]).kr([800, 1071, 1153, 1723]);\
	ringtimes = \cf3 Control\cf2 .names([\cf6 \\ringtimes\cf2 ]).kr([1, 1, 1, 1]);\
	signal = \cf3 DynKlank\cf2 .ar(`[freqs, \cf3 nil\cf2 , ringtimes ], \cf3 Impulse\cf2 .ar(2, 0, 0.1));\
	\cf3 Out\cf2 .ar(0, signal);\
\}).load(s);\
)\
\
a = \cf3 Synth\cf2 (\cf5 'help-dynKlank'\cf2 );\
\
a.setn(\cf6 \\freqs\cf2 , \cf3 Array\cf2 .rand(4, 500, 2000));\
a.setn(\cf6 \\ringtimes\cf2 , \cf3 Array\cf2 .rand(4, 0.2, 4) );\
\
(	\cf4 // create multichannel controls directly with literal arrays:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 SynthDef\cf2 (\cf6 'help-dynKlank'\cf2 , \{\cf3 | freqs (#[100, 200, 300, 400]), \
	amps (#[1, 0.3, 0.2, 0.05]), \
	rings (#[1, 1, 1, 2])|\cf2 \
\
	\cf3 Out\cf2 .ar(0, \cf3 DynKlank\cf2 .ar(`[freqs, amps, rings], \cf3 WhiteNoise\cf2 .ar * 0.001))\
\}).send(s)\
)\
\pard\pardeftab720\ql\qnatural
\cf2 \
\cf0 a = \cf7 Synth\cf0 (\cf5 'help-dynKlank'\cf0 );\
\
a.setn(\cf5 \\freqs\cf0 , \cf7 Array\cf0 .rand(4, 500, 2000));\
a.setn(\cf5 \\amps\cf0 , \cf7 Array\cf0 .exprand(4, 0.01, 1));\
\cf2 \
\
}