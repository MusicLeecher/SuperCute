{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 DiskIn				stream in audio from a file
\f1\b0\fs18 \cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 DiskIn.ar(numChannels, bufnum)
\f1\b0\fs18 \
	\cf2 \

\f2\fs24 \cf0 Continously play a longer soundfile from disk.  This requires a buffer to be preloaded with one buffer size of sound.
\f1\fs18 \
\
s.boot; \cf3 // start the server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\cf2 SynthDef\cf0 (\cf4 "help-Diskin"\cf0 , \{ arg bufnum = 0;\
	\cf2 Out\cf0 .ar(0, \cf2 DiskIn\cf0 .ar(1, bufnum));\
\}).send(s)\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 OSC Messaging Style
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // allocate a disk i/o buffer\
\cf0 s.sendMsg(\cf4 "/b_alloc"\cf0 , 0, 65536, 1);\
\
\cf3 // open an input file for this buffer, leave it open\cf0 \
s.sendMsg(\cf4 "/b_read"\cf0 , 0, \cf4 "sounds/a11wlk01-44_1.aiff"\cf0 , 0, 65536, 0, 1);\
\
\cf3 // create a diskin node\
\cf0 s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "help-Diskin"\cf0 , x = s.nextNodeID, 1, 1);\cf3 \
\
\cf0 s.sendMsg(\cf4 "/b_close"\cf0 , 0); \cf3 // close the file (very important!)\
\
\cf0 \
\cf3 // again \
// don't need to reallocate and Synth is still reading\
\cf0 s.sendMsg(\cf4 "/b_read"\cf0 , 0, \cf4 "sounds/a11wlk01-44_1.aiff"\cf0 , 0, 0, 0, 1);\
\
s.sendMsg(\cf4 "/n_free"\cf0 , x); \cf3 // stop reading\
\
\cf0 s.sendMsg(\cf4 "/b_close"\cf0 , 0); \cf3 // close the file.\
\cf0 \
s.sendMsg(\cf4 "/b_free"\cf0 , 0); \cf3 // frees the buffer\cf0 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Using Buffer (Object Style)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
b = \cf2 Buffer\cf0 .cueSoundFile(s, \cf4 "sounds/a11wlk01-44_1.aiff"\cf0 , 0, 1);\
\
x = \{ \cf2 DiskIn\cf0 .ar(1, b.bufnum) \}.play;\
\
b.close;	\
\
\cf3 // again\
// note the like named instance method, but different arguments\cf0 \
b.cueSoundFile(\cf4 "sounds/a11wlk01-44_1.aiff"\cf0 , 0);	\
	\
x.free; b.close; b.free;	\
\
\
\
\cf3 // loop it (for better looping use PlayBuf!)\cf0 \
(\
p = \cf4 "sounds/a11wlk01-44_1.aiff"\cf0 ;\
a = \cf2 SoundFile\cf0 .new;\
a.openRead(p);\
d = a.numFrames/s.sampleRate; \cf3 // get the duration\cf0 \
a.close; \cf3 // don't forget\cf0 \
b = \cf2 Buffer\cf0 .cueSoundFile(s, p, 0, 1);\
f = \{ \cf2 DiskIn\cf0 .ar(1, b.bufnum) \};\
x = f.play;\
r = \cf2 Routine\cf0 (\{\
	loop(\{ d.wait; x.free; x = f.play; b.close( b.cueSoundFileMsg(p, 0)) \});\
\}).play; )\
r.stop; x.free; b.close; b.free; \cf3 // you need to do all these to properly cleanup\cf4 \
\
\
\cf0 \
\cf3 // cue and play right away\cf0 \
(\
\cf2 SynthDef\cf0 (\cf4 "help-Diskin"\cf0 , \{ \cf2 arg\cf0  bufnum = 0;\
	\cf2 Out\cf0 .ar(0, \cf2 DiskIn\cf0 .ar(1, bufnum));\
\}).send(s);\
)\
(		\
x = \cf2 Synth\cf0 .basicNew(\cf4 "help-Diskin"\cf0 );\
m = \{ \cf2 arg\cf0  buf; x.addToHeadMsg(nil, [\cf5 \\bufnum\cf0 ,buf.bufnum])\};\
\
b = \cf2 Buffer\cf0 .cueSoundFile(s,\cf4 "sounds/a11wlk01-44_1.aiff"\cf0 ,0,1, completionMessage: m);\
\
)		\
		\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 See 
\f0\b PlayBuf
\f2\b0  for playing a soundfile loaded into memory.}