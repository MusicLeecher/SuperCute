{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 FFT
\f1\b0\fs18 		
\f0\b\fs28 fast fourier transform
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 The fast fourier transform analyzes the frequency content of a signal. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \

\f0\b\fs24 \cf3 	FFT(bufferIndex,input);\

\f1\b0\fs18 \cf2 	\

\f2\fs24 \cf3 FFT uses a local buffer for holding the buffered audio.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf3 \
\
s = \cf4 Server\cf3 .local;\
\
b = \cf4 Buffer\cf3 (s,2048,1);\
\
\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-noopFFT"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \cf4 WhiteNoise\cf3 .ar(0.01);\
	chain = \cf4 FFT\cf3 (bufnum, in);\
	chain.inspect; \cf6 // its an FFT\
\cf3 	\cf4 Out\cf3 .ar(out, \
		\cf4 IFFT\cf3 (chain) \cf6 // inverse FFT\
\cf3 	);\
\}).play(s,[0,b.bufnum]);\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-sineFFT"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \cf4 SinOsc\cf3 .ar(\cf4 SinOsc\cf3 .kr(\cf4 SinOsc\cf3 .kr(0.08,0,6,6.2).squared, 0, 100,800));\
	chain = \cf4 FFT\cf3 (bufnum, in);\
	\cf4 Out\cf3 .ar(out, \cf4 IFFT\cf3 (chain));\
\}).play(s,[0,b.bufnum]);\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-magAbove"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \cf4 SinOsc\cf3 .ar(\cf4 SinOsc\cf3 .kr(\cf4 SinOsc\cf3 .kr(0.08,0,6,6.2).squared, 0, 100,800));\
	\cf6 //in = WhiteNoise.ar(0.2);\
\cf3 	chain = \cf4 FFT\cf3 (bufnum, in);\
	chain = \cf4 PV_MagAbove\cf3 (chain, 310); \
	\cf4 Out\cf3 .ar(out, 0.5 * \cf4 IFFT\cf3 (chain));\
\}).play(s,[0,b.bufnum]);\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-brick"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \{\cf4 WhiteNoise\cf3 .ar(0.2)\}.dup;\
	chain = \cf4 FFT\cf3 (bufnum, in);\
	chain = \cf4 PV_BrickWall\cf3 (chain, \cf4 SinOsc\cf3 .kr(0.1)); \
	\cf4 Out\cf3 .ar(out, \cf4 IFFT\cf3 (chain));\
\}).play(s,[0,b.bufnum]);\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-randcomb"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \{\cf4 WhiteNoise\cf3 .ar(0.8)\}.dup;\
	chain = \cf4 FFT\cf3 (bufnum, in);\
	chain = \cf4 PV_RandComb\cf3 (chain, 0.95, \cf4 Impulse\cf3 .kr(0.4)); \
	\cf4 Out\cf3 .ar(out, \cf4 IFFT\cf3 (chain));\
\}).play(s,[0,b.bufnum]);\
\
\
\cf4 SynthDef\cf3 (\cf5 "help-rectcomb"\cf3 , \{ \cf4 arg\cf3  out=0,bufnum=0;\
	\cf4 var\cf3  in, chain;\
	in = \{\cf4 WhiteNoise\cf3 .ar(0.2)\}.dup;\
	chain = \cf4 FFT\cf3 (bufnum, in);\
	chain = \cf4 PV_RectComb\cf3 (chain, 8, \cf4 LFTri\cf3 .kr(0.097,0,0.4,0.5), \
		\cf4 LFTri\cf3 .kr(0.24,0,-0.5,0.5)); \
	\cf4 Out\cf3 .ar(out, \cf4 IFFT\cf3 (chain));\
\}).play(s,[0,b.bufnum]);\
\
\
}