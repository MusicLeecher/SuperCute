{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 TSelfDemand				
\fs26 demand results as trigger from demand rate ugens
\fs36 \

\fs24 \

\f1\b0 superclass: SelfDemand
\f0\b \
\
TSelfDemand.ar(duration, reset, [..ugens..], doneAction)
\f2\b0\fs18 \
\
\

\f1\fs24 A value is demanded each ugen in the list and output  as a trigger according to a stream of duration values. \
The unit generators in the list should be 'demand' rate.\
When there is a trigger at the reset input, the demand rate ugens in the list and the duration are reset.\
The reset input may also be a demand ugen, providing a stream of reset times.\
\
\

\f0\b duration
\f1\b0 		time values. Can be a demand ugen or any signal. \
			The next trigger value is acquired after the duration provided by the last time value.\
		\

\f0\b reset
\f1\b0 		trigger or reset time values. Resets the list of ugens and the duration ugen when triggered.\
			The reset input may also be a demand ugen, providing a stream of reset times.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 [...ugens...]
\f1\b0 	a list of demand ugens providing the output values.\
\

\f0\b doneAction
\f1\b0 	a doneAction that is evaluated when the duration stream ends.\
			For the various doneActions, see: [Synth-Controlling-UGens]
\fs18 \

\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\
\
\
\cf2 // examples\cf0 \
\
s.boot;\
\
\
(\
	\{\
		\cf3 var\cf0  trig;\
		trig = T\cf3 SelfDemand\cf0 .ar(\
				\cf3 Dseq\cf0 ([0.1, 0.2, 0.4, 0.3], \cf3 inf\cf0 ), \cf2 // demand ugen as durations\cf0 \
				0, \
				\cf3 Dseq\cf0 ([0.1, 0.4, 0.01, 0.5, 1.0], \cf3 inf\cf0 )\
			); \
		\cf3 Ringz.ar(trig, 1000, 0.1)\cf0 \
	\
	\}.play;\
)\
\
(\
	\{\
		\cf3 var\cf0  trig;\
		trig = T\cf3 SelfDemand\cf0 .ar(\
				\cf3 MouseX\cf0 .kr(0.001, 2, 1), \cf2 // control rate ugen as durations\cf0 \
				0, \
				\cf3 Dseq\cf0 ([0.1, 0.4, 0.01, 0.5, 1.0], \cf3 inf\cf0 )\
			); \
		\cf3 Ringz.ar(trig, 1000, 0.1)\cf0 \
	\
	\}.play;\
)\
\
\
\
\
\cf2 // demand ugen as audio oscillator\cf0 \
\
(\
	\{\
		\cf3 var\cf0  a, trig, n=5, m=64;\
		a = \{\
			\cf3 var\cf0  x;\
			x = \{ 0.2.rand2 \} ! m;\
			x = x ++ (\{  \cf3 Drand\cf0 (\{ 0.2.rand2 \} ! n) \} ! m.rand);\
			\cf3 Dseq\cf0 (x.scramble, \cf3 inf\cf0 )\
		\} ! n;\
		trig = \cf3 TSelfDemand\cf0 .ar(\
				\cf3 MouseX\cf0 .kr(1, 2048, 1) * \cf3 SampleDur\cf0 .ir * [1, 1.02],\
				0,\
				\cf3 Dswitch1\cf0 (a, \cf3 MouseY\cf0 .kr(0, n-1))\
			);\
		\cf3 Ringz\cf0 .ar(trig, 1000, 0.01)\
	\
	\}.play;\
)\
\
\
\cf4 // single impulses\
\cf5 \
(\
\cf6 SynthDef\cf5 (\cf7 "delta_demand"\cf5 , \{\
	\cf6 OffsetOut\cf5 .ar(0,\
		\cf6 TSelfDemand\cf5 .ar(\cf6 Dseq\cf5 ([0]), 0, 0.5, 2)\
	)\
\}).send(s);\
)\
\
s.sendBundle(0.2, [\cf7 "/s_new"\cf5 , \cf7 "delta_demand"\cf5 , -1]);\
\
\
\cf4 // chain of impulses\cf5 \
(\
\cf6 SynthDef\cf5 (\cf7 "delta_demand2"\cf5 , \{\
	\cf6 OffsetOut\cf5 .ar(0,\
		\cf6 TSelfDemand\cf5 .ar(\cf6 Dgeom\cf5 (0.05, 0.9, 20), 0, 0.5, 2)\
	)\
\}).send(s);\
)\
\
s.sendBundle(0.2, [\cf7 "/s_new"\cf5 , \cf7 "delta_demand2"\cf5 , -1]);\
\cf0 \
\
\
\
\
}