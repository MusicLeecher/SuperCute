{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs36 \cf0 Demand				
\fs26 demand results from demand rate ugens
\fs36 \

\fs24 \

\f0\b0 superclass: MultiOutUGen
\f1\b \
\
Demand.ar(trig, reset, [..ugens..])\

\f0\b0 \
\
When there is a trigger at the trig input, a value is demanded each ugen in the list and output. The unit generators in the list should be 'demand' rate.\
When there is a trigger at the reset input, the demand rate ugens in the list are reset.\
\
\

\f1\b trig
\f0\b0  - trigger. Can be any signal. A trigger happens when the signal changes from non-positive to positive.\

\f1\b reset
\f0\b0  - trigger. Resets the list of ugens when triggered.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\cf2 // examples\cf0 \
\
(\
\{ \
	\cf3 var\cf0  trig, seq, freq;\
	trig = \cf3 Impulse\cf0 .kr(24);\
	seq = \cf3 Drand\cf0 ([\cf3 Dseq\cf0 ((1..5).mirror1, 1), \cf3 Drand\cf0 ((4..10), 8)], 2000);\
	freq = \cf3 Demand\cf0 .kr(trig, 0, seq * 100);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed.scaleneg(\cf3 MouseX\cf0 .kr(-1,1)) * 0.1;\
\}.play;\
)\
\
(\
\{ \
	\cf3 var\cf0  trig, seq, freq;\
	trig = \cf3 Impulse\cf0 .kr(12);\
	seq = \cf3 Drand\cf0 ([\cf3 Dseq\cf0 ((1..5).mirror1, 1), \cf3 Drand\cf0 ((4..10), 8)], 2000) * \cf3 Drand\cf0 ([1,2,4,8],2000);\
	freq = \cf3 Demand\cf0 .kr(trig, 0, seq * 100);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed.scaleneg(\cf3 MouseX\cf0 .kr(-1,1)) * 0.1;\
\}.play;\
)\
\
\
\
\
(\
\{\
	\cf3 var\cf0  freq, trig, reset, seq;\
	trig = \cf3 Impulse\cf0 .kr(10);\
	seq = \cf3 Diwhite\cf0 (60, 72, \cf3 inf\cf0 ).midicps; \
	freq = \cf3 Demand\cf0 .kr(trig, 0, seq);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed * 0.1;\
\}.play;\
)\
\
(\
\{\
	\cf3 var\cf0  freq, trig, reset, seq;\
	trig = \cf3 Impulse\cf0 .kr(10);\
	seq = \cf3 Dseq\cf0 ([72, 75, 79, \cf3 Drand\cf0 ([82,84,86])], \cf3 inf\cf0 ).midicps; \
	freq = \cf3 Demand\cf0 .kr(trig, 0, seq);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed * 0.1;\
\}.play;\
)\
\
\
(\
\{\
	\cf3 var\cf0  freq, trig, reset, seq;\
	trig = \cf3 Impulse\cf0 .kr(10);\
	seq = \cf3 Dswitch1\cf0 (\
		[\
			\cf3 Diwhite\cf0 (60, 72, \cf3 inf\cf0 ), \
			\cf3 Dseq\cf0 ([72, 75, 79, \cf3 Drand\cf0 ([82,84,86])], \cf3 inf\cf0 )\
		], \
		\cf3 LFPulse\cf0 .kr(0.2)\
	); \
	freq = \cf3 Demand\cf0 .kr(trig, 0, seq.midicps);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed * 0.1;\
\}.play;\
)\
\
\
(\
\{\
	\cf3 var\cf0  freq, trig, reset, seq1, seq2;\
	trig = \cf3 Impulse\cf0 .kr(10);\
	seq1 = \cf3 Drand\cf0 ([72, 75, 79, 82] - 12, \cf3 inf\cf0 ).midicps; \
	seq2 = \cf3 Dseq\cf0 ([72, 75, 79, \cf3 Drand\cf0 ([82,84,86])], \cf3 inf\cf0 ).midicps; \
	freq = \cf3 Demand\cf0 .kr(trig, 0, [seq1, seq2]);\
	\cf3 SinOsc\cf0 .ar(freq + [0,0.7]).cubed.cubed * 0.1;\
\}.play;\
)\
\
(\
\{\
	\cf3 var\cf0  trig, seq;\
	trig = \cf3 Impulse\cf0 .kr(8);\
	seq = \cf3 Drand\cf0 ([\
		\cf3 Dseq\cf0 ([4,0,0,1,2,1,0,1]),\
		\cf3 Dseq\cf0 ([4,0,2,0,1,0,1,1]),\
		\cf3 Dseq\cf0 ([4,0,0,2,0,0,1,1]),\
		\cf3 Dseq\cf0 ([4,0,1,2,0,1,2,0]),\
		\cf3 Dseq\cf0 ([4,1,1,1,2,2,3,3]),\
		\cf3 Dseq\cf0 ([4,1,0,1,0,1,0,1])\
	], \cf3 inf\cf0 );\
	trig = \cf3 Demand\cf0 .kr(trig, 0, seq * 0.4) * trig;\
	\{\cf3 LPF\cf0 .ar(\cf3 PinkNoise\cf0 .ar, 5000)\}.dup * \cf3 Decay\cf0 .kr(trig, 0.5);\
\}.play;\
)\
\
\
		\
\
}