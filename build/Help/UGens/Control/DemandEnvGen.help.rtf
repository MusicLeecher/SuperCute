{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 \
\cf3 // experimental, might change! //\cf2 \
\
s.reboot;\
\
\
\cf3 // frequency envelope with random times\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dseq\cf2 ([204, 400, 201, 502, 300, 200], \cf4 inf\cf2 ),\
				\cf4 Drand\cf2 ([1.01, 0.2, 0.1, 2], \cf4 inf\cf2 ) * \cf4 MouseY\cf2 .kr(0.01, 3, 1),\
				7 \cf3 // cubic interpolation\cf2 \
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf3 // frequency modulation\cf2 \
(\
	\{\
		\cf4 var\cf2  freq, list;\
		list = \{ exprand(200, 1000.0) \} ! 32;\
		freq = \cf4 DemandEnvGen\cf2 .ar(\
				\{ \cf4 Dseq\cf2 (list.scramble, \cf4 inf\cf2 ) \} ! 2,\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 3000, 1),\
				5, \cf3 // curve interpoaltion\cf2 \
				\cf4 MouseX\cf2 .kr(-0.01, -4) \cf3 // curve must be negative for fast interpol.\cf2 \
			); \
		\cf4 SinOsc\cf2 .ar(freq) * 0.1\
	\
	\}.play;\
)\
\
\
\cf3 //  gate\cf2 \
\cf3 // mouse x on right side of screen toggles gate\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dwhite\cf2 (300, 1000, \cf4 inf\cf2 ).round(100),\
				0.1,\
				5, 0.3, \cf3 // curve: 0.3\cf2 \
				\cf4 MouseX\cf2 .kr > 0.5, \
				1\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.21]) * 0.1\
	\
	\}.play;\
)\
\
\cf3 // sample and hold (0.5 > gate > 0)\cf2 \
\cf3 // mouse x on right side of screen toggles gate\cf2 \
\cf3 // mouse y scales frequency\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dwhite\cf2 (300, 1000, \cf4 inf\cf2 ).round(100),\
				0.1,\
				5, 0.3,\
				\cf4 MouseX\cf2 .kr > 0.5 + 0.1\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.21]) * 0.1\
	\
	\}.play;\
)\
\
\cf3 // gate\cf2 \
\cf3 // mouse x on right side of screen toggles gate \cf2 \
\cf3 // mouse button does soft reset\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (400, 200, 5), 500, 800, 530, 4000, 900], 2),\
				\cf4 Dseq\cf2 ([0.2, 0.1, 0.2, 0.3, 0.1], \cf4 inf\cf2 ),\
				\cf4 Dseq\cf2 ([1, 0, 0, 6, 1, 1, 0, 2], \cf4 inf\cf2 ), \cf3 // shapes\cf2 \
				0, \
				\cf4 MouseX\cf2 .kr > 0.5, \cf3 // gate\cf2 \
				\cf4 MouseButton\cf2 .kr > 0.5, \cf3 // reset\cf2 \
				doneAction:0\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.001]) * 0.1\
	\
	\}.play;\
)\
\
\
\cf3 //  gate\cf2 \
\cf3 // mouse x on right side of screen toggles sample and hold \cf2 \
\cf3 // mouse button does hard reset\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (400, 200, 5), 500, 800, 530, 4000, 900], 2),\
				0.1,\
				3, 0,\
				\cf4 MouseX\cf2 .kr > 0.5 - 0.1, \cf3 // gate: sample and hold\cf2 \
				\cf4 MouseButton\cf2 .kr > 0.5 * 2, \cf3 // hard reset\cf2 \
				doneAction: 0\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.001]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
\
\cf3 // short sequence with doneAction, linear\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([1300, 500, 800, 300, 400], 1),\
				0.2,\
				1,\
				doneAction:2\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf3 // short sequence with doneAction, step\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([1300, 500, 800, 300, 400], 1),\
				0.2, \
				0,\
				doneAction:2\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\cf3 // a linear ramp\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([300, 800], 1),\
				1,\
				1\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\cf3 // random gate:  release. gate low level > 0.\cf2 \
\cf3 // only end points are kept as release levels\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([500, 800], \cf4 inf\cf2 ),\
				0.03,\
				1,0, \cf3 // linear\cf2 \
				\cf4 ToggleFF\cf2 .kr(\cf4 Dust\cf2 .kr(5)) + 0.1 \cf3 // gate\cf2 \
				\
	\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf3 // random gate: sample and hold. gate low level = 0.\cf2 \
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\cf4 Dseq\cf2 ([500, 800, 600], \cf4 inf\cf2 ),\
				0.03,\
				1,0, \cf3 // linear\cf2 \
				\cf4 ToggleFF\cf2 .kr(\cf4 Dust\cf2 .kr(5)), \cf3 // gate\cf2 \
				0 \cf3 // reset\cf2 \
	\
			); \
		\cf4 SinOsc\cf2 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
\cf3 // lfnoise1\cf2 \
(\
	\{\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dwhite\cf2 (-0.1, 0.1, \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(0.5, 20),\
				5,\
				-4\
			); \
		\
	\
	\}.play;\
)\
\
\cf3 // lfbrownnoise\cf2 \
(\
	\{\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dbrown\cf2 (-0.1, 0.1, 0.1, \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 100, 1)\
			); \
		\
	\
	\}.play;\
)\
\
\
\
\
\
\
\cf4 Server\cf2 .internal.boot;\
\
\cf3 // hardsyncing a saw\cf2 \
(\
	\{\
		\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (-0.1, 0.01, 20)], \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 100, 1),\
				1, 0,\
				\cf4 K2A\cf2 .ar(1),\
				\cf4 Impulse\cf2 .ar(\cf4 MouseX\cf2 .kr(1, \cf4 SampleRate\cf2 .ir * \cf4 MouseX\cf2 .kr(0.002, 1, 1), 1), 0, 1.5)\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\cf3 // softsyncing a saw\cf2 \
(\
	\{\
		\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (-0.1, 0.01, 20)], \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 100, 1),\
				1, 0,\
				\cf4 K2A\cf2 .ar(1),\
				\cf4 Impulse\cf2 .ar(\cf4 MouseX\cf2 .kr(1, \cf4 SampleRate\cf2 .ir * \cf4 MouseX\cf2 .kr(0.002, 1, 1), 1)) + [0, 0.3]\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\
\cf3 // hardsyncing a saw, som random elements\cf2 \
(\
	\{\
		\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (-0.1, 0.01, 20), \cf4 Dseries\cf2 (-0.1, 0.01, 20), \cf4 Dwhite\cf2 (-0.1, 0.1, 5)], \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 100, 1),\
				3, 0,\
				1,\
				\cf4 Impulse\cf2 .ar(\cf4 MouseX\cf2 .kr(1, \cf4 SampleRate\cf2 .ir * \cf4 MouseX\cf2 .kr(0.002, 1, 1), 1), 0, 1.5)\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\cf3 // softsyncing a saw, som random elements\cf2 \
(\
	\{\
		\
			\cf4 DemandEnvGen\cf2 .ar(\
				\cf4 Dseq\cf2 ([\cf4 Dseries\cf2 (-0.1, 0.01, 20), \cf4 Dseries\cf2 (-0.1, 0.01, 20), \cf4 Dwhite\cf2 (-0.1, 0.1, 5)], \cf4 inf\cf2 ),\
				\cf4 SampleDur\cf2 .ir * \cf4 MouseY\cf2 .kr(1, 100, 1),\
				1, 0, \cf3 // linear interpolation\cf2 \
				1,\
				\cf4 Impulse\cf2 .ar(\cf4 MouseX\cf2 .kr(1, \cf4 SampleRate\cf2 .ir * \cf4 MouseX\cf2 .kr(0.002, 1, 1), 1))\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\cf3 // multichannel expansion\cf2 \
\cf3 // mouse x on right side of screen toggles gate \cf2 \
\cf3 // mouse y controls speed\cf2 \
\
(\
	\{\
		\cf4 var\cf2  freq;\
		freq = \cf4 DemandEnvGen\cf2 .kr(\
				\{ \cf4 Dseq\cf2 ([300, 800, \cf4 Drand\cf2 ([1000, 460, 300], 1), 400], \cf4 inf\cf2 ) + 3.0.rand \} ! 2,\
				\cf4 MouseY\cf2 .kr(0.001, 2, 1), \
				5, -4,\
				\cf4 MouseX\cf2 .kr > 0.5\
			);\
		\cf4 SinOsc\cf2 .ar(freq) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
}