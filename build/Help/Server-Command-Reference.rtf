{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red255\green3\blue3;\red118\green15\blue80;\red0\green0\blue255;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 SuperCollider Server Synth Engine Command Reference
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
The following is a list of all server commands and their arguments. \
\
Each command has a command number which can be sent to the server as a 32 bit integer instead of an OSC style string. Command numbers are listed at the end of this document.\
\
If a command's description contains the word 
\f0\b Asynchronous
\f1\b0 , then that command will be passed to a background thread to complete so as not to steal CPU time from the audio synthesis thread. All asynchronous commands send a reply to the client when they are completed. Many asynchronous commands can contain an OSC message or bundle to be executed upon completion.\
\
	eg. \
		
\f2\fs18 ["/d_load", "synthdefs/void.scsyndef", \
				["/s_new", "void", 1001, 1, 0] // completion message\
		]\
			
\f1\fs24 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Master Controls
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /quit						quit program
\f1\b0 \
	no arguments.\
\
Exits the synthesis server.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 just before completion.\
\

\f0\b /notify
\f1\b0 					
\f0\b register to receive notifications from server
\f1\b0 \
	int - one to receive notifications, zero to stop receiving them.\
	\
If argument is one, server will remember your return address and send you notifications. if argument is zero, server will stop sending you notifications. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /status					query the status
\f1\b0 \
	no arguments.\
\
Replies to sender with the following message.\
/status.reply\
	int - 1. unused.\
	int - number of unit generators.\
	int - number of synths.\
	int - number of groups.\
	int - number of loaded synth definitions.\
	float - average percent CPU usage for signal processing\
	float - peak percent CPU usage for signal processing\
	double - nominal sample rate\
	double - actual sample rate\
\
\

\f0\b /cmd					plug-in defined command\

\f1\b0 	string - command name\
	...any arguments\
	\
Commands are defined by plug-ins.\
\
\

\f0\b /dumpOSC				display incoming OSC messages\

\f1\b0 	int - code\
\
Turns on and off printing of the contents of incoming Open Sound Control messages. This is useful when debugging your command stream.\
The values for the code are as follows:\
0 - turn dumping OFF.\
1 - print the parsed contents of the message.\
2 - print the contents in hexadecimal.\
3 - print both the parsed and hexadecimal representations of the contents.	\
\

\f0\b /sync					notify when async commands have completed.\

\f1\b0 	int - a unique number identifying this command.\
	\
Replies with a /synced message when all asynchronous commands received before this one have completed. The reply will contain the sent unique ID.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /synced, ID 
\f1\b0 when complete.\
\
\

\f0\b /clearSched				clear all scheduled bundles.\

\f1\b0 	\
Removes all bundles from the scheduling queue.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Synth Definition Commands
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /d_recv
\f1\b0 					
\f0\b receive a synth definition file
\f1\b0 \
	bytes - buffer of data. \
	bytes - an OSC message to execute upon completion. (optional)\
\
Loads a file of synth definitions from a buffer in the message. Resident definitions with the same names are overwritten. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\
\

\f0\b /d_load
\f1\b0 					
\f0\b load synth definition
\f1\b0 \
	string - pathname of file. Can be a pattern like "synthdefs/perc-*"\
	bytes - an OSC message to execute upon completion. (optional)\
\
Loads a file of synth definitions. Resident definitions with the same names are overwritten. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\
\

\f0\b /d_loadDir					load a directory of synth definitions
\f1\b0 \
	string - pathname of directory.\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Loads a directory of synth definitions files. Resident definitions with the same names are overwritten. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\
\

\f0\b /d_free
\f1\b0 					
\f0\b delete synth definition
\f1\b0 \
	[\
		string - synth def name\
	] * N\
\
Removes a synth definition once all synths using it have ended. \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Node Commands
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_free					delete a node.\
	
\f1\b0 [\
		int - node ID\
	] * N\
	\
Stops a node abruptly, removes it from its group, and frees its memory. A list of node IDs may be specified. Using this method can cause a click if the node is not silent at the time it is freed.\
\

\f0\b /n_run					turn node on or off\

\f1\b0 	[\
		int - node ID\
		int - run flag\
	] * N\
	\
If the run flag set to zero then the node will not be executed.\
If the run flag is set back to one, then it will be executed.\
Using this method to start and stop nodes can cause a click if the node is not silent at the time run flag is toggled. \
\

\f0\b /n_set					set a node's control value(s)\

\f1\b0 	int - node ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Takes a list of pairs of control indices and values and sets the controls to those values. If the node is a group, then it sets the controls of every node in the group.\
\

\f0\b /n_setn					set ranges of a node's control value(s)\

\f1\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of sequential controls to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of control indices to sets of values. For each range, the starting control index is given followed by the number of controls to change, followed by the values. If the node is a group, then it sets the controls of every node in the group.\
\

\f0\b /n_fill					fill ranges of a node's control value(s)\

\f1\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of values to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of control indices to single values. For each range, the starting control index is given followed by the number of controls to change, followed by the value to fill. If the node is a group, then it sets the controls of every node in the group.\
\

\f0\b /n_map					map a node's controls to read from a bus\

\f1\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - control bus index\
	] * N\
	\
Takes a list of pairs of control names or indices and bus indices and causes those controls to be read continuously from a global control bus. If the node is a group, then it maps the controls of every node in the group. If the control bus index is -1 then any current mapping is undone. Any 
\f0\b n_set
\f1\b0 , 
\f0\b n_setn
\f1\b0  and 
\f0\b n_fill
\f1\b0  command will also unmap the control.\
\

\f0\b /n_mapn					map a node's controls to read from buses\

\f1\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - control bus index\
		int - number of controls to map\
	] * N\
	\
Takes a list of triplets of control names or indices, bus indices, and number of controls to map and causes those controls to be mapped sequentially to buses. If the node is a group, then it maps the controls of every node in the group. If the control bus index is -1 then any current mapping is undone. Any 
\f0\b n_set
\f1\b0 , 
\f0\b n_setn
\f1\b0  and 
\f0\b n_fill
\f1\b0  command will also unmap the control.\
\

\f0\b /n_before					place a node before another\

\f1\b0 	[\
		int - the ID of the node to place (A)\
		int - the ID of the node before which the above is placed (B)\
	] * N\
\
Places node A in the same group as node B, to execute immediately before node B.\
\

\f0\b /n_after					place a node after another\

\f1\b0 	[\
		int - the ID of the node to place (A)\
		int - the ID of the node after which the above is placed (B)\
	] * N\
\
Places node A in the same group as node B, to execute immediately after node B.\
\

\f0\b /n_query					get info about a node\

\f1\b0 	[\
		int - node ID\
	] * N\
\
The server sends an 
\f0\b /n_info
\f1\b0  message for each node to registered clients. \
See 
\f0\b Node Notifications 
\f1\b0 below for the format of the 
\f0\b /n_info
\f1\b0  message.\
\

\f0\b /n_trace						trace a node\

\f1\b0 	[\
		int - node ID\
	] * N\
\
Causes a synth to print out the values of the inputs and outputs of its unit generators for one control period. Causes a group to print the node IDs and names of each node in the group for one control period.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Synth Commands
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /s_new						create a new synth\

\f1\b0 	string - synth definition name\
	int - synth ID\
	int - add action (0,1,2, 3 or 4 see below)\
	int - add target ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Create a new synth from a synth definition, give it an ID, and add it to the tree of nodes. There are four ways to add the node to the tree as determined by the add action argument which is defined as follows:\

\f0\b add actions:
\f1\b0 \
	0 - add the new node to the the head of the group specified by the add target ID.\
	1 - add the new node to the the tail of the group specified by the add target ID.\
	2 - add the new node just before the node specified by the add target ID.\
	3 - add the new node just after the node specified by the add target ID.\
	4 - the new node replaces the node specified by the add target ID. The target node is freed.\
Controls may be set when creating the synth. The control arguments are the same as for the 
\f0\b n_set
\f1\b0  command.\
\
If you send 
\f0\b /s_new
\f1\b0  with a synth ID of -1, then the server will generate an ID for you. The server reserves all negative IDs. Since you don't know what the ID is, you cannot talk to this node directly later. So this is useful for nodes that are of finite duration and that get the control information they need from arguments and buses or messages directed to their group. In addition no notifications are sent when there are changes of state for this node, such as /go, /end, /on, /off.\
\
If you use a node ID of -1 for any other command, such as 
\f0\b /n_map
\f1\b0 , then it refers to the most recently created node by 
\f0\b /s_new
\f1\b0  (auto generated ID or not). This is how you can map  the controls of a node with an auto generated ID. In a multi-client situation, the only way you can be sure what node -1 refers to is to put the messages in a bundle.\
\
\

\f0\b /s_get					get control value(s)\

\f1\b0 	int - synth ID\
	[\
		int or string - a control index or name\
	] * N\
	\
Replies to sender with the corresponding 
\f0\b /n_set
\f1\b0  command.\

\f0\b \
/s_getn					get ranges of control value(s)\

\f1\b0 	int - synth ID\
	[\
		int or string - a control index or name\
		int - number of sequential controls to get (M)\
	] * N\
	\
Get contiguous ranges of controls. Replies to sender with the corresponding 
\f0\b /n_setn
\f1\b0  command. \
\

\f0\b /s_noid					auto-reassign synth's ID to a reserved value\

\f1\b0 	[\
		int - synth ID\
	] * N\
	\
This command is used when the client no longer needs to communicate with the synth and wants to have the freedom to reuse the ID. The server will reassign this synth to a reserved negative number. This command is purely for bookkeeping convenience of the client. No notification is sent when this occurs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \
Group Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \

\f0\b /g_new					create a new group\

\f1\b0 	[\
		int - new group ID\
		int - add action (0,1,2, 3 or 4 see below)\
		int - add target ID\
	] * N\
	\
Create a new group and add it to the tree of nodes.\
There are four ways to add the group to the tree as determined by the add action argument which is defined as follows (the same as for "/s_new"):\

\f0\b add actions:\

\f1\b0 	0 - add the new group to the the head of the group specified by the add target ID.\
	1 - add the new group to the the tail of the group specified by the add target ID.\
	2 - add the new group just before the node specified by the add target ID.\
	3 - add the new group just after the node specified by the add target ID.\
	4 - the new node replaces the node specified by the add target ID. The target node is freed.\
Multiple groups may be created in one command by adding arguments.\
\

\f0\b /g_head					add node to head of group\

\f1\b0 	[\
		int - group ID\
		int - node ID\
	] * N\
	\
Adds the node to the head (first to be executed) of the group.\
\

\f0\b /g_tail					add node to tail of group\

\f1\b0 	[\
		int - group ID\
		int - node ID\
	] * N\
	\
Adds the node to the tail (last to be executed) of the group.\
\

\f0\b /g_freeAll					delete all nodes in a group.\

\f1\b0 	[\
		int - group ID\
	] * N\
	\
Frees all nodes in the group. A list of groups may be specified.\
\

\f0\b /g_deepFree				free all synths in this group and all its sub-groups.\

\f1\b0 	[\
		int - group ID\
	] * N\
	\
Traverses all groups below this group and frees all the synths. Sub-groups are not freed. A list of groups may be specified.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Unit Generator Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \

\f0\b /u_cmd					send a command to a unit generator\

\f1\b0 	int - node ID\
	int - unit generator index\
	string - command name\
	...any arguments\
	\
Sends all arguments following the command name to the unit generator to be performed. Commands are defined by unit generator plug ins.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Buffer Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Buffers are stored in a global array, indexed by integers starting at zero. \
\

\f0\b /b_alloc					allocate buffer space.\

\f1\b0 	int - buffer number\
	int - number of frames\
	int - number of channels (optional. default = 1 channel)\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Allocates zero filled buffer to number of channels and samples.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_allocRead				allocate buffer space and read a sound file.\

\f1\b0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = 0, see below)\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Allocates buffer to number of channels of file and number of samples requested, or fewer if sound file is smaller than requested. Reads sound file data from the given starting frame in the file. If the number of frames argument is less than or equal to zero, the entire file is read. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_allocReadChannel		allocate buffer space and read channels from a sound file.
\f1\b0 \
	int  - buffer number\
	string - path name of a sound file\
	int - starting frame in file\
	int - number of frames to read\
	[\
	  int  - source file channel index\
	] * N    N >= 0\
	bytes - an OSC message to execute upon completion. (optional)\
	\
As b_allocRead, but reads individual channels into the allocated buffer in the order specified.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_read					read sound file data into an existing buffer.\

\f1\b0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Reads sound file data from the given starting frame in the file and writes it to the given starting frame in the buffer. If number of frames is less than zero, the entire file is read. \
If reading a file to be used by DiskIn ugen then you will want to set "leave file open" to one, otherwise set it to zero.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_readChannel			read sound file channel data into an existing buffer
\f1\b0 \
	int - buffer number\
	string - path name of a sound file\
	int - starting frame in file\
	int - number of frames to read\
	int - starting frame in buffer\
	int - leave file open\
	[\
	  int  - source file channel index\
	] * N    N >= 0\
	bytes - completion message\
	\
As b_read, but reads individual channels in the order specified. The number of channels requested must match the number of channels in the buffer.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_write					write sound file data.\

\f1\b0 	int - buffer number\
	string - path name of a sound file.\
	string - header format.\
	string - sample format.\
	int - number of frames to write (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
	bytes - an OSC message to execute upon completion. (optional)\
\
Write a buffer as a sound file.\
Header format is one of: \
	"aiff", "next", "wav", "ircam"", "raw"\
Sample format is one of:\
	"int8", "int16", "int24", "int32", "float", "double", "mulaw", "alaw"\
Not all combinations of header format and sample format are possible.\
If number of frames is less than zero, all samples from the starting frame to the end of the buffer are written.\
If opening a file to be used by DiskOut ugen then you will want to set "leave file open" to one, otherwise set it to zero. If "leave file open" is set to one then the file is created, but no frames are written until the DiskOut ugen does so.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_free					free buffer data.\

\f1\b0 	int - buffer number\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Frees buffer space allocated for this buffer. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_zero					zero sample data\

\f1\b0 	int - buffer number\
	bytes - an OSC message to execute upon completion. (optional)\
	\
Sets all samples in the buffer to zero. \

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\f0\b /b_set					set sample value(s)\

\f1\b0 	int - buffer number\
	[\
		int - a sample index\
		float - a sample value\
	] * N\
	\
Takes a list of pairs of sample indices and values and sets the samples to those values. \
\

\f0\b /b_setn					set ranges of sample value(s)\

\f1\b0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of sequential samples to change (M)\
		[\
			float - a sample value\
		] * M\
	] * N\
	\
Set contiguous ranges of sample indices to sets of values. For each range, the starting sample index is given followed by the number of samples to change, followed by the values.\
\

\f0\b /b_fill					fill ranges of sample value(s)\

\f1\b0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of samples to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of sample indices to single values. For each range, the starting sample index is given followed by the number of samples to change, followed by the value to fill. This is only meant for setting a few samples, not whole buffers or large sections.\
\
\

\f0\b /b_gen					call a command to fill a buffer\

\f1\b0 	int - buffer number\
	string - command name\
	.. command arguments\
\
Plug-ins can define commands that operate on buffers. The arguments after the command name are defined by the command. The currently defined buffer fill commands are listed below in a separate section.\
\

\f0\b /b_close\

\f1\b0 	int - buffer number\
	\
After using a buffer with DiskOut, close the soundfile and write header information.\
\

\f0\b /b_query\

\f1\b0 	[\
		int - buffer number\
	] * N\
	\
Responds to the sender with a 
\f0\b /b_info
\f1\b0  message.  The arguments to 
\f0\b /b_info
\f1\b0  are as follows:\
	[\
		int - buffer number\
		int - number of frames\
		int - number of channels\
		float - sample rate\
	] * N\
\

\f0\b /b_get					get sample value(s)\

\f1\b0 	int - buffer number\
	[\
		int - a sample index\
	] * N\
	\
Replies to sender with the corresponding 
\f0\b /b_set
\f1\b0  command.\

\f0\b \
/b_getn					get ranges of sample value(s)\

\f1\b0 	int - buffer number\
	[\
		int - starting sample index\
		int - number of sequential samples to get (M)\
	] * N\
	\
Get contiguous ranges of samples. Replies to sender with the corresponding 
\f0\b /b_setn
\f1\b0  command. This is only meant for getting a few samples, not whole buffers or large sections.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Control Bus Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \

\f0\b /c_set					set bus value(s)\

\f1\b0 	[\
		int - a bus index\
		float - a control value\
	] * N\
	\
Takes a list of pairs of bus indices and values and sets the buses to those values. \
\

\f0\b /c_setn					set ranges of bus value(s)\

\f1\b0 	[\
		int - starting bus index\
		int - number of sequential buses to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of buses to sets of values. For each range, the starting bus index is given followed by the number of channels to change, followed by the values.\
\

\f0\b /c_fill						fill ranges of bus value(s)\

\f1\b0 	[\
		int - starting bus index\
		int - number of buses to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of buses to single values. For each range, the starting sample index is given followed by the number of buses to change, followed by the value to fill.\
\

\f0\b /c_get					get bus value(s)\

\f1\b0 	[\
		int - a bus index\
	] * N\
	\
Takes a list of buses and replies to sender with the corresponding 
\f0\b /c_set
\f1\b0  command.\
\

\f0\b /c_getn					get ranges of bus value(s)\

\f1\b0 	[\
		int - starting bus index\
		int - number of sequential buses to get (M)\
	] * N\
	\
Get contiguous ranges of buses. Replies to sender with the corresponding 
\f0\b /c_setn
\f1\b0  command.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Non Real Time Mode Commands
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /nrt_end						end real time mode, close file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	no arguments.\
	\
This message should be sent in a bundle in non real time mode. \
The bundle timestamp will establish the ending time of the file. \
This command will end non real time mode and close the sound file.\
Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \
Replies to Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
These messages are sent by the server in reponse to some commands.\
\

\f0\b /done					an asynchronous message has completed.\

\f1\b0 	string - the name of the command\
\
Sent in response to all asynchronous commands. Sent only to the sender of the original message.\
\

\f0\b /fail						an error occurred.\

\f1\b0 	string - the name of the command\
	string - the error message.\
\
There was a problem. Sent only to the sender of the original message.\
\

\f0\b /late						a command was received too late.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	int - the high 32 bits of the original time stamp.\
	int - the low 32 bits of the original time stamp.\
	int - the high 32 bits of the time it was executed.\
	int - the low 32 bits of the time it was executed.\
\
The command was received too late to be executed on time. Sent only to the sender of the original message.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Notifications from Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
These messages are sent as notification of some event to all clients who have registered via the /notify command .\
\

\f0\b Node Notifications\
\

\f1\b0 All of these have the same arguments:\
	int - node ID\
	int - the node's parent group ID\
	int - previous node ID, -1 if no previous node.\
	int - next node ID, -1 if no next node.\
	int - 1 if the node is a group, 0 if it is a synth\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 	The following two arguments are only sent if the node is a group.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone 	int - the ID of the head node, -1 if there is no head node.\
	int - the ID of the tail node, -1 if there is no tail node.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_go					a node was started\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	\
This command is sent to all registered clients when a node is created.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_end					a node ended\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	\
This command is sent to all registered clients when a node ends and is deallocated.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_off					a node was turned off\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	\
This command is sent to all registered clients when a node is turned off.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_on					a node was turned on\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	\
This command is sent to all registered clients when a node is turned on.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_move					a node was moved\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
This command is sent to all registered clients when a node is moved.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /n_info					reply to /n_query\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
This command is sent to all registered clients in response to an 
\f0\b /n_query
\f1\b0  command.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf0 Trigger Notification
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	\
This command is sent to all registered clients when a node is moved from one group to another.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 /tr						a trigger message\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	int - node ID\
	int - trigger ID\
	float - trigger value\
\
This command is the mechanism that synths can use to trigger events in clients.\
The node ID is the node that is sending the trigger. The trigger ID and value are determined by inputs to the SendTrig unit generator which is the originator of this message.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney
\f0\b\fs24 \

\f1\b0\fs20 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Buffer Fill Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
These are the currently defined fill routines for use with the 
\f0\b /b_gen
\f1\b0  command.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Wave Fill Commands\

\f1\b0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 There are three defined fill routines for sine waves.\
\
	The flags are defined as follows:\
		1 - normalize - Normalize peak amplitude of wave to 1.0.\
		2 - wavetable - If set, then the buffer is written in wavetable format so that it can be read by interpolating oscillators.\
		4 - clear - if set then the buffer is cleared before new partials are written into it. Otherwise the new partials are summed with the existing contents of the buffer.\
\
	
\f0\b sine1
\f1\b0 \
		int - flags, see above\
		[\
			float - partial amplitude\
		] * N\
\
	Fills a buffer with a series of sine wave partials. The first float value specifies the amplitude of the first partial, the second float value specifies the amplitude of the second partial, and so on.\
\
	
\f0\b sine2
\f1\b0 \
		int - flags, see above\
		[\
			float - partial frequency (in cycles per buffer)\
			float - partial amplitude\
		] * N\
\
	Similar to sine1 except that each partial frequency is specified explicitly instead of being an integer series of partials. Non-integer partial frequencies are possible.\
\
	
\f0\b sine3
\f1\b0 \
		int - flags, see above\
		[\
			float - partial frequency (in cycles per buffer)\
			float - partial amplitude\
			float - partial phase\
		] * N\
\
	Similar to sine2 except that each partial may have a nonzero starting phase.\
\
	
\f0\b cheby
\f1\b0 \
		int - flags, see above\
		[\
			float - amplitude\
		] * N\
\
	Fills a buffer with a series of chebyshev polynomials, which can be defined as:\
cheby(n) = amplitude  * cos(n * acos(x))\
The first float value specifies the amplitude for n = 1, the second float value specifies the amplitude for n = 2, and so on. To eliminate a DC offset when used as a waveshaper, the wavetable is offset so that the center value is zero. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Other Commands\
\
	copy
\f1\b0 \
		int - sample position in destination\
		int - source buffer number\
		int - sample position in source\
		int - number of samples to copy\
\
	Copy samples from the source buffer to the destination buffer specified in the 
\f0\b b_gen
\f1\b0  command. If the number of samples to copy is negative, the maximum number of samples possible is copied.\

\f0\b Asynchronous
\f1\b0 . Replies to sender with 
\f0\b /done 
\f1\b0 when complete.\
\

\fs20 copyright \'a9 2002 James McCartney
\f0\b\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \

\f0\b\fs24 Command Numbers\

\f1\b0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 These are the currently defined command numbers. More may be added to the end of the list in the future.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf3 \CocoaLigature0 enum\cf0  \{\
	cmd_none = \cf4 0\cf0 ,\
\
	cmd_notify = \cf4 1\cf0 ,\
	cmd_status = \cf4 2\cf0 ,\
	cmd_quit = \cf4 3\cf0 ,\
	cmd_cmd = \cf4 4\cf0 ,\
\
	cmd_d_recv = \cf4 5\cf0 ,\
	cmd_d_load = \cf4 6\cf0 ,\
	cmd_d_loadDir = \cf4 7\cf0 ,\
	cmd_d_freeAll = \cf4 8\cf0 ,\
\
	cmd_s_new = \cf4 9\cf0 ,\
	\
	cmd_n_trace = \cf4 10\cf0 ,\
	cmd_n_free = \cf4 11\cf0 ,\
	cmd_n_run = \cf4 12\cf0 ,\
	cmd_n_cmd = \cf4 13\cf0 ,\
	cmd_n_map = \cf4 14\cf0 ,\
	cmd_n_set = \cf4 15\cf0 ,\
	cmd_n_setn = \cf4 16\cf0 ,\
	cmd_n_fill = \cf4 17\cf0 ,\
	cmd_n_before = \cf4 18\cf0 ,\
	cmd_n_after = \cf4 19\cf0 ,\
\
	cmd_u_cmd = \cf4 20\cf0 ,\
\
	cmd_g_new = \cf4 21\cf0 ,\
	cmd_g_head = \cf4 22\cf0 ,\
	cmd_g_tail = \cf4 23\cf0 ,\
	cmd_g_freeAll = \cf4 24\cf0 ,\
	\
	cmd_c_set = \cf4 25\cf0 ,\
	cmd_c_setn = \cf4 26\cf0 ,\
	cmd_c_fill = \cf4 27\cf0 ,\
\
	cmd_b_alloc = \cf4 28\cf0 ,\
	cmd_b_allocRead = \cf4 29\cf0 ,\
	cmd_b_read = \cf4 30\cf0 ,\
	cmd_b_write = \cf4 31\cf0 ,\
	cmd_b_free = \cf4 32\cf0 ,\
	cmd_b_close = \cf4 33\cf0 ,\
	cmd_b_zero = \cf4 34\cf0 ,\
	cmd_b_set = \cf4 35\cf0 ,\
	cmd_b_setn = \cf4 36\cf0 ,\
	cmd_b_fill = \cf4 37\cf0 ,\
	cmd_b_gen = \cf4 38\cf0 ,\
	\
	cmd_dumpOSC = \cf4 39\cf0 ,\
\
	cmd_c_get = \cf4 40\cf0 ,\
	cmd_c_getn = \cf4 41\cf0 ,\
	cmd_b_get = \cf4 42\cf0 ,\
	cmd_b_getn = \cf4 43\cf0 ,\
	cmd_s_get = \cf4 44\cf0 ,\
	cmd_s_getn = \cf4 45\cf0 ,\
	\
	cmd_n_query = \cf4 46\cf0 ,\
	cmd_b_query = \cf4 47\cf0 ,\
\
	cmd_n_mapn = \cf4 48\cf0 ,\
	cmd_s_noid = \cf4 49\cf0 ,\
\
	cmd_g_deepFree = \cf4 50\cf0 ,\
	cmd_clearSched = \cf4 51\cf0 ,\
\
	cmd_sync = \cf4 52\cf0 ,\
\
	cmd_d_free = \cf4 53\cf0 ,\
\
	NUMBER_OF_COMMANDS = \cf4 54\
\}
\f1 \cf0 \CocoaLigature1 \
copyright \'a9 2002 James McCartney\
}