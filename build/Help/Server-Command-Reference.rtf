{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red255\green3\blue3;\red118\green15\blue80;\red0\green0\blue255;
}
\vieww14300\viewh14160\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\fs36 \cf0 SuperCollider Server Synth Engine Command Reference\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 \
The following is a list of all server commands and their arguments. \
If a command's description contains the word 
\f1\b Asynchronous
\f0\b0 , then that command will be passed to a background thread to complete so as not to steal CPU time from the audio synthesis thread. All asynchronous commands send a reply to the client when they are completed. \
Each command has a command number which can be sent to the server as a 32 bit integer instead of an OSC style string. Command numbers are listed at the end of this document.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Master Controls
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /quit						quit program
\f0\b0 \
	no arguments.\
\
Exits the synthesis server.\

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 just before completion.\
\

\f1\b /notify
\f0\b0 					
\f1\b register to receive notifications from server
\f0\b0 \
	int - one to receive notifications, zero to stop receiving them.\
	\
If argument is one, server will remember your return address and send you notifications. if argument is zero, server will stop sending you notifications. \

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /status					query the status
\f0\b0 \
	no arguments.\
\
Replies to sender with the following message.\
/status.reply\
	int - 1. unused.\
	int - number of unit generators.\
	int - number of synths.\
	int - number of groups.\
	int - number of loaded synth definitions.\
\
\

\f1\b /cmd					plug-in defined command\

\f0\b0 	string - command name\
	...any arguments\
	\
Commands are defined by plug-ins.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Synth Definition Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /d_recv
\f0\b0 					
\f1\b receive a synth definition file
\f0\b0 \
	bytes - buffer of data. \
\
Loads a file of synth definitions from a buffer in the message. Resident definitions with the same names are overwritten. \
\
\

\f1\b /d_load
\f0\b0 					
\f1\b load synth definition
\f0\b0 \
	string - pathname of file. \
\
Loads a file of synth definitions. Resident definitions with the same names are overwritten. \
\
\

\f1\b /d_loadDir					load a directory of synth definitions
\f0\b0 \
	string - pathname of directory.\
	\
Loads a directory of synth definitions files. Resident definitions with the same names are overwritten. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Node Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 n_free					delete a node.\

\f0\b0 	int - node ID\
	\
Stops the node abruptly, removes it from its group, and frees its memory.\
\

\f1\b /n_run					turn node on or off\

\f0\b0 	int - node ID\
	int - run flag\
	\
If the run flag set to zero then the node will not be executed.\
If the run flag is set back to one, then it will be executed.\
Using this method to start and stop nodes can cause a click if the node is not silent at the time run flag is toggled. \
\

\f1\b /n_set					set a node's control value(s)\

\f0\b0 	int - node ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Takes a list of pairs of control indices and values and sets the controls to those values. If the node is a group, then it sets the controls of every node in the group.\
\

\f1\b /n_setn					set ranges of a node's control value(s)\

\f0\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of sequential controls to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of control indices to sets of values. For each range, the starting control index is given followed by the number of controls to change, followed by the values. If the node is a group, then it sets the controls of every node in the group.\
\

\f1\b /n_fill					fill ranges of a node's control value(s)\

\f0\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - number of values to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of control indices to single values. For each range, the starting control index is given followed by the number of controls to change, followed by the value to fill. If the node is a group, then it sets the controls of every node in the group.\
\

\f1\b /n_map					map a node's controls to read from a bus\

\f0\b0 	int - node ID\
	[\
		int or string - a control index or name\
		int - control bus index\
	] * N\
	\
Takes a list of pairs of control names or indices and bus indices and causes those controls to be read continuously from a global control bus instead of responding to 
\f1\b n_set
\f0\b0 , 
\f1\b n_setn
\f0\b0  and 
\f1\b n_fill
\f0\b0  commands. If the node is a group, then it maps the controls of every node in the group. If the control bus index is -1 then any current mapping is undone and control reverts to normal.\
\

\f1\b /n_before					place a node before another\

\f0\b0 	int - the ID of the node to place (A)\
	int - the ID of the node before which the above is placed (B)\
\
Places node A in the same group as node B, to execute immediately before node B.\
\

\f1\b /n_after					place a node after another\

\f0\b0 	int - the ID of the node to place (A)\
	int - the ID of the node after which the above is placed (B)\
\
Places node A in the same group as node B, to execute immediately after node B.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Synth Commands
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 /s_new						create a new synth\

\f0\b0 	string - synth definition name\
	int - synth ID\
	int - add action (0,1,2, or 3 see below)\
	int - add target ID\
	[\
		int or string - a control index or name\
		float - a control value\
	] * N\
	\
Create a new synth from a synth definition, give it an ID, and add it to the tree of nodes. There are four ways to add the node to the tree as determined by the add action argument which is defined as follows:\

\f1\b add actions:
\f0\b0 \
	0 - add the new node to the the head of the group specified by the add target ID.\
	1 - add the new node to the the tail of the group specified by the add target ID.\
	2 - add the new node just before the node specified by the add target ID.\
	3 - add the new node just after the node specified by the add target ID.\
Controls may be set when creating the synth. The control arguments are the same as for the 
\f1\b n_set
\f0\b0  command.\
\

\f1\b /s_trace						trace unit generators inputs and outputs\

\f0\b0 	int - synth ID\
	\
Causes the synth to print out the values of the inputs and outputs of its unit generators for one control period.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 \
Group Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \

\f1\b /g_new					create a new group\

\f0\b0 	int - new group ID\
	int - add action (0,1,2, or 3 see below)\
	int - add target ID\
	\
Create a new group and add it to the tree of nodes.\
There are four ways to add the group to the tree as determined by the add action argument which is defined as follows (the same as for "/s_new"):\

\f1\b add actions:\

\f0\b0 	0 - add the new group to the the head of the group specified by the add target ID.\
	1 - add the new group to the the tail of the group specified by the add target ID.\
	2 - add the new group just before the node specified by the add target ID.\
	3 - add the new group just after the node specified by the add target ID.\
\

\f1\b /g_head					add node to head of group\

\f0\b0 	int - group ID\
	int - node ID\
	\
Adds the node to the head (first to be executed) of the group.\
\

\f1\b /g_tail					add node to tail of group\

\f0\b0 	int - group ID\
	int - node ID\
	\
Adds the node to the tail (last to be executed) of the group.\
\

\f1\b /g_freeAll					delete all nodes in a group.\

\f0\b0 	int - group ID\
	\
Frees all nodes in the group. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Unit Generator Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \

\f1\b /u_cmd					send a command to a unit generator\

\f0\b0 	int - node ID\
	int - unit generator index\
	string - command name\
	...any arguments\
	\
Sends all arguments following the command name to the unit generator to be performed. Commands are defined by unit generator plug ins.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Buffer Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
Buffers are stored in a global array, indexed by integers starting at zero. \
\

\f1\b /b_alloc					allocate buffer space.\

\f0\b0 	int - buffer number\
	int - number of frames\
	int - number of channels (optional. default = 1 channel)\
	\
Allocates zero filled buffer to number of channels and samples.\

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_allocRead				allocate buffer space and read a sound file.\

\f0\b0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = 0, see below)\
	\
Allocates buffer to number of channels of file and number of samples requested, or fewer if sound file is smaller than requested. Reads sound file data from the given starting frame in the file. If the number of frames argument is less than or equal to zero, the entire file is read. \

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_read					read sound file data into an existing buffer.\

\f0\b0 	int - buffer number\
	string - path name of a sound file.\
	int - starting frame in file (optional. default = 0)\
	int - number of frames to read (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
	\
Reads sound file data from the given starting frame in the file and writes it to the given starting frame in the buffer. If number of frames is less than zero, the entire file is read. \
If reading a file to be used by DiskIn ugen then you will want to set "leave file open" to one, otherwise set it to zero.\

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_write					write sound file data.\

\f0\b0 	int - buffer number\
	string - path name of a sound file.\
	string - header format.\
	string - sample format.\
	int - number of frames to write (optional. default = -1, see below)\
	int - starting frame in buffer (optional. default = 0)\
	int - leave file open (optional. default = 0)\
Write a buffer as a sound file.\
Header format is one of: \
	"aiff", "next", "wav", "ircam"", "raw"\
Sample format is one of:\
	"int8", "int16", "int24", "int32", "float", "double", "mulaw", "alaw"\
Not all combinations of header format and sample format are possible.\
If number of frames is less than zero, all samples from the starting frame to the end of the buffer are written.\
If opening a file to be used by DiskOut ugen then you will want to set "leave file open" to one, otherwise set it to zero. If "leave file open" is set to one then the file is created, but no frames are written until the DiskOut ugen does so.\
\

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_free					free buffer data.\

\f0\b0 	int - buffer number\
	\
Frees buffer space allocated for this buffer. \

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_zero					zero sample data\

\f0\b0 	int - buffer number\
	\
Sets all samples in the buffer to zero. \

\f1\b Asynchronous
\f0\b0 . Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /b_set					set sample value(s)\

\f0\b0 	int - buffer number\
	[\
		int - a sample index\
		float - a sample value\
	] * N\
	\
Takes a list of pairs of sample indices and values and sets the samples to those values. \
\

\f1\b /b_setn					set ranges of sample value(s)\

\f0\b0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of sequential samples to change (M)\
		[\
			float - a sample value\
		] * M\
	] * N\
	\
Set contiguous ranges of sample indices to sets of values. For each range, the starting sample index is given followed by the number of samples to change, followed by the values.\
\

\f1\b /b_fill					fill ranges of sample value(s)\

\f0\b0 	int - buffer number\
	[\
		int - sample starting index\
		int - number of samples to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of sample indices to single values. For each range, the starting sample index is given followed by the number of samples to change, followed by the value to fill.\
\
\

\f1\b /b_gen					call a command to fill a buffer\

\f0\b0 	int - buffer number\
	string - command name\
	.. command arguments\
\
Plug-ins can define commands that operate on buffers. The arguments after the command name are defined by the command. The currently defined buffer fill commands are listed below in a separate section.\
\
\

\f1\b /b_close\

\f0\b0 	int - buffer number\
	\
After using a buffer with DiskOut, close the soundfile and write header information.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Control Bus Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \

\f1\b /c_set					set sample value(s)\

\f0\b0 	[\
		int - a bus index\
		float - a control value\
	] * N\
	\
Takes a list of pairs of bus indices and values and sets the buses to those values. \
\

\f1\b /c_setn					set ranges of sample value(s)\

\f0\b0 	[\
		int - starting bus index\
		int - number of sequential channels to change (M)\
		[\
			float - a control value\
		] * M\
	] * N\
	\
Set contiguous ranges of buses to sets of values. For each range, the starting bus index is given followed by the number of channels to change, followed by the values.\
\

\f1\b /c_fill						fill ranges of sample value(s)\

\f0\b0 	[\
		int - starting bus index\
		int - number of channels to fill (M)\
		float - value\
	] * N\
	\
Set contiguous ranges of buses to single values. For each range, the starting sample index is given followed by the number of samples to change, followed by the value to fill.\
\

\f1\b /c_get					get sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - a bus index\
	] * N\
	\
Takes a list of buses and replies to sender with the corresponding 
\f1\b c_set
\f0\b0  command.\
\

\f1\b /c_getn					get ranges of sample value(s)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	[\
		int - starting bus index\
		int - number of sequential samples to get (M)\
	] * N\
	\
Get contiguous ranges of buses. Replies to sender with the corresponding 
\f1\b c_setn
\f0\b0  command.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Non Real Time Mode Commands
\f0\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf0 \
/nrt_start						begin non real time mode, write a file header\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	string - path name of input sound file. If null string, then no input.\
	string - path name of output sound file to create.\
	string - header format.\
	string - sample format.\
	int - number of channels.\
\
Begin accepting messages in non real time mode. All time stamped messages sent will be stored in a queue until 
\f1\b /nrt_end
\f0\b0  or 
\f1\b /nrt_advance
\f0\b0  is received. \
A sound file is created to store the calculated output.\
Real time and non real time modes may not operate concurrently. \
OSC time begins at zero for non real time mode.\
Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /nrt_end						end real time mode, close file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	no arguments.\
	\
This message should be sent in a bundle in non real time mode. \
The bundle timestamp will establish the ending time of the file. \
This command will end non real time mode and close the sound file.\
Replies to sender with 
\f1\b /done 
\f0\b0 when complete.\
\

\f1\b /nrt_advance					calculate samples in non real time mode.
\f0\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b \cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	no arguments.\
\
This message should be sent in a bundle in non real time mode. The synthesizer will calculate samples up to the bundle's time stamp. No messages with earlier time stamps should be sent after this one. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 \
\
Replies to Commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
These messages are sent by the server in reponse to some commands.\
\

\f1\b /done					an asynchronous message has completed.\

\f0\b0 	string - the name of the command\
\
Sent in response to all asynchronous commands. Sent only to the sender of the original message.\
\

\f1\b /fail						an error occurred.\

\f0\b0 	string - the name of the command\
	string - the error message.\
\
There was a problem. Sent only to the sender of the original message.\
\

\f1\b /late						a command was received too late.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural
\cf2 not yet implemented\cf0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 	int - the high 32 bits of the original time stamp.\
	int - the low 32 bits of the original time stamp.\
	int - the high 32 bits of the time it was executed.\
	int - the low 32 bits of the time it was executed.\
\
The command was received too late to be executed on time. Sent only to the sender of the original message.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f1\b\fs28 \cf0 Notifications from Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0\fs24 \cf0 \
These messages are sent as notification of some event to all clients who have registered via the /notify command .\
\

\f1\b /n_go					a node was started\

\f0\b0 	int - node ID\
	int - group ID\
	int - prev node ID\
	int - next node ID\
	\
This command is sent to all registered clients when a node is created.\
\

\f1\b /n_end					a node ended\

\f0\b0 	int - node ID\
	int - group ID\
	int - prev node ID\
	int - next node ID\
	\
This command is sent to all registered clients when a node ends and is deallocated.\
\

\f1\b /n_off					a node was turned off\

\f0\b0 	int - node ID\
	int - group ID\
	int - prev node ID\
	int - next node ID\
	\
This command is sent to all registered clients when a node is turned off.\
\

\f1\b /n_on					a node was turned on\

\f0\b0 	int - node ID\
	int - group ID\
	int - prev node ID\
	int - next node ID\
	\
This command is sent to all registered clients when a node is turned on.\
\

\f1\b /n_move					a node was moved\

\f0\b0 	int - node ID\
	int - group ID\
	int - prev node ID\
	int - next node ID\
	\
This command is sent to all registered clients when a node is moved from one group to another.\
\

\f1\b /tr						a trigger message\

\f0\b0 	int - node ID\
	int - trigger ID\
	float - trigger value\
\
This command is the mechanism that synths can use to trigger events in clients.\
The node ID is the node that is sending the trigger. The trigger ID and value are determined by inputs to the SendTrig unit generator which is the originator of this message.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney
\f1\b\fs24 \

\f0\b0\fs20 \
\
\

\f1\b\fs28 Buffer Fill Commands\

\f0\b0\fs24 \
These are the currently defined fill routines for use with the 
\f1\b /b_gen
\f0\b0  command.\
\

\f1\b Sine Wave Fill Commands\

\f0\b0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\fs24 \cf0 There are three defined fill routines for sine waves.\
\
	The flags are defined as follows:\
		1 - normalize - Normalize peak amplitude of wave to 1.0.\
		2 - wavetable - If set, then the buffer is written in wavetable format so that it can be read by interpolating oscillators.\
		4 - clear - if set then the buffer is cleared before new partials are written into it. Otherwise the new partials are summed with the existing contents of the buffer.\
\
	
\f1\b sine1
\f0\b0 \
		int - flags, see above\
		[\
			float - partial amplitude\
		] * N\
\
	Fills a buffer with a series of sine wave partials. The first float value specifies the amplitude of the first partial, the second float value specifies the amplitude of the second partial, and so on.\
\
	
\f1\b sine2
\f0\b0 \
		int - flags, see above\
		[\
			float - partial frequency (in cycles per buffer)\
			float - partial amplitude\
		] * N\
\
	Similar to sine1 except that each partial frequency is specified explicitly instead of being an integer series of partials. Non-integer partial frequencies are possible.\
\
	
\f1\b sine3
\f0\b0 \
		int - flags, see above\
		[\
			float - partial frequency (in cycles per buffer)\
			float - partial amplitude\
			float - partial phase\
		] * N\
\
	Similar to sine2 except that each partial may have a nonzero starting phase.\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 copyright \'a9 2002 James McCartney
\f1\b\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-620\ql\qnatural

\f0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \

\f1\b\fs24 Command Numbers\

\f0\b0\fs20 \

\fs24 These are the currently defined command numbers. More may be added to the end of the list in the future.\

\fs20 \
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural

\f2 \cf3 \CocoaLigature0 enum\cf0  \{\
	cmd_none=\cf4 0\cf0 ,\
\
	cmd_notify = \cf4 1\cf0 ,\
	cmd_status = \cf4 2\cf0 ,\
	cmd_quit = \cf4 3\cf0 ,\
	cmd_cmd = \cf4 4\cf0 ,\
\
	cmd_d_recv = \cf4 5\cf0 ,\
	cmd_d_load = \cf4 6\cf0 ,\
	cmd_d_loadDir = \cf4 7\cf0 ,\
	cmd_d_freeAll = \cf4 8\cf0 ,\
\
	cmd_s_new = \cf4 9\cf0 ,\
	cmd_s_trace = \cf4 10\cf0 ,\
\
	cmd_n_free = \cf4 11\cf0 ,\
	cmd_n_run = \cf4 12\cf0 ,\
	cmd_n_cmd = \cf4 13\cf0 ,\
	cmd_n_map = \cf4 14\cf0 ,\
	cmd_n_set = \cf4 15\cf0 ,\
	cmd_n_setn = \cf4 16\cf0 ,\
	cmd_n_fill = \cf4 17\cf0 ,\
	cmd_n_before = \cf4 18\cf0 ,\
	cmd_n_after = \cf4 19\cf0 ,\
\
	cmd_u_cmd = \cf4 20\cf0 ,\
\
	cmd_g_new = \cf4 21\cf0 ,\
	cmd_g_head = \cf4 22\cf0 ,\
	cmd_g_tail = \cf4 23\cf0 ,\
	cmd_g_freeAll = \cf4 24\cf0 ,\
	\
	cmd_c_set = \cf4 25\cf0 ,\
	cmd_c_setn = \cf4 26\cf0 ,\
	cmd_c_fill = \cf4 27\cf0 ,\
\
	cmd_b_alloc = \cf4 28\cf0 ,\
	cmd_b_allocRead = \cf4 29\cf0 ,\
	cmd_b_read = \cf4 30\cf0 ,\
	cmd_b_write = \cf4 31\cf0 ,\
	cmd_b_free = \cf4 32\cf0 ,\
	cmd_b_close = \cf4 33\cf0 ,\
	cmd_b_zero = \cf4 34\cf0 ,\
	cmd_b_set = \cf4 35\cf0 ,\
	cmd_b_setn = \cf4 36\cf0 ,\
	cmd_b_fill = \cf4 37\cf0 ,\
	cmd_b_gen = \cf4 38\cf0 ,\
	\
	NUMBER_OF_COMMANDS=\cf4 39\cf0 \
\};\

\f0 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 copyright \'a9 2002 James McCartney\
}