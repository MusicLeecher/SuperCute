{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 6.
\fs18 \

\f1\b0 \
To continue discussion of the properties of a SynthDef, please evaluate\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDescLib\cf0 .global.read;\
\cf2 SynthDescLib\cf0 .global.browse;\
)\
\
and look at the box that lists the controls for each synth.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Controls (usually) are arguments
\f2\b0 \

\f1\fs18 \
Place controls into SynthDefs when you wish to give information to a synth when it is created or after it is running. The most common way to do this is to include an argument or arguments in a synthdef.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
In the next example, the arguments have default values. In such cases, if you forget to give an argument where one is needed, the synthdef supplies it automatically. Moreover, default values to arguments that show what a synth needs when it is created makes your code more readable.\
\
(\
\cf3 // 2 arguments with default values\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "withControls"\cf0 , \{ \cf2 arg\cf0  freq = 440, mul = 0.22;\
	\cf2 Out\cf0 .ar(\
		0,\
		\cf2 SinOsc\cf0 .ar([freq, freq+1], 0, mul)\
	)\
\}).load(s);\
)\
\
\cf2 Synth\cf0 (\cf4 "withControls"\cf0 , [\cf5 \\freq\cf0 , 440, \cf5 \\mul\cf0 , 0.1]);\
\
The items in the array are values that are passed to the controls in the SynthDef. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
You can write each control in the array as either a symbol (a name preceded by a backslash), as in \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Synth\cf0 (\cf4 "withControls"\cf0 , [\cf5 \\freq\cf0 , 440, \cf5 \\mul\cf0 , 0.1]);\
\
or, as a string (a name enclosed in quotes), as in\
\
\cf2 Synth\cf0 (\cf4 "withControls"\cf0 , [\cf5 "freq"\cf0 , 440, \cf5 "mul"\cf0 , 0.1]);\
\
followed by a value. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
Either way, the pattern is \
\
[ controlName, value, controlName, value].\
\
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
There is a third way to pass controls to a synth. The synth in the previous example(s) could also be written as\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Synth\cf0 (\cf4 "withControls"\cf0 , [0, 440, 1, 0.1]);\
\
The pattern now is\
\
[ controlIndex, value, controlIndex, value].\
\
The disadvantage of this approach is that representing controls as index numbers is less descriptive and perhaps therefore less readable than names given either as symbols or strings.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Controls can be reset\

\f1\b0\fs18 \
The following example shows how a control can be reset after a synth has been created (while it's running).\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "resetMyControls"\cf0 , \{ \cf2 arg\cf0  freq = 440, mul = 0.22;\
	\cf2 Out\cf0 .ar(\
		0,\
		\cf2 SinOsc\cf0 .ar([freq, freq+1], 0, mul)\
	)\
\}).load(s);\
)\
\cf2 \
~aSynth = Synth\cf0 (\cf4 "resetMyControls"\cf0 , [\cf5 \\freq\cf0 , 440, \cf5 \\mul\cf0 , 0.06]);\
~aSynth.set(\\freq, 600, \\mul, 0.25);\
\
Note that the '~' character before aSynth defines a global variable. The main advantage to using a global variable is that it doesn't have to be declared explicitly, as in\
\
\cf2 var\cf0  aSynth; \cf3 // variables without the '~' MUST first be declared!!\cf0 \
\
More precisely, the ~ character puts a variable named 'aSynth' into an instance of an object known as the currentEnvironment. For more information, see the 
\f0\b\fs24 Environment
\f1\b0\fs18  document in the SuperCollider help system.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
SynthDefs can be defined with lag times for each of their controls. The lags, which you write in an array following the ugenGraphFunc, state how long it takes to move or glide smoothly from one control value to another.\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "controlsWithLags"\cf0 , \{ \cf2 arg\cf0  freq = 440, mul = 0.22;\
	\cf2 Out\cf0 .ar(\
		0,\
		\cf2 SinOsc\cf0 .ar([freq, freq+1], 0, mul)\
	)\
\}, [1, 1]).load(s);\
)\
\
\cf2 ~aSynth = Synth\cf0 (\cf4 "controlsWithLags"\cf0 , [\cf5 \\freq\cf0 , 550, \cf5 \\mul\cf0 , 0.1]);\
~aSynth.set(\\freq, 600, \\mul, 0.5);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Having the option to include an array of lagtimes in a synthdef means that the synthdef template we discussed previously should be re-defined.\cf3 \
\
// the previous template for a synthdef, without an array of lagtimes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\
	\cf4 "i am a synthdef"\cf0 ,					\cf3 // 1st argument is a name\cf0 \
	\{ .... i am a ugenGraphFunc ... \}	\cf3 // 2nd argument is a ugenGraphFunc\cf0 \
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a re-defined template for a synthdef with an array of lagtimes\
// the class definition for the lagtime array called it 'rates'\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\
	\cf4 "i am a synthdef"\cf0 ,					\cf3 // name\cf0 \
	\{ .... i am a ugenGraphFunc ... \},	\cf3 // ugenGraphFunc\cf0 \
	[ ... lagTimes ... ]				\cf3 // rates\cf0 \
)\
\
The choice of which template to use is up to the user. If you need to include lagtimes in your synthdef, then use the second template, eg, the one that includes the array of rates.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 ////////////////////////////////////////////////////////////////////////////////////////////////////}