{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fnil\fcharset77 LucidaGrande;
\f3\fnil\fcharset77 LucidaGrande-Bold;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Networks and client/server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
SuperCollider 3 uses a client/server model to operate across a network. What this means is that users write client programs that ask a server to do something, that is, they request service. Such requests can occur locally on one computer or they can be distributed remotely among two or more computers. Whether the computers are in the same room or separated across the world makes no difference as long as they're connected on a network. \
\
Client programs in SuperCollider typically specify synthesis definition (how a particular sound will be made) and synthesis scheduling (when a particular sound will be made). In turn, a SuperCollider server (or servers) synthesizes audio according to client instructions.\
\
To summarize, clients request; servers respond.\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Client/server examples\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\cf2 // EX. 1 - execute each line, one at a time\
// define a synthesis process and make a client request to a server\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\cf2 // define a server with a name and an address\cf0 \
s = \cf3 Server\cf0 (\cf4 "aServer"\cf0 , \cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 56789));		\cf2 // "localhost" is a synonym for an ip of 												// "127.0.0.1"\cf0 \
\cf2 // start the server\cf0 \
s.boot;\
\
\cf2 // define a synthesis engine\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "sine"\cf0 , \{ \cf3 Out\cf0 .ar(0, \cf3 SinOsc\cf0 .ar(440, 0, 0.2)) \}).send(s);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // schedule (run) synthesis\cf0 \
s.sendMsg(\cf4 "s_new"\cf0 , \cf4 "sine"\cf0 , n = s.nextNodeID, 0, 1);\
\
\cf2 // stop the synth (delete it)\cf0 \
s.sendMsg(\cf4 "/n_free"\cf0 , n);\
\
\cf2 // (optionally) stop the server\cf0 \
s.quit;\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\cf2 // EX. 2\cf0 \
\cf2 // the same as in above, except on 2 computers across a network\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // define a (remote) server; it represents a computer "somewhere" on the internet"\
// the ip number has to be valid and the server, wherever it is, has to be running\
// servers cannot be booted remotely, eg, a program on one machine can't boot a server on another\
// this example assumes the server on the remote machine was booted from within\
// supercollider and not from the terminal\cf0 \
s = \cf3 Server\cf0 (\cf4 "aServer"\cf0 , \cf3 NetAddr\cf0 (\cf4 "... an ip number ..."\cf0 , 56789));\
\
\cf2 // define a synthesis engine ... exactly as in the previous example\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "sine"\cf0 , \{ \cf3 Out\cf0 .ar(0, \cf3 SinOsc\cf0 .ar(440, 0, 0.2)) \}).send(s);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // schedule synthesis ... exactly as in the previous example\
\cf0 s.sendMsg(\cf4 "s_new"\cf0 , \cf4 "sine"\cf0 , n = s.nextNodeID, 0, 1);\
\
\cf2 // stop the synth (delete it)\
\cf0 s.sendMsg(\cf4 "/n_free"\cf0 , n);\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\cf2 // EX. 3\cf0 \
\cf2 // client/server on one computer vs. client server on two computers\
// the previous examples without comments\
// they're identical except that\
//	the example that runs on one computer explicitly boots the server\
//	the example on 2 computers _assumes the server "somewhere" on the internet is booted\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\cf2 // on one computer\cf0 \
s = \cf3 Server\cf0 (\cf4 "aServer"\cf0 , \cf3 NetAddr\cf0 (\cf4 "localhost"\cf0 , 56789));	\
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "sine"\cf0 , \{ \cf3 Out\cf0 .ar(0, \cf3 SinOsc\cf0 .ar(440, 0, 0.2)) \}).send(s);\
s.sendMsg(\cf4 "s_new"\cf0 , \cf4 "sine"\cf0 , n = s.nextNodeID, 0, 1);\
s.sendMsg(\cf4 "/n_free"\cf0 , n);\
\
vs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // on two computers ... the server has to have a valid ip address\
\cf0 s = \cf3 Server\cf0 (\cf4 "aServer"\cf0 , \cf3 NetAddr\cf0 (\cf4 "... an ip number ..."\cf0 , 56789));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "sine"\cf0 , \{ \cf3 Out\cf0 .ar(0, \cf3 SinOsc\cf0 .ar(440, 0, 0.2)) \}).send(s);\
s.sendMsg(\cf4 "s_new"\cf0 , \cf4 "sine"\cf0 , n = s.nextNodeID, 0, 1);\
s.sendMsg(\cf4 "/n_free"\cf0 , n);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Localhost and internal servers
\f1\b0\fs18 \
\
The previous examples define server objects. But, for the most part, this isn't necessary as SuperCollider defines two such objects, the localhost and internal servers, at startup. They're represented by windows at the bottom of the screen. Each of the windows has a boot button to start its respective server.\
\
See the 
\f0\b\fs24 ClientVsServer, Server, 
\f1\b0\fs18 and
\f0\b\fs24  ServerOptions
\f1\b0\fs18  and 
\f0\b\fs24 Tutorial
\f1\b0\fs18  documents in the SuperCollider help system for further information.\cf2 \
\
////////////////////////////////////////////////////////////////////////////////////////////////////\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Go to 
\f3\b 2_Prerequisites
\f1\b0\fs18 \
}