{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green115\blue0;\red0\green0\blue191;
\red0\green0\blue0;\red96\green96\blue96;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Runtime errors\

\f1\b0\fs18 \
Runtime errors occur only after SuperCollider determines that a program has no syntax or grammar errors and a message sent to an object whle the program is executing creates an error.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////
\f0\b\fs24 \cf0 \
\
Common errors 
\f1\b0\fs18 \
\
1. an object receives a message which it doesn't understand\
2. a binary operation (addition, subtraction, multiplication, etc.) can't be performed\
3. a value other than true or false appears in a conditional (boolean) test\
4. a file can't be opened (a primitive fails)\
\
The call stack that SuperCollider prints in such circumstances shows what led up to the error. More on the call stack below.\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 An object doesn't understand
\f1\b0\fs18 \
\
Execute the following line\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 3.createRuntimeError\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Neither the Integer class of which 3 is an instance or any of the superclasses from which Integer inherits knows what to do with a .createRuntimeError message. Obviously, .createRuntimeError isn't defined in the system. \
\
When an object doesn't know how to respond to a message, SuperCollider executes a .doesNotUnderstand message which returns a four-part error notification. The parts of the notification are ERROR, RECEIVER, ARGS, and CALL STACK, as in\
\
ERROR:\
Message 'createRuntimeError' not understood.\
\
RECEIVER:\
   Integer 3\
ARGS:\
Instance of Array \{    (052C6560, gc=01, fmt=01, flg=11, set=00)\
  indexed slots [0]\
\}\
CALL STACK:\
	Object-doesNotUnderstand\
		arg this = 3\
		arg selector = 'createRuntimeError'\
		arg args = [*0]\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
The ERROR section explains what went wrong. \
\
The RECEIVER section names the the class of the object to which the message was sent. \
\
The ARGS section says how many arguments were included in the message.\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
Read the CALL STACK from the bottom to the top to see what led up to the error. In other words, read from\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Process\cf0 -interpretPrintCmdLine \
\
to \
\
\cf4 Interpreter\cf0 -interpretPrintCmdLine \
\
to \
\
\cf4 Object\cf0 -doesNotUnderstand. \
\
which is the first line in the stack.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Object\cf0 -doesNotUnderstand \
\
prints the error notification to the transcript window. Select \
\
\cf4 Object\cf0 -doesNotUnderstand\
\
and then press cmd-j to see how .doesNotUnderstand is defined. It uses a method called .dumpBackTrace to print the call stack.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Execute the following example to create another runtime error message. \
\
$a * $b\
\
The error is simple; characters can't be multiplied.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
The printout shows headers for ERROR, RECEIVER, ARGS, and CALL STACK (exactly the same as in the previous example).\
\
ERROR:\
Message '*' not understood.\
\
RECEIVER:\
   Character 97 'a'\
ARGS:\
Instance of Array \{    (052AAFB0, gc=90, fmt=01, flg=00, set=01)\
  indexed slots [1]\
      0 : Character 98 'b'\
\}\
CALL STACK:\
	Object-doesNotUnderstand\
		arg this = $a\
		arg selector = '*'\
		arg args = [*1]\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
One way to correct the example is to write\
\
$a.ascii * $b.ascii;\
\
Q: How would you know this?\
A: Look in the Char.sc document (select the word Char and press cmd-j) to see the messages to which the Char class responds. The .ascii method returns integers; integers can be multiplied.\
\
Or evaluate\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Char\cf0 .dumpInterface\
\
to see a list of messages to which Char can answer. \
\
Evaluate\
\
\cf4 Char\cf0 .dumpClassSubtree\
\
to see the classes from which Char inherits. Messages to those classes can also be used and messages defined in Object are valid, as well.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Unitialized variable (binary operation fails)\
\

\f1\b0\fs18 The next example shows that the variable a is initialized to an integer and the variable b isn't initialized to anything. When a variable in SuperCollider isn't initialized, it defaults to nil. Which is to say that all variables, once declared, are initialized to nil unless otherwise specified. \
\
Multiplying the variable a, an integer, by the variable b, nil, produces a runtime error.\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 var\cf0  a = 10;	\cf2 // a is declared and initialized\cf0 \
\cf4 var\cf0  b;		\cf2 // b declared but defaults to nil ... this will cause a runtime error\
			// in the case of a * b\cf0 \
t = \cf4 Task\cf0 (\{\
\
	4.do(\{ \cf4 arg\cf0  item, i;\
	\
		\cf2 // print the value of i if as long as it doesn't equal 3\
		// when i equals 3, then multiply a * b ... but this is a problem if b is nil\cf0 \
		if(i != 3) \{ i.postln \} \{ (a * b).postln \};\
		1.wait;\
		\
	\})\
	\
\});\
t.start;\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
Here's the printout that shows the program ran successfully until the index, i, reached 3, which is when a * b happened.\
\
a Task\
0\
1\
2\
ERROR:\
performBinaryOp failed.\
\
CALL STACK:\
	Object-performBinaryOpOnSomething\
		arg this = nil\
		arg aSelector = '*'\
		arg adverb = 10\
	Integer-*\
		arg this = 10\
		arg aNumber = nil\
		arg adverb = nil\
	< FunctionDef in closed FunctionDef >\
		arg item = 3\
		arg i = 3\
	Integer-do\
		arg this = 4\
		arg function = <instance of Function>\
		var i = 3\
	< FunctionDef in closed FunctionDef >  (no arguments or variables)\
	Routine-prStart\
		arg this = <instance of Routine>\
		arg inval = 1018.000000\
		\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
To see how the error message was created, select the message at the top of the call stack\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Object\cf0 -performBinaryOpOnSomething\
\
Press cmd-j to bring up a window with the code for the .doesNotUnderstand method.\
\
As with the the .doesNotUnderstand method, .performBinaryOpOnSomething relies upon .dumpBackTrace to print the call stack.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 True, false, or other\

\f1\b0\fs18 \
A runtime error happens when something that tests for a boolean receives a value other than true or false.\
\
For example\
\
in an if statement has\
\
x=4\
\
as its test, as in\
\
\cf5 if(x=4) \{ \cf6 "this is ok"\cf5 \};\
\cf0 \
the result is\
\
ERROR:\
Non Boolean in test:\
\
   Integer 4\
CALL STACK:\
	Object-mustBeBoolean\
		arg this = 4\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
\
Correcting the test clause makes the if statement work.\
\
\cf5 if(x==4) \{ \cf6 "this is ok"\cf5 \};\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Primitive fails\
\

\f1\b0\fs18 Trying to determine the length of a non-existent file creates a runtime error. In this case, _FileLength, a C code primitive, fails.\
\
\cf5 f = \cf7 File\cf5 (\cf6 "i_don't_exist"\cf5 , \cf6 "r"\cf5 );\
f.length;\
\cf0 \
ERROR:\
Primitive '_FileLength' failed.\
\
Failed.\
RECEIVER:\
Instance of File \{    (00EC7B40, gc=6C, fmt=00, flg=00, set=01)\
  instance variables [1]\
    fileptr : nil\
\}\
CALL STACK:\
	Object-verboseHalt\
		arg this = <instance of File>\
	Object-primitiveFailed\
		arg this = <instance of File>\
	File-length\
		arg this = <instance of File>\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
}