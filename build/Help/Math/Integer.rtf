{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Integer
\fs24 \

\f1\b0 \

\f0\b superclass: SimpleNumber\

\f1\b0 \
A 32 bit integer. Integer inherits most of its behaviour from its superclass.\
\

\f0\b\fs28 \ul Iteration
\f1\b0\fs24 \ulnone \
\

\f0\b do(function)\

\f1\b0 \
Executes function for all integers from zero to \ul this\ulnone  minus one.\

\f0\b function
\f1\b0  - a Function which is passed two arguments, both of which are the same\
integer from zero to this minus one. The reason two arguments are passed is for\
symmetry with the implementations of do in Collection.\
\

\f0\b for(endval, function)\

\f1\b0 \
Executes function for all integers from \ul this\ulnone  to \ul endval\ulnone , inclusive.\

\f0\b endval
\f1\b0  - an Integer.\

\f0\b function
\f1\b0  - a Function which is passed two arguments, the first which is an integer from this to\
endval, and the second which is a number from zero to the number of iterations minus one.\
\

\f0\b forBy(endval, step, function)\

\f1\b0 \
Executes function for all integers from \ul this\ulnone  to \ul endval\ulnone , inclusive, stepping each time by \ul step\ulnone .\

\f0\b endval
\f1\b0  - an Integer.\

\f0\b step
\f1\b0  - an Integer.\

\f0\b function
\f1\b0  - a Function which is passed two arguments, the first which is an integer from this to\
endval, and the second which is a number from zero to the number of iterations minus one.\
\

\f0\b\fs28 \ul Conversion
\f1\b0\fs24 \ulnone \
\

\f0\b asAscii
\f1\b0 \
\
Answer a Char which has the ASCII value of the receiver.\
\

\f0\b asDigit
\f1\b0 \
\
Answer a Char which represents the receiver as an ASCII digit. For example \
5.asDigit returns $5.\
\
\

\f0\b\fs28 \ul Random Numbers\

\f1\b0\fs24 \ulnone \

\f0\b xrand(exclude)\

\f1\b0 \
Answer a random value from zero to \ul this\ulnone , excluding the value \ul exclude\ulnone .\

\f0\b exclude
\f1\b0  - an Integer.\
\

\f0\b xrand2(exclude)\

\f1\b0 \
Answer a random value from 
\f0\b this
\f1\b0 .neg to \ul this\ulnone , excluding the value \ul exclude\ulnone .\

\f0\b exclude
\f1\b0  - an Integer.\
\

\f0\b\fs28 \ul Powers Of Two\

\f1\b0\fs24 \ulnone \

\f0\b nextPowerOfTwo\

\f1\b0 \
Answer the next power of two greater than or equal to the receiver.\
\

\f2 13.nextPowerOfTwo.postln;\
64.nextPowerOfTwo.postln;\

\f1 \

\f0\b isPowerOfTwo\

\f1\b0 \
Answer the whether the receiver is a power of two.\
\

\f2 13.isPowerOfTwo.postln;\
64.isPowerOfTwo.postln;\

\f1 \

\f0\b\fs28 \ul Prime Numbers\

\f1\b0\fs24 \ulnone \

\f0\b nthPrime\

\f1\b0 \
Answer the nth prime number. The receiver must be from 0 to 6541.\
\

\f2 [0,1,2,3,4,5].collect(\{ arg i; i.nthPrime; \}).postln;\

\f1 \

\f0\b prevPrime\

\f1\b0 \
Answer the next prime less than or equal to the receiver up to 65521.\
\

\f2 25.prevPrime.postln;\

\f1 \

\f0\b nextPrime\

\f1\b0 \
Answer the next prime less than or equal to the receiver up to 65521.\
\

\f2 25.nextPrime.postln;\

\f1 \

\f0\b isPrime\

\f1\b0 \
Answer whether the receiver is prime.\
\

\f2 25.isPrime.postln;\
13.isPrime.postln;\
\

\f0\b indexOfPrime\

\f1\b0 \
Answer the index of a prime number less than or equal to the receiver up to 65521.\
If the receiver is not a prime, the answer is nil.\
\

\f2 23.indexOfPrime;\
25.indexOfPrime;\
\

\f1 \

\f0\b\fs28 \ul Misc
\f1\b0\fs24 \ulnone \
\

\f0\b getKeys
\f1\b0 \
\
Returns the bits from the Macintosh GetKeys() Toolbox call. Receiver should be 0 to 3.\
\

\f2 [0.getKeys, 1.getKeys, 2.getKeys, 3.getKeys].postln;\
}