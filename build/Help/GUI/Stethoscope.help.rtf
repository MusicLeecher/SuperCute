{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Stethoscope
\f1\b0\fs18 			
\f0\b\fs24 scope window
\f2\b0 \
\
a graphical interface to navigate on buses\
\
works only with internal server\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 the scope window can be controlled by the following keys:
\f0\b \ulnone \
\
\
 J
\f2\b0 	 	one channel back\
 
\f0\b K
\f2\b0 	 	switch rate (audio vs. control)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0  L
\f2\b0 	 	one channel forward\
\

\f0\b O
\f2\b0 		jump to first hardware output channel and adjust numChannels to hardware\

\f0\b  I
\f2\b0 		jump to first hardware input channel  and adjust numChannels to hardware\
\

\f0\b space
\f2\b0  	run, if not running anyway.\

\f0\b . (period)
\f2\b0 	stop.\

\f0\b M
\f2\b0 		toggle screen size\
 \

\f0\b  + / -
\f2\b0 		zoom horizontally\

\f0\b * / _	
\f2\b0 	zoom vertically\
 
\f0\b S
\f2\b0 		change style between parallel and overlay\
\

\f0\b shift S
\f2\b0  	change style to lissajou (use only with fast computer and small buffer size)\

\f0\b shift  A
\f2\b0 	allocate buffer size so it fills the screen (to next power of two) (this can be dangerous, might crash)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 instance creation:\ulnone \
\
\
	
\f0\b *new(server, numChannels, index, bufsize, zoom, rate, view)
\f2\b0 \
		returns a new instance of Stethoscope.\
		\
	\ul by the message
\f0\b \ul  .scope
\f2\b0 \ul :\ulnone \
	\
	
\f0\b aServer.scope(numChannels, index, bufsize, zoom, rate)
\f2\b0 \
		opens a scope window for the server, stores it in the server instance var 
\f0\b scopeWindow\
		
\f2\b0 \
	
\f0\b aBus.scope(bufsize, zoom)
\f2\b0 \
		displays buffer channels in scope\
		\
	
\f0\b aFunction.scope(numChannels, outbus, fadeTime, bufsize, zoom)
\f2\b0 \
		plays a function and shows output in scope, returns synth object, like 
\f0\b \{ \}.play
\f2\b0 \
	
\f1\fs18 \
\

\f2\fs24 \ul \
instance methods:\ulnone \
\
\
	
\f0\b allocBuffer(size)
\f2\b0 \
		(re)allocate the buffer to a given size\
	
\f0\b run
\f2\b0 \
		start it if not playing anyway\
	
\f0\b free
\f2\b0 \
		end it, free the buffer\
		\
	
\f0\b numChannels_
\f2\b0 \
		change the number of channels displayed\
	
\f0\b index_
\f2\b0 \
		change the offset index\
	
\f0\b rate_
\f2\b0 \
		change the rate (\\audio or \\control)\
	
\f0\b size_
\f2\b0 \
		set the window size (default: 222)\
	
\f0\b zoom_
\f2\b0 \
		set horizontal zoom\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 	setProperties( numChannels, index, bufsize, zoom, rate )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 	
\f2\fs24 	any of these given will adjust the scope accordingly:\
		e.g. x.setProperties(zoom:8) will only zoom.
\f1\fs18 \
\
\cf2 // examples:\cf0 \
\
(\
\cf3 Server\cf0 .default = \cf3 Server\cf0 .internal;\
s = \cf3 Server\cf0 .default;\
s.boot;\
)\
(\
\{ \
	\cf3 SinOsc\cf0 .ar([225, 450, 900], 0, 0.2) \
	+ \cf3 LPF\cf0 .ar(\
		\cf3 LFPulse\cf0 .ar(226 * [1, 2, 5],[0,0.1,0.1],0.2, 0.2), \
		\cf3 MouseX\cf0 .kr(20, 10000, 1)\
		) \
\}.scope;\
)\
\
\cf2 // server.scope only changes the properies explicitly given:\cf0 \
\
s.scope(numChannels:5);\
s.scope(index:12);\
s.scope(zoom:4);\
s.scope(index:0);\
\
s.scopeWindow.size = 600;\
s.scopeWindow.size = 222;\
\
\cf2 // scoping buses:\cf0 \
\
a = \cf3 Bus\cf0 .audio(s, 4);\
\{ \cf3 WhiteNoise\cf0 .ar(0.2.dup(4)) \}.play(s, a.index);\
\
a.scope;\
\
c = \cf3 Bus\cf0 .control(s, 3);\
\{ \cf3 WhiteNoise\cf0 .kr(1.dup(4) * MouseX.kr) \}.play(s, c.index);\
\
c.scope;\
\
\cf2 // note that scoping control rate buses shows block size interpolation (this is due to the\
// fact that ScopeOut.kr doesn't work yet.)\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \ul \ulc0 \
external use: you can pass your own view in to add a stethoscope to it;
\f1\fs18 \ulnone \
\
\
w = \cf3 SCWindow\cf0 .new(\cf4 "my own scope"\cf0 , \cf3 Rect\cf0 (20, 20, 400, 500));\
w.view.decorator = \cf3 FlowLayout\cf0 (w.view.bounds);\
c = \cf3 Stethoscope\cf0 .new(s, view:w.view);\
w.onClose = \{ c.free \}; \cf2 // don't forget this\cf0 \
w.front;\
\
\
}