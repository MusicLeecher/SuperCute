{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green0\blue0;
\red0\green0\blue191;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs42 \cf0 AbstractPlayer			
\fs28 a playable synthesis process
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 superclass: AbstractFunction\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Players are things that play.  Anything that you want to play, you can stick your concept into a subclass of AbstractPlayer and you will inherit powerful server management and patching abilities.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Several common usage styles\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs22 \cf0 1.  create the object and send it the play command\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 somePlayer = \cf2 SomePlayerClass\cf0 .new(param, param2, param3);\
somePlayer.play;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 2.  make a gui and use transport controls to stop, start, record, write etc.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 somePlayer = \cf2 SomePlayerClass\cf0 .new(param, param2, param3);\
somePlayer.gui;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 3. prepare it for play, and then send it scheduled commands\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 somePlayer = \cf2 SomePlayerClass\cf0 .new(param, param2, param3);\
somePlayer.prepareForPlay( group ); // or server\
somePlayer.spawnAtTime(4.0); // 4 seconds from now\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 AbstractPlayer  is a subclass of AbstractFunction
\f1\b0\fs26  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 therefore you can do math with them:
\fs22 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 //right now this works, but only with simple ugenGraphs, no Samples,Envs etc.\
\cf4 (\cf5 Patch\cf4 (\{ \cf5 Saw\cf4 .ar(400) \}).wrap2( 0.5) ).gui\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf4 \
\
\cf3 // not yet\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 //(Patch(\{ Saw.ar(400) \}).wrap2( KrNumberEditor(0.5,[0.0,1.0]) ) ).gui\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf6 //(somePatch * EnvPlayer.new(Env.newClear(10)) ).topGui\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Patching
\f1\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf4 \
p = \cf5 Patch\cf4 (\{  \cf5 SinOsc\cf4 .ar(mul: 0.3) \});\
p.play;\
\
\cf3 // reassign the bus while playing\
\cf4 p.bus = 5;\
\
p.bus = 0;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Common players\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 	
\f0\b Patch
\f1\b0  			\
		- specifies a function ( Instrument ) and the arguments \
		with which to play the function.\
	
\f0\b FunctionPlayer
\f1\b0  	\
		- takes any valid ugenFunction and grants it the powers of a Player.\
	
\f0\b SFP
\f1\b0  				\
		- plays sound files	\
	
\f0\b StreamKrDur
\f1\b0  
\f0\b Stream2Trig
\f1\b0  \
		- renders a number stream to a .kr signal\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Gui
\f1\b0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 AbstractPlayer also comes with a powerful gui class framework.  Because of this, many people make the mistake of assuming that AbstractPlayer is primarily a way to get pretty windows.  It has nothing to do with that.\
\
But it is very nice  to:\
	hit the play button and have your sound play.\
	select a format, choose a path by normal dialog and record your \
		sound to disk as a soundfile.\
	hit the save button and save your object with all its parameters to disk.\
	change the tempo when you want to.
\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \ul Methods\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 ar    	- do your thing,  make audio\
value 	- same as .ar\
kr		- same as .ar\
\
play\
scope\
record\
write\
\
timeDuration -(seconds) \
	return the total duration or nil (meaning infinite).\
	Players that specify a duration can themselves be played inside of patterns.  \
beatDuration -(beats)	\
tempo - (bpm) defaults to 60bpm\
tempo_(bpm) 	- set tempo\
delta - (beats) this is duration converted to beats\
\
path -  if loaded or saved, the player knows its path\
name - an explicit name if it has been set or the filename ( if path is known)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 children
\f1\b0  - for players that hold other players or objects, return those children\
	player classes should implement where appropriate.\
	a 
\f0\b Patch
\f1\b0  has its args as children\
	
\f0\b SFP
\f1\b0  has its underlying object as child\
	
\f0\b EventStreamPlayer
\f1\b0  has its pattern.  in a properly implemented pattern structure,\
		you can propagate all the way down your chain.
\fs20 	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 	using this.children.do(\{arg item; .... \})  can save you from having to muck up \
	the Player class with extra methods.\
	
\f3\i\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\i0\b\fs24 \cf0 allChildren
\f1\b0  - and all your children's children, and their children...	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs22 \cf0 deepDo(function)
\f1\b0  - do to allChildren
\fs26 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \ul playing in patterns:\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 		\
Players can be put inside of standard patterns:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 /*\
(
\f2\fs18 \cf6 \
\
p = CropPlayer(\
		Patch.new(\{ arg freq=400, freq2=500,pmindex=0,phasemod=0.0,amp=1.0;\
				PMOsc.ar(freq,freq2,pmindex,phasemod,amp)\
		\},[\
			150.06, \
		  	27.7707, \
		  	15.1163, \
		 	0, \
		  	0.616317\
		 ]),0,4);\
		 \
y = CropPlayer(\
		Patch.new(\{ arg freq=400, freq2=500,pmindex=0,phasemod=0.0,amp=1.0;\
				PMOsc.ar(freq,freq2,pmindex,phasemod,amp)\
		\},[\
			200, \
		  	97.7707, \
		  	15.1163, \
		 	0, \
		  	0.616317\
		 ]),0,4);\
		 \
\
	Pseq([ p,y,p,y ],2).play\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf6 */\cf0 \
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 each player will embed itself in the stream, making itself a single event.\
	see AbstractPlayer::embedInStream\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Note that each player must have a finite duration or it will play infinitely, and the\
sequence will not progress ! A Patch does not have a finite duration.  You can use CropPlayer to impose a finite duration  (and an envelope) on any player.  This does result in an extra layer of envelope. PlayerSeqTrack is more flexible if you want simple sequencing.  Patterns are more flexible if you want to use Prand,Pswitch etc.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 \
\
any player could even respond itself as an event\
\
	EventStreamPlayer(\
			Routine(\{\
				... that yields a player object each time\
			\})\
		).ar\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs32 \cf0 Subclassing AbstractPlayer\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
	see [
\f0\b playerServerSupport
\f1\b0 ] for a basic rundown of the complexities involved\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs26 \cf0 \
	After that you would usually write a gui class for it.\
	\
	Then implement the 
\f0\b storeParamsOn
\f1\b0  method which enables you \
		to load and save your object.\
	\
	\
	\
	\
	
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Players to come\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \ulnone possible futures:\
	Stream2Midi - renders a number stream to midi ( controllers etc.)\
	EventStream2Midi - renders note/freq,amp/velocity, duration to midi note events\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs22 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone TimelineEventPlayer\
	
\f1\b0 timecode based events.  (rather than delta based event streams where each event\
	is responsible for determing when the one succeeding it will happen).\
	\
Recording of events\
	from midi, wacom, gui etc.\
\
	\
any Player could be triggered to play from midi or wacom.  it can also go through\
SchedPlayer to quantise the start time of its play.\
\
All of that can be recorded.  those event-recordings can in turn then be further played with.\
\
SFP is the one player type that can be sub-located (asked to start play somewhere in the middle). Timeline based event recording would be another one.   the transport system would work very nicely.\
\
}