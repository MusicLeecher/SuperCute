{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green0\blue191;
\red191\green0\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 AbstractConstraint
\f1\b0\fs24 \
\
subclasses:\
Constraint, SeenBefore,  IsIn, IsNotIn, Every,  Not, Any, Xor, CountLimit, IsEven, IsOdd, IsNil, NotNil\
\
Constraints let you specify conditions in an OOP fashion.\
You can perform logical operations on the constraint object itself to further \
filter or refine your query.\
\

\f2\fs20 c = \
	\cf2 Constraint\cf0 (\{ \cf2 arg\cf0  obj; obj.even  \})\
		and: \cf2 Constraint\cf0 (\{ \cf2 arg\cf0  obj; obj % 4 == 0 \})\
		and: (\cf2 Constraint\cf0 (\{ \cf2 arg\cf0  obj; obj == 8 \}).not);\

\f1\fs24 \
	\
c is now a constraint object that can be used to validate that an input\
is even, divisible by 4 and is not the number 8.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 c.value(3)\
\cf4 false\cf3 \
\
c.value(8)\
\cf4 false\cf3 \
\
c.value(4)\
\cf4 true\cf3 \
\
c.value(12)\
\cf4 true\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
This can be used any place a function that returns true/false is required.\
eg. select, reject, every, any\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 \
\cf5 // run numbers through it\
\cf3 50.do(\{\
	n = 40.rand;\
	[n,c.value(n)].postln\
\});\
\
[ 36, \cf4 true\cf3  ]\
[ 1, \cf4 false\cf3  ]\
[ 17, \cf4 false\cf3  ]\
[ 38, \cf4 false\cf3  ]\
[ 31, \cf4 false\cf3  ]\
[ 4, \cf4 true\cf3  ]\
[ 11, \cf4 false\cf3  ]\
[ 37, \cf4 false\cf3  ]\
[ 16, \cf4 true\cf3  ]\
[ 20, \cf4 true\cf3  ]\
[ 18, \cf4 false\cf3  ]\
[ 4, \cf4 true\cf3  ]\
[ 37, \cf4 false\cf3  ]\
[ 6, \cf4 false\cf3  ]\
[ 23, \cf4 false\cf3  ]\
[ 9, \cf4 false\cf3  ]\
[ 17, \cf4 false\cf3  ]\
[ 23, \cf4 false\cf3  ]\
[ 23, \cf4 false\cf3  ]\
[ 22, \cf4 false\cf3  ]\
[ 25, \cf4 false\cf3  ]\
[ 30, \cf4 false\cf3  ]\
[ 7, \cf4 false\cf3  ]\
[ 2, \cf4 false\cf3  ]\
[ 30, \cf4 false\cf3  ]\
[ 37, \cf4 false\cf3  ]\
[ 7, \cf4 false\cf3  ]\
[ 30, \cf4 false\cf3  ]\
[ 19, \cf4 false\cf3  ]\
[ 12, \cf4 true\cf3  ]\
[ 12, \cf4 true\cf3  ]\
[ 12, \cf4 true\cf3  ]\
[ 5, \cf4 false\cf3  ]\
[ 1, \cf4 false\cf3  ]\
[ 10, \cf4 false\cf3  ]\
[ 35, \cf4 false\cf3  ]\
[ 26, \cf4 false\cf3  ]\
[ 13, \cf4 false\cf3  ]\
[ 11, \cf4 false\cf3  ]\
[ 14, \cf4 false\cf3  ]\
[ 31, \cf4 false\cf3  ]\
[ 38, \cf4 false\cf3  ]\
[ 19, \cf4 false\cf3  ]\
[ 39, \cf4 false\cf3  ]\
[ 33, \cf4 false\cf3  ]\
[ 23, \cf4 false\cf3  ]\
[ 14, \cf4 false\cf3  ]\
[ 39, \cf4 false\cf3  ]\
[ 36, \cf4 true\cf3  ]\
[ 9, \cf4 false\cf3  ]\
\
\
\cf4 It\cf3  can be used in place of a function for \
	.reject .select .any .every\
for \cf4 SequenceableCollections\cf3 ,\cf4 Streams\cf3  and \cf4 Patterns\cf3 \
\
\cf5 // filter a collection\
\cf4 Array\cf3 .fill(100,\{ 100.rand \})\
	.select(c) \cf5 // acts like a function\
\cf3 	.do(\{ \cf4 arg\cf3  num; num.postln; \});\
\
68\
44\
72\
88\
40\
32\
48\
52\
80\
48\
4\
12\
24\
24\
96\
20\
24\
12\
64\
0\
56\
32\
60\
40\
96\
52\
0\
60\
12\
\
\cf0 \
\cf3 \
\cf5 // filter a Pattern\
\cf3 p = \cf4 Pseries\cf3 (0,1,100)\
	.select(c);\
	\
p.asStream.all.do(\{ \cf4 arg\cf3  num; num.postln \});\
0\
4\
12\
16\
20\
24\
28\
32\
36\
40\
44\
48\
52\
56\
60\
64\
68\
72\
76\
80\
84\
88\
92\
96\
\
\cf0 \
\cf3 \
\cf5 // and here is everybody that gets rejected by the constraint\
\cf3 p = \cf4 Pseries\cf3 (0,1,100)\
	.reject(c);\
	\
p.asStream.all.do(\{ \cf4 arg\cf3  num; num.postln \});\
\
1\
2\
3\
5\
6\
7\
8\
9\
10\
11\
13\
14\
15\
17\
18\
19\
21\
22\
23\
25\
26\
27\
29\
30\
31\
33\
34\
35\
37\
38\
39\
41\
42\
43\
45\
46\
47\
49\
50\
51\
53\
54\
55\
57\
58\
59\
61\
62\
63\
65\
66\
67\
69\
70\
71\
73\
74\
75\
77\
78\
79\
81\
82\
83\
85\
86\
87\
89\
90\
91\
93\
94\
95\
97\
98\
99\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf3 c = \
	\cf4 Constraint\cf3 (\{ \cf4 arg\cf3  obj; obj.even  \})\
		and: \cf4 Constraint\cf3 (\{ \cf4 arg\cf3  obj; obj % 4 == 0 \})\
		and: (\cf4 Constraint\cf3 (\{ \cf4 arg\cf3  obj; obj == 8 \}).not);
\fs18 \cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 The example above was expressed using only Constraint.\
It could also be expressed this way\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 c = \
	\cf2 IsEven.new and: \cf0  \cf2 Constraint\cf0 (\{ \cf2 arg\cf0  obj; obj % 4 == 0 \})\
		and: \cf2 Constraint\cf0 (\{ \cf2 arg\cf0  obj; obj != 8 \});
\fs18 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf4 Constraints\cf3  respond to\

\f2\fs18 	.not\
	.or(aConstraint)\
	.and(aConstraint)\
	.xor(aConstraint)\
	.reject(aConstraint)\
	.select(aConstraint)\
\cf0 	
\f1\fs24 \
by returning a new compound constraint that expresses that logic.\
\

\f2\fs18 (\
	c = \cf2 IsEven\cf0 .new;\
	d = \cf2 Constraint\cf0 (\{ \cf2 arg\cf0  num; num == 3 \});\
	\
	e = c or: d; \cf6 // if its even or it is the number 3\
\cf0 )\
(\
	c = \cf2 IsEven\cf0 .new;\
	d = \cf2 Constraint\cf0 (\{ \cf2 arg\cf0  num; num == 4 \});\
	\
	e = c.reject(d); \cf6 // if its even and also reject it if it is the number 4\
\cf0 )
\f1\fs24 \
\
\
	\
	
\f2\fs18 \
}