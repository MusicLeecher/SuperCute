{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 \
Collection\

\f1\b0\fs24 \

\f0\b superclass: Object\

\f1\b0 \
Collections are groups of objects. Collection is an abstract class. You do not create direct instances of Collection. There are many types of Collections including List, Array, Dictionary, Bag, Set, SortedList, etc.\
\

\f0\b\fs28 \ul Accessing:\
\

\fs24 \ulnone size
\f1\b0 \
\
Answers the number of objects contained in the Collection.\
\

\f2 List[1, 2, 3, 4].size.postln;\

\f1 \

\f0\b isEmpty
\f1\b0 \
\
Answer whether the receiver contains no objects.\
\

\f2 List[].isEmpty.postln;\

\f1 \

\f0\b\fs28 \ul Adding and Removing:\

\f1\b0\fs24 \ulnone \

\f0\b add(anObject)\

\f1\b0 \
Add anObject to the receiver.\
\

\f2 List[1, 2].add(3).postln;\

\f1 \

\f0\b addAll(aCollection)\

\f1\b0 \
Add all items in aCollection to the receiver.\
\

\f2 List[1, 2].addAll(List[3, 4]).postln;\

\f1 \

\f0\b remove(anObject)\

\f1\b0 \
Remove anObject from the receiver. Answers the removed object.\
\

\f2 (\
var a;\
a = List[1, 2, 3, 4];\
a.remove(3).postln;\
a.postln;\
)\

\f1 \

\f0\b removeAll(aCollection)\

\f1\b0 \
Remove all items in aCollection from the receiver.\
\

\f2 List[1, 2, 3, 4].removeAll(List[2, 3]).postln;\

\f1 \

\f0\b removeAllSuchThat(function)\

\f1\b0 \
Remove all items in the receiver for which function answers true. The function is passed two arguments, the item and an integer index. Answers the objects which have been removed.\
\

\f2 (\
var a;\
a = List[1, 2, 3, 4];\
a.removeAllSuchThat(\{ arg item, i; item < 3 \}).postln;\
a.postln;\
)\

\f1 \
\

\f0\b\fs28 \ul Testing:\

\f1\b0\fs24 \ulnone \

\f0\b includes(anObject)\

\f1\b0 \
Answer whether anObject is contained in the receiver.\
\

\f2 List[1, 2, 3, 4].includes(3).postln;\

\f1 \

\f0\b includesAny(aCollection)\

\f1\b0 \
Answer whether any item in aCollection is contained in the receiver.\
\

\f2 List[1, 2, 3, 4].includesAny(List[4, 5]).postln;\

\f1 \

\f0\b includesAll(aCollection)\

\f1\b0 \
Answer whether all items in aCollection are contained in the receiver.\
\

\f2 List[1, 2, 3, 4].includesAll(List[4, 5]).postln;\

\f1 \
\

\f0\b\fs28 \ul Iteration:\

\f1\b0\fs24 \ulnone \

\f0\b do(function)\

\f1\b0 \
Evaluates function for each item in the collection. The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].do(\{ arg item, i; item.postln \});
\f1 \
\

\f0\b collect(function)\

\f1\b0 \
Answer a new collection which consists of the results of function evaluated for each item in the collection. The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].collect(\{ arg item, i; item + 10 \}).postln;\

\f1 \

\f0\b select(function)\

\f1\b0 \
Answer a new collection which consists of all items in the receiver for which function answers true. The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].select(\{ arg item, i; item.even \}).postln;\

\f1 \

\f0\b reject(function)\

\f1\b0 \
Answer a new collection which consists of all items in the receiver for which function answers false. The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].reject(\{ arg item, i; item.even \}).postln;
\f1 \
\

\f0\b detect(function)\

\f1\b0 \
Answer the first item in the receiver for which function answers true.\
The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].detect(\{ arg item, i; item.even \}).postln;
\f1 \
\

\f0\b inject(aValue, function)\

\f1\b0 \
Answer a value....\
\

\f0\b any(function)\

\f1\b0 \
Answer whether function answers true for any item in the receiver.\
The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].any(\{ arg item, i; item.even \}).postln;
\f1 \
\

\f0\b every(function)\

\f1\b0 \
Answer whether function answers true for every item in the receiver.\
The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].every(\{ arg item, i; item.even \}).postln;
\f1 \
\

\f0\b count(function)\

\f1\b0 \
Answer the number of items for which function answers true.\
The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].count(\{ arg item, i; item.even \}).postln;
\f1 \
\

\f0\b occurencesOf(anObject)\

\f1\b0 \
Answer the number of items in the receiver which are equal to anObject.\
\

\f2 List[1, 2, 3, 3, 4, 3, 4, 3].occurencesOf(3).postln;
\f1 \
\

\f0\b sum(function)\

\f1\b0 \
Answer the sum of the results of function evaluated for each item in the receiver.\
The function is passed two arguments, the item and an integer index.\
\

\f2 List[1, 2, 3, 4].sum.postln;
\f1 \
\

\f0\b maxItem(function)\

\f1\b0 \
Answer the maximum of the results of function evaluated for each item in the receiver.\
The function is passed two arguments, the item and an integer index.\
If function is nil, then answer the maximum of all items in the receiver.\
\

\f2 List[1, 2, 3, 4].maxItem(\{ arg item, i; item + 10 \}).postln;
\f1 \
\

\f0\b minItem(function)\

\f1\b0 \
Answer the minimum of the results of function evaluated for each item in the receiver.\
The function is passed two arguments, the item and an integer index.\
If function is nil, then answer the minimum of all items in the receiver.\
\

\f2 List[1, 2, 3, 4].minItem(\{ arg item, i; item + 10 \}).postln;\

\f1 \
\

\f0\b\fs28 \ul Conversion:
\f1\b0\fs24 \ulnone \
\

\f0\b asBag
\f1\b0 \
\
Answer a Bag to which all items in the receiver have been added.\
\

\f2 List[1, 2, 3, 4].asBag.postln;
\f1 \
\

\f0\b asList
\f1\b0 \
\
Answer a List to which all items in the receiver have been added.\
\

\f2 List[1, 2, 3, 4].asList.postln;
\f1 \
\

\f0\b asSet
\f1\b0 \
\
Answer a Set to which all items in the receiver have been added.\
\

\f2 List[1, 2, 3, 4].asList.postln;
\f1 \
\

\f0\b asSortedList
\f1\b0 \
\
Answer a SortedList to which all items in the receiver have been added.\
\

\f2 List[2, 1, 4, 3].asSortedList.postln;
\f1 \
\

\f0\b printOn(stream)
\f1\b0 \
\
Print a representation of the collection to a stream.\
\

\f0\b storeOn(stream)
\f1\b0 \
\
Write a compileable representation of the collection to a stream.\
\

\f0\b printItemsOn(stream)
\f1\b0 \
\
Print a comma separated compileable representation of the items in the collection to a stream.\
\

\f0\b storeItemsOn(stream)
\f1\b0 \
\
Write a comma separated compileable representation of the items in the collection to a stream.\
\
\
}