{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;\red0\green0\blue191;\red0\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 send synth def to engine.\
klank with inputs\
test load synth def on command.\
start/stop local server methods.\
how to do scope,plot,\cf2 NRT\cf0 ,metering ?\
disk io\
playbuf test.\
\
clean window\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env"\cf0 , \{ \
	\cf2 var\cf0  out, eg, freq, gate, fc, osc;\
	#freq, gate = \cf2 Control\cf0 .names([\cf4 \\freq\cf0 ,\cf4 \\gate\cf0 ]).kr([500, 1]);\
	fc = \cf2 XLine\cf0 .kr(\cf2 ExpRand\cf0 (500,2000), \cf2 ExpRand\cf0 (500,2000),2);\
	osc = \cf2 Mix\cf0 .fill(8, \{ \cf2 LFSaw\cf0 .ar(freq * [\cf2 Rand\cf0 (0.97,1.03),\cf2 Rand\cf0 (0.97,1.03)], 0, 0.1) \}).distort * 0.2;\
	out = \cf2 RLPF\cf0 .ar(osc, fc, 0.1);\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(1,1,1), gate);\
	\cf2 FreeSelfWhenDone\cf0 .kr(eg);\
	\cf2 Out\cf0 .ar(0, out * eg);\
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env"\cf0 , \{ \
	\cf2 var\cf0  out, eg, freq, gate, fc, osc;\
	#freq, gate = \cf2 Control\cf0 .names([\cf4 \\freq\cf0 ,\cf4 \\gate\cf0 ]).kr([500, 1]);\
	fc = \cf2 XLine\cf0 .kr(\cf2 ExpRand\cf0 (500,2000), \cf2 ExpRand\cf0 (500,2000),2);\
	osc = \cf2 Mix\cf0 .fill(8, \{ \cf2 LFSaw\cf0 .ar(freq * \cf2 Rand\cf0 (0.97,1.03).dup, 0, 0.1) \}).distort * 0.2;\
	out = \cf2 RLPF\cf0 .ar(osc, fc, 0.1);\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr(0.01), gate);\
	\cf2 FreeSelfWhenDone\cf0 .kr(eg);\
	\cf2 Out\cf0 .ar(0, out * eg);\
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env"\cf0 , \{ \cf2 arg\cf0  freq=800, gate = 1;\
	\cf2 var\cf0  out, eg, fc, osc;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr(0.06,0.1,0.4,0.8), gate);\
	osc = \cf2 SinOsc\cf0 .ar(freq+[0,1],0,0.1);\
	\cf2 FreeSelfWhenDone\cf0 .kr(eg);\
	\cf2 Out\cf0 .ar(0, osc * eg);\
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env"\cf0 , \{ \cf2 arg\cf0  freq=800, gate = 1;\
	\cf2 var\cf0  out, eg, fc, osc;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr(0.03,0.3,0.1,0.8), gate);\
	fc = 50 + (2000 * eg);\
	osc = \cf2 Mix\cf0 .fill(8, \{ \cf2 LFSaw\cf0 .ar(freq * [0.5,1].scramble * \{\cf2 Rand\cf0 (0.98,1.02)\}.dup, 0, 0.04) \});\
	out = \cf2 RLPF\cf0 .ar(\cf2 RLPF\cf0 .ar(osc, fc, 0.7), fc, 0.7) * 0.3;\
	\cf2 FreeSelfWhenDone\cf0 .kr(eg);\
	\cf2 Out\cf0 .ar(0, out * eg);\
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env2"\cf0 , \{ \cf2 arg\cf0  freq=800, gate = 1;\
	\cf2 var\cf0  out, eg, fc, osc, rq;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr(0.03,0.3,0.1,0.8), gate);\
	fc = \cf2 SinOsc\cf0 .kr(0.27,0,1400,2000);\
	rq = \cf2 SinOsc\cf0 .ar(0.13,0,0.2,0.8);\
	osc = \cf2 Mix\cf0 .fill(10, \{ \cf2 LFSaw\cf0 .ar(freq * [0.5,1].scramble * \{\cf2 Rand\cf0 (0.98,1.02)\}.dup, 0, 0.04) \});\
	out = R\cf2 LPF\cf0 .ar(osc, fc, 0.1) * 0.3;\
	\cf2 FreeSelfWhenDone\cf0 .kr(eg);\
	\cf2 Out\cf0 .ar(0, out * eg);\
\}).load(s);\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "env"\cf0 , \{ \cf2 arg\cf0  freq=800, gate = 1;\
	\cf2 var\cf0  out, eg, fc, osc, rq;\
	fc = \cf2 SinOsc\cf0 .ar(0.37,0,1400,2000);\
	rq = \cf2 SinOsc\cf0 .ar(0.13,0,0.2,0.8);\
	osc = \cf2 Mix\cf0 .fill(6, \{ \cf2 LFSaw\cf0 .ar(freq * [0.5,1].scramble * \{\cf2 Rand\cf0 (0.99,1.01)\}.dup, 0, 0.04) \});\
	out = \cf2 RLPF\cf0 .ar(\cf2 RLPF\cf0 .ar(\cf2 RLPF\cf0 .ar(\cf2 RLPF\cf0 .ar(osc, fc, rq), fc, rq), fc, rq), fc, rq) * 0.3;\
	\cf2 Out\cf0 .ar(0, out);\
\}).writeDefFile;\
)\
\
\cf2 \{Rand\cf0 (0.97,1.03)\}.dup.inspect\
\
x = \cf2 SynthDef\cf0 (\cf3 "trivial"\cf0 , \{ \cf2 Out\cf0 .ar(0, \cf2 FSinOsc\cf0 .ar([800,801], 0, 0.1).abs) \}).writeDefFile;\
\
x = \cf2 SynthDef\cf0 (\cf3 "xline"\cf0 , \{ \cf2 Out\cf0 .kr(0, \cf2 XLine\cf0 .kr(0.5,4,12)) \}).writeDefFile;\
\
x = \cf2 SynthDef\cf0 (\cf3 "io"\cf0 , \{ \cf2 Out\cf0 .ar(0, \cf2 In\cf0 .ar(2, 2)) \}).writeDefFile;\
\
x = \cf2 SynthDef\cf0 (\cf3 "ring"\cf0 , \{ \cf2 ReplaceOut\cf0 .ar(0, \cf2 FSinOsc\cf0 .ar(500) * \cf2 In\cf0 .ar(0, 2)) \}).writeDefFile;\
\
\cf2 SynthDef\cf0 (\cf3 "trem"\cf0 , \{ \cf2 Out\cf0 .ar(0, \cf2 FSinOsc\cf0 .ar(\cf2 Rand\cf0 (400,1200), 0, \cf2 FSinOsc\cf0 .ar(\cf2 ExpRand\cf0 (2,14),[0,0.2],0.1).max(0))) \}).writeDefFile;\
\
\cf2 SynthDef\cf0 (\cf3 "trem"\cf0 , \{ \cf2 Out\cf0 .ar(0, \cf2 FSinOsc\cf0 .ar(\cf2 Rand\cf0 (400,1200), 0, \cf2 FSinOsc\cf0 .ar(3,[0,0.2],0.1,0.1))) \}).writeDefFile;\
\
(\
\cf2 SynthDef\cf0 (\cf3 "trem"\cf0 , \{ \
	\cf2 var\cf0  lo;\
	lo = \cf2 LPF\cf0 .ar(\cf2 BrownNoise\cf0 .ar([1,1]), 40);\
	\cf2 Out\cf0 .ar(0, lo * \cf2 FSinOsc\cf0 .ar(\cf2 ExpRand\cf0 (400,3000), 0, \cf2 FSinOsc\cf0 .kr( \cf2 ExpRand\cf0 (2,14),0,0.03).max(0))) \
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "trem"\cf0 , \{ \
	\cf2 Out\cf0 .ar(0, [\cf2 SinOsc\cf0 .ar(\cf2 ExpRand\cf0 (400,3000), 0, \cf2 SinOsc\cf0 .kr( \cf2 ExpRand\cf0 (2,14),0,0.03).max(0))]) \
\}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "saw"\cf0 , \{ \
	\cf2 var\cf0  outChan, freq1, freq2;\
	#outChan, freq1, freq2 = \cf2 Control\cf0 .kr([0, 100, 301]);\
	\cf2 Out\cf0 .ar(outChan, \cf2 LFSaw\cf0 .ar([freq1, freq2] * \cf2 In\cf0 .kr(0,1), 0, 0.1)) \
\}).writeDefFile;\
)\
\
x = \cf2 SynthDef\cf0 (\cf3 "noise"\cf0 , \{ \cf2 Out\cf0 .ar(0, \cf2 PinkNoise\cf0 .ar([0.1,0.1])) \}).writeDefFile;\
\
(\
\cf2 SynthDef\cf0 (\cf3 "cluster"\cf0 , \{ \
	\cf2 var\cf0  out, amp, freq, bw, spread;\
	\
	bw = 0.1;\
	freq = 800;\
	spread = freq * bw * 0.5;\
	amp = 1/12;\
	out = \cf2 Mix\cf0 .fill(12, \{ \cf2 FSinOsc\cf0 .ar(\cf2 Rand\cf0 (freq-spread,freq+spread)) \});\
	\
	\cf2 Out\cf0 .ar(0, out * amp);\
\}).writeDefFile;\
)\
\
(\
\
\cf2 SynthDef\cf0 (\cf3 "cluster"\cf0 , \{ \
	\cf2 var\cf0  out, amp, freq, bw, spread;\
	\
	bw = 0.1;\
	freq = 800;\
	spread = freq * bw * 0.5;\
	amp = 1/12;\
	out = \cf2 Mix\cf0 .fill(12, \{ \cf2 FSinOsc\cf0 .ar(\cf2 Rand\cf0 (freq-spread,freq+spread), 0, amp) \});\
	\
	\cf2 Out\cf0 .ar(0, out);\
\}).inspect;\
)\
\
\
(\
\cf2 SynthDef\cf0 (\cf3 "analog-bubbles"\cf0 , \{\
	f = \cf2 LFSaw\cf0 .kr(0.4, 0, 24, \cf2 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps; \cf5 // glissando function\
\cf0 	\cf2 CombN\cf0 .ar(\cf2 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4) \cf5 // echoing sine wave\
\cf0 \}).writeDefFile;\
)\
\
(\
\cf2 SynthDef\cf0 (\cf3 "LFO-mod"\cf0 , \{\
	\cf2 Out\cf0 .ar(0, \cf2 CombL\cf0 .ar(\
		\cf2 RLPF\cf0 .ar(\cf2 LFPulse\cf0 .ar(\cf2 FSinOsc\cf0 .kr(0.05,0,80,160),0,0.4,0.05), \
		   \cf2 FSinOsc\cf0 .kr([0.6,0.7],0,3600,4000), 0.2),\
		0.3, [0.2,0.25], 2));\
	\
\}).writeDefFile;\
)\
\
\
(\
\cf2 SynthDef\cf0 (\cf3 "busy-signal"\cf0 , \{\
	\cf2 Pan2\cf0 .ar(\
		\cf2 FSinOsc\cf0 .ar(\cf2 Rand\cf0 (400,2400.0), 0, \cf2 LFPulse\cf0 .kr(\cf2 Rand\cf0 (1,11), 0, \cf2 Rand\cf0 (0,0.7), 0.04)),\
	\cf2 Rand\cf0 (-1,1))\
\}).writeDefFile;\
)\
\
\
(\
	\cf5 //unixCmd("\cf3 engine\cf5 /supercollider_synth -u 57110 >synth_log &".postln).postln;\
\cf0 	d = 0.04;\
	r = \cf2 Routine\cf0 (\{\
		\cf2 var\cf0  server;\
		server = \cf2 Server\cf0 .local;	\
		\
		server.dump;\
		3.postln.wait;\
					\
		\cf5 //server.sendMsg("def.load".postln, "def/bdl/osc_bench.bdl", "osc_bench");\
\cf0 		\
		\cf5 //1.2.postln.wait;\
\cf0 		\cf5 //server.sendMsg("buf.allocRead".postln, "sine", "wavetables/sine.aiff", 0, 0);\
\cf0 		1.3.postln.wait;\
		\
		server.sendMsg(\cf3 "start"\cf0 .postln);\
					\
		0.5.postln.wait;\
		server.sendBundle(d, [\cf3 "bus.set"\cf0 .postln, 0, 1]);\
		0.5.postln.wait;\
		server.sendBundle(d, [\cf3 "new"\cf0 .postln, \cf3 "saw"\cf0 , 1000, 0, 0, 100, 301]);\
			\
		\cf5 //server.sendBundle(3, ["new".postln, "saw", 1001, 0, 2]);\
\cf0 		\
		3.postln.wait;\
		2.do(\{\
			server.sendBundle(d, [\cf3 "bus.set"\cf0 , 0, exprand(0.75,4.0)]);\
			0.02.wait;\
		\});\
		3.postln.wait;\
		\
		server.sendBundle(d, [\cf3 "syn.free"\cf0 .postln, 1000]);\
		\cf5 //server.sendBundle(1, ["syn.free".postln, 1001]);\
\cf0 		\
		1.postln.wait;\
		server.sendMsg(\cf3 "stop"\cf0 .postln);\
					\
		4.wait;\
		\
		server.sendMsg(\cf3 "quit"\cf0 .postln);			      \
		unixOut(\cf3 "cat synth_log"\cf0 .postln);		\
	\});\
	\cf2 SystemClock\cf0 .play(r);\
)\
\
\
(\
	\cf5 //unixCmd("\cf3 engine\cf5 /supercollider_synth -u 57110 >synth_log &".postln).postln;\
\cf0 	d = 0.04;\
	r = \cf2 Routine\cf0 (\{\
		\cf2 var\cf0  server;\
		server = \cf2 Server\cf0 .local;	\
		\
		server.dump;\
		3.postln.wait;\
					\
		\cf5 //server.sendMsg("def.load".postln, "def/bdl/osc_bench.bdl", "osc_bench");\
\cf0 		\
		\cf5 //1.2.postln.wait;\
\cf0 		\cf5 //server.sendMsg("buf.allocRead".postln, "sine", "wavetables/sine.aiff", 0, 0);\
\cf0 		1.3.postln.wait;\
		\
		server.sendMsg(\cf3 "start"\cf0 .postln);\
					\
		0.5.postln.wait;\
\cf5 //		server.sendBundle(d, ["bus.set".postln, 0, 1]);\
//		0.5.postln.wait;\
//		server.sendBundle(d, ["new".postln, "io", 1000, 0]);\
\cf0 			\
		\cf5 //server.sendBundle(3, ["new".postln, "saw", 1001, 0, 2]);\
\cf0 		\
\cf5 //		3.postln.wait;\
//		server.sendBundle(d, ["new".postln, "ring", 1001, 0]);\
//		3.postln.wait;\
//		server.sendBundle(d, ["syn.free".postln, 1001]);\
//		3.postln.wait;\
//		server.sendBundle(d, ["new".postln, "ring", 1001, 0]);\
//		3.postln.wait;\
//		server.sendBundle(d, ["syn.free".postln, 1001]);\
//		3.postln.wait;\
//		server.sendBundle(d, ["new".postln, "ring", 1001, 0]);\
//		3.postln.wait;\
//		server.sendBundle(d, ["syn.free".postln, 1001]);\
\cf0 \
		100.do(\{ \cf2 arg\cf0  i;\
			server.sendBundle(d, [\cf3 "syn.new"\cf0 , \cf3 "trem"\cf0 , 2000 + i.postln, 0]);\
			server.sendBundle(d + 4, [\cf3 "nod.free"\cf0 , 2000 + i]);\
			1.postln.wait;\
		\});\
		12.postln.wait;\
\cf5 //		80.do(\{\
//			server.sendBundle(d, ["bus.set", 0, exprand(0.75,4.0)]);\
//			0.02.wait;\
//		\});\
\cf0 		\
		\cf5 //server.sendBundle(d, ["syn.free".postln, 1000]);\
\cf0 		\cf5 //server.sendBundle(1, ["syn.free".postln, 1001]);\
\cf0 		\
		1.postln.wait;\
		server.sendMsg(\cf3 "stop"\cf0 .postln);\
					\
		4.wait;\
		\
		\cf5 //server.sendMsg("quit".postln);			      \
\cf0 		\cf5 //unixOut("cat synth_log".postln);		\
\cf0 	\});\
	\cf2 SystemClock\cf0 .play(r);\
)\
\
\
(\
	d = 0.04;\
	r = \cf2 Routine\cf0 (\{\
		\cf2 var\cf0  server;\
		server = \cf6 Server\cf7 .local\cf0 ;	\
		\
		server.dump;\
		\cf5 //1.postln.wait;\
\cf0 				\
		server.sendMsg(\cf3 "/start"\cf0 .postln);\
					\
		0.5.postln.wait;\
		\
		100.do(\{ \cf2 arg\cf0  i;\
			\cf2 var\cf0  dur;\
			dur = [0.4,0.8,1.6].choose;\
			if (0.9.coin, \{\
				server.sendBundle(d, [\cf3 "/s_new"\cf0 , \cf3 "env"\cf0 , 1000 + i, 0, \cf4 \\freq\cf0 , rrand(36,60).midicps]);\
				server.sendBundle(dur * 0.8 + d, [\cf3 "/n_set"\cf0 , (1000 + i).postln, \cf4 \\gate\cf0 , 0]);\
			\});\
			dur.wait;\
		\});\
		2.wait;			\
				\
		server.sendMsg(\cf3 "/stop"\cf0 .postln);\
					\
	\});\
	\cf2 SystemClock\cf0 .play(r);\
)\
\
(\
	d = 0.04;\
	r = \cf2 Routine\cf0 (\{\
		\cf2 var\cf0  server;\
		server = \cf2 Server\cf0 .local;	\
		\
		server.dump;\
		\cf5 //1.postln.wait;\
\cf0 				\
		server.sendMsg(\cf3 "start"\cf0 .postln);\
					\
		0.5.postln.wait;\
		\
		2.do(\{ \cf2 arg\cf0  i;\
			server.sendBundle(d, [\cf3 "syn.new"\cf0 , \cf3 "trivial"\cf0 , 1000 + i, 0, \cf4 \\freq\cf0 , rrand(36,60).midicps]);\
			server.sendBundle(d + 0.2, [\cf3 "nod.free"\cf0 , (1000 + i).postln]);\
			\cf5 //server.sendBundle(d + 0.8, ["nod.set", (1000 + i).postln, \\gate, 0]);\
\cf0 			0.4.wait;\
		\});\
		2.wait;			\
				\
		server.sendMsg(\cf3 "stop"\cf0 .postln);\
					\
	\});\
	\cf2 SystemClock\cf0 .play(r);\
)\
\
s = \cf2 Server\cf0 .local;	\
c = \cf3 "!abc"\cf0 .copy.extend(9200, $A);\
c.size;\
s.sendRaw(c);\
\
\
(\
\cf2 Prout\cf0 (\{\
	100.do(\{ \cf2 arg\cf0  i;\
		\cf2 var\cf0  dur;\
		i.postln;\
		dur = [0.1,0.2,0.4,0.8].choose;\
		dur.wait;\
	\});\
\}).play;\
)\
\
\cf2 SystemClock\cf0 .clear;\
\
(\
var server;	\
server = \cf2 Server\cf0 .local;	\
server.sendMsg("def.loadDir", "engine/synthdefs");\
)	}