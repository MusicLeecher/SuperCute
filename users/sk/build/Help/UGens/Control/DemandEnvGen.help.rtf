{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\cf2 // experimental, might change! //\cf0 \
\
.ar(levels, times, shapes, curves, gate, reset, levelScale, levelOffset, timeScale, doneAction)\
.kr(levels, times, shapes, curves, gate, reset, levelScale, levelOffset, timeScale, doneAction)\
	\
	levels:	a demand ugen or any other ugen\
	times:	a demand ugen or any other ugen\
		if one of these ends, the doneAction is evaluated\
		\
	shapes:  a demand ugen or any other ugen: the number given is the shape number according to Env\
	curves:	a demand ugen or any other ugen: if shape is 5, this is the curve factor\
	\
	\
	some curves/shapes don't work if the duration is too short. have to see how to improve this.\
	also some depend on the levels obviously, like exponential cannot cross zero.\
	\
	gate:	if gate is x >= 1, the ugen runs\
			if gate is 0 > x > 1, the ugen is released at the next level (doneAction)\
			if gate is x < 0, the ugen is sampled end held\
	\
	reset:	if reset crosses from nonpositive to positive, the ugen is reset at the next level\
			if it is > 1, it is reset immediately.\
			\
\
these parameters may change.\
\
\
\
\
\
s.reboot;\
\
\
\cf2 // frequency envelope with random times\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dseq\cf0 ([204, 400, 201, 502, 300, 200], \cf3 inf\cf0 ),\
				\cf3 Drand\cf0 ([1.01, 0.2, 0.1, 2], \cf3 inf\cf0 ) * \cf3 MouseY\cf0 .kr(0.01, 3, 1),\
				7 \cf2 // cubic interpolation\cf0 \
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf2 // frequency modulation\cf0 \
(\
	\{\
		\cf3 var\cf0  freq, list;\
		list = \{ exprand(200, 1000.0) \} ! 32;\
		freq = \cf3 DemandEnvGen\cf0 .ar(\
				\{ \cf3 Dseq\cf0 (list.scramble, \cf3 inf\cf0 ) \} ! 2,\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 3000, 1),\
				5, \cf2 // curve interpoaltion\cf0 \
				\cf3 MouseX\cf0 .kr(-0.01, -4) \cf2 // curve must be negative for fast interpol.\cf0 \
			); \
		\cf3 SinOsc\cf0 .ar(freq) * 0.1\
	\
	\}.play;\
)\
\
\
\cf2 //  gate\cf0 \
\cf2 // mouse x on right side of screen toggles gate\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dwhite\cf0 (300, 1000, \cf3 inf\cf0 ).round(100),\
				0.1,\
				5, 0.3, \cf2 // curve: 0.3\cf0 \
				\cf3 MouseX\cf0 .kr > 0.5, \
				1\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.21]) * 0.1\
	\
	\}.play;\
)\
\
\cf2 // sample and hold (0.5 > gate > 0)\cf0 \
\cf2 // mouse x on right side of screen toggles gate\cf0 \
\cf2 // mouse y scales frequency\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dwhite\cf0 (300, 1000, \cf3 inf\cf0 ).round(100),\
				0.1,\
				5, 0.3,\
				\cf3 MouseX\cf0 .kr > 0.5 + 0.1\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.21]) * 0.1\
	\
	\}.play;\
)\
\
\cf2 // gate\cf0 \
\cf2 // mouse x on right side of screen toggles gate \cf0 \
\cf2 // mouse button does soft reset\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (400, 200, 5), 500, 800, 530, 4000, 900], 2),\
				\cf3 Dseq\cf0 ([0.2, 0.1, 0.2, 0.3, 0.1], \cf3 inf\cf0 ),\
				\cf3 Dseq\cf0 ([1, 0, 0, 6, 1, 1, 0, 2], \cf3 inf\cf0 ), \cf2 // shapes\cf0 \
				0, \
				\cf3 MouseX\cf0 .kr > 0.5, \cf2 // gate\cf0 \
				\cf3 MouseButton\cf0 .kr > 0.5, \cf2 // reset\cf0 \
				doneAction:0\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.001]) * 0.1\
	\
	\}.play;\
)\
\
\
\cf2 //  gate\cf0 \
\cf2 // mouse x on right side of screen toggles sample and hold \cf0 \
\cf2 // mouse button does hard reset\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (400, 200, 5), 500, 800, 530, 4000, 900], 2),\
				0.1,\
				3, 0,\
				\cf3 MouseX\cf0 .kr > 0.5 - 0.1, \cf2 // gate: sample and hold\cf0 \
				\cf3 MouseButton\cf0 .kr > 0.5 * 2, \cf2 // hard reset\cf0 \
				doneAction: 0\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.001]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
\
\cf2 // short sequence with doneAction, linear\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([1300, 500, 800, 300, 400], 1),\
				0.2,\
				1,\
				doneAction:2\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf2 // short sequence with doneAction, step\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([1300, 500, 800, 300, 400], 1),\
				0.2, \
				0,\
				doneAction:2\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\cf2 // a linear ramp\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([300, 800], 1),\
				1,\
				1\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\cf2 // random gate:  release. gate low level > 0.\cf0 \
\cf2 // only end points are kept as release levels\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([500, 800], \cf3 inf\cf0 ),\
				0.03,\
				1,0, \cf2 // linear\cf0 \
				\cf3 ToggleFF\cf0 .kr(\cf3 Dust\cf0 .kr(5)) + 0.1 \cf2 // gate\cf0 \
				\
	\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\cf2 // random gate: sample and hold. gate low level = 0.\cf0 \
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\cf3 Dseq\cf0 ([500, 800, 600], \cf3 inf\cf0 ),\
				0.03,\
				1,0, \cf2 // linear\cf0 \
				\cf3 ToggleFF\cf0 .kr(\cf3 Dust\cf0 .kr(5)), \cf2 // gate\cf0 \
				0 \cf2 // reset\cf0 \
	\
			); \
		\cf3 SinOsc\cf0 .ar(freq * [1, 1.01]) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
\cf2 // lfnoise1\cf0 \
(\
	\{\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dwhite\cf0 (-0.1, 0.1, \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(0.5, 20),\
				5,\
				-4\
			); \
		\
	\
	\}.play;\
)\
\
\cf2 // lfbrownnoise\cf0 \
(\
	\{\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dbrown\cf0 (-0.1, 0.1, 0.1, \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 100, 1)\
			); \
		\
	\
	\}.play;\
)\
\
\
\
\
\
\
\cf3 Server\cf0 .internal.boot;\
\
\cf2 // hardsyncing a saw\cf0 \
(\
	\{\
		\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (-0.1, 0.01, 20)], \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 100, 1),\
				1, 0,\
				\cf3 K2A\cf0 .ar(1),\
				\cf3 Impulse\cf0 .ar(\cf3 MouseX\cf0 .kr(1, \cf3 SampleRate\cf0 .ir * \cf3 MouseX\cf0 .kr(0.002, 1, 1), 1), 0, 1.5)\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\cf2 // softsyncing a saw\cf0 \
(\
	\{\
		\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (-0.1, 0.01, 20)], \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 100, 1),\
				1, 0,\
				\cf3 K2A\cf0 .ar(1),\
				\cf3 Impulse\cf0 .ar(\cf3 MouseX\cf0 .kr(1, \cf3 SampleRate\cf0 .ir * \cf3 MouseX\cf0 .kr(0.002, 1, 1), 1)) + [0, 0.3]\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\
\cf2 // hardsyncing a saw, som random elements\cf0 \
(\
	\{\
		\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (-0.1, 0.01, 20), \cf3 Dseries\cf0 (-0.1, 0.01, 20), \cf3 Dwhite\cf0 (-0.1, 0.1, 5)], \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 100, 1),\
				3, 0,\
				1,\
				\cf3 Impulse\cf0 .ar(\cf3 MouseX\cf0 .kr(1, \cf3 SampleRate\cf0 .ir * \cf3 MouseX\cf0 .kr(0.002, 1, 1), 1), 0, 1.5)\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\cf2 // softsyncing a saw, som random elements\cf0 \
(\
	\{\
		\
			\cf3 DemandEnvGen\cf0 .ar(\
				\cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (-0.1, 0.01, 20), \cf3 Dseries\cf0 (-0.1, 0.01, 20), \cf3 Dwhite\cf0 (-0.1, 0.1, 5)], \cf3 inf\cf0 ),\
				\cf3 SampleDur\cf0 .ir * \cf3 MouseY\cf0 .kr(1, 100, 1),\
				1, 0, \cf2 // linear interpolation\cf0 \
				1,\
				\cf3 Impulse\cf0 .ar(\cf3 MouseX\cf0 .kr(1, \cf3 SampleRate\cf0 .ir * \cf3 MouseX\cf0 .kr(0.002, 1, 1), 1))\
				\
			)\
		\
	\
	\}.scope;\
)\
\
\
\cf2 // multichannel expansion\cf0 \
\cf2 // mouse x on right side of screen toggles gate \cf0 \
\cf2 // mouse y controls speed\cf0 \
\
(\
	\{\
		\cf3 var\cf0  freq;\
		freq = \cf3 DemandEnvGen\cf0 .kr(\
				\{ \cf3 Dseq\cf0 ([300, 800, \cf3 Drand\cf0 ([1000, 460, 300], 1), 400], \cf3 inf\cf0 ) + 3.0.rand \} ! 2,\
				\cf3 MouseY\cf0 .kr(0.001, 2, 1), \
				5, -4,\
				\cf3 MouseX\cf0 .kr > 0.5\
			);\
		\cf3 SinOsc\cf0 .ar(freq) * 0.1\
	\
	\}.play;\
)\
\
\
\
\
}