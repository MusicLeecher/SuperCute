{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red191\green0\blue0;\red0\green0\blue0;
\red0\green0\blue191;\red0\green0\blue191;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 TDuty				
\fs26 demand results as trigger from demand rate ugens
\fs36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 superclass: Duty
\f0\b \
\
TDuty.ar(duration, reset,  level, doneAction)
\f2\b0\fs18 \
\
\

\f1\fs24 A value is demanded each ugen in the list and output  as a trigger according to a stream of duration values. \
The unit generators in the list should be 'demand' rate.\
When there is a trigger at the reset input, the demand rate ugens in the list and the duration are reset.\
The reset input may also be a demand ugen, providing a stream of reset times.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 duration
\f1\b0 		time values. Can be a demand ugen or any signal. \
			The next trigger value is acquired after the duration provided by the last time value.\
		\

\f0\b reset
\f1\b0 		trigger or reset time values. Resets the list of ugens and the duration ugen when triggered.\
			The reset input may also be a demand ugen, providing a stream of reset times.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 level		
\f1\b0 	demand ugen providing the output values.\
\
\

\f0\b doneAction
\f1\b0 	a doneAction that is evaluated when the duration stream ends.\
			For the various doneActions, see: [Synth-Controlling-UGens]
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // examples\cf0 \
\
s.boot;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // play a little rhythm\
\cf4 \
\{\'ca\cf5 TDuty\cf4 .ar(\cf5 Dseq\cf4 ([0.1, 0.2, 0.4, 0.3], \cf5 inf\cf4 )) \}.play; \cf2 // demand ugen as durations\cf4 \
\
\
\
\cf3 // amplitude changes\cf0 \
(\
	\{\
		\cf6 var\cf0  trig;\
		trig = \cf6 TDuty\cf0 .ar(\
				\cf6 Dseq\cf0 ([0.1, 0.2, 0.4, 0.3], \cf6 inf\cf0 ), \cf2 // demand ugen as durations\cf0 \
				0, \
				\cf6 Dseq\cf0 ([0.1, 0.4, 0.01, 0.5, 1.0], \cf6 inf\cf0 ) \cf2 // demand ugen as amplitude\cf0 \
			); \
		\cf6 Ringz\cf0 .ar(trig, 1000, 0.1)\
	\
	\}.play;\
)\
\
(\
	\{\
		\cf6 var\cf0  trig;\
		trig = \cf6 TDuty\cf0 .ar(\
				\cf6 MouseX\cf0 .kr(0.001, 2, 1), \cf2 // control rate ugen as durations\cf0 \
				0, \
				\cf6 Dseq\cf0 ([0.1, 0.4, 0.01, 0.5, 1.0], \cf6 inf\cf0 )\
			); \
		\cf6 Ringz\cf0 .ar(trig, 1000, 0.1)\
	\
	\}.play;\
)\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // demand ugen as audio oscillator\cf0 \
\
(\
	\{\
		\cf6 var\cf0  a, trig, n=5, m=64;\
		a = \{\
			\cf6 var\cf0  x;\
			x = \{ 0.2.rand2 \} ! m;\
			x = x ++ (\{  \cf6 Drand\cf0 (\{ 0.2.rand2 \} ! n) \} ! m.rand);\
			\cf6 Dseq\cf0 (x.scramble, \cf6 inf\cf0 )\
		\} ! n;\
		trig = \cf6 TDuty\cf0 .ar(\
				\cf6 MouseX\cf0 .kr(1, 2048, 1) * \cf6 SampleDur\cf0 .ir * [1, 1.02],\
				0,\
				\cf6 Dswitch1\cf0 (a, \cf6 MouseY\cf0 .kr(0, n-1))\
			);\
		\cf6 Ringz\cf0 .ar(trig, 1000, 0.01)\
	\
	\}.play;\
)\
\
\
\cf2 // single impulses\cf0 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 SynthDef\cf0 (\cf7 "delta_demand"\cf0 , \{ arg amp=0.5, out;\
	\cf6 OffsetOut\cf0 .ar(out,\
		\cf6 TDuty\cf0 .ar(\cf6 Dseq\cf0 ([0]), 0, amp, 2)\
	)\
\}).send(s);\
)\
\
fork \{ 10.do \{ s.sendBundle(0.2, [\cf7 "/s_new"\cf0 , \cf7 "delta_demand"\cf0 , -1]); 1.0.rand.wait \} \};\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // chain of impulses\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 SynthDef\cf0 (\cf7 "delta_demand2"\cf0 , \{\
	\cf6 OffsetOut\cf0 .ar(0,\
		\cf6 TDuty\cf0 .ar(\cf6 Dgeom\cf0 (0.05, 0.9, 20), 0, 0.5, 2)\
	)\
\}).send(s);\
)\
\
fork \{ 10.do \{ s.sendBundle(0.2, [\cf7 "/s_new"\cf0 , \cf7 "delta_demand2"\cf0 , -1]); 1.0.rand.wait \} \};\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // multichannel expansion\cf0 \
\
(\
	\{\
		\cf6 var\cf0  t;\
		t = \cf6 TDuty\cf0 .ar(\
				\cf6 Drand\cf0 ([\cf6 Dgeom\cf0 (0.1, 0.8, 20), 1, 2], \cf6 inf\cf0 ) ! 2,\
				0, \
				[\cf6 Drand\cf0 (\{\'ca1.0.rand \} ! 8, \cf6 inf\cf0 ), \cf6 Dseq\cf0 (\{\'ca1.0.rand \} ! 8, \cf6 inf\cf0 )] * 2\
			); \
		x = \cf6 Ringz\cf0 .ar(t, [400, 700], 0.1) * 0.1;\
	\
	\}.play;\
)\
\
\
}