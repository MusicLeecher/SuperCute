{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green0\blue0;\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 Stepper		pulse counter\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
Stepper.kr(trig, reset, min, max, step, resetval)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Each trigger increments a counter which is output as a signal. The counter wraps between min and max.
\f0\b \
trig
\f1\b0  - trigger. Trigger can be any signal. A trigger happens when the signal changes from\
non-positive to positive.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 reset
\f1\b0  - resets the counter to 
\f0\b resetval
\f1\b0  when triggered.\

\f0\b min
\f1\b0  - minimum value of the counter.\

\f0\b max
\f1\b0  - maximum value of the counter.\

\f0\b step
\f1\b0  - step value each trigger. May be negative.\

\f0\b resetval
\f1\b0  - value to which the counter is reset when it receives a reset trigger. If nil, then this is patched to 
\f0\b min
\f1\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 SynthDef\cf0 (\cf3 "help-Stepper"\cf0 ,\{ \cf2 arg\cf0  out=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 SinOsc\cf0 .ar(\
			\cf2 Stepper\cf0 .kr(\cf2 Impulse\cf0 .kr(10), 0, \cf2 4, 16, 1\cf0 ) * 100, \
			0, 0.05\
		)\
	)\
\}).play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 SynthDef\cf0 (\cf3 "help-Stepper"\cf0 ,\{ \cf2 arg\cf0  out=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 SinOsc\cf0 .ar(\
			\cf2 Stepper\cf0 .kr(\cf2 Impulse\cf0 .kr(10), 0, \cf2 4, 16, -3\cf0 ) * 100, \
			0, 0.05\
		)\
	)\
\}).play;\
\
\cf2 SynthDef\cf0 (\cf3 "help-Stepper"\cf0 ,\{ \cf2 arg\cf0  out=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 SinOsc\cf0 .ar(\
			\cf2 Stepper\cf0 .kr(\cf2 Impulse\cf0 .kr(10), 0, \cf2 4, 16, 4\cf0 ) * 100, \
			0, 0.05\
		)\
	)\
\}).play;\
\
\
\cf4 ///////////////////////////////////////////////////////////////////////////////////\cf5 \
\cf4 //\cf5 \
\cf4 // Using Stepper and BufRd for sequencing\cf5 \
\cf4 //\cf5 \
\
\cf0 s.boot;\
\
s.sendMsg(\cf6 \\b_alloc\cf0 , 10, 128);\
\
m = #[0,3,5,7,10];\
\
a = (\{rrand(0,15)\}.dup(16).degreeToKey(m) + 36).midicps;\
s.performList(\cf6 \\sendMsg\cf0 , \cf6 \\b_setn\cf0 , 10, 0, a.size, a);\
\
(\
\cf2 SynthDef\cf0 (\cf6 \\stepper\cf0 , \{\
	\cf2 var\cf0  rate, clock, index, freq, ffreq, env, out, rev, lfo;\
	\
	rate = \cf2 MouseX\cf0 .kr(1,5,1);\
	clock = \cf2 Impulse\cf0 .kr(rate);\
	env = \cf2 Decay2\cf0 .kr(clock, 0.002, 2.5);\
	index = \cf2 Stepper\cf0 .kr(clock, 0, 0, 15, 1, 0);\
	freq = \cf2 BufRd\cf0 .kr(1, 10, index, 1, 1);\
	freq = \cf2 Lag2\cf0 .kr(freq) + [0,0.3];\
	ffreq = \cf2 MouseY\cf0 .kr(80,1600,1) * (env * 4 + 2);\
	out = \cf2 Mix\cf0 .ar(\cf2 LFPulse\cf0 .ar(freq * [1, 3/2, 2], 0, 0.3));\
	out = \cf2 RLPF\cf0 .ar(out, ffreq, 0.3, env);\
	out = \cf2 RLPF\cf0 .ar(out, ffreq, 0.3, env);\
	out = out * 0.02;\
	\
	\cf7 // echo\cf0 \
	out = \cf2 CombL\cf0 .ar(out, 1, 0.66/rate, 2, 0.8, out);	\
	\
	\cf7 // reverb\cf0 \
	rev = out;\
	5.do \{ rev = \cf2 AllpassN\cf0 .ar(rev, 0.05, \{0.05.rand\}.dup, rrand(1.5,2.0)) \};\
	out = out + (0.3 * rev);\
	\
	out = \cf2 LeakDC\cf0 .ar(out);\
	\
	\cf7 // flanger\
	\cf0 lfo = \cf2 SinOsc\cf0 .kr(0.2, [0,0.5pi], 0.0024, 0.0025);\
	1.do \{ out = \cf2 DelayL\cf0 .ar(out, 0.1, \cf2 lfo\cf0 , 1, out) \};\
	\
	\cf7 // slight bass emphasis\cf0 \
	out = \cf2 OnePole\cf0 .ar(out, 0.9);\
\
	\cf2 Out\cf0 .ar(0, out);\
	\
\}).send(s);\
)\
\
s.sendMsg(\cf6 \\s_new\cf0 , \cf6 \\stepper\cf0 , 1000, 0, 0);\
\
a = (\{rrand(0,15)\}.dup(16).degreeToKey(m) + 38).midicps;\
s.performList(\cf6 \\sendMsg\cf0 , \cf6 \\b_setn\cf0 , 10, 0, a.size, a);\
\
a = a * 2.midiratio; \cf7 // transpose up 2 semitones\cf0 \
s.performList(\cf6 \\sendMsg\cf0 , \cf6 \\b_setn\cf0 , 10, 0, a.size, a);\
\
\
(\
a = [ 97.999, 195.998, 523.251, 466.164, 195.998, 233.082, 87.307, 391.995, 87.307, 261.626, 195.998, 77.782, 233.082, 195.998, 97.999, 155.563 ];\
s.performList(\cf6 \\sendMsg\cf0 , \cf6 \\b_setn\cf0 , 10, 0, a.size, a);\
)\
\
s.sendMsg(\cf6 \\n_free\cf0 , 1000);\
\
}