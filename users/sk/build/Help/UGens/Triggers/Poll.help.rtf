{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Poll	   		
\fs24 print the current output value of a UGen
\fs36 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Poll.ar(trig, in, label, trigid)\
Poll.kr(trig, in, label, trigid)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 Usage
\fs24 \
\
	trig		
\f1\b0 a non-positive to positive transition telling Poll to return a value
\f0\b \
	in		
\f1\b0 the signal you want to poll
\f0\b \
	label		
\f1\b0 a string or symbol to be printed with the polled value
\f0\b \
	trigid	
\f1\b0 if greater then 0, a 
\f0\b '/tr' message
\f1\b0  is sent back to the client (similar to 
\f0\b SendTrig
\f1\b0 )
\f0\b \
\
\
Poll returns its in signal (and is therefore transparent). \
\
WARNING: Printing values from the Server in intensive for the CPU. Poll should be used for debugging purposes.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // examples:\cf0 \
\
s.boot;\
\
\{ \cf3 Poll\cf0 .kr(\cf3 Impulse\cf0 .kr(10), \cf3 Line\cf0 .kr(0, 1, 1), \cf4 \\test\cf0 ) \}.play(s);\
\
\cf2 // multichannel expansion:\cf0 \
\
\{ \cf3 Poll\cf0 .kr(\cf3 Impulse\cf0 .kr([10, 5]), \cf3 Line\cf0 .kr(0, [1, 5], [1, 2]), [\cf4 \\test\cf0 , \cf4 \\test2\cf0 ]) \}.play(s);\
\
\
\
\cf2 // using the poll message:\cf0 \
\
\{ \cf3 SinOsc\cf0 .ar(375, 0, 1).poll(\cf3 Impulse\cf0 .ar(20), \cf4 \\test2\cf0 ) \}.play(s);\
\
\cf2 // if no arguments are given, the poll is done every 0.1 sec.\cf0 \
\{  \cf3 Line\cf0 .kr(0, 1, 1).poll \}.play(s);\
\
\
\cf2 // send a '/tr' message back to the client. This can be useful if the server runs on another\
// computer than the client, i.e. the post messages by the server cannot be read locally.\cf0 \
\
o = \cf3 OSCresponderNode\cf0 (s.addr, \cf4 '/tr'\cf0 , \{\cf3 arg\cf0  time, resp, msg;\
	msg.postln;\
	\}).add\
\
\{\cf3 Poll\cf0 .ar(\cf3 Impulse\cf0 .ar(5), \cf3 Line\cf0 .ar(0, 1, 1), \cf4 \\test2\cf0 , 1234)\}.play(s);\
\{\cf3 SinOsc\cf0 .ar(220, 0, 1).poll(\cf3 Impulse\cf0 .ar(15), \cf5 "test"\cf0 , 1234)\}.play(s);\
	\
o.remove;\
s.quit;\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf6 // This example will kill the server (by outputting NaN).\cf7 \
\cf6 // Poll.ar will help us spot why it's happening.\cf7 \
\cf6 // Warning: You may need to reboot your server after running this.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 (\cf7 \
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf8 var\cf7  cutoff, son;\
cutoff = \cf8 LFPar\cf7 .kr(0.2, 0, 500, 500);\
son = \cf8 LPF\cf7 .ar(\cf8 WhiteNoise\cf7 .ar, cutoff);\
\
\cf6 // Using Poll to debug by spitting out a value if the output hits NaN\cf7 \
\cf8 Poll\cf7 .ar(if((son<=0)||(son>=0), 0, 1), cutoff, \cf9 "Cutoff value which causes NaN:"\cf7 );\
\
son;\
\
\}.play(s);\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // This example polls when someone hits the trigger\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf7 (\
x = \{\cf8 |t_poll=0|\cf7 \
\cf8 var\cf7  minfreq, maxfreq, son;\
minfreq = \cf8 LFNoise2\cf7 .ar(0.25, 100, 110);\
maxfreq = \cf8 LFNoise2\cf7 .ar(0.25, 200, 220);\
\
son = \cf8 Gendy1\cf7 .ar(minfreq: minfreq, maxfreq: maxfreq, mul: 0.1);\
\
\cf8 Poll\cf7 .kr(t_poll, [minfreq, \cf0 maxfreq]\cf7 , [\cf9 "minfreq", "\cf5 maxfreq"\cf7 ]);\
\
son;\
\
\}.play(s);\
)\
\
x.set(\cf10 \\t_poll\cf7 , 1); \cf6 // Hit this whenever you want to know what the parameters are\cf7 \
\
\
}