{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Osc			interpolating wavetable oscillator\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Osc.ar(table, freq, phase, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Linear interpolating wavetable lookup oscillator with frequency and phase modulation inputs. \
\
This oscillator requires a buffer to be filled with a wavetable format signal.  This preprocesses the Signal into a form which can be used efficiently by the Oscillator.  The buffer size must be a power of 2.\
\
This can be acheived by creating a Buffer object and sending it one of the "b_gen" messages ( sine1, sine2, sine3 ) with the wavetable flag set to true.  \
\
This can also be acheived by creating a Signal object and sending it the 'asWavetable' message, saving it to disk, and having the server load it from there.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 table
\f1\b0  - buffer index\

\f0\b freq
\f1\b0  - frequency in Hertz\

\f0\b phase
\f1\b0  - phase offset or modulator in radians\
\
note about wavetables:\
OscN requires the b_gen sine1 wavetable flag to be OFF.\
Osc requires the b_gen sine1 wavetable flag to be ON.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
(\
s = \cf2 Server\cf0 .local;\
b = \cf2 Buffer\cf0 .alloc(s, 512, 1);\
b.sine1(1.0/[1,2,3,4,5,6], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "help-Osc"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Osc\cf0 .ar(bufnum, 200, 0, 0.5)\
	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufnum\cf0 , b.bufnum]);\
)\
\
(\
s = \cf2 Server\cf0 .local;\
b = \cf2 Buffer\cf0 .alloc(s, 512, 1);\
b.sine1(1.0/[1,2,3,4,5,6], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\
\cf2 SynthDef\cf0 (\cf3 "help-Osc"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Osc\cf0 .ar(bufnum, \cf2 XLine\cf0 .kr(2000,200), 0, 0.5)\cf5 // modulate freq\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufnum\cf0 , b.bufnum]);\
)\
\
\
(\
s = \cf2 Server\cf0 .local;\
b = \cf2 Buffer\cf0 .alloc(s, 512, 1);\
b.sine1([1.0], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "help-Osc"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Osc\cf0 .ar(bufnum, \
			\cf2 Osc\cf0 .ar(bufnum,\
				\cf2 XLine\cf0 .kr(1,1000,9),\
				0,\
				200,\
				800), \
			0, \
			0.25)\
	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufnum\cf0 , b.bufnum]);\
)\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 // modulate phase\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 s = \cf2 Server\cf0 .local;\
b = \cf2 Buffer\cf0 .alloc(s, 512, 1);\
b.sine1([1.0], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "help-Osc"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Osc\cf0 .ar(bufnum, \
				800, \
				\cf2 Osc\cf0 .ar(bufnum,\
						\cf2 XLine\cf0 .kr(20,8000,10),\
						0,\
						2pi), \
				0.25)\
	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufnum\cf0 , b.bufnum]);\
)\
\
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 // change the buffer while its playing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 s = \cf2 Server\cf0 .local;\
b = \cf2 Buffer\cf0 .alloc(s, 4096, 1);\
b.sine1(1.0/[1,2,3,4,5,6], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "help-Osc"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Osc\cf0 .ar(bufnum, [80,80.2], 0, 0.2)\
	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufnum\cf0 , b.bufnum]);\
)\
\
(\
fork \{\
	\cf2 var\cf0  n = 32;\
	50.do \{\
		b.sine1(\cf2 Array\cf0 .rand(n,0,1).cubed, \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
		0.25.wait;\
	\};\
\};\
)
\fs24 \
}