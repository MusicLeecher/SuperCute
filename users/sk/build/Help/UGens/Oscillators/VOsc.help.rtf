{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 VOsc			variable wavetable oscillator\
\

\fs24 VOsc.ar(table, freq, phase, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
A wavetable lookup oscillator which can be swept smoothly across wavetables. All the wavetables must be allocated to the same size. Fractional values of table will interpolate between two adjacent tables.\
\
This oscillator requires at least two buffers to be filled with a wavetable format signal.  This preprocesses the Signal into a form which can be used efficiently by the Oscillator.  The buffer size must be a power of 2.\
\
This can be acheived by creating a Buffer object and sending it one of the "b_gen" messages ( sine1, sine2, sine3 ) with the wavetable flag set to true.  \
\
This can also be acheived by creating a Signal object and sending it the 'asWavetable' message, saving it to disk, and having the server load it from there.\
\
If you use Buffer objects to manage buffer numbers, you can use the *allocConsecutive method to allocate a continuous block of buffers. See the 
\f0\b [\ul Buffer\ulnone ]
\f1\b0  helpfile for details.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 table
\f1\b0  - buffer index. Can be swept continuously among adjacent wavetable buffers of the same size.\

\f0\b freq
\f1\b0  - frequency in Hertz\

\f0\b phase
\f1\b0  - phase offset or modulator in radians\
\
note about wavetables:\
VOsc requires the b_gen sine1 wavetable flag to be ON.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
(\
s = \cf2 Server\cf0 .local;\
\cf3 // allocate and fill tables 0 to 7\cf0 \
8.do(\{ \cf2 arg\cf0  i;\
	\cf2 var\cf0  n, a;\
	\cf3 // allocate table\cf0 \
	s.sendMsg(\cf4 \\b_alloc\cf0 , i, 1024); \
	\cf3 // generate array of harmonic amplitudes\cf0 \
	n = (i+1)**2;\
	a = \cf2 Array\cf0 .fill(n, \{ \cf2 arg\cf0  j; ((n-j)/n).squared.round(0.001) \});\
	\cf3 // fill table\cf0 \
	s.performList(\cf4 \\sendMsg\cf0 , \cf4 \\b_gen\cf0 , i, \cf4 \\sine1\cf0 , 7, a);\
\});\
)\
\
(\
\cf2 SynthDef\cf0 (\cf5 "help-VOsc"\cf0 ,\{ \cf2 arg\cf0  out=0, bufoffset=0;\
	\cf2 var\cf0  x;\
	// mouse x controls the wavetable position\
	x = \cf2 MouseX\cf0 .kr(0,7);\
	\cf2 Out\cf0 .ar(out,\
		\cf2 VOsc\cf0 .ar(bufoffset+x, [120,121], 0, 0.3)\
	)\
\}).play(s,[\cf4 \\out\cf0 , 0, \cf4 \\bufoffset\cf0 , 0]);\
)\
\
(\
8.do(\{ \cf2 arg\cf0  i;\
	var a;\
	s.sendMsg(\cf4 \\b_alloc\cf0 , i, 1024); \cf3 // allocate table\
\cf0 	\cf3 // generate array of harmonic amplitudes\cf0 \
	a = \cf2 Array\cf0 .fill(i, 0) ++ [0.5, 1, 0.5];\
	\cf3 // fill table\cf0 \
	s.performList(\cf4 \\sendMsg\cf0 , \cf4 \\b_gen\cf0 , i, \cf4 \\sine1\cf0 , 7, a);\
\});\
)\
\
(\
8.do(\{ \cf2 arg\cf0  i;\
	\cf2 var\cf0  a;\
	s.sendMsg(\cf4 \\b_alloc\cf0 , i, 1024); \cf3 // allocate table\cf0 \
	\cf3 // generate array of harmonic amplitudes\cf0 \
	a = \cf2 Array\cf0 .fill(32,0);\
	12.do(\{ \cf2 arg\cf0  i; a.put(32.rand, 1) \});\
	\cf3 // fill table\cf0 \
	s.performList(\cf4 \\sendMsg\cf0 , \cf4 \\b_gen\cf0 , i, \cf4 \\sine1\cf0 , 7, a);\
\});\
)\
\
(\
8.do(\{ \cf2 arg\cf0  i;\
	\cf2 var\cf0  a;\
	s.sendMsg(\cf4 \\b_alloc\cf0 , i, 1024); \cf3 // allocate table\cf0 \
	\cf3 // generate array of harmonic amplitudes\cf0 \
	n = (i+1)**2;\
	a = \cf2 Array\cf0 .fill(n, \{ \cf2 arg\cf0  j; 1.0.rand2 \});\
	\cf3 // fill table\cf0 \
	s.performList(\cf4 \\sendMsg\cf0 , \cf4 \\b_gen\cf0 , i, \cf4 \\sine1\cf0 , 7, a);\
\});\
)\
\
\
\
}