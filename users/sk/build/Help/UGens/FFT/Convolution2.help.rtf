{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red35\green110\blue37;\red26\green26\blue255;\red0\green0\blue0;
\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Convolution2			real-time convolver\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Convolution2.ar(in, bufnum, trigger, framesize, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Strict convolution with fixed kernel which can be updated using a trigger signal.\
\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural

\f1\fs20 \cf2 \CocoaLigature0 //see ch18 {\field{\*\fldinst{HYPERLINK "http://www.dspguide.com/ch18.htm"}}{\fldrslt \cf3 \ul \ulc3 http://www.dspguide.com/ch18.htm}} Steven W Smith\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 in
\f2\b0  - processing target\

\f0\b bufnum
\f2\b0  - buffer index for the fixed kernel, may be modulated in combination with the trigger\

\f0\b trigger
\f2\b0  - update the kernel on a change from <=0 to >0\

\f0\b framesize 
\f2\b0 - size of FFT frame, must be a power of two. Convolution uses twice this number internally, maximum value you can give this argument is 2^16=65536. Note that it gets progressively more expensive to run for higher powers! 512, 1024, 2048, 4096 standard.   \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\cf4 \
\
(\cf5 //allocate three buffers\cf4 \
b = \cf6 Buffer\cf4 .alloc(s,2048);\
c = \cf6 Buffer\cf4 .alloc(s,2048);\
d = \cf6 Buffer\cf4 .alloc(s,2048);\
\
b.zero;\
c.zero;\
d.zero;\
)\
\
(\
50.do(\{ \cf6 |it|\cf4  c.set(20*it+10, 1.0.rand); \});\
3.do(\{ \cf6 |it|\cf4  b.set(400*it+100, 1); \});\
20.do(\{ \cf6 |it|\cf4  d.set(40*it+20, 1); \});\
)\
\
\
(\
\cf6 SynthDef\cf4 ( \cf7 "conv-test"\cf4 , \{ \cf6 arg\cf4  kernel, trig=0;\
	\cf6 var\cf4  input;\
		\
	input=\cf6 Impulse\cf4 .ar(1);\
\
	\cf5 //must have power of two framesize\cf4 \
	\cf6 Out\cf4 .ar(0,\cf6 Convolution2\cf4 .ar(input,kernel,trig,2048, 0.5));\
\}).send(s)\
\
)\
\
\
x = \cf6 Synth\cf4 .new(\cf7 "conv-test"\cf4 ,[\cf8 \\kernel\cf4 ,b.bufnum]);\
\
\cf5 // changing the buffer number:\cf4 \
x.set(\cf8 \\kernel\cf4 ,c.bufnum);\
x.set(\cf8 \\trig\cf4 ,0);\
x.set(\cf8 \\trig\cf4 ,1); \cf5 // after this trigger, the change will take effect.\cf4 \
x.set(\cf8 \\kernel\cf4 ,d.bufnum);\
x.set(\cf8 \\trig\cf4 ,0);\
x.set(\cf8 \\trig\cf4 ,1); \cf5 // after this trigger, the change will take effect.\cf4 \
\
d.zero;\
40.do(\{ \cf6 |it|\cf4  d.set(20*it+10, 1); \});\cf5 // changing the buffers' contents\cf4 \
x.set(\cf8 \\trig\cf4 ,0);\
x.set(\cf8 \\trig\cf4 ,1); \cf5 // after this trigger, the change will take effect.\cf4 \
\
x.set(\cf8 \\kernel\cf4 ,b.bufnum);\
x.set(\cf8 \\trig\cf4 ,0);\
x.set(\cf8 \\trig\cf4 ,1); \cf5 // after this trigger, the change will take effect.\cf4 \
\
\
\
\cf5 ////next example\cf4 \
\
b = \cf6 Buffer\cf4 .read(s,\cf7 "sounds/a11wlk01.wav"\cf4 );\
\
(\
	\{ \cf6 var\cf4  input, kernel;\
		\
	input=\cf6 AudioIn\cf4 .ar(1);\
\
	\cf5 //must have power of two framesize\cf4 \
	\cf6 Out\cf4 .ar(0,\cf6 Convolution2\cf4 .ar(input,b.bufnum,0,512, 0.5));\
	 \}.play;\
\
)\
\
\
\cf5 //another example\cf4 \
\
(\
\cf5 //must have power of two framesize- FFT size will be sorted by Convolution2 to be double this\cf4 \
\cf5 //maximum is currently a=8192 for FFT of size 16384\cf4 \
a=2048;\
s = \cf6 Server\cf4 .local; \
\cf5 //kernel buffer\cf4 \
g = \cf6 Buffer\cf4 .alloc(s,a,1);\
)\
\
(\
g.set(0,1.0);\
100.do(\{\cf6 arg\cf4  i; g.set(a.rand, (i+1).reciprocal)\});\
)\
\
(\
\cf5 //random impulse response\cf4 \
\
	\{\
	\cf6 var\cf4  input,inputAmp,threshhold,gate;\
\
input = \cf6 AudioIn\cf4 .ar(1); \
inputAmp = \cf6 Amplitude\cf4 .kr(input);\
threshhold = 0.02;	\cf5 // noise gating threshold\cf4 \
gate = \cf6 Lag\cf4 .kr(inputAmp > threshhold, 0.01);	\
	\
	\cf6 Out\cf4 .ar(0,\cf6 Convolution2\cf4 .ar(input*gate,g.bufnum,0, a, 0.5));\
	 \}.play;\
\
)\
\
\
\
\
\
\
//one last example\
(\
b = \cf6 Buffer\cf4 .alloc(s, 512, 1);\
b.sine1(1.0/[1,2,3,4,5,6], \cf6 true\cf4 , \cf6 true\cf4 , \cf6 true\cf4 );\
)\
\
(\
	\{ \cf6 var\cf4  input, kernel;\
		\
	input=\cf6 AudioIn\cf4 .ar(1);\
\
	\cf5 //must have power of two framesize\cf4 \
	\cf6 Out\cf4 .ar(0,\cf6 Convolution2\cf4 .ar(input,b.bufnum,0, 512, 0.5));\
	 \}.play;\
\
)\
\
}