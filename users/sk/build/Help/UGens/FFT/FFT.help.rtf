{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 FFT			 Fast Fourier Transform
\f1\b0\fs18 \
\

\f2\fs24 The fast fourier transform analyzes the frequency content of a signal. See also 
\f0\b [\ul FFT Overview\ulnone ]
\f2\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 	FFT(buffer, input)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 FFT uses a local buffer for holding the buffered audio. The window size corresponds to the buffer size. The overlap is 2.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
s = \cf3 Server\cf0 .local.boot; \
\
b = \cf3 Buffer.alloc\cf0 (s,2048,1);\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-noopFFT"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 WhiteNoise\cf0 .ar(0.01);\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	chain.inspect; \cf2 // its an FFT\
\cf0 	\cf3 Out\cf0 .ar(out, \
		\cf3 IFFT\cf0 (chain) \cf2 // inverse FFT\
\cf0 	);\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-sineFFT"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(\cf3 SinOsc\cf0 .kr(0.08,0,6,6.2).squared, 0, 100,800));\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	\cf3 Out\cf0 .ar(out, \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-magAbove"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(\cf3 SinOsc\cf0 .kr(0.08,0,6,6.2).squared, 0, 100,800));\
	\cf2 //in = WhiteNoise.ar(0.2);\
\cf0 	chain = \cf3 FFT\cf0 (bufnum, in);\
	chain = \cf3 PV_MagAbove\cf0 (chain, 310); \
	\cf3 Out\cf0 .ar(out, 0.5 * \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-brick"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 WhiteNoise\cf0 .ar(0.2);\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	chain = \cf3 PV_BrickWall\cf0 (chain, \cf3 SinOsc\cf0 .kr(0.1)); \
	\cf3 Out\cf0 .ar(out, \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-randcomb"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 WhiteNoise\cf0 .ar(0.8);\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	chain = \cf3 PV_RandComb\cf0 (chain, 0.95, \cf3 Impulse\cf0 .kr(0.4)); \
	\cf3 Out\cf0 .ar(out, \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-rectcomb"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 WhiteNoise\cf0 .ar(0.2);\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	chain = \cf3 PV_RectComb\cf0 (chain, 8, \cf3 LFTri\cf0 .kr(0.097,0,0.4,0.5), \
		\cf3 LFTri\cf0 .kr(0.24,0,-0.5,0.5)); \
	\cf3 Out\cf0 .ar(out, \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
\
(\
\cf3 SynthDef\cf0 (\cf4 "help-magFreeze"\cf0 , \{ \cf3 arg\cf0  out=0,bufnum=0;\
	\cf3 var\cf0  in, chain;\
	in = \cf3 SinOsc\cf0 .ar(\cf3 LFNoise1\cf0 .kr(\cf3 5.2,250,400\cf0 ));\
	chain = \cf3 FFT\cf0 (bufnum, in);\
	// moves in and out of freeze\
	chain = \cf3 PV_MagFreeze\cf0 (chain, \cf3 SinOsc\cf0 .kr(0.2) ); \
	\cf3 Out\cf0 .ar(out, 0.5 * \cf3 IFFT\cf0 (chain));\
\}).play(s,[\\out,0,\\bufnum,b.bufnum]);\
)\
}