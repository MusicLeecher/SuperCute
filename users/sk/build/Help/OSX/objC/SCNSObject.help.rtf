{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green0\blue0;\red96\green96\blue96;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 SCNSObject
\f1\b0\fs24 \
\
note: this is experimental (03/2006) things might change and be careful wrong or unsupported Cocoa-calls can crash this Application!\
\
SCNSObject creates a bridge between SuperCollider and Objective-C / Cocoa.\
It holds an NSObject and sends messages to it.\
The class and messages are passed as Strings. Arguments must be in an Array.\
On creation only the init message is passed, alloc is called internally. So all constructor messages other then alloc are not supported yet.\
\
Example:\
The Cocoa synthax:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	\cf2 NSNumber\cf0  *n = [[\cf2 NSNumber\cf0  alloc] initWithFloat: 1.1];\
	[n floatValue];\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 turns into:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	n = \cf2 SCNSObject\cf0 (\cf3 "NSNumber"\cf0 , \cf3 "initWithFloat:"\cf0 , [1.1]);\
	n.invoke(\cf3 "floatValue"\cf0 );\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Multiple messages are put together in one STring and their arguments in one Array.\
Example:\
Cocoa:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	\cf2 NSWindow\cf0  *c = [[\cf2 NSWindow\cf0  alloc] initWithContentRect: rect styleMask: 10 backing: 2 defer:\cf2 YES\cf0 ];\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 SC:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 	c = \cf2 SCNSObject\cf0 (\cf3 "NSWindow"\cf0 , \cf3 "initWithContentRect:styleMask:backing:defer:"\cf0 ,[\cf2 Rect\cf0 (0,0,400,100), 10, 2, 1]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Defer:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Some methods need to be defered. If you want to defer ust call invoke with defer:true. Watch out there is no smart protection for methods that need defer until now! In general you should defer graphic operations.\
So calling this might crash sc-lang: c.invoke("makeKeyAndOrderFront:", [nil]);\
but this line is fine:
\f2\fs18 \
	c.invoke(\cf3 "makeKeyAndOrderFront:"\cf0 , [\cf2 nil\cf0 ], \cf2 true\cf0 );	\
\

\f1\fs24 Types:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 SCNSObjects are converted to NSObjects.\
\
Some types are converted directly:\cf2 \
\cf0 Rect -> NSRect\
Point -> NSPoint\
\
Many obj-c types are not supported yet (NSRange, nib-files, ...).\
\
A String in SC is different than the cString used in Cocoa. So you might get some strange artefacts.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
z =  \cf2 SCNSObject\cf0 (\cf3 "NSString"\cf0 ,\cf3 "initWithCString:"\cf0 , [\cf3 "x 3456512"\cf0 ]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Actions:\
\
.initAction is a convenience method to add an action to a gui element.\
Depending on the type there are different actions to be set: 	"doFloatAction:"\
	"doIntAction:"\
	"doStateAction:"\
	"doAction:"\
	\
Examples:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //create a window and add a Slider that posts its value.	\cf0 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  winname = \cf3 "cocoa test"\cf0 , win, nsname, slider;\
nsname = \cf2 SCNSObject\cf0 (\cf3 "NSString"\cf0 ,\cf3 "initWithCString:length:"\cf0 , [winname, winname.size], \cf2 false\cf0 );\
\
win = \cf2 SCNSObject\cf0 (\cf3 "NSWindow"\cf0 , \cf3 "initWithContentRect:styleMask:backing:defer:"\cf0 ,\
	[\cf2 Rect\cf0 (100,140,400,30), 10, 2, 1]);\
\cf5 win.setDelegate.action_(\{\
	\cf6 "closing window, releasing objects"\cf5 .postln;\
	[winname,nsname,slider,e].do\{\cf7 |it|\cf5  it.release\};\
\});\cf0 \
slider = \cf2 SCNSObject\cf0 (\cf3 "NSSlider"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,390,20)]); \
e = \cf2 SCNSObject\cf0 (\cf3 "SCGraphView"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,400,30)]); \
win.invoke(\cf3 "setContentView:"\cf0 , [e], \cf2 true\cf0 );\
e.invoke(\cf3 "addSubview:"\cf0 , [slider], \cf2 true\cf0 );\
slider.invoke(\cf3 "setFloatValue:"\cf0 , [0.5]);\
win.invoke(\cf3 "makeKeyAndOrderFront:"\cf0 , [\cf2 nil\cf0 ], \cf2 true\cf0 );\
win.invoke(\cf3 "setTitle:"\cf0 , [nsname]);\
\
\{a = slider.initAction;\
a.action_(\{\cf2 |v,val|\cf0  val.postln\});\}.defer(0.1);\
~win = win;\
)\
~win.className\
~win.invoke("close", \cf2 defer:true\cf0 );\
\
\
\
(\
z =  \cf2 SCNSObject\cf0 (\cf3 "NSString"\cf0 ,\cf3 "initWithCString:"\cf0 , [\cf3 "x 3456512"\cf0 ]);\
\
c = \cf2 SCNSObject\cf0 (\cf3 "NSWindow"\cf0 , \cf3 "initWithContentRect:styleMask:backing:defer:"\cf0 ,[\cf2 Rect\cf0 (0,0,400,100), 10, 2, 1]);\
c.setDelegate.action_(\{\
	"closing window, releasing objects".postln;\
	[z,c,d,e].do\{|it| it.release\};\
\});\
d = \cf2 SCNSObject\cf0 (\cf3 "NSTextField"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,100,20)]); \
e = \cf2 SCNSObject\cf0 (\cf3 "NSView"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,400,100)]); \
c.invoke(\cf3 "setContentView:"\cf0 , [e], \cf2 true\cf0 );\
e.invoke(\cf3 "addSubview:"\cf0 , [d], \cf2 true\cf0 );\
c.invoke(\cf3 "makeKeyAndOrderFront:"\cf0 , [\cf2 nil\cf0 ], \cf2 true\cf0 );\
\
)\
(\
z =  \cf2 SCNSObject\cf0 (\cf3 "NSString"\cf0 ,\cf3 "initWithCString:"\cf0 , [\cf3 "x 3456512"\cf0 ]);\
\
c = \cf2 SCNSObject\cf0 (\cf3 "NSWindow"\cf0 , \cf3 "initWithContentRect:styleMask:backing:defer:"\cf0 ,[\cf2 Rect\cf0 (100,100,100,20), 10, 2, 1]);\
c.setDelegate.action_(\{\
	"closing window, releasing objects".postln;\
	[z,c,d,e].do\{|it| it.release\};\
\});\
d = \cf2 SCNSObject\cf0 (\cf3 "NSButton"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,100,20)]); \
e = \cf2 SCNSObject\cf0 (\cf3 "NSView"\cf0 , \cf3 "initWithFrame:"\cf0 , [\cf2 Rect\cf0 (0,0,400,100)]); \
c.invoke(\cf3 "setContentView:"\cf0 , [e], \cf2 true\cf0 );\
e.invoke(\cf3 "addSubview:"\cf0 , [d], \cf2 true\cf0 );\
c.invoke(\cf3 "makeKeyAndOrderFront:"\cf0 , [\cf2 nil\cf0 ], \cf2 true\cf0 );\
d.invoke(\cf3 "setButtonType:"\cf0 , [3]);\
\{\
d.initAction(\cf3 "doStateAction:"\cf0 );\
d.nsAction.action_(\{\cf2 |it,val|\cf0  val.postln;\});\
\}.defer(0.1);\
)\
\
}