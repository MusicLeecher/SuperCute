{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs32 \cf0 \
Understanding Streams, Patterns and Events - Part 2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \

\f0\b Patterns
\f1\b0 \
\
Often one wants to be able to create multiple streams from a single stream specification.\
Patterns are just a way to make multiple Streams  from a single specification, like a cookie cutter.\
A pattern can be any object that responds to the asStream message by creating a Stream.\
Once again there is a default implementation in class Object of asStream that simply\
returns the receiver as its own stream. Thus any object is by default a pattern that\
returns itself as a stream when sent the asStream message.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
a = 7.asStream;\
a.postln;\
a.next.postln;\
)
\f1 \
\
Pattern and its subclasses\
\
There is a class named Pattern that provides more functionality for the concept of a pattern.\
\
Pfunc is a Pattern that returns a FuncStream. \
The same function arguments are supplied as are supplied to FuncStream.\
\

\f2 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b;\
a = \cf2 Pfunc\cf0 .new(\{ #[1, 2, 3, 4].choose \});\
b = a.asStream;	\cf3 // make a stream from the pattern\cf0 \
5.do(\{ b.next.postln; \});		\cf3 // print 5 values from the stream\cf0 \
\
)
\f1 \
\
Prout is a Pattern that returns a Routine. \
The same function argument is supplied as is supplied to Routine.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
a = \cf2 Prout\cf0 .new(\{ \
		3.do(\{ \cf2 arg\cf0  i; 3.rand.yield; \}) \
	\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // make two streams from the pattern\cf0 \
b = a.asStream;\
c = a.asStream;\
4.do(\{ b.next.postln; \});	\cf3 // print 4 values from first stream\cf0 \
4.do(\{ c.next.postln; \});	\cf3 // print 4 values from second stream\cf0 \
)
\f1 \
\
Pseries is a Pattern that generates an arithmetic series.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b;\
a = \cf2 Pseries\cf0 .new(10, 3, 8); \cf3 // stream starts at 10, steps by 3 and has length 8\cf0 \
b = a.asStream;\
19.do(\{ b.next.postln; \});	\cf3 // print 9 values from stream\cf0 \
)
\f1 \
\
Pgeom is a Pattern that generates a geometric series.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // stream starts at 10, steps by factor of 3 and has length 8\cf0 \
a = \cf2 Pgeom\cf0 .new(10, 3, 8); \
b = a.asStream;\
9.do(\{ b.next.postln; \});	\cf3 // print 9 values from stream\cf0 \
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Math operations on Patterns\
\
Patterns also respond to math operators by returning patterns that\
respond to asStream with appropriately modified streams.\
\
Applying a unary operator to a pattern\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a is a pattern whose stream counts from 0 to 9\cf0 \
a = \cf2 Pseries\cf0 .new(0,1,10);\
b = a.squared;	\cf3 // pattern b is a square of the pattern a\cf0 \
c = b.asStream;\
12.do(\{ c.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Using a binary operator on a pattern\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a is a pattern whose stream counts from 0 to 9\cf0 \
a = \cf2 Pseries\cf0 .new(0,1,10);\
b = a + 100;	\cf3 // add a constant value to pattern a\cf0 \
c = b.asStream;\
12.do(\{ c.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Filtering operations on patterns\
\
Patterns also respond to the messages collect, select, and reject by returning a new Pattern.\
\
The collect message returns a Pattern whose Stream is modified by a function in the same way \
as the collect message sent to a Collection returns a modified Collection.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a is a pattern whose stream counts from 0 to 9\cf0 \
a = \cf2 Pseries\cf0 .new(0,1,10);\
\cf3 // b is a pattern whose stream adds 100 to even values\cf0 \
b = a.collect(\{ \cf2 arg\cf0  item; if (item.even, \{ item + 100 \},\{ item \}); \});\
c = b.asStream;\
6.do(\{ c.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
The select message creates a pattern whose stream passes only items that return true from a \
user supplied function.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a is a pattern whose stream counts from 0 to 9\cf0 \
a = \cf2 Pseries\cf0 .new(0,1,10);\
\cf3 // b is a pattern whose stream only returns the odd values\cf0 \
b = a.select(\{ \cf2 arg\cf0  item; item.odd; \});\
c = b.asStream;\
6.do(\{ c.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
The reject message creates a pattern whose stream passes only items that return false from a \
user supplied function.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  a, b, c;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a is a pattern whose stream counts from 0 to 9\cf0 \
a = \cf2 Pseries\cf0 .new(0,1,10);\
\cf3 // b is a pattern whose stream that only returns the non-odd values\cf0 \
b = a.reject(\{ \cf2 arg\cf0  item; item.odd; \});\
c = b.asStream;\
6.do(\{ c.next.postln; \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Making Music with Patterns\
\
Here is a variation of the example given in part 1 that uses a Pattern to create two instances of\
the random melody stream.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
	s = \cf2 Server\cf0 .local;\
	\cf2 SynthDef\cf0 ( \cf4 "Help-SPE2"\cf0 , \{ \cf2 arg\cf0  i_out=0, i_dur=1, freq;\
		\cf2 var\cf0  out;\
		out = \cf2 RLPF\cf0 .ar(\
			\cf2 LFSaw\cf0 .ar( freq ),\
			\cf2 LFNoise1\cf0 .kr(1, 36, 110).midicps,\
			0.1\
		) * \cf2 EnvGen\cf0 .kr( \cf2 Env\cf0 .perc, levelScale: 0.3, \
							timeScale: i_dur, doneAction: 2 );\
	 	\cf3 //out = [out, DelayN.ar(out, 0.04, 0.04) ];\cf0 \
		4.do(\{ out = \cf2 AllpassN\cf0 .ar(out, 0.05, [0.05.rand, 0.05.rand], 4) \});\
		\cf2 Out\cf0 .ar( i_out, out );\
	\}).send(s);\
)\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // streams as a sequence of pitches\cf0 \
	\cf2 var\cf0  pattern, streams, dur, durDiff;\
	dur = 1/7;\
	durDiff = 3;\
	pattern = \cf2 Prout\cf0 .new(\{\
		loop(\{\
			if (0.5.coin, \{\
				#[ 24,31,36,43,48,55 ].do(\{ arg fifth; fifth.yield \});\
			\});\
			rrand(2,5).do(\{\
				\cf3 // varying arpeggio\cf0 \
				60.yield;\
				#[63,65].choose.yield;\
				67.yield;\
				#[70,72,74].choose.yield;\
			\});\
			\cf3 // random high melody\cf0 \
			rrand(3,9).do(\{  #[74,75,77,79,81].choose.yield \});\
		\});\
	\});\
	streams = [  \
		(pattern - \cf2 Pfunc\cf0 .new(\{ #[12, 7, 7, 0].choose \})).midicps.asStream,\
		pattern.midicps.asStream\
	];\
	\cf2 Routine\cf0 (\{\
		loop(\{\
			\cf2 Synth\cf0 ( \cf4 "Help-SPE2"\cf0 , [ \cf5 \\freq\cf0 , streams.at(0).next, \cf5 \\i_dur\cf0 , dur * durDiff  ] );\
			durDiff.do(\{\
				\cf2 Synth\cf0 ( \cf4 "Help-SPE2"\cf0 , [ \cf5 \\freq\cf0 , streams.at(1).next, \cf5 \\i_dur\cf0 , dur  ] );\
				dur.wait;\
			\});\
		\})\
	\}).play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
To go to the next file, double click on the ] to select the filename and type cmd-H:\
[Streams-Patterns-Events3]\
\
\
}