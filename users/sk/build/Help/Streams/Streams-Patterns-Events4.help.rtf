{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green112\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 \
Understanding Streams, Patterns and Events - Part 4\
\

\f1\b0\fs24 The preceeding sections showed how to use Streams and Patterns to generate complex\
sequences of values for a single parameter at a time.\
This section covers Environments and Events, which are used to build a symbolic event\
framework for patterns, allowing you to control all aspects of a composition using patterns.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs34 \cf0 Environment
\f1\b0\fs24 \
\
An Environment is an IdentityDictionary mapping Symbols to values.\
There is always one current Environment which is stored in the currentEnvironment\
class variable of class Object.\
\
Symbol and value pairs may be put into the current Environment as follows:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 currentEnvironment.put(\cf2 \\myvariable\cf0 , 999);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
and retrieved from the current Environment as follows:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 currentEnvironment.at(\cf2 \\myvariable\cf0 ).postln;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 The compiler provides a shorthand for the two constructs above .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 ~myvariable = 888;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
is equivalent to:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 currentEnvironment.put(\\\cf2 myvariable\cf0 , 888);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
and:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 ~myvariable.postln;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 is equivalent to:\
 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 currentEnvironment.at(\\\cf2 myvariable\cf0 ).postln;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Making an Environment\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Environment has a class method 
\f0\b make
\f1\b0  which can be used to create an Environment\
and fill it with values. What 
\f0\b make
\f1\b0  does is temporarily replace the current Environment \
with a new one, call your function where you fill the Environment with values, then it\
replaces the previous current Environment and returns you the new one.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Environment\cf0 .make(\{\
	~a = 100;\
	~b = 200;\
	~c = 300;\
\});\
a.postln;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Using an Environment\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The instance method 
\f0\b use
\f1\b0  lets you temporarily replace the current Environment with one you have made.\
The 
\f0\b use
\f1\b0  method returns the result of your function instead of the Environment like 
\f0\b make
\f1\b0  does.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Environment\cf0 .make(\{\
	~a = 10;\
	~b = 200;\
	~c = 3000;\
\});\
a.use(\{\
	~a + ~b + ~c\
\}).postln;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
There is also a 
\f0\b use
\f1\b0  class method for when you want to make and use the result from \
an Environment directly.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Environment\cf0 .use(\{\
	~a = 10;\
	~b = 200;\
	~c = 3000;\
	~a + ~b + ~c\
\}).postln;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Calling Functions with arguments from the current Environment\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
It is possible to call a Function and have it look up any unspecified argument values from the\
current Environment. This is done with the 
\f0\b valueEnvir
\f1\b0  and 
\f0\b valueArrayEnvir
\f1\b0  methods.\
These methods will, for any unspecified argument value, look in the current Environment for\
a symbol with the same name as the argument. If the argument is not found then whatever the\
function defines as the default value for that argument is used.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  f;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // define a function\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 f = \{ \cf3 arg\cf0  x, y, z; [x, y, z].postln; \};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Environment\cf0 .use(\{\
	~x = 7;\
	~y = 8;\
	~z = 9;\
	\
	f.valueEnvir(1, 2, 3);	\cf4 // all values supplied\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	f.valueEnvir(1, 2);	\cf4 // z is looked up in the current Environment\
\cf0 	f.valueEnvir(1);		\cf4 // y and z are looked up in the current Environment \
\cf0 	f.valueEnvir;			\cf4 // all arguments are looked up in the current Environment\
\cf0 	f.valueEnvir(z: 1);	\cf4 // x and y are looked up in the current Environment\
\cf0 \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 Here is a somewhat contrived example of how the Environment might be used to \
manufacture SynthDefs.\
Even though the three functions below have the freq, amp and pan args declared in\
different orders it does not matter, because valueEnvir looks them up in the\
environment. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b, c, n;\
\
n = 40;\
a = \{ \cf3 arg\cf0  freq, amp, pan;\
	\cf3 Pan2\cf0 .ar(\cf3 SinOsc\cf0 .ar(freq), pan, amp);\
\};\
b =  \{ \cf3 arg\cf0  amp, pan, freq;\
	\cf3 Pan2\cf0 .ar(\cf3 RLPF\cf0 .ar(\cf3 Saw\cf0 .ar(freq), freq * 6, 0.1), pan, amp);\
\};\
c =  \{ \cf3 arg\cf0  pan, freq, amp;\
	\cf3 Pan2\cf0 .ar(\cf3 Resonz\cf0 .ar(\cf3 GrayNoise\cf0 .ar, freq * 2, 0.1), pan, amp * 2);\
\};\
\
\cf3 Task\cf0 (\{\
	n.do(\{ \cf3 arg\cf0  i;\
		\cf3 SynthDef\cf0 (\cf5 "Help-SPE4-EnvirDef-"\cf0  ++ i.asString, \{\
			\cf3 var\cf0  out;\
			\cf3 Environment\cf0 .use(\{\
					\cf4 // set values in the environment\cf0 \
				~freq = exprand(80, 600);\
				~amp = 0.1 + 0.3.rand;\
				~pan = 1.0.rand2;\
				\
					\cf4 // call a randomly chosen instrument function \cf0 \
					\cf4 // with values from the environment\cf0 \
				out = [a,b,c].choose.valueEnvir;\
			\});\
			out = \cf3 CombC\cf0 .ar(out, 0.2, 0.2, 3, 1, out);\
			out = out * \cf3 EnvGen\cf0 .kr( \
				\cf3 Env\cf0 .sine, doneAction: 2, timeScale: 1.0 + 6.0.rand, levelScale: 0.3 \
			);\
			\cf3 Out\cf0 .ar( 0, out );\
		\}).send(s);\
		0.02.wait;\
	\});\
	loop(\{\
		\cf3 Synth\cf0 ( \cf5 "Help-SPE4-EnvirDef-"\cf0  ++ n.rand.asString );\
		(0.5 + 2.0.rand).wait;\
	\});\
\}).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \

\f0\b\fs36 \
Event
\f1\b0\fs24 \
\
The class Event is a subclass of Environment. Events are mappings of Symbols representing\
names of parameters for a musical event to their value. This lets you put any information you\
want into an event. \
\
The class getter method 
\f0\b default
\f1\b0  retrieves the default prototype event which has been initialized with \
values for many useful parameters. It represents only one possible event model. You are free to create \
your own, however it would be good to understand the one provided first so that you can see what can be done.\
\
A prototype event is a default event which will be transformed by the streams returned by patterns. \
Compositions produced by event patterns are created entirely from transformations of copies of a single protoEvent.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i \cf0 It's all a part of the Big Note, but don't tell the pigs and ponies.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\i0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Value Patterns, Event Patterns and Pbind\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The patterns discussed in parts 2 and 3 are known as "value patterns" because their streams \
return a single value for each call to 
\f0\b next
\f1\b0 . Here we introduce "event patterns" which once turned\
into streams, return an Event for each call to 
\f0\b next
\f1\b0 .\
\
The class 
\f0\b Pbind
\f1\b0  provides a bridge between value patterns and event patterns. It binds symbols in\
each event to values obtained from a pattern. Pbind takes arguments in pairs, the first of a pair\
being a Symbol and the second being a value Pattern. Any object can act as a Pattern,\
so you can use constants as the pattern ( see \\amp in the example below ).\
\
The Pbind stream returns nil whenever the first one of its streams ends.
\f2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Pbind\cf0 ( \cf6 \\freq\cf0 , \cf3 Pseq\cf0 ([440,880]) ).play\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\
An event stream is created for a Pattern by sending it the 
\f0\b asStream
\f1\b0  message. What Pbind does is to produce a stream which puts the values for its symbols into the event, possibly overwriting previous bindings to those symbols:\
\
\cf7 t  =  
\f2 \cf8 Pbind\cf7 ( \cf9 \\freq\cf7 , \cf8 Pseq\cf7 ([440,880]) ).asStream;\
t.next(\cf8 Event\cf7 .default);
\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 t.next(\cf3 Event\cf0 .default);\
t.next(\cf3 Event\cf0 .default);
\f1 \
\
\
When calling Pattern-play an EventStreamPlayer is automatically generated which handles scheduling as well as passing the protoEvent into the event stream.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 EventStreamPlayer
\f1\b0  is a subclass of 
\f0\b PauseStream
\f1\b0 . A PauseStream is just a wrapper for a stream allowing  to play, stop, start it, etc... \
EventStreamPlayers are initialized using the event stream returned by Pbind-asStream, as well as with a protoEvent. The EventStreamPlayer passes in a 
\f0\b protoEvent
\f1\b0 , at each call to 
\f0\b next
\f1\b0  on the Pbind stream. The Pbind stream copies the event to pass down and back up the tree of pattern streams so that each stream can modify it. \
An EventStreamPlayer is itself a stream which returns scalars which are used by the clock to schedule its next invocation. At every call to EventStreamPlayer-next by the clock, the player gets its delta values by querying the Event after it has been returned by the Pbind stream traversal. \
\
\

\f0\b Changes in SC3
\f1\b0 \
\
In SC2 you called asEventStream on an Pattern you'd get a stream which actually returned events. \
Now if you want an event stream proper you call asStream on the Event Pattern.\
This will give you a stream of events which you can then use to initialize an EventStreamPlayer object. You don't however need to worry about that because it is usually done for you. Also changed is that you do not pass\
in your protoEvent through the asStream method. It is passed in for you by the EventStreamPlayer at each call\
to next on the stream.\
\
Here you can see what the stream returned from a Pbind looks like.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  pattern, stream;\
\
	\cf4 // bind Symbol xyz to values obtained from a pattern\cf0 \
pattern = \cf3 Pbind\cf0 ( \
	\cf6 \\xyz\cf0 , \cf3 Pseq\cf0 ([1, 2, 3]) \
);\
	\
	\cf4 // create a stream of events for the Pbind pattern.\cf0 \
stream = pattern.asStream;\
\
	\cf4 // event Streams require a prototype event as input.\cf0 \
	\cf4 // this example uses an empty Event as a prototype\cf0 \
4.do(\{  stream.next(\cf3 Event\cf0 .new).postln; \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 Here is an example with more bindings.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  pattern, stream;\
\
pattern = \cf3 Pbind\cf0 ( \
	\cf6 \\abc\cf0 , \cf3 Prand\cf0 ([6, 7, 8, 9], inf ), \
	\cf6 \\xyz\cf0 , \cf3 Pseq\cf0 ([1, 2, 3], 2 ), \
	\cf6 \\uuu\cf0 , 999 \cf4 // a constant represents an infinite sequence of itself\cf0 \
);\
	\
stream = pattern.asStream;\
\
7.do(\{  stream.next(\cf3 Event\cf0 .new).postln; \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 The ListPatterns discussed in part 3 can be put around Event Streams to create sequences of Event Streams.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  pattern, stream;\
pattern = \
	\cf3 Pseq\cf0 ([\
		\cf3 Pbind\cf0 ( \cf6 \\abc\cf0 , \cf3 Pseq\cf0 ([1, 2, 3])),\
		\cf3 Pbind\cf0 ( \cf6 \\def\cf0 , \cf3 Pseq\cf0 ([4, 5, 6])),\
		\cf3 Pbind\cf0 ( \cf6 \\xyz\cf0 , \cf3 Pseq\cf0 ([7, 8, 9]))\
	]);	\
stream = pattern.asStream;\
10.do(\{  stream.next(\cf3 Event\cf0 .new).postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  pattern, stream;\
pattern = \
	\cf3 Prand\cf0 ([\
		\cf3 Pbind\cf0 ( \cf6 \\abc\cf0 , \cf3 Pseq\cf0 ([1, 2, 3])),\
		\cf3 Pbind\cf0 ( \cf6 \\def\cf0 , \cf3 Pseq\cf0 ([4, 5, 6])),\
		\cf3 Pbind\cf0 ( \cf6 \\xyz\cf0 , \cf3 Pseq\cf0 ([7, 8, 9]))\
	], 3);	\
stream = pattern.asStream;\
10.do(\{  stream.next(\cf3 Event\cf0 .new).postln; \});\
)
\f1 \
\
To go to the next file, double click on the ] to select the filename and type cmd-H:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 [Streams-Patterns-Events5]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
}