{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 SkipJack
\f1\b0\fs18 \cf2  
\f0\b\fs24 \cf0 a utility for background tasks that survive cmd-.\

\f1\b0\fs18 \cf2 \

\f0\b\fs24 \cf0 	*new(name, updateFunc, dt, stopTest) \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\b0 \cf0 		
\f0\b updateFunc	
\f2\b0 the function to repeat in the background\
		
\f0\b dt
\f2\b0 			the time interval at which to repeat\
		
\f0\b stopTest		
\f2\b0 a test whether to stop the task now
\f0\b \
		name 		
\f2\b0 is only used for posting information\
		
\f0\b clock
\f2\b0 		the clock that plays the task.\
					default is AppClock, so SkipJack can call GUI primitives. \
					If you need more precise timing, you can supply your own clock, \
					and use defer only where necessary.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs26 \cf0 			
\f1\b0\fs20 \
w = \cf3 SkipJack\cf0 (\{ \cf4 "watch..."\cf0 .postln; \}, 0.5, name: \cf4 "test"\cf0 );\
SkipJack.verbose = true;	// post stop/wakeup logs\
\
w.stop;\
w.start;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
// 	now try to stop with cmd-. : SkipJack always restarts itself.\cf0 \
thisProcess.stop;\
\
w.stop;\
\
	\cf2 // use stopTest: \cf0 \
a = 5;\
w = \cf3 SkipJack\cf0 (\{ \cf4 "watch..."\cf0 .postln; \}, 0.5, \{ a == 10 \}, \cf4 "test"\cf0 );\
a = 10;	// fulfil stopTest\
\
\
\cf2 //	Typical use: SkipJack updates a window displaying the state \cf0 \
\cf2 //	of some objects every now and then. \cf0 \
(		\cf2 // example is mac-only\cf0 \
d = (a: 12, b: 24);\
d.win = \cf3 SCWindow\cf0 (\cf4 "dict"\cf0 , \cf3 Rect\cf0 (0,0,200,60)).front;\
d.views = [\cf5 \\a\cf0 , \cf5 \\b\cf0 ].collect \{ \cf3 |name, i|\cf0  \
	\cf3 SCStaticText\cf0 (d.win, \cf3 Rect\cf0 (i * 100,0,96,20))\
		.background_(\cf3 Color\cf0 .yellow).align_(0).string_(name);\
\};\
w = \cf3 SkipJack\cf0 (\{ \
		\cf4 "..."\cf0 .postln;\
		[\cf5 \\a\cf0 , \cf5 \\b\cf0 ].do \{ \cf3 |name, i|\cf0  \
			d.views[i].string_(name ++ \cf4 ":"\cf0  + d[name]) \
		\} \
	\}, \
	0.5,\
	\{ d.win.isClosed \},\
	\cf4 "showdict"\cf0 \
);\
)\
\
d.a = 123;	\cf2 // updates should be displayed\cf0 \
d.b = \cf5 \\otto\cf0 ;	\
d.win.close;	\cf2 // when window closes, SkipJack stops.\cf0 \
\
(		\cf2 // the same example, but written in x\'abcross-platform gui style:\cf0 \
d = (a: 12, b: 24);\
d.win = \cf3 GUI\cf0 (\cf5 \\window\cf0 ).new(\cf4 "dict"\cf0 , \cf3 Rect\cf0 (0,0,200,60)).front;\
d.views = [\cf5 \\a\cf0 , \cf5 \\b\cf0 ].collect \{ \cf3 |name, i|\cf0  \
	\cf3 GUI\cf0 (\cf5 \\staticText\cf0 ).new(d.win, \cf3 Rect\cf0 (i * 100,0,96,20))\
		.background_(\cf3 Color\cf0 .yellow).align_(0).string_(name);\
\};\
w = \cf3 SkipJack\cf0 (\{ \
		\cf4 "..."\cf0 .postln;\
		[\cf5 \\a\cf0 , \cf5 \\b\cf0 ].do \{ \cf3 |name, i|\cf0  \
			d.views[i].string_(name ++ \cf4 ":"\cf0  + d[name]) \
		\} \
	\}, \
	0.5,\
	\{ d.win.isClosed \},\
	\cf4 "showdict"\cf0 \
);\
)\
\
\
\cf2 //	I prefer this 'lazy' gui idea to a dependency model: \cf0 \
\cf2 //	Even when lots of changes happen fast, you don't choke your \cf0 \
\cf2 //	cpu on gui updating, you still see some intermediate states.\cf0 \
\
	//	if you need to get rid of an unreachable skipjack \
SkipJack(\{ "unreachable, unkillable...".postln \}, name: "jack");\
\
SkipJack.stopAll	// do this to stop all;\
\
SkipJack.stop("jack");	// reach it by name and stop}