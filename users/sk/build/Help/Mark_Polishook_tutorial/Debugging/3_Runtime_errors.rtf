{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green115\blue0;\red0\green0\blue191;
\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Runtime errors\

\f1\b0\fs18 \
Runtime errors occur while a program is executing.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////
\f0\b\fs24 \cf0 \
\
Common errors 
\f1\b0\fs18 \
\
1. an object receives a message which it doesn't understand\
2. a binary operation (addition, subtraction, multiplication, etc.) can't be performed\
3. a value other than true or false appears in a conditional (boolean) test\
4. a file can't be opened (a primitive fails)\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Object doesn't understand
\f1\b0\fs18 \
\
In the case of\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 3.createRuntimeError\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 SuperCollider prints a four-part error notification to the post window. The parts of the notification are ERROR, RECEIVER, ARGS, and CALL STACK, as in\
\
ERROR: Message 'createRuntimeError' not understood.\
RECEIVER:\
   Integer 3\
ARGS:\
Instance of Array \{    (057E7560, gc=01, fmt=01, flg=11, set=00)\
  indexed slots [0]\
\}\
CALL STACK:\
	DoesNotUnderstandError-reportError\
		arg this = <instance of DoesNotUnderstandError>\
	Nil-handleError\
		arg this = nil\
		arg error = <instance of DoesNotUnderstandError>\
	Object-throw\
		arg this = <instance of DoesNotUnderstandError>\
	Object-doesNotUnderstand\
		arg this = 3\
		arg selector = 'createRuntimeError'\
		arg args = [*0]\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
		var func = <instance of Function>\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
The ERROR section explains what went wrong. The RECEIVER section names the the class of the object to which the message was sent. The ARGS section says how many arguments were included in the message. Read the CALL STACK from the bottom to the top to see where the error happened. Reading from bottom to top means going from\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Process\cf0 -interpretPrintCmdLine \
\
to \
\
\cf4 Interpreter\cf0 -interpretPrintCmdLine \
\
to \
\
\cf4 Object\cf0 -doesNotUnderstand\
\
to\
\
\cf4 Object\cf0 -throw\
\
to\
\
\cf4 Nil\cf0 -handleError\
\
to\
\
\cf4 DoesNotUnderstandError\cf0 -reportError\
\
which is the first line in the stack.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 DoesNotUnderstandError\cf0 -reportError \
\
is the mechanism that prints the error notification to the post window. Select it and press cmd-j to see how it works (how it prints the notification).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Execute\
\
$a * $b\
\
to create another runtime error message. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
The ERROR, RECEIVER, ARGS, and CALL STACK headers in the post window explain the problem: Instances of class Char have no knowledge of multiplication.\
\
ERROR: Message '*' not understood.\
RECEIVER:\
   Character 97 'a'\
ARGS:\
Instance of Array \{    (067F5470, gc=C4, fmt=01, flg=00, set=01)\
  indexed slots [1]\
      0 : Character 98 'b'\
\}\
CALL STACK:\
	DoesNotUnderstandError-reportError\
		arg this = <instance of DoesNotUnderstandError>\
	Nil-handleError\
		arg this = nil\
		arg error = <instance of DoesNotUnderstandError>\
	Object-throw\
		arg this = <instance of DoesNotUnderstandError>\
	Object-doesNotUnderstand\
		arg this = $a\
		arg selector = '*'\
		arg args = [*1]\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
		var func = <instance of Function>\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Unitialized variable (binary operation fails)\
\

\f1\b0\fs18 Here, the variable a is initialized to an integer and the variable b isn't initialized. Multiplying a (the integer 10)  by b (nil, the value that SuperCollider uses for unitialized data) will create a runtime error.\
\
(\cf5 \
\cf6 var\cf5  a = 10;	\cf7 // a is declared and initialized\cf5 \
\cf6 var\cf5  b;		\cf7 // b declared but not initialized, so it defaults to nil\cf5 \
\
t = \cf6 Task\cf5 (\{\
\
	4.do(\{ \cf6 arg\cf5  item, i;\
	\
		if(i != 3) \
			\{ i.postln \} 			\cf7 // print the value of i if it doesn't equal 3\cf5 \
			\{ (a * b).postln \};	\cf7 // when i equals 3, do a * b\cf5 \
								\cf7 // ... which is a problem if b is nil\cf5 \
		1.wait;\
		\
	\})\
	\
\});\
t.start;\
\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
The printout shows the code ran successfully until the index, i, reached 3, which is when a * b happened. The ERROR, RECEIVER, ARGS, and CALL STACK headers describe the problem.\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
a Task\
0\
1\
2\
ERROR: binary operator '*' failed.\
RECEIVER:\
   nil\
ARGS:\
Instance of Array \{    (067D92B0, gc=CC, fmt=01, flg=00, set=01)\
  indexed slots [2]\
      0 : Integer 10\
      1 : nil\
\}\
CALL STACK:\
	DoesNotUnderstandError-reportError\
		arg this = <instance of BinaryOpFailureError>\
	Nil-handleError\
		arg this = nil\
		arg error = <instance of BinaryOpFailureError>\
	Object-throw\
		arg this = <instance of BinaryOpFailureError>\
	Object-performBinaryOpOnSomething\
		arg this = nil\
		arg aSelector = '*'\
		arg thing = 10\
		arg adverb = nil\
	Integer-*\
		arg this = 10\
		arg aNumber = nil\
		arg adverb = nil\
	< FunctionDef in closed FunctionDef >\
		arg item = 3\
		arg i = 3\
	Integer-do\
		arg this = 4\
		arg function = <instance of Function>\
		var i = 3\
	< FunctionDef in closed FunctionDef >  (no arguments or variables)\
	Routine-prStart\
		arg this = <instance of Routine>\
		arg inval = 758.000000\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 True, false, or other\

\f1\b0\fs18 \
A value other than true or false in a boolean test, as in\
\
if(x=4) \{ \cf8 "this is ok"\cf0 \};\
\
produces\
\
ERROR: Non Boolean in test.\
RECEIVER:\
   Integer 4\
CALL STACK:\
	MethodError-reportError\
		arg this = <instance of MustBeBooleanError>\
	Nil-handleError\
		arg this = nil\
		arg error = <instance of MustBeBooleanError>\
	Object-throw\
		arg this = <instance of MustBeBooleanError>\
	Object-mustBeBoolean\
		arg this = 4\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
		var func = <instance of Function>\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
Correcting the test clause fixes the problem.\
\
if(x==4) \{ \cf8 "this is ok"\cf0 \};\
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 Primitive fails\
\

\f1\b0\fs18 Asking for the length of a non-existent file creates a runtime error. The notification shows what went wrong (a C code primitive failed).\
\
f = \cf4 File\cf0 (\cf8 "i_don't_exist"\cf0 , \cf8 "r"\cf0 );\
f.length;\
\
ERROR: Primitive '_FileLength' failed.\
Failed.\
RECEIVER:\
Instance of File \{    (067D9970, gc=C4, fmt=00, flg=00, set=01)\
  instance variables [1]\
    fileptr : nil\
\}\
CALL STACK:\
	MethodError-reportError\
		arg this = <instance of PrimitiveFailedError>\
	Nil-handleError\
		arg this = nil\
		arg error = <instance of PrimitiveFailedError>\
	Object-throw\
		arg this = <instance of PrimitiveFailedError>\
	Object-primitiveFailed\
		arg this = <instance of File>\
	File-length\
		arg this = <instance of File>\
	< closed FunctionDef >  (no arguments or variables)\
	Interpreter-interpretPrintCmdLine\
		arg this = <instance of Interpreter>\
		var res = nil\
		var func = <instance of Function>\
	Process-interpretPrintCmdLine\
		arg this = <instance of Main>\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
}