{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red255\green42\blue87;\red57\green60\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 GUI Overview\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 The GUI class provides a means of writing cross platform GUI code. It serves as a black-box factory for different implementations of the GUI classes. Refer to the bottom of this document for a list of GUI classes.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul \ulc0 Basic Usage\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone \
GUI classes are referred to by calling a class method on GUI. Here is an example of how a window is created and populated:\
\
The GUI class has class methods for determining the current GUI kit and for switching the GUI kit (look at the help file for [\ul SCWindow\ulnone ] to see how this is done directly in native cocoa GUI).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 (\
	\cf2 var\cf0  w, b;\
	\cf3 // GUI.window returns the window class for the current kit\cf0 \
	\cf3 // ; hence GUI.window.new instantiates a new window\cf0 \
	w = \cf2 GUI\cf0 .window.new( \cf4 "my name is... panel"\cf0 , \cf2 Rect\cf0 ( 128, 64, 340, 360 ));\
\
	w.view.decorator = \cf2 FlowLayout\cf0 ( w.view.bounds );\
	w.view.background = \cf2 Color\cf0 ( 0.6, 0.8, 0.8 );\
\
	32.do(\{ \cf2 arg\cf0  i;\
		\cf3 // the same is true for all other widgets\cf0 \
		\cf3 // ; here GUI.button returns the button class for the current kit\cf0 \
		b = \cf2 GUI\cf0 .button.new( w, \cf2 Rect\cf0 ( rrand( 20, 300 ), rrand( 20, 300 ), 75, 24 ));\
		b.states = [[ \cf4 "Start "\cf0  ++ i, \cf2 Color\cf0 .black, \cf2 Color\cf0 .rand ],\
				   [ \cf4 "Stop "\cf0  ++ i, \cf2 Color\cf0 .white, \cf2 Color\cf0 .red ]];\
	\});\
\
	w.front;\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Alternative syntax for making e.g. windows and buttons:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 \
w = GUI(\\window).new.front;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 GUI(\\slider).new(w, Rect(0,0,400, 20));\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Switching and Referring to GUI Kits\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone As of this writing, two GUI kits are available through the GUI class: Cocoa (Mac OS X native) GUI and Swing (Java) GUI. Note that SwingOSC is not part of the default SuperCollider distribution, so you may have to install it separately.\
\
You can switch the GUI kit by calling one of the following class methods:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf2 GUI\cf0 .cocoa;	\cf3 // use cocoa in subsequent GUI creation procedures\cf0 \
\cf2 GUI\cf0 .swing;	\cf3 // use swing in subsequent GUI creation procedures\
			// NOTE: If you do not have SwingOSC installed, you get \
			// a warning only, and do not switch; so you cannot \
			// accidentally disable your (mac) gui system.\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	\
These methods return the new GUI kit implementation. The current implementation can be queried by calling\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf2 GUI\cf0 .current;	\cf3 // returns the current GUI kit implementation\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
The default GUI kit is cocoa. To store an implementation for later use, you can store the result of GUI.current. The implementation responds to GUI classes in the same way as the GUI class itself. Therefore:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 (\
	\cf2 var\cf0  w, b, kits;\
\
	kits	= [ \cf2 GUI\cf0 .cocoa, \cf2 GUI\cf0 .swing ];\
\
	2.do(\{ \cf2 arg\cf0  j;\
		w = kits[ j ].window.new( \cf4 "my name is... panel"\cf0 , \cf2 Rect\cf0 ( 128 + (j * 400), 64, 340, 360 ));\
\
		w.view.decorator = \cf2 FlowLayout\cf0 ( w.view.bounds );\
		w.view.background = \cf2 Color\cf0 ( 0.6, 0.8, 0.8 );\
\
		32.do(\{ \cf2 arg\cf0  i;\
			b = kits[ j ].button.new( w, \cf2 Rect\cf0 ( rrand( 20, 300 ), rrand( 20, 300 ), 75, 24 ));\
			b.states = [[ \cf4 "Start "\cf0  ++ i, \cf2 Color\cf0 .black, \cf2 Color\cf0 .rand ],\
					   [ \cf4 "Stop "\cf0  ++ i, \cf2 Color\cf0 .white, \cf2 Color\cf0 .red ]];\
\
		\});\
		w.front;\
	\});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
For persistency, you can store the identifier of the kit implementation and recall the kit through the class method 
\f1\fs20 fromID
\f2\fs24 :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 x = \cf2 GUI\cf0 .cocoa;\
y = x.id;				\cf3 // store the identifier of a kit implementation\cf0 \
y.postln;				\cf3 // ; the id could be stored in a preferences file for example\cf0 \
\cf2 GUI\cf0 .swing;\
\cf3 // now switch back to the kit implementation with identifier y\cf0 \
\cf2 GUI\cf0 .fromID( y );\
\cf2 GUI\cf0 .current.id.postln;	\cf3 // --> cocoa\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul \
List of Kit-specific GUI Classes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone \
The following GUI classes have individual helpfiles. There are a number of undocumented GUI classes listed in 
\f0\b [\ul Undocumented-Classes\ulnone ]
\f2\b0 .\
Using the GUI class, each class is referred to by the original cocoa name, stripped of the prefix 'SC' and beginning with a lower case character (exceptions are indicated by \cf5 red\cf0  colour). \cf6 Blue\cf0  colour indicates optional classes not included in the default distribution.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 GUI factory		Cocoa
\f2\b0 			
\f0\b \cf6 Swing
\f2\b0 \cf0 \
\
GUI.window		[\ul SCWindow\ulnone ]		[\ul JSCWindow\ulnone ]		a frame that can contain gadgets\
--- N/A ---			[\ul SCTopView\ulnone ]		[\ul JSCTopView\ulnone ]		top-most container of a window\
GUI.view			[\ul SCView\ulnone ]			[\ul JSCView\ulnone ]		base class ; drag-object and global keyboard management\
GUI.compositeView	[\ul SCCompositeView\ulnone ]	[\ul JSCCompositeView\ulnone ] container view for nesting layouts\
GUI.hLayoutView	[\ul SCHLayoutView\ulnone ]	[\ul JSCHLayoutView\ulnone ]	container view with horizontal distribution of children\
GUI.vLayoutView	[\ul SCVLayoutView\ulnone ]	[\ul JSCVLayoutView\ulnone ]	container view with vertical distribution of children\
GUI.button		[\ul SCButton\ulnone ]		[\ul JSCButton\ulnone ]		a multiple state push button\
GUI.popUpMenu	[\ul SCPopUpMenu\ulnone ]	[\ul JSCPopUpMenu\ulnone ]	a collapsed multiple choice button\
GUI.slider			[\ul SCSlider\ulnone ]			[\ul JSCSlider\ulnone ]		a horizontal or vertical slider\
GUI.rangeSlider	[\ul SCRangeSlider\ulnone ]	[\ul JSCRangeSlider\ulnone ]	horizontal interval slider\
GUI.\cf5 slider2D\cf0 		[\ul SC2DSlider\ulnone ]		[\ul JSC2DSlider\ulnone ]		horizontally and vertically moveable slider\
GUI.textField		[\ul SCTextField\ulnone ]		[\ul JSCTextField\ulnone ]		an editable one line text field\
GUI.ezSlider		[\ul EZSlider\ulnone ]			[\ul JEZSlider\ulnone ]		a combo of slider, numberbox and label\
GUI.ezNumber		[\ul EZNumber\ulnone ]		[\ul JEZNumber\ulnone ]		a combo of numberbox and label\
GUI.listView		[\ul SCListView\ulnone ]		[\ul JSCListView\ulnone ]		a list of text items\
GUI.staticText		[\ul SCStaticText\ulnone ]		[\ul JSCStaticText\ulnone ]		a text label\
GUI.numberBox	[\ul SCNumberBox\ulnone ]	[\ul JSCNumberBox\ulnone ]	editable number field\
GUI.dragSource	[\ul SCDragSource\ulnone ]	[\ul JSCDragSource\ulnone ]	object container acting as a source for drag-n-drop\
GUI.dragSink		[\ul SCDragSink\ulnone ]		[\ul JSCDragSink\ulnone ]		object container acting as a target for drag-n-drop\
GUI.dragBoth		[\ul SCDragBoth\ulnone ]		[\ul JSCDragBoth\ulnone ]		combination of DragSource and DragSink\
GUI.stethoscope	[\ul Stethoscope\ulnone ]		[\ul JStethoscope\ulnone ]		oscilloscope tool\
GUI.\cf5 scopeView\cf0 	[\ul SCScope\ulnone ]		[\ul JSCScope\ulnone ]		oscilloscope view\
GUI.tabletView		[SCTabletView]	--- TODO ---		view for receiving graphic tablet data\
GUI.\cf5 tabletSlider2D\cf0 	[SC2DTabletSlider]	--- TODO ---		2D slider with support for graphic tablet data\
GUI.freqScope	\cf6 	[\cf6 \ul FreqScope\cf6 \ulnone ]\cf0 		[\ul JFreqScope\ulnone ]		spectrum tool\
GUI.\cf5 freqScopeView\cf0 	\cf6 [\cf6 \ul SCFreqScope\cf6 \ulnone ]\cf0 		[\ul JSCFreqScope\ulnone ]	spectrum view\
GUI.multiSliderView	[\ul SCMultiSliderView\ulnone ]	--- TODO ---		array of sliders\
GUI.envelopeView	[\ul SCEnvelopeView\ulnone ]	--- TODO ---		breakpoint envelope editor\
GUI.userView		[\ul SCUserView\ulnone ]		--- TODO ---		view for user-defined drawing operations\
GUI.soundFileView	[\ul SCSoundFileView\ulnone ]	--- TODO ---		waveform view / editor for sound files\
GUI.movieView	[\ul SCMovieView\ulnone ]		--- TODO ---		canvas for movie (QuickTime) and image display\
GUI.textView		[\ul SCTextView\ulnone ]		--- TODO ---		multiline text editor\
\
GUI.\cf5 dialog\cf0 		[\ul CocoaDialog\ulnone ]		--- TODO ---		file selection dialog management\
\
GUI.font			[\ul Font\ulnone ]			[\ul JFont\ulnone ]			a font typeface description\
GUI.pen			[\ul Pen\ulnone ]			[\ul JPen\ulnone ]			custom drawing operations class\
\
GUI.mouseX		[\ul MouseX\ulnone ]			[\ul JMouseX\ulnone ]		UGen for horizontal mouse coordinate\
GUI.mouseY		[\ul MouseY\ulnone ]			[\ul JMouseY\ulnone ]		UGen for vertical mouse coordinate\
GUI.mouseButton	[\ul MouseButton\ulnone ]		[\ul JMouseButton\ulnone ]	UGen for mouse button detection\
GUI.keyState		[\ul KeyState\ulnone ]			--- TODO ---		UGen for key press detection\
\
GUI.speech		[\ul Speech\ulnone ]			--- TODO ---		text-to-speech synthesis management\
\
\
As you can see, code originally written for cocoa GUI can easily be converted to platform neutral code, by replacing the cocoa class names with the GUI factory spelling which can be done almost automatically. Note: to instantiate a GUI object, you must make explicit use of the new method:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs20 \cf0 w = \cf2 SCWindow\cf0 ( \cf4 "dada"\cf0 , \cf2 Rect\cf0 ( 100, 100, 100, 100 )).front;       \cf3 // OK (abbreviation)\cf0 \
w = \cf2 SCWindow\cf0 .new( \cf4 "dada"\cf0 , \cf2 Rect\cf0 ( 100, 100, 100, 100 )).front;   \cf3 // OK (explicit new call)\cf0 \
w = \cf2 GUI\cf0 .window( \cf4 "dada"\cf0 , \cf2 Rect\cf0 ( 100, 100, 100, 100 )).front      \cf3 // NOT working!\cf0 \
w = \cf2 GUI\cf0 .window.new( \cf4 "dada"\cf0 , \cf2 Rect\cf0 ( 100, 100, 100, 100 )).front; \cf3 // OK\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul List of Kit-independant GUI Classes\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone These classes are not available through the GUI class but need to be used directly. They are platform neutral in themselves.\
\
[\ul Color\ulnone ]\
[\ul FlowLayout\ulnone ]		\cf3 // currently no help file\cf0 \
[\ul Document\ulnone ]		\cf3 // cross-platform ??\cf0 \
[\ul Gradient\ulnone ]			\cf3 // cross-platform ??\cf0 \
[\ul HiliteGradient\ulnone ]		\cf3 // cross-platform ??\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul Inspectors\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone \
These classes use the current GUI kit implementation as returned by 
\f1\fs20 \cf2 GUI\cf0 .current
\f2\fs24  . You usually do not instantiate them directly, but use one of the "Plus-GUI" methods described in the next paragraph.\
\
[\ul ObjectInspector\ulnone ]\
[\ul StringInspector\ulnone ]\
[\ul ClassInspector\ulnone ]\
[\ul FunctionDefInspector\ulnone ]\
[\ul MethodInspector\ulnone ]\
[\ul SlotInspector\ulnone ]\
[\ul FrameInspector\ulnone ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul \
\
Accessing "Plus-GUI"methods\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone "Plus-GUI" methods are methods added to other classes such as 
\f1\fs20 \cf2 String
\f2\fs24 \cf0  or 
\f1\fs20 \cf2 Server
\f2\fs24 \cf0  that provide GUI functionality for those classes. These methods use the current GUI kit implementation as returned by 
\f1\fs20 \cf2 GUI\cf0 .current
\f2\fs24  .\
\
...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // THIS TEXT STILL NEEDS TO BE WRITTEN\cf0 \
...\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 \ul \
Additional GUI-related Documents\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs24 \cf0 \ulnone \
[\ul resize\ulnone ]\
\
\
\ul \'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 last mod: 13-Apr-06\
}