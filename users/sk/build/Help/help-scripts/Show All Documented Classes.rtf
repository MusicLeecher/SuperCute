{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 // trolls the help extension help directories and compiles a doc with links\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  path, doc, result, headingIndices, headingFont, excluded, addFunc;\
\cf3 var\cf0  underlineStarts, underlineRanges, titleString, thirdParty, thirdPartyIndex;\
\cf3 var\cf0  extensions, extensionsIndex, extensionFunc, extensionsRoots, extensionsFolders;\
\cf3 var\cf0  undoc, undocIndex;\
\
path = \cf3 PathName\cf0 .new(\cf4 "Help/"\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 headingIndices = \cf3 List\cf0 .new;\
\
titleString = \cf4 "A Generated List of all Documented Classes"\cf0 ;
\fs20 \

\fs18 undoc = \cf4 "*Show All Undocumented Classes"\cf0 ;\
\
result = titleString ++ \cf3 Char\cf0 .nl ++ \cf3 Char\cf0 .nl ++ \cf4 "Below is an automatically generated list of all documented classes, sorted by directory. For a list of undocumented classes click here:"\cf0  + \cf3 Char\cf0 .tab;\
\
undocIndex = result.size;\
\
result = result ++ undoc ++ \cf3 Char\cf0 .nl ++ \cf3 Char\cf0 .nl;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // put included third party libraries at the end\cf0 \
excluded = [\cf3 PathName\cf0 (\cf4 "Help/crucial"\cf0 ), \cf3 PathName\cf0 (\cf4 "Help/JITLib"\cf0 )];\
\
\cf2 // this func trolls the directory and harvests the descriptions\cf0 \
addFunc = \{\cf3 |folderPathName|\cf0 \
	\cf3 var\cf0  classFiles, heading, currentFile, currentFileString;\
	\cf3 var\cf0  removeIndices, spaceIndices, removePairs, lastSpace = 0;\
	classFiles = \cf4 ""\cf0 ;\
	\
	folderPathName.files.do(\{\cf3 |item|\cf0 \
		\cf3 var\cf0  nameString, nameIndex, end;\
		nameString = item.fileName.split($.).at(0);\
		if(nameString.asSymbol.asClass.notNil, \{ \
			currentFile = \cf3 File\cf0 (item.fullPath, \cf4 "r"\cf0 );\
			currentFileString = currentFile.readAllString;\
			\cf2 // fix accent acute (remove it)\cf0 \
			currentFileString.findAll(\cf4 "\\'8"\cf0 ).reverseDo(\{ \cf3 |i|\cf0 \
				currentFileString = currentFileString.copyFromStart(i-2) ++\
					currentFileString.copyToEnd(i+2);\
			\});\
			currentFile.close;\
			\cf2 // strip RTF gunk\cf0 \
			currentFileString = currentFileString.stripRTF;\
			nameIndex = currentFileString.find(nameString);\
			if(nameIndex.notNil, \{\
				currentFileString = currentFileString.drop(nameIndex);\
				end = currentFileString.find(\cf4 "\\n"\cf0 );\
				if( end.notNil, \{\
					end = end - 1;\
					currentFileString = currentFileString.copyFromStart(end);\
				\});\
\
				\cf2 // remove tab stops\cf0 \
				currentFileString = currentFileString.reject(\{\cf3 |item|\cf0 item == $\\t\});\
				\cf2 // remove commas, hyphens, and spaces\cf0 \
				while(\{(currentFileString[nameString.size] == $,) || \
					(currentFileString[nameString.size] == $ ) || \
					(currentFileString[nameString.size] == $-)\},\
					\{currentFileString = currentFileString.copyFromStart(nameString.size -1) ++\
						currentFileString.copyToEnd(nameString.size + 1);\
					\}\
				);\
				if(currentFileString.size > nameString.size, \{\
					currentFileString = currentFileString.insert(nameString.size, \cf4 "\\t"\cf0 );\
				\});\}, \
				\{	 \
				currentFileString = nameString; \
				\}\
			);\
			\cf2 // add square brackets\cf0 \
			currentFileString = currentFileString.insert(nameString.size, \cf4 "]"\cf0 );\
			currentFileString = currentFileString.insert(0, \cf4 "["\cf0 );\
			\
			classFiles = classFiles ++ \cf3 Char\cf0 .tab ++ currentFileString ++ \cf3 Char\cf0 .nl;\
		\});\
	\});\
	if(classFiles.size > 0, \{\
		\cf2 //heading = folderPathName.fileName;\cf0 \
		heading = folderPathName.fullPath;\
		headingIndices.add([result.size, heading.size]);\
		\
		result = result ++ heading ++ \cf3 Char\cf0 .nl ++ \cf3 Char\cf0 .nl ++ classFiles ++ \cf3 Char\cf0 .nl;\
	\});\
	folderPathName.foldersWithoutCVS.do(\{\cf3 |folder|\cf0  \
		if(excluded.detect(\{\cf3 |item|\cf0  item.fileName == folder.fileName; \}).isNil, \
			\{addFunc.value(folder);\}\
		); \
	\});\
\};\
\
addFunc.value(path);\
\
\cf2 // Check for Extensions Folders and add if they exist\cf0 \
\
extensionsRoots = [\cf3 PathName\cf0 (\cf4 "/Library/Application Support/SuperCollider/Extensions"\cf0 ), \
	\cf3 PathName\cf0 (\cf4 "~/Library/Application Support/SuperCollider/Extensions"\cf0 )];\
\
extensionsRoots.any(\{\cf3 |item|\cf0  item.pathMatch.size > 0 \}).if(\{\
	\
	extensionsFolders = \cf3 List\cf0 .new;\
	extensionFunc = \{ \cf3 |path|\cf0 \
		path.folders.do(\{\cf3 |item|\cf0  \
			item.fullPath.containsi(\cf4 "help"\cf0 ).if(\{ extensionsFolders.add(item)\},\{ \
				extensionFunc.value(item);\});\
		\});\
	\};\
	\
	extensionsRoots.do(\{\cf3 |item|\cf0  extensionFunc.value(item); \});\
		\
	result = result ++ \cf4 "\\n------------------------\\n\\n"\cf0 ;\
	extensions = \cf4 "Extensions:"\cf0 ;\
	extensionsIndex = result.size;\
	result = result ++ extensions + \cf3 Char\cf0 .nl + \cf3 Char\cf0 .nl;\
	extensionsFolders.do(\{\cf3 |item|\cf0  addFunc.value(item);\});\
		\
\});\
\
\cf2 // Third Party Libraries\cf0 \
result = result ++ \cf4 "\\n------------------------\\n\\n"\cf0 ;\
\
thirdParty = \cf4 "Included Third Party Libraries:"\cf0 ;\
thirdPartyIndex = result.size;\
\
result = result ++ thirdParty + \cf3 Char\cf0 .nl + \cf3 Char\cf0 .nl;\
\
excluded.do(\{\cf3 |item|\cf0  addFunc.value(item); result = result ++ \cf4 "\\n------------\\n\\n"\cf0 ;\});\
\
\cf2 //doc = Document.new("Documented Classes");\cf0 \
\
\cf2 // this sets basic tab stops and line spacing\cf0 \
doc = \cf3 Document\cf0 .open(\cf3 File\cf0 .getcwd ++ \cf4 "/"\cf0  ++ \cf4 "Help/help-scripts/tab-template.rtf"\cf0 );\
\
doc.title = \cf4 "Documented Classes"\cf0 ;\
\
\cf2 // set the fonts\cf0 \
doc.setFont(\cf3 Font\cf0 (\cf4 "Helvetica"\cf0 , 12));\
doc.string = result;\
\
doc.setFont(\cf3 Font\cf0 (\cf4 "Helvetica-Bold"\cf0 , 18), 0, titleString.size);\
\
doc.setFont(\cf3 Font\cf0 (\cf4 "Helvetica-Bold"\cf0 , 16), thirdPartyIndex, thirdParty.size);\
\
extensionsIndex.notNil.if(\{\
	doc.setFont(\cf3 Font\cf0 (\cf4 "Helvetica-Bold"\cf0 , 16), extensionsIndex, extensions.size);\
\});\
\
headingFont = \cf3 Font\cf0 (\cf4 "Helvetica-Bold"\cf0 , 14);\
headingIndices.do(\{\cf3 |item|\cf0  doc.setFont(headingFont, *item)\});\
\
\cf2 // find the underlines for help links. Apparently faster than storing them above.\cf0 \
underlineStarts = doc.string.findAll(\cf4 "["\cf0 ).reverse + 1;\
underlineRanges = doc.string.findAll(\cf4 "]"\cf0 ).reverse - underlineStarts;\
\
underlineStarts.do(\{\cf3 |item, i|\cf0  doc.selectRange(item, underlineRanges[i]); doc.underlineSelection;\});\
\
doc.selectRange(undocIndex, undoc.size); \
doc.underlineSelection;\
\
doc.selectRange(0,0);\
doc.editable_(\cf3 false\cf0 );\
\
\cf2 // keeps window title as it should be!\cf0 \
doc.mouseDownAction = \{ \{doc.title = \cf4 "Documented Classes"\cf0 ;\}.defer(0.00001) \};\
\
\{doc.removeUndo;\}.defer(0.001);\
}