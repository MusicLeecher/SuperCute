dnl ===================================================================
dnl file:	configure.in
dnl contents:	autoconf template
dnl author:	stefan kersten <steve@k-hornz.de>
dnl CVS:	$Id$
dnl ===================================================================

# initialize autoconf
AC_PREREQ(2.52)
AC_INIT(source/server/scsynth_main.cpp)

# initialize automake
AM_INIT_AUTOMAKE(SuperCollider,3.0)
# config.h is not currently used
AM_CONFIG_HEADER(config.h)

# shared library versions
SC_SYNTH_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_SYNTH_SHARED_VERSION_INFO)

SC_LANG_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_LANG_SHARED_VERSION_INFO)

# check for programs
AC_PROG_CC
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LD
AM_PROG_LIBTOOL

# emacs lisp handling
AM_PATH_LISPDIR

dnl NOTE: config.h is not included by any file, so we can as well omit the
dnl checks.

# check for header files
dnl AC_CHECK_HEADERS([errno.h strings.h unistd.h endian.h machine/endian.h])
dnl AC_HEADER_STDC

# check for typedefs, structs, and compiler pecularities
dnl AC_C_CONST
dnl AC_C_INLINE
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME

# check for library functions
dnl AC_FUNC_MALLOC
dnl AC_FUNC_MMAP
dnl AC_CHECK_FUNCS([bzero ftruncate gettimeofday memmove memset socket strcasecmp strchr strerror ntohs ntohl htons htonl])

# ======================================================================
# compiler flags
# ======================================================================

AC_SUBST(SC_CPPFLAGS)
AC_SUBST(SC_CFLAGS)

# libraries needed for all targets except plugins
AC_CHECK_LIB(pthread,pthread_create,lib_pthread="-lpthread",lib_pthread="")
if test "x$lib_pthread" = "x" ; then
    AC_MSG_ERROR([libpthread (POSIX threads) required])
fi

AC_CHECK_LIB(dl,dlopen,lib_dl="-ldl",lib_dl="")
if test "x$lib_dl" = "x" ; then
    AC_MSG_ERROR([libdl (dynamic link support) required])
fi

SC_LIBS="$LIBS $lib_pthread $lib_dl"
AC_SUBST(SC_LIBS)

# packages
PKG_CHECK_MODULES(SNDFILE,[sndfile >= 1.0.0])
AC_SUBST(SNDFILE_CFLAGS)
AC_SUBST(SNDFILE_LIBS)

# assemble compiler flags
SC_CPPFLAGS="-Wall -DSC_LINUX -D_REENTRANT"

# add platform dependent default flags
cpu="${build_cpu}"
test -n "${cpu}" || cpu="${target_cpu}"
test -n "${cpu}" || cpu="${host_cpu}"

case $cpu in
    powerpc*|ppc*)
	SC_CFLAGS="-fsigned-char"
	SC_CFLAGS_OPT="-maltivec -mabi=altivec"
	;;
esac

# ======================================================================
# debugging
# ======================================================================

AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[enable debugging features]))

# We need a multithreaded dmalloc for C++, so AM_WITH_DMALLOC is not
# appropriate.
AC_ARG_ENABLE(dmalloc,
AC_HELP_STRING([--enable-dmalloc],[use dmalloc (http://www.dmalloc.com) when debugging is enabled]))
if test "x$enable_debug" = "xyes" ; then
    feat_debug=yes
    # add debugging flags
    AC_MSG_NOTICE([enabling debugging symbols])
    SC_CFLAGS="-O0 -g $SC_CFLAGS"
    if test "x$enable_dmalloc" = "xyes"; then
	# add dmalloc support
	AC_MSG_NOTICE([compiling with dmalloc support])
	SC_CPPFLAGS="$SC_CPPFLAGS -DUSE_DMALLOC"
	DMALLOC_LIBS="-ldmallocthcxx"
	AC_SUBST(DMALLOC_LIBS)
    fi
else
    feat_debug=no
    SC_CPPFLAGS="$SC_CPPFLAGS -DNDEBUG"
    SC_CFLAGS="$SC_CFLAGS $SC_CFLAGS_OPT"
fi

# ======================================================================
# scsynth
# ======================================================================

# various definitions
SC_PLUGIN_DIR='"$(pkglibdir)/plugins"'
AC_SUBST(SC_PLUGIN_DIR)

SC_PLUGIN_EXT=".so"
AC_SUBST(SC_PLUGIN_EXT)

SC_PLUGIN_LOAD_SYM="load"
AC_SUBST(SC_PLUGIN_LOAD_SYM)

# audio api
AC_SUBST(SC_AUDIO_API)
AC_SUBST(SC_AUDIO_API_CFLAGS)
AC_SUBST(SC_AUDIO_API_LIBS)

AC_ARG_WITH(audio-api,
AC_HELP_STRING([--with-audio-api],[audio api to use (jack, portaudio, default=jack)]))

dnl needed?
AC_ARG_WITH(portaudio-libs,
AC_HELP_STRING([--with-portaudio-libs],[additional libraries required for libportaudio, e.g. "-ljack -lasound"]))

if test "x$with_audio_api" = "x"; then
    feat_audio_api="jack"
else
    feat_audio_api="$with_audio_api"
fi
case "$feat_audio_api" in
    jack)
        PKG_CHECK_MODULES(JACK,[jack >= 0.40])
        SC_AUDIO_API="SC_AUDIO_API_JACK"
        SC_AUDIO_API_CFLAGS="$JACK_CFLAGS"
        SC_AUDIO_API_LIBS="$JACK_LIBS"
        ;;

    portaudio)
	AC_CHECK_LIB(portaudio,Pa_GetVersion,lib_portaudio="-lportaudio",lib_portaudio="")
	if test "x$lib_portaudio" = "x" ; then
	    AC_MSG_ERROR([libportaudio not found])
	fi
        SC_AUDIO_API="SC_AUDIO_API_PORTAUDIO"
        SC_AUDIO_API_CFLAGS=""
        SC_AUDIO_API_LIBS="${lib_portaudio} ${with_portaudio_libs}"
        ;;

    *)
        AC_MSG_ERROR([unknown audio api \"${feat_audio_api}\"])
esac

# ======================================================================
# plugins
# ======================================================================

# X11 support
AC_PATH_XTRA
if test "$with_x" = no || test "$no_x" = yes; then
    HAVE_X11=false
else
    if test -z "$X_DISPLAY_MISSING"; then
        HAVE_X11=true
        AC_CHECK_HEADERS(X11/Intrinsic.h)
        AC_CHECK_LIB(X11, XQueryPointer)
        SC_X11_CFLAGS="$X_CFLAGS"
        SC_X11_LIBS="$X_LIBS $X_PRE_LIBS $X_EXTRA_LIBS -lX11"
    else
        HAVE_X11=false
    fi
fi
if $HAVE_X11; then
    feat_x11_ugens=yes
else
    feat_x11_ugens=no
fi
AM_CONDITIONAL(HAVE_X11, $HAVE_X11)
AC_SUBST(SC_X11_CFLAGS)
AC_SUBST(SC_X11_LIBS)

# ======================================================================
# sclang
# ======================================================================

# wether to build the language
AC_ARG_WITH(sclang,
AC_HELP_STRING([--without-sclang],[do not build the language application]))

if test "x$with_sclang" = "x"; then
    with_sclang="yes"
fi
if test "$with_sclang" = "yes"; then
    WITH_SCLANG=true
    feat_sclang="yes"
else
    WITH_SCLANG=false
    feat_sclang="no"
fi
AM_CONDITIONAL(WITH_SCLANG, $WITH_SCLANG)

# installation directories
AC_SUBST(SC_LIB_DIR)
SC_LIB_DIR='$(pkgdatadir)/SCClassLibrary'

# alsa sequencer support
AC_SUBST(ALSA_LIBS)

if $WITH_SCLANG; then
    AC_CHECK_LIB(
    asound,
    snd_pcm_drop,
    [
        HAVE_ALSA="true"
        ALSA_LIBS="-lasound"
    ],
    [
        HAVE_ALSA="false"
        ALSA_LIBS=""
    ],
    [-lm])
    if $HAVE_ALSA; then
        feat_aseq=yes
        AC_DEFINE([HAVE_ALSA],[1],[wether ALSA libs are available])
    else
        feat_aseq=no
    fi
else
    feat_aseq=no
    ALSA_LIBS=""
fi

# scel emacs interface
AC_ARG_ENABLE(scel,
AC_HELP_STRING([--disable-scel],[disable emacs interface]))

if test "x$enable_scel" = "x"; then
    enable_scel="yes"
fi
if $WITH_SCLANG && test "$enable_scel" = "yes"; then
    feat_scel=yes
    WITH_SCEL=true
else
    feat_scel=no
    WITH_SCEL=false
fi
AM_CONDITIONAL(WITH_SCEL, $WITH_SCEL)

# ======================================================================
# output
# ======================================================================

AC_OUTPUT(
Makefile
build/Makefile
headers/Makefile
headers/common/Makefile
headers/plugin_interface/Makefile
headers/server/Makefile
headers/lang/Makefile
source/Makefile
source/common/Makefile
source/server/Makefile
source/plugins/Makefile
source/lang/Makefile
source/lang/LangPrimSource/Makefile
source/lang/LangSource/Makefile
linux/Makefile
linux/libscsynth.pc
linux/libsclang.pc
linux/examples/Makefile
linux/scel/Makefile
linux/scel/el/Makefile
linux/scel/sc/Makefile
)

# ======================================================================
# configuration summary
# ======================================================================

AC_MSG_RESULT([
------------------------------------------------------------
SuperCollider $VERSION feature summary:
------------------------------------------------------------
common
------------------------------------------------------------
 debugging support                 $feat_debug
------------------------------------------------------------
scsynth
------------------------------------------------------------
 audio api                         $feat_audio_api
------------------------------------------------------------
plugins
------------------------------------------------------------
 X11 ugen plugins                  $feat_x11_ugens
------------------------------------------------------------
sclang
------------------------------------------------------------
 enabled                           $feat_sclang
 ALSA sequencer support            $feat_aseq
 scel emacs interface              $feat_scel
------------------------------------------------------------
])

dnl EOF ===============================================================
