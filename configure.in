dnl ===================================================================
dnl file:	configure.in
dnl contents:	autoconf template
dnl author:	stefan kersten <steve@k-hornz.de>
dnl CVS:	$Id$
dnl ===================================================================

# initialize autoconf
AC_PREREQ(2.52)
AC_INIT(source/server/scsynth_main.cpp)
AC_CANONICAL_TARGET

# initialize automake
AM_INIT_AUTOMAKE(SuperCollider,3.0)
AM_CONFIG_HEADER(config.h)

# shared library versions
SC_SYNTH_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_SYNTH_SHARED_VERSION_INFO)

SC_LANG_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_LANG_SHARED_VERSION_INFO)

# check for programs
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LD
AC_PROG_LN_S
AC_PROG_MAKE_SET
dnl AC_PROG_YACC

AM_PROG_LIBTOOL
AM_PATH_LISPDIR

dnl NOTE: config.h is not included by any file, so we can as well omit the
dnl checks.

# check for header files
dnl AC_CHECK_HEADERS([errno.h strings.h unistd.h endian.h machine/endian.h])
dnl AC_HEADER_STDC

# check for typedefs, structs, and compiler pecularities
dnl AC_C_CONST
dnl AC_C_INLINE
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME

# check for library functions
dnl AC_FUNC_MALLOC
dnl AC_FUNC_MMAP
dnl AC_CHECK_FUNCS([bzero ftruncate gettimeofday memmove memset socket strcasecmp strchr strerror ntohs ntohl htons htonl])

# ======================================================================
# compiler flags
# ======================================================================

# libraries needed for all targets except plugins
AC_CHECK_LIB(pthread,pthread_create,lib_pthread="-lpthread",lib_pthread="")
if test "x$lib_pthread" = "x" ; then
	AC_MSG_ERROR([libpthread (POSIX threads) required])
fi

AC_CHECK_LIB(dl,dlopen,lib_dl="-ldl",lib_dl="")
if test "x$lib_dl" = "x" ; then
	AC_MSG_ERROR([libdl (dynamic link support) required])
fi

AC_SUBST(SC_LIBS)
SC_LIBS="-lm $lib_pthread $lib_dl"

# common packages
sc_sndfile_pkg="sndfile >= 1.0.0"
PKG_CHECK_MODULES(SC_SNDFILE,[$sc_sndfile_pkg])
AC_SUBST(SC_SNDFILE_CFLAGS)
AC_SUBST(SC_SNDFILE_LIBS)

# common compiler flags
sc_os_cflags="-DSC_LINUX"

AC_SUBST(SC_CPPFLAGS)
SC_CPPFLAGS="$sc_os_cflags -D_REENTRANT -Wall -Wno-unknown-pragmas"

AC_SUBST(SC_CFLAGS)
SC_CFLAGS=""

# include paths
sc_common_includes='-I$(top_srcdir)/headers/common -I$(top_srcdir)/headers/plugin_interface'
sc_server_includes='-I$(top_srcdir)/headers/server'
sc_lang_includes='-I$(top_srcdir)/headers/lang'

AC_SUBST(SC_SYNTH_INCLUDES)
SC_SYNTH_INCLUDES="$sc_common_includes $sc_server_includes"

AC_SUBST(SC_PLUGIN_INCLUDES)
SC_PLUGIN_INCLUDES="$sc_common_includes $sc_server_includes"

AC_SUBST(SC_LANG_INCLUDES)
SC_LANG_INCLUDES="$sc_common_includes $sc_lang_includes $sc_server_includes"

# ======================================================================
# pkg-config variables
# ======================================================================

sc_common_includes='-I${includedir}/common -I${includedir}/plugin_interface'
sc_server_includes='-I${includedir}/server'
sc_lang_includes='-I${includedir}/lang'

AC_SUBST(SC_SYNTH_PKG_REQUIRES)
SC_SYNTH_PKG_REQUIRES="$sc_sndfile_pkg"

AC_SUBST(SC_SYNTH_PKG_LIBS)
SC_SYNTH_PKG_LIBS="-L\${libdir} -lscsynth $SC_LIBS"

AC_SUBST(SC_SYNTH_PKG_CFLAGS)
SC_SYNTH_PKG_CFLAGS="$sc_os_cflags $sc_common_includes $sc_server_includes"


AC_SUBST(SC_LANG_PKG_REQUIRES)
SC_LANG_PKG_REQUIRES="${sc_sndfile_pkg}, libscsynth"

AC_SUBST(SC_LANG_PKG_LIBS)
SC_LANG_PKG_LIBS="-L\${libdir} -lsclang $SC_LIBS"

AC_SUBST(SC_LANG_PKG_CFLAGS)
SC_LANG_PKG_CFLAGS="$sc_os_cflags $sc_common_includes $sc_lang_includes $sc_server_includes"

# ======================================================================
# debugging
# ======================================================================

AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[enable debugging features]))

if test "x$enable_debug" = "xyes" ; then
	feat_debug=yes
	# add debugging flags
	AC_MSG_NOTICE([enabling debugging symbols])
	SC_CFLAGS="$SC_CFLAGS -g"
else
	feat_debug=no
	SC_CPPFLAGS="$SC_CPPFLAGS -DNDEBUG"
fi

# ======================================================================
# vectorization
# ======================================================================

dnl this needs to be redefined for each platform/vector unit to an
dnl appropriate alignment value
SC_MEMORY_ALIGNMENT=1

AC_ARG_ENABLE(altivec,
AC_HELP_STRING([--disable-altivec],[disable altivec optimizations]))

if test "x$enable_altivec" = "x"; then
	enable_altivec="yes"
fi

# ======================================================================
# target cpu specific
# ======================================================================

case $target_cpu in
	powerpc*|ppc*)
		feat_altivec=no
		altivec_cflags="-maltivec -mabi=altivec"
		SC_CFLAGS="$SC_CFLAGS -fsigned-char"
		if test $enable_altivec = yes; then
			AC_CHECK_HEADER(
			[altivec.h],
			[HAVE_ALTIVEC=true],
			[HAVE_ALTIVEC=false])
			if $HAVE_ALTIVEC; then
				save_cflags="$CFLAGS"
				CFLAGS="$CFLAGS $altivec_cflags"
				AC_MSG_CHECKING([for altivec compiler support])
	                	AC_COMPILE_IFELSE(
				[AC_LANG_SOURCE([[
					#include <altivec.h>
					void dummy() {
					vector float v1, v2, v3;
					v1 = vec_add(v2, v3);
					}
				]])],
				[HAVE_ALTIVEC=true],
				[HAVE_ALTIVEC=false])
				if $HAVE_ALTIVEC; then
					AC_MSG_RESULT([yes])
				else
					AC_MSG_RESULT([no])
				fi
				CFLAGS="$save_cflags"
			fi
			if $HAVE_ALTIVEC; then
				feat_altivec=yes
				SC_CFLAGS="$SC_CFLAGS $altivec_cflags"
				SC_MEMORY_ALIGNMENT=16
			fi
		fi
		;;
esac

# ======================================================================
# defines dependent on previous checks
# ======================================================================

AC_DEFINE_UNQUOTED([SC_MEMORY_ALIGNMENT],[$SC_MEMORY_ALIGNMENT],[Memory alignment for audio buffers])

if test $SC_MEMORY_ALIGNMENT != 1; then
	AC_CHECK_FUNC(
	[posix_memalign],
	[],
	[AC_MSG_ERROR([posix_memalign not found in libc])])
fi

# ======================================================================
# scsynth
# ======================================================================

# various definitions
SC_PLUGIN_DIR='"$(pkglibdir)/plugins"'
AC_SUBST(SC_PLUGIN_DIR)

SC_PLUGIN_EXT=".so"
AC_SUBST(SC_PLUGIN_EXT)

SC_PLUGIN_LOAD_SYM="load"
AC_SUBST(SC_PLUGIN_LOAD_SYM)

# audio api
AC_SUBST(SC_AUDIO_API)
AC_SUBST(SC_AUDIO_API_CFLAGS)
AC_SUBST(SC_AUDIO_API_LIBS)

AC_ARG_WITH(audio-api,
AC_HELP_STRING([--with-audio-api],[audio api to use (jack, portaudio, default=jack)]))

dnl needed?
AC_ARG_WITH(portaudio-libs,
AC_HELP_STRING([--with-portaudio-libs],[additional libraries required for libportaudio, e.g. "-ljack -lasound"]))

if test "x$with_audio_api" = "x"; then
	feat_audio_api="jack"
else
	feat_audio_api="$with_audio_api"
fi
case "$feat_audio_api" in
	jack)
		jack_pkg="jack >= 0.40"
		PKG_CHECK_MODULES(SC_AUDIO_API,[$jack_pkg])
		SC_AUDIO_API="SC_AUDIO_API_JACK"
		SC_SYNTH_PKG_REQUIRES="${SC_SYNTH_PKG_REQUIRES}, ${jack_pkg}"
		;;

	portaudio)
		AC_CHECK_LIB(
		[portaudio],
		[Pa_GetVersion],
		[lib_portaudio="-lportaudio"],
		[lib_portaudio=""])
		if test "x$lib_portaudio" = "x" ; then
			AC_MSG_ERROR([libportaudio not found])
		fi
		SC_AUDIO_API="SC_AUDIO_API_PORTAUDIO"
		SC_AUDIO_API_CFLAGS=""
		SC_AUDIO_API_LIBS="${lib_portaudio} ${with_portaudio_libs}"
		SC_SYNTH_PKG_LIBS="${SC_SYNTH_PKG_LIBS} ${SC_AUDIO_API_LIBS}"
		;;

	*)
		AC_MSG_ERROR([unknown audio api \"${feat_audio_api}\"])
esac

# ======================================================================
# plugins
# ======================================================================

# X11 support
AC_PATH_XTRA
if test "$with_x" = no || test "$no_x" = yes; then
	HAVE_X11=false
else
	if test -z "$X_DISPLAY_MISSING"; then
		HAVE_X11=true
		AC_CHECK_HEADERS(X11/Intrinsic.h)
		AC_CHECK_LIB(X11, XQueryPointer)
		SC_X11_CFLAGS="$X_CFLAGS"
		SC_X11_LIBS="$X_LIBS $X_PRE_LIBS $X_EXTRA_LIBS -lX11"
	else
		HAVE_X11=false
	fi
fi
if $HAVE_X11; then
	feat_x11_ugens=yes
else
	feat_x11_ugens=no
fi
AM_CONDITIONAL(HAVE_X11, $HAVE_X11)
AC_SUBST(SC_X11_CFLAGS)
AC_SUBST(SC_X11_LIBS)

# ======================================================================
# sclang
# ======================================================================

# wether to build the language
AC_ARG_WITH(sclang,
AC_HELP_STRING([--without-sclang],[do not build the language application]))

if test "x$with_sclang" = "x"; then
	with_sclang="yes"
fi
if test "$with_sclang" = "yes"; then
	WITH_SCLANG=true
	feat_sclang="yes"
else
	WITH_SCLANG=false
	feat_sclang="no"
fi
AM_CONDITIONAL(WITH_SCLANG, $WITH_SCLANG)

# installation directories
AC_SUBST(SC_LIB_DIR)
SC_LIB_DIR='$(pkgdatadir)/SCClassLibrary'

# alsa sequencer support
AC_SUBST(SC_ALSA_LIBS)

if $WITH_SCLANG; then
	AC_CHECK_LIB(
	[asound],
	[snd_seq_open],
	[HAVE_ALSA="true"
        SC_ALSA_LIBS="-lasound"],
	[HAVE_ALSA="false"
	SC_ALSA_LIBS=""],
	[-lm])
	if $HAVE_ALSA; then
		feat_aseq=yes
		AC_DEFINE([HAVE_ALSA],[1],[Define when ALSA libs are available])
		SC_LANG_PKG_LIBS="${SC_LANG_PKG_LIBS} ${SC_ALSA_LIBS}"
	else
		feat_aseq=no
	fi
else
	feat_aseq=no
	SC_ALSA_LIBS=""
fi

# scel emacs interface
AC_ARG_ENABLE(scel,
AC_HELP_STRING([--disable-scel],[disable emacs interface]))

if test "x$enable_scel" = "x"; then
	enable_scel="yes"
fi
if $WITH_SCLANG && test "$enable_scel" = "yes"; then
	feat_scel=yes
	WITH_SCEL=true
else
	feat_scel=no
	WITH_SCEL=false
fi
AM_CONDITIONAL(WITH_SCEL, $WITH_SCEL)

# ======================================================================
# output
# ======================================================================

AC_OUTPUT(
Makefile
build/Makefile
headers/Makefile
headers/common/Makefile
headers/plugin_interface/Makefile
headers/server/Makefile
headers/lang/Makefile
source/Makefile
source/common/Makefile
source/server/Makefile
source/plugins/Makefile
source/lang/Makefile
source/lang/LangPrimSource/Makefile
source/lang/LangSource/erase-compiler/Makefile
source/lang/LangSource/Makefile
linux/Makefile
linux/libscsynth.pc
linux/libsclang.pc
linux/examples/Makefile
linux/scel/Makefile
linux/scel/el/Makefile
linux/scel/sc/Makefile
)

# ======================================================================
# configuration summary
# ======================================================================

AC_MSG_RESULT([
------------------------------------------------------------
SuperCollider $VERSION feature summary:
------------------------------------------------------------
common
------------------------------------------------------------
 debugging support                 $feat_debug
 altivec optimizations             $feat_altivec
------------------------------------------------------------
scsynth
------------------------------------------------------------
 audio api                         $feat_audio_api
------------------------------------------------------------
plugins
------------------------------------------------------------
 X11 ugen plugins                  $feat_x11_ugens
------------------------------------------------------------
sclang
------------------------------------------------------------
 enabled                           $feat_sclang
 ALSA sequencer support            $feat_aseq
 scel emacs interface              $feat_scel
------------------------------------------------------------
])

dnl EOF ===============================================================
