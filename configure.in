dnl ===================================================================
dnl file:	configure.in
dnl contents:	autoconf template
dnl author:	stefan kersten <steve@k-hornz.de>
dnl CVS:	$Id$
dnl ===================================================================

# initialize autoconf
AC_PREREQ(2.52)
AC_INIT(source/server/scsynth_main.cpp)

# initialize automake
AM_INIT_AUTOMAKE(SuperCollider,3.0)
# config.h is not currently used
AM_CONFIG_HEADER(config.h)

# variables
SC_SYNTH_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_SYNTH_SHARED_VERSION_INFO)

SC_LANG_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_LANG_SHARED_VERSION_INFO)

SC_AUDIO_API=SC_AUDIO_API_JACK
AC_SUBST(SC_AUDIO_API)
AC_SUBST(SC_AUDIO_API_CFLAGS)
AC_SUBST(SC_AUDIO_API_LIBS)

SC_PLUGIN_DIR='"$(pkglibdir)/plugins"'
AC_SUBST(SC_PLUGIN_DIR)

SC_PLUGIN_EXT=".so"
AC_SUBST(SC_PLUGIN_EXT)

SC_PLUGIN_LOAD_SYM="load"
AC_SUBST(SC_PLUGIN_LOAD_SYM)

# check for programs
AC_PROG_CC
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LD
AM_PROG_LIBTOOL

# emacs lisp handling
AM_PATH_LISPDIR

# additional configure flags
AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[enable debugging features]))

# We need a multithreaded dmalloc for C++, so AM_WITH_DMALLOC is not
# appropriate.
AC_ARG_ENABLE(dmalloc,
AC_HELP_STRING([--enable-dmalloc],[use dmalloc (http://www.dmalloc.com) when debugging is enabled]))

AC_ARG_WITH(audio-api,
AC_HELP_STRING([--with-audio-api],[audio api to link against (jack, portaudio, default: jack)]))

AC_ARG_WITH(portaudio-libs,
AC_HELP_STRING([--with-portaudio-libs],[additional libraries required for libportaudio, e.g. "-ljack -lasound"]))

dnl NOTE: config.h is not included by any file, so we can as well omit the
dnl checks.

# check for header files
dnl AC_CHECK_HEADERS([errno.h strings.h unistd.h endian.h machine/endian.h])
dnl AC_HEADER_STDC

# check for typedefs, structs, and compiler pecularities
dnl AC_C_CONST
dnl AC_C_INLINE
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME

# check for library functions
dnl AC_FUNC_MALLOC
dnl AC_FUNC_MMAP
dnl AC_CHECK_FUNCS([bzero ftruncate gettimeofday memmove memset socket strcasecmp strchr strerror ntohs ntohl htons htonl])

# check for libraries
AC_CHECK_LIB(pthread,pthread_create,lib_pthread="-lpthread",lib_pthread="")
if test "x$lib_pthread" = "x" ; then
    AC_MSG_ERROR([libpthread (POSIX threads) required])
fi

AC_CHECK_LIB(dl,dlopen,lib_dl="-ldl",lib_dl="")
if test "x$lib_dl" = "x" ; then
    AC_MSG_ERROR([libdl (dynamic link support) required])
fi

AC_CHECK_LIB(
asound,
snd_pcm_drop,
[
    HAVE_ALSA="true"
    ALSA_LIBS="-lasound"
],
[
    HAVE_ALSA="false"
    ALSA_LIBS=""
],
[-lm])
AC_SUBST(ALSA_LIBS)

# libraries needed for all targets (except plugins)
SC_LIBS="$LIBS $lib_pthread $lib_dl"
AC_SUBST(SC_LIBS)

# check for packages
pkg_modules="sndfile >= 1.0.0"
PKG_CHECK_MODULES(SNDFILE, [$pkg_modules])
AC_SUBST(SNDFILE_CFLAGS)
AC_SUBST(SNDFILE_LIBS)

# assemble compiler flags
SC_CPPFLAGS="-Wall -DSC_LINUX -D_REENTRANT"

# add default (platform dependent) flags
cpu="${build_cpu}"
test -n "${cpu}" || cpu="${target_cpu}"
test -n "${cpu}" || cpu="${host_cpu}"

case $cpu in
    powerpc*|ppc*)
	SC_CFLAGS="-fsigned-char"
	SC_CFLAGS_OPT="-maltivec -mabi=altivec"
	;;
esac

if test "x$enable_debug" = "xyes" ; then
    # add debugging flags
    AC_MSG_NOTICE([enabling debugging symbols])
    SC_CFLAGS="-O0 -g $SC_CFLAGS"
    if test "x$enable_dmalloc" = "xyes"; then
	# add dmalloc support
	AC_MSG_NOTICE([compiling with dmalloc support])
	SC_CPPFLAGS="$SC_CPPFLAGS -DUSE_DMALLOC"
	DMALLOC_LIBS="-ldmallocthcxx"
	AC_SUBST(DMALLOC_LIBS)
    fi
else
    SC_CPPFLAGS="$SC_CPPFLAGS -DNDEBUG"
    SC_CFLAGS="$SC_CFLAGS $SC_CFLAGS_OPT"
fi

# audio api
if test "x$with_audio_api" = "x"; then
    with_audio_api="jack"
fi

case "$with_audio_api" in
    jack)
        pkg_modules="jack >= 0.40"
        PKG_CHECK_MODULES(JACK, [$pkg_modules])

        SC_AUDIO_API="SC_AUDIO_API_JACK"
        SC_AUDIO_API_CFLAGS="$JACK_CFLAGS"
        SC_AUDIO_API_LIBS="$JACK_LIBS"
        ;;

    portaudio)
        SC_AUDIO_API="SC_AUDIO_API_PORTAUDIO"
        SC_AUDIO_API_CFLAGS=""
        # TODO: actucally check for presence of libportaudio
        SC_AUDIO_API_LIBS="-lportaudio ${with_portaudio_libs}"
        ;;

    *)
        AC_MSG_ERROR([unknown audio api \"$with_audio_api\"])
esac

AC_MSG_NOTICE([using $with_audio_api audio api])

# alsa sequencer support
if test "$HAVE_ALSA" = "true"; then
    AC_MSG_NOTICE([building with alsa sequencer support])
    AC_DEFINE([HAVE_ALSA],[1],[wether ALSA libs are available])
fi

# X11 support is optional
AC_PATH_XTRA
if test "$with_x" = no || test "$no_x" = yes; then
    HAVE_X11=false
else
    if test -z "$X_DISPLAY_MISSING"; then
        HAVE_X11=true
        AC_CHECK_HEADERS(X11/Intrinsic.h)
        AC_CHECK_LIB(X11, XQueryPointer)
        SC_X11_CFLAGS="$X_CFLAGS"
        SC_X11_LIBS="$X_LIBS $X_PRE_LIBS $X_EXTRA_LIBS -lX11"
    else
        HAVE_X11=false
    fi
fi
AM_CONDITIONAL(HAVE_X11, $HAVE_X11)
AC_SUBST(SC_X11_CFLAGS)
AC_SUBST(SC_X11_LIBS)


AC_SUBST(SC_CPPFLAGS)
AC_SUBST(SC_CFLAGS)

AC_MSG_NOTICE([SC_CFLAGS: $SC_CFLAGS])

# generate output files
AC_OUTPUT(
Makefile
build/Makefile
headers/Makefile
headers/common/Makefile
headers/plugin_interface/Makefile
headers/server/Makefile
headers/lang/Makefile
source/Makefile
source/common/Makefile
source/server/Makefile
source/plugins/Makefile
source/lang/Makefile
source/lang/LangPrimSource/Makefile
source/lang/LangSource/Makefile
linux/Makefile
linux/libscsynth.pc
linux/libsclang.pc
linux/examples/Makefile
linux/scel/Makefile
linux/scel/el/Makefile
linux/scel/sc/Makefile
)

dnl EOF ===============================================================
