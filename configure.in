dnl ===================================================================
dnl file:	configure.in
dnl contents:	autoconf template
dnl author:	stefan kersten <steve@k-hornz.de>
dnl CVS:	$Id$
dnl ===================================================================

# initialize autoconf
AC_PREREQ(2.52)
AC_INIT(source/server/scsynth_main.cpp)
AC_CANONICAL_SYSTEM

# initialize automake
AM_INIT_AUTOMAKE(SuperCollider,3.0)
# config.h is not currently used
AM_CONFIG_HEADER(config.h)

# variables
SC_SYNTH_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_SYNTH_SHARED_VERSION_INFO)

SC_LANG_SHARED_VERSION_INFO="0:0:0"
AC_SUBST(SC_LANG_SHARED_VERSION_INFO)

SC_AUDIO_API=SC_AUDIO_API_JACK
AC_SUBST(SC_AUDIO_API)

SC_PLUGIN_DIR='"$(pkglibdir)/plugins"'
AC_SUBST(SC_PLUGIN_DIR)

SC_PLUGIN_EXT=".so"
AC_SUBST(SC_PLUGIN_EXT)

SC_PLUGIN_LOAD_SYM="load"
AC_SUBST(SC_PLUGIN_LOAD_SYM)

SC_LIBRARY_DIR='$(pkglibdir)/library'
AC_SUBST(SC_LIBRARY_DIR)

# check for programs
AC_PROG_CC
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LD
AM_PROG_LIBTOOL

# additional configure flags
AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[enable debugging features]))

# We need a multithreaded dmalloc for C++, so AM_WITH_DMALLOC is not
# appropriate.
AC_ARG_WITH(dmalloc,
AC_HELP_STRING([--with-dmalloc],[use dmalloc (http://www.dmalloc.com) when debugging is enabled]))

dnl NOTE: config.h is not included by any file, so we can as well omit the
dnl checks.

# check for header files
dnl AC_CHECK_HEADERS([errno.h strings.h unistd.h endian.h machine/endian.h])
dnl AC_HEADER_STDC

# check for typedefs, structs, and compiler pecularities
dnl AC_C_CONST
dnl AC_C_INLINE
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME

# check for library functions
dnl AC_FUNC_MALLOC
dnl AC_FUNC_MMAP
dnl AC_CHECK_FUNCS([bzero ftruncate gettimeofday memmove memset socket strcasecmp strchr strerror ntohs ntohl htons htonl])

# check for packages
pkg_modules="sndfile >= 1.0.0"
PKG_CHECK_MODULES(SNDFILE, [$pkg_modules])
AC_SUBST(SNDFILE_CFLAGS)
AC_SUBST(SNDFILE_LIBS)

pkg_modules="jack >= 0.40"
PKG_CHECK_MODULES(JACK, [$pkg_modules])
AC_SUBST(JACK_CFLAGS)
AC_SUBST(JACK_LIBS)

# check for libraries
AC_CHECK_LIB(pthread,pthread_create,lib_pthread="-lpthread",lib_pthread="")
if test "x$lib_pthread" = "x" ; then
    AC_MSG_ERROR([libpthread (POSIX threads) required])
fi

AC_CHECK_LIB(dl,dlopen,lib_dl="-ldl",lib_dl="")
if test "x$lib_dl" = "x" ; then
    AC_MSG_ERROR([libdl (dynamic link support) required])
fi

# assemble compiler flags
SC_CPPFLAGS="-Wall -DSC_LINUX -D_REENTRANT"

# add default (platform dependent) flags
case "$target_cpu" in
    powerpc*|ppc*)
	SC_CFLAGS="-fsigned-char"
	SC_CFLAGS_OPT="-maltivec"
	;;
esac

if test "x$enable_debug" = "xyes" ; then
    # add debugging flags
    AC_MSG_NOTICE([enabling debugging symbols])
    SC_CFLAGS="-O0 -g $SC_CFLAGS"
    if test "x$with_dmalloc" = "xyes"; then
	# add dmalloc support
	AC_MSG_NOTICE([compiling with dmalloc support])
	SC_CPPFLAGS="$SC_CPPFLAGS -DUSE_DMALLOC"
	DMALLOC_LIBS="-ldmallocthcxx"
    fi
else
    SC_CPPFLAGS="$SC_CPPFLAGS -DNDEBUG"
    SC_CFLAGS="$SC_CFLAGS $SC_CFLAGS_OPT"
fi

AC_SUBST(SC_CPPFLAGS)
AC_SUBST(SC_CFLAGS)
AC_SUBST(DMALLOC_LIBS)

# generate output files
AC_OUTPUT(
Makefile
headers/Makefile
headers/common/Makefile
headers/plugin_interface/Makefile
headers/server/Makefile
headers/lang/Makefile
source/Makefile
source/common/Makefile
source/server/Makefile
source/lang/Makefile
source/lang/LangPrimSource/Makefile
source/lang/LangSource/Makefile
linux/Makefile
linux/libscsynth.pc
dnl linux/libsclang.pc
)

dnl EOF ===============================================================
