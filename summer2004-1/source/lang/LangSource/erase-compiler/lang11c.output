Terminals which are not used:   CONST   BADTOKENConflict in state 68 between rule 50 and token BINOP resolved as reduce.Conflict in state 68 between rule 50 and token KEYBINOP resolved as reduce.Conflict in state 68 between rule 50 and token '-' resolved as reduce.Conflict in state 68 between rule 50 and token '<' resolved as reduce.Conflict in state 68 between rule 50 and token '>' resolved as reduce.Conflict in state 68 between rule 50 and token '*' resolved as reduce.Conflict in state 68 between rule 50 and token '+' resolved as reduce.Conflict in state 68 between rule 50 and token READWRITEVAR resolved as reduce.Conflict in state 68 between rule 50 and token '.' resolved as reduce.Conflict in state 149 between rule 51 and token BINOP resolved as reduce.Conflict in state 149 between rule 51 and token KEYBINOP resolved as reduce.Conflict in state 149 between rule 51 and token '-' resolved as reduce.Conflict in state 149 between rule 51 and token '<' resolved as reduce.Conflict in state 149 between rule 51 and token '>' resolved as reduce.Conflict in state 149 between rule 51 and token '*' resolved as reduce.Conflict in state 149 between rule 51 and token '+' resolved as reduce.Conflict in state 149 between rule 51 and token READWRITEVAR resolved as reduce.Conflict in state 149 between rule 51 and token '.' resolved as shift.Conflict in state 150 between rule 52 and token BINOP resolved as reduce.Conflict in state 150 between rule 52 and token KEYBINOP resolved as reduce.Conflict in state 150 between rule 52 and token '-' resolved as reduce.Conflict in state 150 between rule 52 and token '<' resolved as reduce.Conflict in state 150 between rule 52 and token '>' resolved as reduce.Conflict in state 150 between rule 52 and token '*' resolved as reduce.Conflict in state 150 between rule 52 and token '+' resolved as reduce.Conflict in state 150 between rule 52 and token READWRITEVAR resolved as reduce.Conflict in state 150 between rule 52 and token '.' resolved as shift.Conflict in state 152 between rule 59 and token BINOP resolved as shift.Conflict in state 152 between rule 59 and token KEYBINOP resolved as shift.Conflict in state 152 between rule 59 and token '-' resolved as shift.Conflict in state 152 between rule 59 and token '<' resolved as shift.Conflict in state 152 between rule 59 and token '>' resolved as shift.Conflict in state 152 between rule 59 and token '*' resolved as shift.Conflict in state 152 between rule 59 and token '+' resolved as shift.Conflict in state 152 between rule 59 and token READWRITEVAR resolved as shift.Conflict in state 152 between rule 59 and token '.' resolved as shift.Conflict in state 185 between rule 60 and token BINOP resolved as shift.Conflict in state 185 between rule 60 and token KEYBINOP resolved as shift.Conflict in state 185 between rule 60 and token '-' resolved as shift.Conflict in state 185 between rule 60 and token '<' resolved as shift.Conflict in state 185 between rule 60 and token '>' resolved as shift.Conflict in state 185 between rule 60 and token '*' resolved as shift.Conflict in state 185 between rule 60 and token '+' resolved as shift.Conflict in state 185 between rule 60 and token READWRITEVAR resolved as shift.Conflict in state 185 between rule 60 and token '.' resolved as shift.Conflict in state 192 between rule 63 and token BINOP resolved as shift.Conflict in state 192 between rule 63 and token KEYBINOP resolved as shift.Conflict in state 192 between rule 63 and token '-' resolved as shift.Conflict in state 192 between rule 63 and token '<' resolved as shift.Conflict in state 192 between rule 63 and token '>' resolved as shift.Conflict in state 192 between rule 63 and token '*' resolved as shift.Conflict in state 192 between rule 63 and token '+' resolved as shift.Conflict in state 192 between rule 63 and token READWRITEVAR resolved as shift.Conflict in state 192 between rule 63 and token '.' resolved as shift.Conflict in state 220 between rule 61 and token BINOP resolved as shift.Conflict in state 220 between rule 61 and token KEYBINOP resolved as shift.Conflict in state 220 between rule 61 and token '-' resolved as shift.Conflict in state 220 between rule 61 and token '<' resolved as shift.Conflict in state 220 between rule 61 and token '>' resolved as shift.Conflict in state 220 between rule 61 and token '*' resolved as shift.Conflict in state 220 between rule 61 and token '+' resolved as shift.Conflict in state 220 between rule 61 and token READWRITEVAR resolved as shift.Conflict in state 220 between rule 61 and token '.' resolved as shift.Conflict in state 258 between rule 62 and token BINOP resolved as shift.Conflict in state 258 between rule 62 and token KEYBINOP resolved as shift.Conflict in state 258 between rule 62 and token '-' resolved as shift.Conflict in state 258 between rule 62 and token '<' resolved as shift.Conflict in state 258 between rule 62 and token '>' resolved as shift.Conflict in state 258 between rule 62 and token '*' resolved as shift.Conflict in state 258 between rule 62 and token '+' resolved as shift.Conflict in state 258 between rule 62 and token READWRITEVAR resolved as shift.Conflict in state 258 between rule 62 and token '.' resolved as shift.Grammarrule 1    root -> classesrule 2    root -> classextensionsrule 3    root -> INTERPRET cmdlinecoderule 4    classes ->		/* empty */rule 5    classes -> classes classdefrule 6    classextensions -> classextensionrule 7    classextensions -> classextensions classextensionrule 8    classdef -> classname superclass '{' classvardecls methods '}'rule 9    classdef -> classname '[' optname ']' superclass '{' classvardecls methods '}'rule 10   classextension -> '+' classname '{' methods '}'rule 11   optname ->		/* empty */rule 12   optname -> namerule 13   superclass ->		/* empty */rule 14   superclass -> ':' classnamerule 15   classvardecls ->		/* empty */rule 16   classvardecls -> classvardecls classvardeclrule 17   classvardecl -> CLASSVAR rwslotdeflist ';'rule 18   classvardecl -> VAR rwslotdeflist ';'rule 19   methods ->		/* empty */rule 20   methods -> methods methoddefrule 21   methoddef -> name '{' argdecls funcvardecls primitive methbody '}'rule 22   methoddef -> '*' name '{' argdecls funcvardecls primitive methbody '}'rule 23   methoddef -> binop '{' argdecls funcvardecls primitive methbody '}'rule 24   methoddef -> '*' binop '{' argdecls funcvardecls primitive methbody '}'rule 25   optsemi ->		/* empty */rule 26   optsemi -> ';'rule 27   optcomma ->		/* empty */rule 28   optcomma -> ','rule 29   funcbody -> funretvalrule 30   funcbody -> exprseq funretvalrule 31   cmdlinecode -> '(' funcvardecls1 funcbody ')'rule 32   cmdlinecode -> funcvardecls1 funcbodyrule 33   cmdlinecode -> funcbodyrule 34   methbody -> retvalrule 35   methbody -> exprseq retvalrule 36   primitive ->		/* empty */rule 37   primitive -> primname optsemirule 38   retval ->		/* empty */rule 39   retval -> '^' expr optsemirule 40   funretval ->		/* empty */rule 41   funretval -> '^' expr optsemirule 42   expr -> pushliteralrule 43   expr -> namerule 44   expr -> '~' namerule 45   expr -> pseudovarrule 46   expr -> classnamerule 47   expr -> classname '(' keyarglist1 ')'rule 48   expr -> classname '(' arglist1 optkeyarglist ')'rule 49   expr -> '(' exprseq ')'rule 50   expr -> '`' exprrule 51   expr -> expr binop exprrule 52   expr -> expr keybinop exprrule 53   expr -> name '(' arglist1 optkeyarglist ')'rule 54   expr -> expr '.' name '(' keyarglist1 ')'rule 55   expr -> expr '.' name '(' arglist1 optkeyarglist ')'rule 56   expr -> expr '.' namerule 57   expr -> '[' arglistc ']'rule 58   expr -> classname '[' arglistc ']'rule 59   expr -> name '=' exprrule 60   expr -> '~' name '=' exprrule 61   expr -> expr '.' name '=' exprrule 62   expr -> name '(' arglist1 optkeyarglist ')' '=' exprrule 63   expr -> '#' mavars '=' exprrule 64   exprn -> exprrule 65   exprn -> exprn ';' exprrule 66   exprseq -> exprn optsemirule 67   arglistc ->		/* empty */rule 68   arglistc -> arglist1 optcommarule 69   arglist1 -> exprseqrule 70   arglist1 -> arglist1 ',' exprseqrule 71   keyarglist1 -> keyargrule 72   keyarglist1 -> keyarglist1 ',' keyargrule 73   keyarg -> keybinop exprseqrule 74   optkeyarglist ->		/* empty */rule 75   optkeyarglist -> ',' keyarglist1rule 76   mavars -> mavarlistrule 77   mavars -> mavarlist ELLIPSIS namerule 78   mavarlist -> namerule 79   mavarlist -> mavarlist ',' namerule 80   slotliteral -> integerrule 81   slotliteral -> floatprule 82   slotliteral -> asciirule 83   slotliteral -> stringrule 84   slotliteral -> symbolrule 85   slotliteral -> rgbcolorrule 86   slotliteral -> trueobjrule 87   slotliteral -> falseobjrule 88   slotliteral -> nilobjrule 89   slotliteral -> infobjrule 90   slotliteral -> listlitrule 91   pushliteral -> integerrule 92   pushliteral -> floatprule 93   pushliteral -> asciirule 94   pushliteral -> stringrule 95   pushliteral -> symbolrule 96   pushliteral -> rgbcolorrule 97   pushliteral -> trueobjrule 98   pushliteral -> falseobjrule 99   pushliteral -> nilobjrule 100  pushliteral -> infobjrule 101  pushliteral -> blockrule 102  pushliteral -> listlitrule 103  listliteral -> integerrule 104  listliteral -> floatprule 105  listliteral -> asciirule 106  listliteral -> stringrule 107  listliteral -> symbolrule 108  listliteral -> rgbcolorrule 109  listliteral -> trueobjrule 110  listliteral -> falseobjrule 111  listliteral -> nilobjrule 112  listliteral -> infobjrule 113  listliteral -> listlit2rule 114  rgbcolor -> RGB '(' integer ',' integer ',' integer ')'rule 115  rgbcolor -> RGB '(' integer ',' integer ',' integer ',' integer ')'rule 116  block -> '{' argdecls funcvardecls funcbody '}'rule 117  block -> '#' '{' argdecls funcvardecls funcbody '}'rule 118  funcvardecls ->		/* empty */rule 119  funcvardecls -> funcvardecls funcvardeclrule 120  funcvardecls1 -> funcvardeclrule 121  funcvardecls1 -> funcvardecls1 funcvardeclrule 122  funcvardecl -> VAR slotdeflist ';'rule 123  argdecls ->		/* empty */rule 124  argdecls -> ARG slotdeflist ';'rule 125  argdecls -> ARG slotdeflist0 ELLIPSIS name ';'rule 126  slotdeflist0 ->		/* empty */rule 127  slotdeflist0 -> slotdeflistrule 128  slotdeflist -> slotdefrule 129  slotdeflist -> slotdeflist ',' slotdefrule 130  slotdef -> namerule 131  slotdef -> name '=' slotliteralrule 132  rwslotdeflist -> rwslotdefrule 133  rwslotdeflist -> rwslotdeflist ',' rwslotdefrule 134  rwslotdef -> rwspec namerule 135  rwslotdef -> rwspec name '=' slotliteralrule 136  listlit -> '#' '[' literallistc ']'rule 137  listlit -> '#' classname '[' literallistc ']'rule 138  listlit2 -> '[' literallistc ']'rule 139  listlit2 -> classname '[' literallistc ']'rule 140  literallistc ->		/* empty */rule 141  literallistc -> literallist1 optcommarule 142  literallist1 -> listliteralrule 143  literallist1 -> literallist1 ',' listliteralrule 144  rwspec ->		/* empty */rule 145  rwspec -> '<'rule 146  rwspec -> READWRITEVARrule 147  rwspec -> '>'rule 148  integer -> INTEGERrule 149  integer -> '-' INTEGERrule 150  floatr -> FLOATrule 151  floatr -> '-' FLOATrule 152  pie -> PIErule 153  floatp -> floatrrule 154  floatp -> floatr pierule 155  floatp -> integer pierule 156  floatp -> pierule 157  floatp -> '-' pierule 158  name -> NAMErule 159  classname -> CLASSNAMErule 160  primname -> PRIMITIVENAMErule 161  trueobj -> TRUEOBJrule 162  falseobj -> FALSEOBJrule 163  nilobj -> NILOBJrule 164  infobj -> INFINITUMOBJrule 165  ascii -> ASCIIrule 166  symbol -> SYMBOLrule 167  string -> string1rule 168  string -> string string1rule 169  string1 -> STRINGrule 170  pseudovar -> PSEUDOVARrule 171  binop -> BINOPrule 172  binop -> READWRITEVARrule 173  binop -> '<'rule 174  binop -> '>'rule 175  binop -> '-'rule 176  binop -> '*'rule 177  binop -> '+'rule 178  keybinop -> KEYBINOPTerminals, with rules where they appear$ (-1)'#' (35) 63 117 136 137'(' (40) 31 47 48 49 53 54 55 62 114 115')' (41) 31 47 48 49 53 54 55 62 114 115'*' (42) 22 24 176'+' (43) 10 177',' (44) 28 70 72 75 79 114 115 129 133 143'-' (45) 149 151 157 175'.' (46) 54 55 56 61':' (58) 14';' (59) 17 18 26 65 122 124 125'<' (60) 145 173'=' (61) 59 60 61 62 63 131 135'>' (62) 147 174'[' (91) 9 57 58 136 137 138 139']' (93) 9 57 58 136 137 138 139'^' (94) 39 41'`' (96) 50'{' (123) 8 9 10 21 22 23 24 116 117'}' (125) 8 9 10 21 22 23 24 116 117'~' (126) 44 60error (256)NAME (258) 158INTEGER (259) 148 149FLOAT (260) 150 151SYMBOL (261) 166STRING (262) 169ASCII (263) 165PRIMITIVENAME (264) 160CLASSNAME (265) 159VAR (266) 18 122ARG (267) 124 125CLASSVAR (268) 17CONST (269)RGB (270) 114 115NILOBJ (271) 163TRUEOBJ (272) 161FALSEOBJ (273) 162INFINITUMOBJ (274) 164PSEUDOVAR (275) 170ELLIPSIS (276) 77 125PIE (277) 152BADTOKEN (278)INTERPRET (279) 3BINOP (280) 171KEYBINOP (281) 178READWRITEVAR (282) 146 172UMINUS (283)Nonterminals, with rules where they appearroot (49)    on left: 1 2 3classes (50)    on left: 4 5, on right: 1 5classextensions (51)    on left: 6 7, on right: 2 7classdef (52)    on left: 8 9, on right: 5classextension (53)    on left: 10, on right: 6 7optname (54)    on left: 11 12, on right: 9superclass (55)    on left: 13 14, on right: 8 9classvardecls (56)    on left: 15 16, on right: 8 9 16classvardecl (57)    on left: 17 18, on right: 16methods (58)    on left: 19 20, on right: 8 9 10 20methoddef (59)    on left: 21 22 23 24, on right: 20optsemi (60)    on left: 25 26, on right: 37 39 41 66optcomma (61)    on left: 27 28, on right: 68 141funcbody (62)    on left: 29 30, on right: 31 32 33 116 117cmdlinecode (63)    on left: 31 32 33, on right: 3methbody (64)    on left: 34 35, on right: 21 22 23 24primitive (65)    on left: 36 37, on right: 21 22 23 24retval (66)    on left: 38 39, on right: 34 35funretval (67)    on left: 40 41, on right: 29 30expr (68)    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59    60 61 62 63, on right: 39 41 50 51 52 54 55 56 59 60 61 62 63 64    65exprn (69)    on left: 64 65, on right: 65 66exprseq (70)    on left: 66, on right: 30 35 49 69 70 73arglistc (71)    on left: 67 68, on right: 57 58arglist1 (72)    on left: 69 70, on right: 48 53 55 62 68 70keyarglist1 (73)    on left: 71 72, on right: 47 54 72 75keyarg (74)    on left: 73, on right: 71 72optkeyarglist (75)    on left: 74 75, on right: 48 53 55 62mavars (76)    on left: 76 77, on right: 63mavarlist (77)    on left: 78 79, on right: 76 77 79slotliteral (78)    on left: 80 81 82 83 84 85 86 87 88 89 90, on right: 131 135pushliteral (79)    on left: 91 92 93 94 95 96 97 98 99 100 101 102,    on right: 42listliteral (80)    on left: 103 104 105 106 107 108 109 110 111 112 113,    on right: 142 143rgbcolor (81)    on left: 114 115, on right: 85 96 108block (82)    on left: 116 117, on right: 101funcvardecls (83)    on left: 118 119, on right: 21 22 23 24 116 117 119funcvardecls1 (84)    on left: 120 121, on right: 31 32 121funcvardecl (85)    on left: 122, on right: 119 120 121argdecls (86)    on left: 123 124 125, on right: 21 22 23 24 116 117slotdeflist0 (87)    on left: 126 127, on right: 125slotdeflist (88)    on left: 128 129, on right: 122 124 127 129slotdef (89)    on left: 130 131, on right: 128 129rwslotdeflist (90)    on left: 132 133, on right: 17 18 133rwslotdef (91)    on left: 134 135, on right: 132 133listlit (92)    on left: 136 137, on right: 90 102listlit2 (93)    on left: 138 139, on right: 113literallistc (94)    on left: 140 141, on right: 136 137 138 139literallist1 (95)    on left: 142 143, on right: 141 143rwspec (96)    on left: 144 145 146 147, on right: 134 135integer (97)    on left: 148 149, on right: 80 91 103 114 115 155floatr (98)    on left: 150 151, on right: 153 154pie (99)    on left: 152, on right: 154 155 156 157floatp (100)    on left: 153 154 155 156 157, on right: 81 92 104name (101)    on left: 158, on right: 12 21 22 43 44 53 54 55 56 59 60 61 62    77 78 79 125 130 131 134 135classname (102)    on left: 159, on right: 8 9 10 14 46 47 48 58 137 139primname (103)    on left: 160, on right: 37trueobj (104)    on left: 161, on right: 86 97 109falseobj (105)    on left: 162, on right: 87 98 110nilobj (106)    on left: 163, on right: 88 99 111infobj (107)    on left: 164, on right: 89 100 112ascii (108)    on left: 165, on right: 82 93 105symbol (109)    on left: 166, on right: 84 95 107string (110)    on left: 167 168, on right: 83 94 106 168string1 (111)    on left: 169, on right: 167 168pseudovar (112)    on left: 170, on right: 45binop (113)    on left: 171 172 173 174 175 176 177, on right: 23 24 51keybinop (114)    on left: 178, on right: 52 73state 0    INTERPRET	shift, and go to state 1    '+' 	shift, and go to state 2    $default	reduce using rule 4 (classes)    root	go to state 300    classes	go to state 3    classextensions	go to state 4    classextension	go to state 5state 1    root  ->  INTERPRET . cmdlinecode   (rule 3)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 25    '^' 	shift, and go to state 26    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 40 (funretval)    funcbody	go to state 29    cmdlinecode	go to state 30    funretval	go to state 31    expr	go to state 32    exprn	go to state 33    exprseq	go to state 34    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecls1	go to state 38    funcvardecl	go to state 39    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 2    classextension  ->  '+' . classname '{' methods '}'   (rule 10)    CLASSNAME	shift, and go to state 12    classname	go to state 56state 3    root  ->  classes .   (rule 1)    classes  ->  classes . classdef   (rule 5)    CLASSNAME	shift, and go to state 12    $default	reduce using rule 1 (root)    classdef	go to state 57    classname	go to state 58state 4    root  ->  classextensions .   (rule 2)    classextensions  ->  classextensions . classextension   (rule 7)    '+' 	shift, and go to state 2    $default	reduce using rule 2 (root)    classextension	go to state 59state 5    classextensions  ->  classextension .   (rule 6)    $default	reduce using rule 6 (classextensions)state 6    name  ->  NAME .   (rule 158)    $default	reduce using rule 158 (name)state 7    integer  ->  INTEGER .   (rule 148)    $default	reduce using rule 148 (integer)state 8    floatr  ->  FLOAT .   (rule 150)    $default	reduce using rule 150 (floatr)state 9    symbol  ->  SYMBOL .   (rule 166)    $default	reduce using rule 166 (symbol)state 10    string1  ->  STRING .   (rule 169)    $default	reduce using rule 169 (string1)state 11    ascii  ->  ASCII .   (rule 165)    $default	reduce using rule 165 (ascii)state 12    classname  ->  CLASSNAME .   (rule 159)    $default	reduce using rule 159 (classname)state 13    funcvardecl  ->  VAR . slotdeflist ';'   (rule 122)    NAME	shift, and go to state 6    slotdeflist	go to state 60    slotdef	go to state 61    name	go to state 62state 14    rgbcolor  ->  RGB . '(' integer ',' integer ',' integer ')'   (rule 114)    rgbcolor  ->  RGB . '(' integer ',' integer ',' integer ',' integer ')'   (rule 115)    '(' 	shift, and go to state 63state 15    nilobj  ->  NILOBJ .   (rule 163)    $default	reduce using rule 163 (nilobj)state 16    trueobj  ->  TRUEOBJ .   (rule 161)    $default	reduce using rule 161 (trueobj)state 17    falseobj  ->  FALSEOBJ .   (rule 162)    $default	reduce using rule 162 (falseobj)state 18    infobj  ->  INFINITUMOBJ .   (rule 164)    $default	reduce using rule 164 (infobj)state 19    pseudovar  ->  PSEUDOVAR .   (rule 170)    $default	reduce using rule 170 (pseudovar)state 20    pie  ->  PIE .   (rule 152)    $default	reduce using rule 152 (pie)state 21    integer  ->  '-' . INTEGER   (rule 149)    floatr  ->  '-' . FLOAT   (rule 151)    floatp  ->  '-' . pie   (rule 157)    INTEGER	shift, and go to state 64    FLOAT	shift, and go to state 65    PIE 	shift, and go to state 20    pie 	go to state 66state 22    expr  ->  '`' . expr   (rule 50)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 68    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 23    block  ->  '{' . argdecls funcvardecls funcbody '}'   (rule 116)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 70state 24    expr  ->  '[' . arglistc ']'   (rule 57)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 67 (arglistc)    expr	go to state 32    exprn	go to state 33    exprseq	go to state 71    arglistc	go to state 72    arglist1	go to state 73    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 25    cmdlinecode  ->  '(' . funcvardecls1 funcbody ')'   (rule 31)    expr  ->  '(' . exprseq ')'   (rule 49)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 74    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecls1	go to state 75    funcvardecl	go to state 39    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 26    funretval  ->  '^' . expr optsemi   (rule 41)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 76    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 27    expr  ->  '~' . name   (rule 44)    expr  ->  '~' . name '=' expr   (rule 60)    NAME	shift, and go to state 6    name	go to state 77state 28    expr  ->  '#' . mavars '=' expr   (rule 63)    block  ->  '#' . '{' argdecls funcvardecls funcbody '}'   (rule 117)    listlit  ->  '#' . '[' literallistc ']'   (rule 136)    listlit  ->  '#' . classname '[' literallistc ']'   (rule 137)    NAME	shift, and go to state 6    CLASSNAME	shift, and go to state 12    '{' 	shift, and go to state 78    '[' 	shift, and go to state 79    mavars	go to state 80    mavarlist	go to state 81    name	go to state 82    classname	go to state 83state 29    cmdlinecode  ->  funcbody .   (rule 33)    $default	reduce using rule 33 (cmdlinecode)state 30    root  ->  INTERPRET cmdlinecode .   (rule 3)    $default	reduce using rule 3 (root)state 31    funcbody  ->  funretval .   (rule 29)    $default	reduce using rule 29 (funcbody)state 32    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    exprn  ->  expr .   (rule 64)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 64 (exprn)    binop	go to state 93    keybinop	go to state 94state 33    exprn  ->  exprn . ';' expr   (rule 65)    exprseq  ->  exprn . optsemi   (rule 66)    ';' 	shift, and go to state 95    $default	reduce using rule 25 (optsemi)    optsemi	go to state 96state 34    funcbody  ->  exprseq . funretval   (rule 30)    '^' 	shift, and go to state 26    $default	reduce using rule 40 (funretval)    funretval	go to state 97state 35    expr  ->  pushliteral .   (rule 42)    $default	reduce using rule 42 (expr)state 36    pushliteral  ->  rgbcolor .   (rule 96)    $default	reduce using rule 96 (pushliteral)state 37    pushliteral  ->  block .   (rule 101)    $default	reduce using rule 101 (pushliteral)state 38    cmdlinecode  ->  funcvardecls1 . funcbody   (rule 32)    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 121)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 26    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 40 (funretval)    funcbody	go to state 98    funretval	go to state 31    expr	go to state 32    exprn	go to state 33    exprseq	go to state 34    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecl	go to state 99    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 39    funcvardecls1  ->  funcvardecl .   (rule 120)    $default	reduce using rule 120 (funcvardecls1)state 40    pushliteral  ->  listlit .   (rule 102)    $default	reduce using rule 102 (pushliteral)state 41    pushliteral  ->  integer .   (rule 91)    floatp  ->  integer . pie   (rule 155)    PIE 	shift, and go to state 20    $default	reduce using rule 91 (pushliteral)    pie 	go to state 100state 42    floatp  ->  floatr .   (rule 153)    floatp  ->  floatr . pie   (rule 154)    PIE 	shift, and go to state 20    $default	reduce using rule 153 (floatp)    pie 	go to state 101state 43    floatp  ->  pie .   (rule 156)    $default	reduce using rule 156 (floatp)state 44    pushliteral  ->  floatp .   (rule 92)    $default	reduce using rule 92 (pushliteral)state 45    expr  ->  name .   (rule 43)    expr  ->  name . '(' arglist1 optkeyarglist ')'   (rule 53)    expr  ->  name . '=' expr   (rule 59)    expr  ->  name . '(' arglist1 optkeyarglist ')' '=' expr   (rule 62)    '=' 	shift, and go to state 102    '(' 	shift, and go to state 103    $default	reduce using rule 43 (expr)state 46    expr  ->  classname .   (rule 46)    expr  ->  classname . '(' keyarglist1 ')'   (rule 47)    expr  ->  classname . '(' arglist1 optkeyarglist ')'   (rule 48)    expr  ->  classname . '[' arglistc ']'   (rule 58)    '[' 	shift, and go to state 104    '(' 	shift, and go to state 105    $default	reduce using rule 46 (expr)state 47    pushliteral  ->  trueobj .   (rule 97)    $default	reduce using rule 97 (pushliteral)state 48    pushliteral  ->  falseobj .   (rule 98)    $default	reduce using rule 98 (pushliteral)state 49    pushliteral  ->  nilobj .   (rule 99)    $default	reduce using rule 99 (pushliteral)state 50    pushliteral  ->  infobj .   (rule 100)    $default	reduce using rule 100 (pushliteral)state 51    pushliteral  ->  ascii .   (rule 93)    $default	reduce using rule 93 (pushliteral)state 52    pushliteral  ->  symbol .   (rule 95)    $default	reduce using rule 95 (pushliteral)state 53    pushliteral  ->  string .   (rule 94)    string  ->  string . string1   (rule 168)    STRING	shift, and go to state 10    $default	reduce using rule 94 (pushliteral)    string1	go to state 106state 54    string  ->  string1 .   (rule 167)    $default	reduce using rule 167 (string)state 55    expr  ->  pseudovar .   (rule 45)    $default	reduce using rule 45 (expr)state 56    classextension  ->  '+' classname . '{' methods '}'   (rule 10)    '{' 	shift, and go to state 107state 57    classes  ->  classes classdef .   (rule 5)    $default	reduce using rule 5 (classes)state 58    classdef  ->  classname . superclass '{' classvardecls methods '}'   (rule 8)    classdef  ->  classname . '[' optname ']' superclass '{' classvardecls methods '}'   (rule 9)    '[' 	shift, and go to state 108    ':' 	shift, and go to state 109    $default	reduce using rule 13 (superclass)    superclass	go to state 110state 59    classextensions  ->  classextensions classextension .   (rule 7)    $default	reduce using rule 7 (classextensions)state 60    funcvardecl  ->  VAR slotdeflist . ';'   (rule 122)    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 129)    ';' 	shift, and go to state 111    ',' 	shift, and go to state 112state 61    slotdeflist  ->  slotdef .   (rule 128)    $default	reduce using rule 128 (slotdeflist)state 62    slotdef  ->  name .   (rule 130)    slotdef  ->  name . '=' slotliteral   (rule 131)    '=' 	shift, and go to state 113    $default	reduce using rule 130 (slotdef)state 63    rgbcolor  ->  RGB '(' . integer ',' integer ',' integer ')'   (rule 114)    rgbcolor  ->  RGB '(' . integer ',' integer ',' integer ',' integer ')'   (rule 115)    INTEGER	shift, and go to state 7    '-' 	shift, and go to state 114    integer	go to state 115state 64    integer  ->  '-' INTEGER .   (rule 149)    $default	reduce using rule 149 (integer)state 65    floatr  ->  '-' FLOAT .   (rule 151)    $default	reduce using rule 151 (floatr)state 66    floatp  ->  '-' pie .   (rule 157)    $default	reduce using rule 157 (floatp)state 67    expr  ->  '(' . exprseq ')'   (rule 49)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 74    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 68    expr  ->  '`' expr .   (rule 50)    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    $default	reduce using rule 50 (expr)    binop	go to state 93    keybinop	go to state 94state 69    argdecls  ->  ARG . slotdeflist ';'   (rule 124)    argdecls  ->  ARG . slotdeflist0 ELLIPSIS name ';'   (rule 125)    NAME	shift, and go to state 6    $default	reduce using rule 126 (slotdeflist0)    slotdeflist0	go to state 116    slotdeflist	go to state 117    slotdef	go to state 61    name	go to state 62state 70    block  ->  '{' argdecls . funcvardecls funcbody '}'   (rule 116)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 118state 71    arglist1  ->  exprseq .   (rule 69)    $default	reduce using rule 69 (arglist1)state 72    expr  ->  '[' arglistc . ']'   (rule 57)    ']' 	shift, and go to state 119state 73    arglistc  ->  arglist1 . optcomma   (rule 68)    arglist1  ->  arglist1 . ',' exprseq   (rule 70)    ',' 	shift, and go to state 120    $default	reduce using rule 27 (optcomma)    optcomma	go to state 121state 74    expr  ->  '(' exprseq . ')'   (rule 49)    ')' 	shift, and go to state 122state 75    cmdlinecode  ->  '(' funcvardecls1 . funcbody ')'   (rule 31)    funcvardecls1  ->  funcvardecls1 . funcvardecl   (rule 121)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 26    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 40 (funretval)    funcbody	go to state 123    funretval	go to state 31    expr	go to state 32    exprn	go to state 33    exprseq	go to state 34    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecl	go to state 99    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 76    funretval  ->  '^' expr . optsemi   (rule 41)    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    ';' 	shift, and go to state 124    $default	reduce using rule 25 (optsemi)    optsemi	go to state 125    binop	go to state 93    keybinop	go to state 94state 77    expr  ->  '~' name .   (rule 44)    expr  ->  '~' name . '=' expr   (rule 60)    '=' 	shift, and go to state 126    $default	reduce using rule 44 (expr)state 78    block  ->  '#' '{' . argdecls funcvardecls funcbody '}'   (rule 117)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 127state 79    listlit  ->  '#' '[' . literallistc ']'   (rule 136)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '[' 	shift, and go to state 128    $default	reduce using rule 140 (literallistc)    listliteral	go to state 129    rgbcolor	go to state 130    listlit2	go to state 131    literallistc	go to state 132    literallist1	go to state 133    integer	go to state 134    floatr	go to state 42    pie 	go to state 43    floatp	go to state 135    classname	go to state 136    trueobj	go to state 137    falseobj	go to state 138    nilobj	go to state 139    infobj	go to state 140    ascii	go to state 141    symbol	go to state 142    string	go to state 143    string1	go to state 54state 80    expr  ->  '#' mavars . '=' expr   (rule 63)    '=' 	shift, and go to state 144state 81    mavars  ->  mavarlist .   (rule 76)    mavars  ->  mavarlist . ELLIPSIS name   (rule 77)    mavarlist  ->  mavarlist . ',' name   (rule 79)    ELLIPSIS	shift, and go to state 145    ',' 	shift, and go to state 146    $default	reduce using rule 76 (mavars)state 82    mavarlist  ->  name .   (rule 78)    $default	reduce using rule 78 (mavarlist)state 83    listlit  ->  '#' classname . '[' literallistc ']'   (rule 137)    '[' 	shift, and go to state 147state 84    binop  ->  BINOP .   (rule 171)    $default	reduce using rule 171 (binop)state 85    keybinop  ->  KEYBINOP .   (rule 178)    $default	reduce using rule 178 (keybinop)state 86    binop  ->  '-' .   (rule 175)    $default	reduce using rule 175 (binop)state 87    binop  ->  '<' .   (rule 173)    $default	reduce using rule 173 (binop)state 88    binop  ->  '>' .   (rule 174)    $default	reduce using rule 174 (binop)state 89    binop  ->  '*' .   (rule 176)    $default	reduce using rule 176 (binop)state 90    binop  ->  '+' .   (rule 177)    $default	reduce using rule 177 (binop)state 91    binop  ->  READWRITEVAR .   (rule 172)    $default	reduce using rule 172 (binop)state 92    expr  ->  expr '.' . name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr '.' . name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr '.' . name   (rule 56)    expr  ->  expr '.' . name '=' expr   (rule 61)    NAME	shift, and go to state 6    name	go to state 148state 93    expr  ->  expr binop . expr   (rule 51)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 149    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 94    expr  ->  expr keybinop . expr   (rule 52)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 150    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 95    optsemi  ->  ';' .   (rule 26)    exprn  ->  exprn ';' . expr   (rule 65)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 26 (optsemi)    expr	go to state 151    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 96    exprseq  ->  exprn optsemi .   (rule 66)    $default	reduce using rule 66 (exprseq)state 97    funcbody  ->  exprseq funretval .   (rule 30)    $default	reduce using rule 30 (funcbody)state 98    cmdlinecode  ->  funcvardecls1 funcbody .   (rule 32)    $default	reduce using rule 32 (cmdlinecode)state 99    funcvardecls1  ->  funcvardecls1 funcvardecl .   (rule 121)    $default	reduce using rule 121 (funcvardecls1)state 100    floatp  ->  integer pie .   (rule 155)    $default	reduce using rule 155 (floatp)state 101    floatp  ->  floatr pie .   (rule 154)    $default	reduce using rule 154 (floatp)state 102    expr  ->  name '=' . expr   (rule 59)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 152    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 103    expr  ->  name '(' . arglist1 optkeyarglist ')'   (rule 53)    expr  ->  name '(' . arglist1 optkeyarglist ')' '=' expr   (rule 62)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 71    arglist1	go to state 153    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 104    expr  ->  classname '[' . arglistc ']'   (rule 58)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 67 (arglistc)    expr	go to state 32    exprn	go to state 33    exprseq	go to state 71    arglistc	go to state 154    arglist1	go to state 73    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 105    expr  ->  classname '(' . keyarglist1 ')'   (rule 47)    expr  ->  classname '(' . arglist1 optkeyarglist ')'   (rule 48)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 71    arglist1	go to state 155    keyarglist1	go to state 156    keyarg	go to state 157    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55    keybinop	go to state 158state 106    string  ->  string string1 .   (rule 168)    $default	reduce using rule 168 (string)state 107    classextension  ->  '+' classname '{' . methods '}'   (rule 10)    $default	reduce using rule 19 (methods)    methods	go to state 159state 108    classdef  ->  classname '[' . optname ']' superclass '{' classvardecls methods '}'   (rule 9)    NAME	shift, and go to state 6    $default	reduce using rule 11 (optname)    optname	go to state 160    name	go to state 161state 109    superclass  ->  ':' . classname   (rule 14)    CLASSNAME	shift, and go to state 12    classname	go to state 162state 110    classdef  ->  classname superclass . '{' classvardecls methods '}'   (rule 8)    '{' 	shift, and go to state 163state 111    funcvardecl  ->  VAR slotdeflist ';' .   (rule 122)    $default	reduce using rule 122 (funcvardecl)state 112    slotdeflist  ->  slotdeflist ',' . slotdef   (rule 129)    NAME	shift, and go to state 6    slotdef	go to state 164    name	go to state 62state 113    slotdef  ->  name '=' . slotliteral   (rule 131)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '#' 	shift, and go to state 165    slotliteral	go to state 166    rgbcolor	go to state 167    listlit	go to state 168    integer	go to state 169    floatr	go to state 42    pie 	go to state 43    floatp	go to state 170    trueobj	go to state 171    falseobj	go to state 172    nilobj	go to state 173    infobj	go to state 174    ascii	go to state 175    symbol	go to state 176    string	go to state 177    string1	go to state 54state 114    integer  ->  '-' . INTEGER   (rule 149)    INTEGER	shift, and go to state 64state 115    rgbcolor  ->  RGB '(' integer . ',' integer ',' integer ')'   (rule 114)    rgbcolor  ->  RGB '(' integer . ',' integer ',' integer ',' integer ')'   (rule 115)    ',' 	shift, and go to state 178state 116    argdecls  ->  ARG slotdeflist0 . ELLIPSIS name ';'   (rule 125)    ELLIPSIS	shift, and go to state 179state 117    argdecls  ->  ARG slotdeflist . ';'   (rule 124)    slotdeflist0  ->  slotdeflist .   (rule 127)    slotdeflist  ->  slotdeflist . ',' slotdef   (rule 129)    ';' 	shift, and go to state 180    ',' 	shift, and go to state 112    $default	reduce using rule 127 (slotdeflist0)state 118    block  ->  '{' argdecls funcvardecls . funcbody '}'   (rule 116)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 26    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 40 (funretval)    funcbody	go to state 181    funretval	go to state 31    expr	go to state 32    exprn	go to state 33    exprseq	go to state 34    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecl	go to state 182    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 119    expr  ->  '[' arglistc ']' .   (rule 57)    $default	reduce using rule 57 (expr)state 120    optcomma  ->  ',' .   (rule 28)    arglist1  ->  arglist1 ',' . exprseq   (rule 70)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 28 (optcomma)    expr	go to state 32    exprn	go to state 33    exprseq	go to state 183    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 121    arglistc  ->  arglist1 optcomma .   (rule 68)    $default	reduce using rule 68 (arglistc)state 122    expr  ->  '(' exprseq ')' .   (rule 49)    $default	reduce using rule 49 (expr)state 123    cmdlinecode  ->  '(' funcvardecls1 funcbody . ')'   (rule 31)    ')' 	shift, and go to state 184state 124    optsemi  ->  ';' .   (rule 26)    $default	reduce using rule 26 (optsemi)state 125    funretval  ->  '^' expr optsemi .   (rule 41)    $default	reduce using rule 41 (funretval)state 126    expr  ->  '~' name '=' . expr   (rule 60)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 185    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 127    block  ->  '#' '{' argdecls . funcvardecls funcbody '}'   (rule 117)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 186state 128    listlit2  ->  '[' . literallistc ']'   (rule 138)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '[' 	shift, and go to state 128    $default	reduce using rule 140 (literallistc)    listliteral	go to state 129    rgbcolor	go to state 130    listlit2	go to state 131    literallistc	go to state 187    literallist1	go to state 133    integer	go to state 134    floatr	go to state 42    pie 	go to state 43    floatp	go to state 135    classname	go to state 136    trueobj	go to state 137    falseobj	go to state 138    nilobj	go to state 139    infobj	go to state 140    ascii	go to state 141    symbol	go to state 142    string	go to state 143    string1	go to state 54state 129    literallist1  ->  listliteral .   (rule 142)    $default	reduce using rule 142 (literallist1)state 130    listliteral  ->  rgbcolor .   (rule 108)    $default	reduce using rule 108 (listliteral)state 131    listliteral  ->  listlit2 .   (rule 113)    $default	reduce using rule 113 (listliteral)state 132    listlit  ->  '#' '[' literallistc . ']'   (rule 136)    ']' 	shift, and go to state 188state 133    literallistc  ->  literallist1 . optcomma   (rule 141)    literallist1  ->  literallist1 . ',' listliteral   (rule 143)    ',' 	shift, and go to state 189    $default	reduce using rule 27 (optcomma)    optcomma	go to state 190state 134    listliteral  ->  integer .   (rule 103)    floatp  ->  integer . pie   (rule 155)    PIE 	shift, and go to state 20    $default	reduce using rule 103 (listliteral)    pie 	go to state 100state 135    listliteral  ->  floatp .   (rule 104)    $default	reduce using rule 104 (listliteral)state 136    listlit2  ->  classname . '[' literallistc ']'   (rule 139)    '[' 	shift, and go to state 191state 137    listliteral  ->  trueobj .   (rule 109)    $default	reduce using rule 109 (listliteral)state 138    listliteral  ->  falseobj .   (rule 110)    $default	reduce using rule 110 (listliteral)state 139    listliteral  ->  nilobj .   (rule 111)    $default	reduce using rule 111 (listliteral)state 140    listliteral  ->  infobj .   (rule 112)    $default	reduce using rule 112 (listliteral)state 141    listliteral  ->  ascii .   (rule 105)    $default	reduce using rule 105 (listliteral)state 142    listliteral  ->  symbol .   (rule 107)    $default	reduce using rule 107 (listliteral)state 143    listliteral  ->  string .   (rule 106)    string  ->  string . string1   (rule 168)    STRING	shift, and go to state 10    $default	reduce using rule 106 (listliteral)    string1	go to state 106state 144    expr  ->  '#' mavars '=' . expr   (rule 63)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 192    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 145    mavars  ->  mavarlist ELLIPSIS . name   (rule 77)    NAME	shift, and go to state 6    name	go to state 193state 146    mavarlist  ->  mavarlist ',' . name   (rule 79)    NAME	shift, and go to state 6    name	go to state 194state 147    listlit  ->  '#' classname '[' . literallistc ']'   (rule 137)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '[' 	shift, and go to state 128    $default	reduce using rule 140 (literallistc)    listliteral	go to state 129    rgbcolor	go to state 130    listlit2	go to state 131    literallistc	go to state 195    literallist1	go to state 133    integer	go to state 134    floatr	go to state 42    pie 	go to state 43    floatp	go to state 135    classname	go to state 136    trueobj	go to state 137    falseobj	go to state 138    nilobj	go to state 139    infobj	go to state 140    ascii	go to state 141    symbol	go to state 142    string	go to state 143    string1	go to state 54state 148    expr  ->  expr '.' name . '(' keyarglist1 ')'   (rule 54)    expr  ->  expr '.' name . '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr '.' name .   (rule 56)    expr  ->  expr '.' name . '=' expr   (rule 61)    '=' 	shift, and go to state 196    '(' 	shift, and go to state 197    $default	reduce using rule 56 (expr)state 149    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr binop expr .   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    '.' 	shift, and go to state 92    $default	reduce using rule 51 (expr)    binop	go to state 93    keybinop	go to state 94state 150    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr keybinop expr .   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    '.' 	shift, and go to state 92    $default	reduce using rule 52 (expr)    binop	go to state 93    keybinop	go to state 94state 151    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    exprn  ->  exprn ';' expr .   (rule 65)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 65 (exprn)    binop	go to state 93    keybinop	go to state 94state 152    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  name '=' expr .   (rule 59)    expr  ->  expr . '.' name '=' expr   (rule 61)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 59 (expr)    binop	go to state 93    keybinop	go to state 94state 153    expr  ->  name '(' arglist1 . optkeyarglist ')'   (rule 53)    expr  ->  name '(' arglist1 . optkeyarglist ')' '=' expr   (rule 62)    arglist1  ->  arglist1 . ',' exprseq   (rule 70)    ',' 	shift, and go to state 198    $default	reduce using rule 74 (optkeyarglist)    optkeyarglist	go to state 199state 154    expr  ->  classname '[' arglistc . ']'   (rule 58)    ']' 	shift, and go to state 200state 155    expr  ->  classname '(' arglist1 . optkeyarglist ')'   (rule 48)    arglist1  ->  arglist1 . ',' exprseq   (rule 70)    ',' 	shift, and go to state 198    $default	reduce using rule 74 (optkeyarglist)    optkeyarglist	go to state 201state 156    expr  ->  classname '(' keyarglist1 . ')'   (rule 47)    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 72)    ',' 	shift, and go to state 202    ')' 	shift, and go to state 203state 157    keyarglist1  ->  keyarg .   (rule 71)    $default	reduce using rule 71 (keyarglist1)state 158    keyarg  ->  keybinop . exprseq   (rule 73)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 204    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 159    classextension  ->  '+' classname '{' methods . '}'   (rule 10)    methods  ->  methods . methoddef   (rule 20)    NAME	shift, and go to state 6    BINOP	shift, and go to state 84    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 205    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '}' 	shift, and go to state 206    methoddef	go to state 207    name	go to state 208    binop	go to state 209state 160    classdef  ->  classname '[' optname . ']' superclass '{' classvardecls methods '}'   (rule 9)    ']' 	shift, and go to state 210state 161    optname  ->  name .   (rule 12)    $default	reduce using rule 12 (optname)state 162    superclass  ->  ':' classname .   (rule 14)    $default	reduce using rule 14 (superclass)state 163    classdef  ->  classname superclass '{' . classvardecls methods '}'   (rule 8)    $default	reduce using rule 15 (classvardecls)    classvardecls	go to state 211state 164    slotdeflist  ->  slotdeflist ',' slotdef .   (rule 129)    $default	reduce using rule 129 (slotdeflist)state 165    listlit  ->  '#' . '[' literallistc ']'   (rule 136)    listlit  ->  '#' . classname '[' literallistc ']'   (rule 137)    CLASSNAME	shift, and go to state 12    '[' 	shift, and go to state 79    classname	go to state 83state 166    slotdef  ->  name '=' slotliteral .   (rule 131)    $default	reduce using rule 131 (slotdef)state 167    slotliteral  ->  rgbcolor .   (rule 85)    $default	reduce using rule 85 (slotliteral)state 168    slotliteral  ->  listlit .   (rule 90)    $default	reduce using rule 90 (slotliteral)state 169    slotliteral  ->  integer .   (rule 80)    floatp  ->  integer . pie   (rule 155)    PIE 	shift, and go to state 20    $default	reduce using rule 80 (slotliteral)    pie 	go to state 100state 170    slotliteral  ->  floatp .   (rule 81)    $default	reduce using rule 81 (slotliteral)state 171    slotliteral  ->  trueobj .   (rule 86)    $default	reduce using rule 86 (slotliteral)state 172    slotliteral  ->  falseobj .   (rule 87)    $default	reduce using rule 87 (slotliteral)state 173    slotliteral  ->  nilobj .   (rule 88)    $default	reduce using rule 88 (slotliteral)state 174    slotliteral  ->  infobj .   (rule 89)    $default	reduce using rule 89 (slotliteral)state 175    slotliteral  ->  ascii .   (rule 82)    $default	reduce using rule 82 (slotliteral)state 176    slotliteral  ->  symbol .   (rule 84)    $default	reduce using rule 84 (slotliteral)state 177    slotliteral  ->  string .   (rule 83)    string  ->  string . string1   (rule 168)    STRING	shift, and go to state 10    $default	reduce using rule 83 (slotliteral)    string1	go to state 106state 178    rgbcolor  ->  RGB '(' integer ',' . integer ',' integer ')'   (rule 114)    rgbcolor  ->  RGB '(' integer ',' . integer ',' integer ',' integer ')'   (rule 115)    INTEGER	shift, and go to state 7    '-' 	shift, and go to state 114    integer	go to state 212state 179    argdecls  ->  ARG slotdeflist0 ELLIPSIS . name ';'   (rule 125)    NAME	shift, and go to state 6    name	go to state 213state 180    argdecls  ->  ARG slotdeflist ';' .   (rule 124)    $default	reduce using rule 124 (argdecls)state 181    block  ->  '{' argdecls funcvardecls funcbody . '}'   (rule 116)    '}' 	shift, and go to state 214state 182    funcvardecls  ->  funcvardecls funcvardecl .   (rule 119)    $default	reduce using rule 119 (funcvardecls)state 183    arglist1  ->  arglist1 ',' exprseq .   (rule 70)    $default	reduce using rule 70 (arglist1)state 184    cmdlinecode  ->  '(' funcvardecls1 funcbody ')' .   (rule 31)    $default	reduce using rule 31 (cmdlinecode)state 185    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  '~' name '=' expr .   (rule 60)    expr  ->  expr . '.' name '=' expr   (rule 61)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 60 (expr)    binop	go to state 93    keybinop	go to state 94state 186    block  ->  '#' '{' argdecls funcvardecls . funcbody '}'   (rule 117)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    VAR 	shift, and go to state 13    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 26    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 40 (funretval)    funcbody	go to state 215    funretval	go to state 31    expr	go to state 32    exprn	go to state 33    exprseq	go to state 34    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    funcvardecl	go to state 182    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 187    listlit2  ->  '[' literallistc . ']'   (rule 138)    ']' 	shift, and go to state 216state 188    listlit  ->  '#' '[' literallistc ']' .   (rule 136)    $default	reduce using rule 136 (listlit)state 189    optcomma  ->  ',' .   (rule 28)    literallist1  ->  literallist1 ',' . listliteral   (rule 143)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '[' 	shift, and go to state 128    $default	reduce using rule 28 (optcomma)    listliteral	go to state 217    rgbcolor	go to state 130    listlit2	go to state 131    integer	go to state 134    floatr	go to state 42    pie 	go to state 43    floatp	go to state 135    classname	go to state 136    trueobj	go to state 137    falseobj	go to state 138    nilobj	go to state 139    infobj	go to state 140    ascii	go to state 141    symbol	go to state 142    string	go to state 143    string1	go to state 54state 190    literallistc  ->  literallist1 optcomma .   (rule 141)    $default	reduce using rule 141 (literallistc)state 191    listlit2  ->  classname '[' . literallistc ']'   (rule 139)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '[' 	shift, and go to state 128    $default	reduce using rule 140 (literallistc)    listliteral	go to state 129    rgbcolor	go to state 130    listlit2	go to state 131    literallistc	go to state 218    literallist1	go to state 133    integer	go to state 134    floatr	go to state 42    pie 	go to state 43    floatp	go to state 135    classname	go to state 136    trueobj	go to state 137    falseobj	go to state 138    nilobj	go to state 139    infobj	go to state 140    ascii	go to state 141    symbol	go to state 142    string	go to state 143    string1	go to state 54state 192    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    expr  ->  '#' mavars '=' expr .   (rule 63)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 63 (expr)    binop	go to state 93    keybinop	go to state 94state 193    mavars  ->  mavarlist ELLIPSIS name .   (rule 77)    $default	reduce using rule 77 (mavars)state 194    mavarlist  ->  mavarlist ',' name .   (rule 79)    $default	reduce using rule 79 (mavarlist)state 195    listlit  ->  '#' classname '[' literallistc . ']'   (rule 137)    ']' 	shift, and go to state 219state 196    expr  ->  expr '.' name '=' . expr   (rule 61)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 220    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 197    expr  ->  expr '.' name '(' . keyarglist1 ')'   (rule 54)    expr  ->  expr '.' name '(' . arglist1 optkeyarglist ')'   (rule 55)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 71    arglist1	go to state 221    keyarglist1	go to state 222    keyarg	go to state 157    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55    keybinop	go to state 158state 198    arglist1  ->  arglist1 ',' . exprseq   (rule 70)    optkeyarglist  ->  ',' . keyarglist1   (rule 75)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 32    exprn	go to state 33    exprseq	go to state 183    keyarglist1	go to state 223    keyarg	go to state 157    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55    keybinop	go to state 158state 199    expr  ->  name '(' arglist1 optkeyarglist . ')'   (rule 53)    expr  ->  name '(' arglist1 optkeyarglist . ')' '=' expr   (rule 62)    ')' 	shift, and go to state 224state 200    expr  ->  classname '[' arglistc ']' .   (rule 58)    $default	reduce using rule 58 (expr)state 201    expr  ->  classname '(' arglist1 optkeyarglist . ')'   (rule 48)    ')' 	shift, and go to state 225state 202    keyarglist1  ->  keyarglist1 ',' . keyarg   (rule 72)    KEYBINOP	shift, and go to state 85    keyarg	go to state 226    keybinop	go to state 158state 203    expr  ->  classname '(' keyarglist1 ')' .   (rule 47)    $default	reduce using rule 47 (expr)state 204    keyarg  ->  keybinop exprseq .   (rule 73)    $default	reduce using rule 73 (keyarg)state 205    methoddef  ->  '*' . name '{' argdecls funcvardecls primitive methbody '}'   (rule 22)    methoddef  ->  '*' . binop '{' argdecls funcvardecls primitive methbody '}'   (rule 24)    binop  ->  '*' .   (rule 176)    NAME	shift, and go to state 6    BINOP	shift, and go to state 84    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    $default	reduce using rule 176 (binop)    name	go to state 227    binop	go to state 228state 206    classextension  ->  '+' classname '{' methods '}' .   (rule 10)    $default	reduce using rule 10 (classextension)state 207    methods  ->  methods methoddef .   (rule 20)    $default	reduce using rule 20 (methods)state 208    methoddef  ->  name . '{' argdecls funcvardecls primitive methbody '}'   (rule 21)    '{' 	shift, and go to state 229state 209    methoddef  ->  binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 23)    '{' 	shift, and go to state 230state 210    classdef  ->  classname '[' optname ']' . superclass '{' classvardecls methods '}'   (rule 9)    ':' 	shift, and go to state 109    $default	reduce using rule 13 (superclass)    superclass	go to state 231state 211    classdef  ->  classname superclass '{' classvardecls . methods '}'   (rule 8)    classvardecls  ->  classvardecls . classvardecl   (rule 16)    VAR 	shift, and go to state 232    CLASSVAR	shift, and go to state 233    $default	reduce using rule 19 (methods)    classvardecl	go to state 234    methods	go to state 235state 212    rgbcolor  ->  RGB '(' integer ',' integer . ',' integer ')'   (rule 114)    rgbcolor  ->  RGB '(' integer ',' integer . ',' integer ',' integer ')'   (rule 115)    ',' 	shift, and go to state 236state 213    argdecls  ->  ARG slotdeflist0 ELLIPSIS name . ';'   (rule 125)    ';' 	shift, and go to state 237state 214    block  ->  '{' argdecls funcvardecls funcbody '}' .   (rule 116)    $default	reduce using rule 116 (block)state 215    block  ->  '#' '{' argdecls funcvardecls funcbody . '}'   (rule 117)    '}' 	shift, and go to state 238state 216    listlit2  ->  '[' literallistc ']' .   (rule 138)    $default	reduce using rule 138 (listlit2)state 217    literallist1  ->  literallist1 ',' listliteral .   (rule 143)    $default	reduce using rule 143 (literallist1)state 218    listlit2  ->  classname '[' literallistc . ']'   (rule 139)    ']' 	shift, and go to state 239state 219    listlit  ->  '#' classname '[' literallistc ']' .   (rule 137)    $default	reduce using rule 137 (listlit)state 220    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    expr  ->  expr '.' name '=' expr .   (rule 61)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 61 (expr)    binop	go to state 93    keybinop	go to state 94state 221    expr  ->  expr '.' name '(' arglist1 . optkeyarglist ')'   (rule 55)    arglist1  ->  arglist1 . ',' exprseq   (rule 70)    ',' 	shift, and go to state 198    $default	reduce using rule 74 (optkeyarglist)    optkeyarglist	go to state 240state 222    expr  ->  expr '.' name '(' keyarglist1 . ')'   (rule 54)    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 72)    ',' 	shift, and go to state 202    ')' 	shift, and go to state 241state 223    keyarglist1  ->  keyarglist1 . ',' keyarg   (rule 72)    optkeyarglist  ->  ',' keyarglist1 .   (rule 75)    ',' 	shift, and go to state 202    $default	reduce using rule 75 (optkeyarglist)state 224    expr  ->  name '(' arglist1 optkeyarglist ')' .   (rule 53)    expr  ->  name '(' arglist1 optkeyarglist ')' . '=' expr   (rule 62)    '=' 	shift, and go to state 242    $default	reduce using rule 53 (expr)state 225    expr  ->  classname '(' arglist1 optkeyarglist ')' .   (rule 48)    $default	reduce using rule 48 (expr)state 226    keyarglist1  ->  keyarglist1 ',' keyarg .   (rule 72)    $default	reduce using rule 72 (keyarglist1)state 227    methoddef  ->  '*' name . '{' argdecls funcvardecls primitive methbody '}'   (rule 22)    '{' 	shift, and go to state 243state 228    methoddef  ->  '*' binop . '{' argdecls funcvardecls primitive methbody '}'   (rule 24)    '{' 	shift, and go to state 244state 229    methoddef  ->  name '{' . argdecls funcvardecls primitive methbody '}'   (rule 21)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 245state 230    methoddef  ->  binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 23)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 246state 231    classdef  ->  classname '[' optname ']' superclass . '{' classvardecls methods '}'   (rule 9)    '{' 	shift, and go to state 247state 232    classvardecl  ->  VAR . rwslotdeflist ';'   (rule 18)    '<' 	shift, and go to state 248    '>' 	shift, and go to state 249    READWRITEVAR	shift, and go to state 250    $default	reduce using rule 144 (rwspec)    rwslotdeflist	go to state 251    rwslotdef	go to state 252    rwspec	go to state 253state 233    classvardecl  ->  CLASSVAR . rwslotdeflist ';'   (rule 17)    '<' 	shift, and go to state 248    '>' 	shift, and go to state 249    READWRITEVAR	shift, and go to state 250    $default	reduce using rule 144 (rwspec)    rwslotdeflist	go to state 254    rwslotdef	go to state 252    rwspec	go to state 253state 234    classvardecls  ->  classvardecls classvardecl .   (rule 16)    $default	reduce using rule 16 (classvardecls)state 235    classdef  ->  classname superclass '{' classvardecls methods . '}'   (rule 8)    methods  ->  methods . methoddef   (rule 20)    NAME	shift, and go to state 6    BINOP	shift, and go to state 84    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 205    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '}' 	shift, and go to state 255    methoddef	go to state 207    name	go to state 208    binop	go to state 209state 236    rgbcolor  ->  RGB '(' integer ',' integer ',' . integer ')'   (rule 114)    rgbcolor  ->  RGB '(' integer ',' integer ',' . integer ',' integer ')'   (rule 115)    INTEGER	shift, and go to state 7    '-' 	shift, and go to state 114    integer	go to state 256state 237    argdecls  ->  ARG slotdeflist0 ELLIPSIS name ';' .   (rule 125)    $default	reduce using rule 125 (argdecls)state 238    block  ->  '#' '{' argdecls funcvardecls funcbody '}' .   (rule 117)    $default	reduce using rule 117 (block)state 239    listlit2  ->  classname '[' literallistc ']' .   (rule 139)    $default	reduce using rule 139 (listlit2)state 240    expr  ->  expr '.' name '(' arglist1 optkeyarglist . ')'   (rule 55)    ')' 	shift, and go to state 257state 241    expr  ->  expr '.' name '(' keyarglist1 ')' .   (rule 54)    $default	reduce using rule 54 (expr)state 242    expr  ->  name '(' arglist1 optkeyarglist ')' '=' . expr   (rule 62)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 258    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 243    methoddef  ->  '*' name '{' . argdecls funcvardecls primitive methbody '}'   (rule 22)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 259state 244    methoddef  ->  '*' binop '{' . argdecls funcvardecls primitive methbody '}'   (rule 24)    ARG 	shift, and go to state 69    $default	reduce using rule 123 (argdecls)    argdecls	go to state 260state 245    methoddef  ->  name '{' argdecls . funcvardecls primitive methbody '}'   (rule 21)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 261state 246    methoddef  ->  binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 23)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 262state 247    classdef  ->  classname '[' optname ']' superclass '{' . classvardecls methods '}'   (rule 9)    $default	reduce using rule 15 (classvardecls)    classvardecls	go to state 263state 248    rwspec  ->  '<' .   (rule 145)    $default	reduce using rule 145 (rwspec)state 249    rwspec  ->  '>' .   (rule 147)    $default	reduce using rule 147 (rwspec)state 250    rwspec  ->  READWRITEVAR .   (rule 146)    $default	reduce using rule 146 (rwspec)state 251    classvardecl  ->  VAR rwslotdeflist . ';'   (rule 18)    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 133)    ';' 	shift, and go to state 264    ',' 	shift, and go to state 265state 252    rwslotdeflist  ->  rwslotdef .   (rule 132)    $default	reduce using rule 132 (rwslotdeflist)state 253    rwslotdef  ->  rwspec . name   (rule 134)    rwslotdef  ->  rwspec . name '=' slotliteral   (rule 135)    NAME	shift, and go to state 6    name	go to state 266state 254    classvardecl  ->  CLASSVAR rwslotdeflist . ';'   (rule 17)    rwslotdeflist  ->  rwslotdeflist . ',' rwslotdef   (rule 133)    ';' 	shift, and go to state 267    ',' 	shift, and go to state 265state 255    classdef  ->  classname superclass '{' classvardecls methods '}' .   (rule 8)    $default	reduce using rule 8 (classdef)state 256    rgbcolor  ->  RGB '(' integer ',' integer ',' integer . ')'   (rule 114)    rgbcolor  ->  RGB '(' integer ',' integer ',' integer . ',' integer ')'   (rule 115)    ',' 	shift, and go to state 268    ')' 	shift, and go to state 269state 257    expr  ->  expr '.' name '(' arglist1 optkeyarglist ')' .   (rule 55)    $default	reduce using rule 55 (expr)state 258    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    expr  ->  name '(' arglist1 optkeyarglist ')' '=' expr .   (rule 62)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    $default	reduce using rule 62 (expr)    binop	go to state 93    keybinop	go to state 94state 259    methoddef  ->  '*' name '{' argdecls . funcvardecls primitive methbody '}'   (rule 22)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 270state 260    methoddef  ->  '*' binop '{' argdecls . funcvardecls primitive methbody '}'   (rule 24)    $default	reduce using rule 118 (funcvardecls)    funcvardecls	go to state 271state 261    methoddef  ->  name '{' argdecls funcvardecls . primitive methbody '}'   (rule 21)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    PRIMITIVENAME	shift, and go to state 272    VAR 	shift, and go to state 13    $default	reduce using rule 36 (primitive)    primitive	go to state 273    funcvardecl	go to state 182    primname	go to state 274state 262    methoddef  ->  binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 23)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    PRIMITIVENAME	shift, and go to state 272    VAR 	shift, and go to state 13    $default	reduce using rule 36 (primitive)    primitive	go to state 275    funcvardecl	go to state 182    primname	go to state 274state 263    classdef  ->  classname '[' optname ']' superclass '{' classvardecls . methods '}'   (rule 9)    classvardecls  ->  classvardecls . classvardecl   (rule 16)    VAR 	shift, and go to state 232    CLASSVAR	shift, and go to state 233    $default	reduce using rule 19 (methods)    classvardecl	go to state 234    methods	go to state 276state 264    classvardecl  ->  VAR rwslotdeflist ';' .   (rule 18)    $default	reduce using rule 18 (classvardecl)state 265    rwslotdeflist  ->  rwslotdeflist ',' . rwslotdef   (rule 133)    '<' 	shift, and go to state 248    '>' 	shift, and go to state 249    READWRITEVAR	shift, and go to state 250    $default	reduce using rule 144 (rwspec)    rwslotdef	go to state 277    rwspec	go to state 253state 266    rwslotdef  ->  rwspec name .   (rule 134)    rwslotdef  ->  rwspec name . '=' slotliteral   (rule 135)    '=' 	shift, and go to state 278    $default	reduce using rule 134 (rwslotdef)state 267    classvardecl  ->  CLASSVAR rwslotdeflist ';' .   (rule 17)    $default	reduce using rule 17 (classvardecl)state 268    rgbcolor  ->  RGB '(' integer ',' integer ',' integer ',' . integer ')'   (rule 115)    INTEGER	shift, and go to state 7    '-' 	shift, and go to state 114    integer	go to state 279state 269    rgbcolor  ->  RGB '(' integer ',' integer ',' integer ')' .   (rule 114)    $default	reduce using rule 114 (rgbcolor)state 270    methoddef  ->  '*' name '{' argdecls funcvardecls . primitive methbody '}'   (rule 22)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    PRIMITIVENAME	shift, and go to state 272    VAR 	shift, and go to state 13    $default	reduce using rule 36 (primitive)    primitive	go to state 280    funcvardecl	go to state 182    primname	go to state 274state 271    methoddef  ->  '*' binop '{' argdecls funcvardecls . primitive methbody '}'   (rule 24)    funcvardecls  ->  funcvardecls . funcvardecl   (rule 119)    PRIMITIVENAME	shift, and go to state 272    VAR 	shift, and go to state 13    $default	reduce using rule 36 (primitive)    primitive	go to state 281    funcvardecl	go to state 182    primname	go to state 274state 272    primname  ->  PRIMITIVENAME .   (rule 160)    $default	reduce using rule 160 (primname)state 273    methoddef  ->  name '{' argdecls funcvardecls primitive . methbody '}'   (rule 21)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 282    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 38 (retval)    methbody	go to state 283    retval	go to state 284    expr	go to state 32    exprn	go to state 33    exprseq	go to state 285    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 274    primitive  ->  primname . optsemi   (rule 37)    ';' 	shift, and go to state 124    $default	reduce using rule 25 (optsemi)    optsemi	go to state 286state 275    methoddef  ->  binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 23)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 282    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 38 (retval)    methbody	go to state 287    retval	go to state 284    expr	go to state 32    exprn	go to state 33    exprseq	go to state 285    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 276    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods . '}'   (rule 9)    methods  ->  methods . methoddef   (rule 20)    NAME	shift, and go to state 6    BINOP	shift, and go to state 84    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 205    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '}' 	shift, and go to state 288    methoddef	go to state 207    name	go to state 208    binop	go to state 209state 277    rwslotdeflist  ->  rwslotdeflist ',' rwslotdef .   (rule 133)    $default	reduce using rule 133 (rwslotdeflist)state 278    rwslotdef  ->  rwspec name '=' . slotliteral   (rule 135)    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '#' 	shift, and go to state 165    slotliteral	go to state 289    rgbcolor	go to state 167    listlit	go to state 168    integer	go to state 169    floatr	go to state 42    pie 	go to state 43    floatp	go to state 170    trueobj	go to state 171    falseobj	go to state 172    nilobj	go to state 173    infobj	go to state 174    ascii	go to state 175    symbol	go to state 176    string	go to state 177    string1	go to state 54state 279    rgbcolor  ->  RGB '(' integer ',' integer ',' integer ',' integer . ')'   (rule 115)    ')' 	shift, and go to state 290state 280    methoddef  ->  '*' name '{' argdecls funcvardecls primitive . methbody '}'   (rule 22)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 282    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 38 (retval)    methbody	go to state 291    retval	go to state 284    expr	go to state 32    exprn	go to state 33    exprseq	go to state 285    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 281    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive . methbody '}'   (rule 24)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '^' 	shift, and go to state 282    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    $default	reduce using rule 38 (retval)    methbody	go to state 292    retval	go to state 284    expr	go to state 32    exprn	go to state 33    exprseq	go to state 285    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 282    retval  ->  '^' . expr optsemi   (rule 39)    NAME	shift, and go to state 6    INTEGER	shift, and go to state 7    FLOAT	shift, and go to state 8    SYMBOL	shift, and go to state 9    STRING	shift, and go to state 10    ASCII	shift, and go to state 11    CLASSNAME	shift, and go to state 12    RGB 	shift, and go to state 14    NILOBJ	shift, and go to state 15    TRUEOBJ	shift, and go to state 16    FALSEOBJ	shift, and go to state 17    INFINITUMOBJ	shift, and go to state 18    PSEUDOVAR	shift, and go to state 19    PIE 	shift, and go to state 20    '-' 	shift, and go to state 21    '`' 	shift, and go to state 22    '{' 	shift, and go to state 23    '[' 	shift, and go to state 24    '(' 	shift, and go to state 67    '~' 	shift, and go to state 27    '#' 	shift, and go to state 28    expr	go to state 293    pushliteral	go to state 35    rgbcolor	go to state 36    block	go to state 37    listlit	go to state 40    integer	go to state 41    floatr	go to state 42    pie 	go to state 43    floatp	go to state 44    name	go to state 45    classname	go to state 46    trueobj	go to state 47    falseobj	go to state 48    nilobj	go to state 49    infobj	go to state 50    ascii	go to state 51    symbol	go to state 52    string	go to state 53    string1	go to state 54    pseudovar	go to state 55state 283    methoddef  ->  name '{' argdecls funcvardecls primitive methbody . '}'   (rule 21)    '}' 	shift, and go to state 294state 284    methbody  ->  retval .   (rule 34)    $default	reduce using rule 34 (methbody)state 285    methbody  ->  exprseq . retval   (rule 35)    '^' 	shift, and go to state 282    $default	reduce using rule 38 (retval)    retval	go to state 295state 286    primitive  ->  primname optsemi .   (rule 37)    $default	reduce using rule 37 (primitive)state 287    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 23)    '}' 	shift, and go to state 296state 288    classdef  ->  classname '[' optname ']' superclass '{' classvardecls methods '}' .   (rule 9)    $default	reduce using rule 9 (classdef)state 289    rwslotdef  ->  rwspec name '=' slotliteral .   (rule 135)    $default	reduce using rule 135 (rwslotdef)state 290    rgbcolor  ->  RGB '(' integer ',' integer ',' integer ',' integer ')' .   (rule 115)    $default	reduce using rule 115 (rgbcolor)state 291    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody . '}'   (rule 22)    '}' 	shift, and go to state 297state 292    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody . '}'   (rule 24)    '}' 	shift, and go to state 298state 293    retval  ->  '^' expr . optsemi   (rule 39)    expr  ->  expr . binop expr   (rule 51)    expr  ->  expr . keybinop expr   (rule 52)    expr  ->  expr . '.' name '(' keyarglist1 ')'   (rule 54)    expr  ->  expr . '.' name '(' arglist1 optkeyarglist ')'   (rule 55)    expr  ->  expr . '.' name   (rule 56)    expr  ->  expr . '.' name '=' expr   (rule 61)    BINOP	shift, and go to state 84    KEYBINOP	shift, and go to state 85    '-' 	shift, and go to state 86    '<' 	shift, and go to state 87    '>' 	shift, and go to state 88    '*' 	shift, and go to state 89    '+' 	shift, and go to state 90    READWRITEVAR	shift, and go to state 91    '.' 	shift, and go to state 92    ';' 	shift, and go to state 124    $default	reduce using rule 25 (optsemi)    optsemi	go to state 299    binop	go to state 93    keybinop	go to state 94state 294    methoddef  ->  name '{' argdecls funcvardecls primitive methbody '}' .   (rule 21)    $default	reduce using rule 21 (methoddef)state 295    methbody  ->  exprseq retval .   (rule 35)    $default	reduce using rule 35 (methbody)state 296    methoddef  ->  binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 23)    $default	reduce using rule 23 (methoddef)state 297    methoddef  ->  '*' name '{' argdecls funcvardecls primitive methbody '}' .   (rule 22)    $default	reduce using rule 22 (methoddef)state 298    methoddef  ->  '*' binop '{' argdecls funcvardecls primitive methbody '}' .   (rule 24)    $default	reduce using rule 24 (methoddef)state 299    retval  ->  '^' expr optsemi .   (rule 39)    $default	reduce using rule 39 (retval)state 300    $   	go to state 301state 301    $   	go to state 302state 302    $default	accept