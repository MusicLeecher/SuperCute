{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs32 \cf0 \
Understanding Streams, Patterns and Events - Part 3
\f1\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 ListPatterns
\f1\b0 \
\
ListPatterns are Patterns that iterate over arrays of objects in some fashion.\
All ListPatterns have in common the instance variables list and repeats.\
The list variable is some Array to be iterated over. The repeats variable is\
some measure of the number of times to do something, whose meaning \
varies from subclass to subclass. The default value for repeats is 1.\
\
Pseq is a Pattern that cycles over a list of values. The repeats variable gives\
the number of times to repeat the entire list. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf2 //////////////////////////////////////////////////////////////\cf0 \
\cf2 // Note: This SynthDef used throughout this document\cf0 \
(\
s = \cf3 Server\cf0 .local;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 ( \cf4 "Help-SPE3-SimpleSine"\cf0 , \{\
	\cf3 arg\cf0  freq, dur=1.0;\
	\cf3 var\cf0  osc;\
	osc = \cf3 SinOsc\cf0 .ar( [freq,freq+0.05.rand] ) * \cf3 EnvGen\cf0 .ar( \
		\cf3 Env\cf0 .perc, doneAction: 2, levelScale: 0.3, timeScale: dur\
	);\
	\cf3 Out\cf0 .ar(0,osc);\
\}).send(s);\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //////////////////////////////////////////////////////////////\cf0 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 .new(#[1, 2, 3], 2);	\cf2 // repeat twice\cf0 \
b = a.asStream;\
7.do(\{ b.next.postln; \});\
)
\f1 \
\
Pseq also has an offset argument which gives a starting offset into the list.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 .new(#[1, 2, 3, 4], 3, 2); \cf2 // repeat 3, offset 2\cf0 \
b = a.asStream;\
13.do(\{ b.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
You can pass a function for the repeats variable that gets evaluated when the stream is created.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 .new(#[1, 2], \{ rrand(1, 3) \});	\cf2 // repeat 1,2, or 3 times\cf0 \
b = a.asStream;\
7.do(\{ b.next.postln; \});\
)
\f1 \
\
If you specify the value inf for the repeats variable, then it will repeat indefinitely.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 .new(#[1, 2, 3], \cf3 inf\cf0 );	\cf2 // infinite repeat\cf0 \
b = a.asStream;\
10.do(\{ b.next.postln; \});\
)
\f1 \
\
Pseq used as a sequence of pitches:\
\
Remember that math operations like midicps can be used on streams.\
The alternative Pseq( ... ).midicps.asStream is also possible because\
both pattern and stream inherit from AbstractFunction for which \
midicps is a method. ( midicps converts a midi value to cycles per second or Hz )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, d;\
a = \cf3 Pseq\cf0 (#[60, 61, 63, 65, 67, 63], \cf3 inf\cf0  ).asStream.midicps;\
d = 0.3;\
\cf3 Task\cf0 (\{\
	12.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 , [ \cf5 \\freq\cf0 , a.next, \cf5 \\dur\cf0 , d ]);\
		d.wait;\
	\});\
\}).play\
)\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Pser is like Pseq, however the repeats variable gives the number of items returned instead of\
the number of complete cycles. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pser\cf0 .new(#[1, 2, 3], 5);	\cf2 // return 5 items\cf0 \
b = a.asStream;\
6.do(\{ b.next.postln; \});\
)
\f1 \
\
Prand returns one item from the list at random for each repeat. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Prand\cf0 .new(#[1, 2, 3, 4, 5], 6);	\cf2 // return 6 items\cf0 \
b = a.asStream;\
7.do(\{ b.next.postln; \});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Prand used as a sequence of pitches:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Prand\cf0 (#[60, 61, 63, 65], \cf3 inf\cf0 ).midicps.asStream;\
\cf3 Task\cf0 (\{\
	12.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 ,[\cf5 \\freq\cf0 , a.next]);\
		d.wait;\
	\});\
\}).play;\
)
\f1 \
\
Pxrand, like Prand, returns one item from the list at random for each repeat, but Pxrand never\
repeats the same element twice in a row. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pxrand\cf0 .new(#[1, 2, 3], 10);	\cf2 // return 10 items\cf0 \
b = a.asStream;\
11.do(\{ b.next.postln; \});\
)
\f1 \
\
Pxrand used as a sequence of pitches:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Pxrand\cf0 (#[60, 61, 63, 65], \cf3 inf\cf0 ).midicps.asStream;\
\cf3 Task\cf0 (\{\
	12.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 ,[\cf5 \\freq\cf0 , a.next]);\
		0.8.wait;\
	\});\
\}).play;\
)
\f1 \
\
Pshuf iterates over the list in scrambled order. The entire scrambled list is repeated\
in the same order the number of times given by the repeats variable.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pshuf\cf0 .new(#[1, 2, 3, 4], 3);\
b = a.asStream;\
13.do(\{ b.next.postln; \});\
)
\f1 \
\
Pshuf used as a sequence of pitches:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pshuf\cf0 (#[60, 61, 65, 67], \cf3 inf\cf0 ).midicps.asStream;\
\cf3 Task\cf0 (\{\
	12.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 ,[\cf5 \\freq\cf0 , a.next]);\
		0.5.wait;\
	\});\
\}).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Nesting Patterns\
\
If a Pattern encounters another Pattern in its list, it embeds that pattern in its output. \
That is, it creates a stream on that pattern and iterates that pattern until it ends before moving on.\
For example here is one pattern nested in another.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 .new([1, \cf3 Pseq\cf0 .new([100,200], 2), 3], 3);	\
b = a.asStream;\
19.do(\{ b.next.postln; \});\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 Pseqs nested in a Prand:
\f2 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Prand\cf0 .new([\
		\cf3 Pseq\cf0 .new([1, 2], 2), \
		\cf3 Pseq\cf0 .new([3, 4], 2), \
		\cf3 Pseq\cf0 .new([5, 6], 2)\
	], 3);	\
b = a.asStream;\
13.do(\{ b.next.postln; \});\
)
\f1 \
\
Nested sequences of pitches:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Prand\cf0 ([\
		\cf3 Pseq\cf0 (#[60, 61, 63, 65, 67, 63]),\
		\cf3 Prand\cf0 (#[72, 73, 75, 77, 79], 6),\
		\cf3 Pshuf\cf0 (#[48, 53, 55, 58], 2)\
	], \cf3 inf\cf0  \
).midicps.asStream;\
\cf3 Task\cf0 (\{\
	loop(\{\
		\cf3 Synth\cf0 ( \cf4 "Help-SPE3-SimpleSine"\cf0 , [\cf5 \\freq\cf0 , a.next] );\
		0.3.wait;\
	\});\
\}).play;\
)
\f1 \
\
Math operations on ListPatterns\
\
Pattern b plays pattern a once normally, once transposed up a fifth and once transposed up a fourth.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a, b;\
a = \cf3 Pseq\cf0 (#[60, 62, 63, 65, 67, 63]);\
b = \cf3 Pseq\cf0 ([ a, a + 7, a + 5], \cf3 inf\cf0 ).asStream;\
\cf3 Task\cf0 (\{\
	24.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 , [ \cf5 \\freq\cf0 , b.next.midicps ]);\
		0.3.wait;\
	\});\
\}).play;\
)
\f1 \
\
Adding two patterns together. The second pattern transposes each fifth note of the first pattern\
down an octave.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  a;\
a = \cf3 Pseq\cf0 (#[60, 62, 63, 65, 67, 63], \cf3 inf\cf0 ) + \cf3 Pseq\cf0 (#[0, 0, 0, 0, -12], \cf3 inf\cf0 );\
a = a.asStream.midicps;\
\cf3 Task\cf0 (\{\
	25.do(\{\
		\cf3 Synth\cf0 (\cf4 "Help-SPE3-SimpleSine"\cf0 ,[\cf5 \\freq\cf0 , a.next]);\
		0.3.wait;\
	\});\
\}).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
Making Music with ListPatterns\
\
Here is the same example given in part 2 rewritten to use ListPatterns.\
It uses nested patterns and results in much more concise code.\
SuperCollider allows you to write SomeClass.new(params) as SomeClass(params)\
eliminating the ".new" .  This can make code like the pattern examples below, which create\
a lot of objects, more readable.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 ( \cf4 "Help-SPE3-Allpass6"\cf0 , \{ \cf3 arg\cf0  freq;\
	\cf3 var\cf0  out, env;\
	out = \cf3 RLPF\cf0 .ar(\
		\cf3 LFSaw\cf0 .ar( freq, mul: \cf3 EnvGen\cf0 .kr( \cf3 Env\cf0 .perc, levelScale: 0.3, doneAction: 2 ) ),\
		\cf3 LFNoise1\cf0 .kr(1, 36, 110).midicps,\
		0.1\
	);\
	6.do(\{ out = \cf3 AllpassN\cf0 .ar(out, 0.05, [0.05.rand, 0.05.rand], 4) \});\
	\cf3 Out\cf0 .ar( 0, out  );\
\}).send(s)\
)\
\
(\
\
\cf3 var\cf0  freqStream;\
\
freqStream = \cf3 Pseq\cf0 ([\
	\cf3 Prand\cf0 ([\
		\cf3 nil\cf0 ,		\cf2 // a nil item reached in a pattern causes it to end\cf0 \
		\cf3 Pseq\cf0 (#[24, 31, 36, 43, 48, 55]);\
	]),\
	\cf3 Pseq\cf0 ([ 60, \cf3 Prand\cf0 (#[63, 65]), 67, \cf3 Prand\cf0 (#[70, 72, 74]) ], \{ rrand(2, 5) \}),\
	\cf3 Prand\cf0 (#[74, 75, 77, 79, 81], \{ rrand(3, 9) \})\
], \cf3 inf\cf0 ).asStream.midicps;\
\
\cf3 Task\cf0 (\{\
	loop(\{\
		\cf3 Synth\cf0 ( \cf4 "Help-SPE3-Allpass6"\cf0 , [\cf5 \\freq\cf0 , freqStream.next ]);\
		0.13.wait;\
	\});\
\}).play;	\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\
\
Here is an example that uses a Pattern to create a rhythmic solo. The values in the pattern \
specify the amplitudes of impulses fed to the Decay2 generator.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 ( \cf4 "Help-SPE3-Mridangam"\cf0 , \{ \cf3 arg\cf0  t_amp;\
	\cf3 var\cf0  out;\
\
	out = \cf3 Resonz\cf0 .ar( \
		\cf3 WhiteNoise\cf0 .ar(70) * \cf3 Decay2\cf0 .kr( t_amp, 0.002, 0.1 ),\
		60.midicps, \
		0.02,\
		4\
	).distort * 0.4;\
	\
	\cf3 Out\cf0 .ar( 0, out  );\
	\cf3 DetectSilence\cf0 .ar( out,  doneAction: 2 );\
\}).send(s);\
\cf3 SynthDef\cf0 ( \cf4 "Help-SPE3-Drone"\cf0 , \{\
	\cf3 var\cf0  out;\
	out = \cf3 LPF\cf0 .ar(\
		\cf3 Saw\cf0 .ar([60, 60.04].midicps) \
		+ \
		\cf3 Saw\cf0 .ar([67, 67.04].midicps), \
		108.midicps, \
		0.007\
	);\
	\cf3 Out\cf0 .ar( 0, out  );\
\}).send(s);\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // percussion solo in 10/8\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  stream, pat, amp;\
\
pat = \cf3 Pseq\cf0 ([\
	\cf3 Pseq\cf0 (#[0.0], 10),\
\
	\cf2 // intro\cf0 \
	\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2),\
	\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0], 2),\
	\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.2, 0.0, 0.2, 0.0, 0.2, 0.0, 0.0], 2),\
	\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.2, 0.0, 0.2], 2),\
	\
	\cf2 // solo\cf0 \
	\cf3 Prand\cf0 ([\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.0, 0.2, 0.0, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.2, 0.0, 0.7, 0.0, 0.2, 0.0, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.0, 0.2, 0.0, 0.7, 0.0, 0.2]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.2, 0.2, 0.0, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.0, 0.2, 0.2, 0.7, 0.2, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.2, 0.2, 0.7, 0.2, 0.2, 0.2, 0.7, 0.2, 0.2]),\
		\cf3 Pseq\cf0 (#[0.9, 0.2, 0.2, 0.7, 0.2, 0.2, 0.2, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.2, 0.2, 0.2, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.4, 0.0, 0.4, 0.0, 0.4, 0.0, 0.4, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4, 0.2, 0.4, 0.2]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.2, 0.7, 0.0, 0.2, 0.0, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.7, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.7, 0.7, 0.0, 0.0, 0.2, 0.2, 0.2, 0.0, 0.0]),\
		\cf3 Pseq\cf0 (#[0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])\
	], 30),\
	\
	\cf2 // tehai : 7 beat motif 3 times sharing 1st beat with next 7x3 \cf0 \
	\cf2 // and again the third time:\cf0 \
	\cf2 //   123456712345671234567                   123456712345671234567\cf0 \
	\cf2 //                       123456712345671234567\cf0 \
	\cf2 //   !                   !                   !                   !\cf0 \
	\cf2 //   1234567890123456789012345678901234567890123456789012345678901\cf0 \
	\cf3 Pseq\cf0 (#[2.0, 0.0, 0.2, 0.5, 0.0, 0.2, 0.9, \
		 1.5, 0.0, 0.2, 0.5, 0.0, 0.2, 0.9, \
		 1.5, 0.0, 0.2, 0.5, 0.0, 0.2], 3), \
	\cf3 Pseq\cf0 (#[5], 1), \cf2 // sam\cf0 \
	\
	\cf3 Pseq\cf0 (#[0.0], \cf3 inf\cf0 )\
]);\
	\
stream = pat.asStream;\
\
\cf3 Task\cf0 (\{\
	\cf3 Synth\cf0 (\cf4 "Help-SPE3-Drone"\cf0 );\
	loop(\{\
		if( ( amp = stream.next ) > 0,\
			\{ \cf3 Synth\cf0 (\cf4 "Help-SPE3-Mridangam"\cf0 , [ \cf5 \\t_amp\cf0 , amp ]) \}\
		);\
		(1/8).wait;\
	\})\
\}).play\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
To go to the next file, double click on the ] to select the filename and type cmd-H:\
[Streams-Patterns-Events4]\
\
\
}