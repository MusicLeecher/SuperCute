{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs36 \cf0 InstrGateSpawner
\f0\b0\fs24 \
\
superclass: InstrSpawner, Patch\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 instr
\f0\b0  - as per Patch and InstrSpawner\
	the Synth is expected to end itself via EnvGen doneAction or similar.
\f2\fs18 \

\f1\b\fs24 args
\f0\b0  - as per InstrSpawner\
	each arg that is a stream (its rate returns \\stream) is passed the InstrGateSpawner as an \
	arg.  Two useful things can be done with this: asking the  .
\f1\b beat
\f0\b0  and the current .
\f1\b delta
\f0\b0 \
	till the next event.\

\f1\b delta
\f0\b0  - a float, function or stream in 
\f1\b beats
\f0\b0 \
		\
it stops when any arg or the delta returns nil.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
(\
	\cf2 InstrGateSpawner\cf0 (\{ \cf2 arg\cf0  freq=440,rq=0.1,width=0.5,fenv,fenvmod=1000,envadsr,dur=0.1,tempo;\
		\cf2 var\cf0  gate;\
		gate = \cf2 Trig1\cf0 .kr(1.0,dur / tempo);\
		\cf2 RLPF\cf0 .ar(\
			\cf2 VarSaw\cf0 .ar(\
				freq,\
				0.0,\
				width\
			),\
			\cf2 EnvGen\cf0 .kr(fenv,gate,levelScale: fenvmod),\
			rq)\
	 		  * \cf2 EnvGen\cf0 .kr(envadsr,gate,0.3, doneAction: 2)\
	\},[\
		\cf2 Pseq\cf0 ((70 + [ 0, 1, 5, 6, 10 ]).midicps ,\cf2 inf\cf0 ),\
		0.2,\
		\cf2 Patch\cf0 (\{ \cf2 LFTri\cf0 .kr(0.1,[0.0,0.5],0.5,0.5) \}),\
		\cf2 Env\cf0 .adsr(0.3,sustainLevel: 0.4),\
		\cf2 Pbrown\cf0 (4000,10000,100),\
		\cf2 Env\cf0 .adsr(releaseTime: 0.5),\
		\
		// dur uses a Pfunc to ask the delta till the next event\
		\cf2 Pfunc\cf0 (\{ \cf2 arg\cf0  igs;  (igs.delta * 0.9) \}),\
		\
		\cf2 TempoPlayer\cf0 .new\
	],\
		0.25\
	).play\
)\
(\
	\cf2 InstrGateSpawner\cf0 (\{ \cf2 arg\cf0  freq=440,rq=0.1,width=0.5,fenv,fenvmod=1000,envadsr,dur=0.1,tempo;\
		\cf2 var\cf0  gate;\
		gate = \cf2 Trig1\cf0 .kr(1.0,dur / tempo);\
		\cf2 RLPF\cf0 .ar(\
			\cf2 VarSaw\cf0 .ar(\
				freq,\
				0.0,\
				width\
			),\
			\cf2 EnvGen\cf0 .kr(fenv,gate,levelScale: fenvmod),\
			rq)\
	 		  * \cf2 EnvGen\cf0 .kr(envadsr,gate,0.3, doneAction: 2)\
	\},[\
		\cf2 PdurStutter\cf0 (\
			\cf2 Pseq\cf0 (#[1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,0,4,4],\cf2 inf\cf0 ),\
			\cf2 Pseq\cf0 ((70 + [ 0, 1, 5, 6, 10 ]).midicps ,\cf2 inf\cf0 )\
		),\
		0.2,\
		\cf2 Patch\cf0 (\{ \cf2 LFTri\cf0 .kr(0.1,[0.0,0.5],0.5,0.5) \}),\
		\cf2 Env\cf0 .adsr(0.3,sustainLevel: 0.4),\
		\cf2 Pbrown\cf0 (6000,10000,100),\
		\cf2 Env\cf0 .adsr(releaseTime: 0.5),\
		\
		// dur uses a Pfunc to ask the delta till the next event\
		\cf2 Pfunc\cf0 (\{ \cf2 arg\cf0  igs;  (igs.delta * 0.9) \}),\
		\
		\cf2 TempoPlayer\cf0 .new\
	],\
		\cf2 Prand\cf0 ([	\
			\cf2 Pn\cf0 (0.125,16),\
			\cf2 Pn\cf0 (0.25,8),\
			\cf2 Prand\cf0 ([0.5,0.25],4),\
			0.5,0.75,2.0],\cf2 inf\cf0 ) \cf3 // in beats\cf0 \
	).play\
)\
\
(\
	\cf2 InstrGateSpawner\cf0 (\{ \cf2 arg\cf0  freq,rq,width,fenv,fenvmod,envperc,dur,tempo;\
		\cf2 var\cf0  gate;\
		gate = \cf2 Trig1\cf0 .kr(1.0,dur / tempo);\
		\cf2 RLPF\cf0 .ar(\
			\cf2 Pulse\cf0 .ar(\
				freq,\
				width\
			),\
			\cf2 EnvGen\cf0 .kr(fenv,gate,levelScale: fenvmod),\
			rq)\
	 		  * \cf2 EnvGen\cf0 .kr(envperc,gate,0.3, doneAction: 2)\
	\},[\
		\cf3 // using the beat to index into chord changes\cf0 \
		\cf2 Pfunc\cf0 (\{  \cf2 arg\cf0  igs;\
			(\
				\cf3 // choose degree convert it via a scale to a note number\cf0 \
				( [1,3,5].choose.degreeToKey([ 0, 1, 3, 7, 8 ]) )\
				\cf3 // choose an octave\cf0 \
				+ 30 + [0,11,23].choose\
				\cf3 // 1 4 5 1 chord progression\cf0 \
				+ [1,4,5,1].wrapAt(igs.beat div: 16)\
			).midicps \
		\}),\
		0.1,\
		\cf2 Patch\cf0 (\{ \cf2 FSinOsc\cf0 .kr(0.1,[0.0,0.5],0.45,0.5) \}),\
		\cf2 Env\cf0 .adsr(sustainLevel: 0.1),\
		6000,\
		\cf2 Env\cf0 .adsr(releaseTime: 0.1),\
		\cf2 Pfunc\cf0 (\{ \cf2 arg\cf0  igs;  (igs.delta * rrand(0.1,1.4)) \}),\
		\cf2 TempoPlayer\cf0 .new\
	],\
		\cf2 PdurStutter\cf0 (\
			\cf2 Pseq\cf0 ([1,1,1,1,2,2,2,2,2,2,2,2,4,4,3,3,0,2,1,1,1,1],\cf2 inf\cf0 ),\
			0.25\
		)\
	).play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\
note that the patch is stereo because the width input is a stereo kr rate Patch.\
\
anything that returns a rate of \\stream (a Pattern or Function) will cause an .ir rate input to be created for the synth.\
\
to use a slider on a gui :\
	AsStream( NumberEditor.new )\
or make your own gui and poll the slider:\
	Pfunc(\{ slider.value \})\
\
	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 Compared to Pbind\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
Pbind streams each item, whether it is going to change or not (a float will not change, an Env will not change).\
so InstrGateSpawner has much more simple/efficient event handling, \
	not using an environment\
	streamed items are placed directly into the OSC message to be sent\
	only using the features that are needed for the ugenFunc\
		no lag, offsetChannel etc.\
		\
allows easy patching of players\
allows easy patching of Samples and allocates them seamlessly.\
beat is passed into each stream item\
	this solves a common 'sync' problem with event stream's note-by-note streaming\
the usual flexibility of players with regards to patching, saving\
\
cons:\
	can't do Pseq([ Pbind, Pbind ] ) etc.\
		isn't a pattern, doesn't end with a nil, so can't sequence sections with it.\
		but it is possible to use CropPlayer and Pseq or PlayerSeqTrack.\
	can't use pattern filters\
	can't switch ugenFuncs dynamically\
	\
\
compare with the first example from Pbind help
\f2\fs18 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 \\cfstring1\cf0 .postln, \{ \cf2 arg\cf0  i_out, freq = 360, gate = 1, pan, amp=0.1;\
	\cf2 var\cf0  out, eg, fc, osc, a, b, w;\
	fc = \cf2 LinExp\cf0 .kr(\cf2 LFNoise1\cf0 .kr(\cf2 Rand\cf0 (0.25,0.4)), -1,1,500,2000);\
	osc = \cf2 Mix\cf0 .fill(8, \{ \cf2 LFSaw\cf0 .ar(freq * [\cf2 Rand\cf0 (0.99,1.01),\cf2 Rand\cf0 (0.99,1.01)], 0, amp) \}).distort * 0.2;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr(1,1,1), gate, doneAction:2);\
	out = eg * \cf2 RLPF\cf0 .ar(osc, fc, 0.1);\
	#a, b = out;\
	\cf2 Out\cf0 .ar(i_out, \cf2 Mix\cf0 .ar(\cf2 PanAz\cf0 .ar(4, [a, b], [pan, pan+0.3])));\
\}).load(s);\
)\
\
e = \cf2 Pbind\cf0 (\cf4 \\degree\cf0 , \cf2 Pwhite\cf0 (0,12), \cf4 \\dur\cf0 , 0.2, \cf4 \\instrument\cf0 , \cf4 \\cfstring1\cf0 ).play; \cf3 // returns an EventStream\cf0 \
\
\
\
(\
\cf2 InstrGateSpawner\cf0 (\{ \cf2 arg\cf0  freq = 360,  pan=0, amp=0.1,dur=0.2,tempo;\
	\cf2 var\cf0  out, eg, fc, osc, a, b, w,gate;\
	gate = \cf2 Trig\cf0 .kr(1.0,dur / tempo);\
	fc = \cf2 LinExp\cf0 .kr(\cf2 LFNoise1\cf0 .kr(\cf2 Rand\cf0 (0.25,0.4)), -1,1,500,2000);\
	osc = \cf2 Mix\cf0 .fill(8, \{ \cf2 LFSaw\cf0 .ar(freq * [\cf2 Rand\cf0 (0.99,1.01),\cf2 Rand\cf0 (0.99,1.01)], 0, amp) \}).distort * 0.2;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr(1,1,1), gate, doneAction:2);\
	out = eg * \cf2 RLPF\cf0 .ar(osc, fc, 0.1);\
	#a, b = out;\
	\cf2 Mix\cf0 .ar(\cf2 PanAz\cf0 .ar(4, [a, b], [pan, pan+0.3]))\
\},[\
\
\cf2 	(Pwhite\cf0 (0,12).degreeToKey([0, 2, 4, 5, 7, 9, 11] + (5*12)) ).midicps,\
	0,\
	0.1,\
	0.2,\
	TempoPlayer.new\
],\
	0.2\
).play\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 the server usage is identical as should be expected, but the client side (using top) is about half the cpu.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 on another day, the test shows equal usage ! \
and then a minute later Pbind does show more usage.\
top is not really a good measure.\
simply because there is a lot less code running, InstrGateSpawner must be faster.\
they both have advantages in their way of working, and can both be used side by side.\
\
\
\
\
\
\
\
\
\
\
	a compile-string-saveable way to express the Pfunc\
\
		ValueAndAsStream(\
			Patch([\\ampPatterns,\\accent], [ accentArray ])\
		)\
		\
		Instr([\\ampPatterns,\\accent],\
				\{ arg accentArray;\
					Pfunc(\{ arg beat; accentArray.at((beat % 4).asInteger) \})\
				\});\
				\
		\
	the ValueAndAsStream values the Patch which returns the Pfunc.\
	\
	\
	\
	\
		\
		\
		\
	\
}