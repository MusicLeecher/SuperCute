{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red191\green0\blue0;\red0\green115\blue0;\red96\green96\blue96;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 VOsc			variable wavetable oscillator\
\

\fs24 VOsc.ar(table, freq, phase, mul, add)\

\f1\b0 \
A wavetable lookup oscillator which can be swept smoothly across wavetables. All the wavetables must be allocated to the same size. Fractional values of table will interpolate between two adjacent tables.\
\
This oscillator requires a buffer to be filled with a wavetable format signal.  This preprocesses the Signal into a form which can be used efficiently by the Oscillator.  The buffer size must be a power of 2.\
\
This can be acheived by creating a Buffer object and sending it one of the "b_gen" messages ( sine1, sine2, sine3 ) with the wavetable flag set to true.  \
\
This can also be acheived by creating a Signal object and sending it the 'asWavetable' message, saving it to disk, and having the server load it from there.\
\

\f0\b table
\f1\b0  - buffer index. Can be swept continuously among adjacent wavetable buffers of the same size.\

\f0\b freq
\f1\b0  - frequency in Hertz\

\f0\b phase
\f1\b0  - phase offset or modulator in radians\
\
note about wavetables:\
VOsc requires the b_gen sine1 wavetable flag to be ON.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 \
\
(\
s = \cf3 Server\cf2 .local;\
\cf4 // allocate and fill tables 0 to 7\cf2 \
8.do(\{ \cf3 arg\cf2  i;\
	\cf3 var\cf2  n, a;\
	\cf5 // allocate table\cf2 \
	s.sendMsg(\cf6 \\b_alloc\cf2 , i, 1024); \
	\cf4 // generate array of harmonic amplitudes\cf2 \
\cf0 	n = (i+1)**2;\
\cf2 	a = \cf3 Array\cf2 .fill(n, \{ \cf3 arg\cf2  j; ((n-j)/n).squared.round(0.001) \});\
	\cf4 // fill table\cf2 \
	s.performList(\cf6 \\sendMsg\cf2 , \cf6 \\b_gen\cf2 , i, \cf6 \\sine1\cf2 , 7, a);\
\});\
)\
\
(\
\cf3 SynthDef\cf2 (\cf7 "help-VOsc"\cf2 ,\{ \cf3 arg\cf2  out=0, bufoffset=0;\
	\cf3 var\cf2  x;\
	// mouse x controls the wavetable position\
	x = \cf3 MouseX\cf2 .kr(0,7);\
	\cf3 Out\cf2 .ar(out,\
		\cf3 VOsc\cf2 .ar(bufoffset+x, [120,121], 0, 0.3)\
	)\
\}).play(s,[\cf6 \\out\cf2 , 0, \cf6 \\bufoffset\cf2 , 0]);\
)\
\cf0 \
(\
8.do(\{ \cf8 arg\cf0  i;\
	var a;\
	s.sendMsg(\cf9 \\b_alloc\cf0 , i, 1024); \cf5 // allocate table\
\cf0 	\cf5 // generate array of harmonic amplitudes\cf0 \
	a = \cf8 Array\cf0 .fill(i, 0) ++ [0.5, 1, 0.5];\
	\cf5 // fill table\cf0 \
	s.performList(\cf9 \\sendMsg\cf0 , \cf9 \\b_gen\cf0 , i, \cf9 \\sine1\cf0 , 7, a);\
\});\
)\
\
(\
8.do(\{ \cf8 arg\cf0  i;\
	\cf8 var\cf0  a;\
	s.sendMsg(\cf9 \\b_alloc\cf0 , i, 1024); \cf5 // allocate table\cf0 \
	\cf5 // generate array of harmonic amplitudes\cf0 \
	a = \cf8 Array\cf0 .fill(32,0);\
	12.do(\{ \cf8 arg\cf0  i; a.put(32.rand, 1) \});\
	\cf5 // fill table\cf0 \
	s.performList(\cf9 \\sendMsg\cf0 , \cf9 \\b_gen\cf0 , i, \cf9 \\sine1\cf0 , 7, a);\
\});\
)\
\
(\
8.do(\{ \cf8 arg\cf0  i;\
	\cf8 var\cf0  a;\
	s.sendMsg(\cf9 \\b_alloc\cf0 , i, 1024); \cf5 // allocate table\cf0 \
	\cf5 // generate array of harmonic amplitudes\cf0 \
	n = (i+1)**2;\
	a = \cf8 Array\cf0 .fill(n, \{ \cf8 arg\cf0  j; 1.0.rand2 \});\
	\cf5 // fill table\cf0 \
	s.performList(\cf9 \\sendMsg\cf0 , \cf9 \\b_gen\cf0 , i, \cf9 \\sine1\cf0 , 7, a);\
\});\
)\
\
\cf2 \
\
}