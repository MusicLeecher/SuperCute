{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 HIDDeviceService\

\f1\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 A Service that provides access to Human Interface Devices like joysticks and gamepads.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
This service was mainly designed to use gamepads as control input. The name is derived from the mac osx specifications. \
The HIDDeviceService handles all the primitive calls. HIDDevice only stores information about a device and holds an array of HIDElements, which store information about the controllers of the device.\
A HIDDevice's information consists out of: \
	the manufacturer, the product, the usage, the vendorID, the productID and the locID.\
	The last three are used to identify the device. The vendorID and the productID are static for each device, the locID depends on the (usb) port the device is connected to.\
A HIDDeviceElement's information consists out of: \
	the type, the usage, the cookie, the minimum and the maximum value.\
	the cookie is a number that can be used to identify an element of a device.\
	\
There are two ways of getting values from the device: One is to poll a value, the other one is to start an eventloop that pushes every new value into the language and calls an action (like MIDIIn).\
To set up an eventloop follow these steps:\
	1. initialize the service by calling:\
	\
		
\f2\fs18 \cf2 HIDDeviceService.\cf0 buildDeviceList;\
		\
	
\f1\fs24 2. now the information about the devices can be found:\
		\
		
\f2\fs18 \cf2 (\cf0 \
		\cf2 HIDDeviceService\cf0 .devices.do(\{\cf2 arg\cf0  dev;\
			[dev.manufacturer, dev.product, dev.vendorID, dev.productID, dev.locID].postln;\
			dev.elements.do(\{\cf2 arg\cf0  ele;\
				[ele.type, ele.usage, ele.cookie, ele.min, ele.max].postln;\
			\});\
		\});\
		\cf2 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\
	
\f1\fs24 3. the device needs to be queued, that means that the eventloop actually uses this device to push values. \
		\
		
\f2\fs18 \cf2 HIDDeviceService\cf0 .devices.at(0).queueDevice;\
	\
	
\f1\fs24 4. set an action that is called by the incoming events. In addition to the value the events also deliver the productID, the vendorID and the locID of the device and the cookie of the element.\
		\
		
\f2\fs18 \cf2 (\cf0 \
		\cf2 HIDDeviceService\cf0 .action_(\{\cf2 arg\cf0  productID, vendorID, locID, cookie, val;\
				[productID, vendorID, locID, cookie, val].postln;\
		\});\
		)\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 	5. start the eventloop:\
		\
		
\f2\fs18 \cf2 HIDDeviceService.\cf0 runEventLoop;\
		\
	
\f1\fs24 6. stop the eventloop:
\f2\fs18 \
		\
		\cf2 HIDDeviceService.\cf0 stopEventLoop;
\f1\fs24 \
\
		\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 buildDeviceList(usagePage, usage)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
It is also possible to search for devices in other usage pages. (look in the class file)\
the default is: page: GenericDesktop usage: Joystick. if a nil is passed in all devices are listed.\
\
\
//HIDDeviceServis by jan trutzschler v. falkenstein\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 deviceSpecs
\f1\b0 \
	you can add to the classvar deviceSpecs the specs of your device.\
	the key used has to be the 
\f0\b product name
\f1\b0  derived from the device info.\
	\
\
here is a collection of specs:
\f2\fs18 \cf3 \
\
//wingman
\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
\cf2 HIDDeviceService\cf0 .deviceSpecs.put(\cf4 'WingMan Action Pad'\cf0 , \
			\cf2 IdentityDictionary\cf0 [\
				\cf4 \\a\cf0  -> 0, \cf4 \\b\cf0 -> 1, \cf4 \\c\cf0 -> 2,\
				\cf4 \\x\cf0 -> 3, \cf4 \\y\cf0 -> 4, \cf4 \\z\cf0 -> 5,\
				\cf4 \\l\cf0 -> 6, \cf3 //front left\cf0 \
				\cf4 \\r\cf0 -> 7, \cf3 //front right\cf0 \
				\cf4 \\s\cf0 -> 8, \
				\cf4 \\mode\cf0 -> 9,\
				\cf4 \\xx\cf0 -> 10,		\
				\cf4 \\yy\cf0 -> 11,		\
				\cf4 \\slider\cf0 -> 12,\
				\cf4 \\hat\cf0 -> 13\
			])\
)\
\cf3 //cyborg\cf0 \
(\
\cf2 HIDDeviceService\cf0 .deviceSpecs.put(\cf4 \\cyborg\cf0 ,  \cf3 //not the right product name yet, so this doesn't work.\cf0 \
			\cf2 IdentityDictionary\cf0 [\
				\cf4 \\trig\cf0  -> 0, \cf4 \\a\cf0 -> 1, \cf4 \\b\cf0  -> 2, \cf4 \\c\cf0  -> 3,\
				\cf4 \\f1\cf0 -> 4, \cf4 \\f2\cf0 -> 5, \cf4 \\f3\cf0 -> 6, \cf4 \\f4\cf0  -> 7,\
				\cf4 \\l\cf0  -> 8, \cf4 \\r\cf0  -> 9, \cf3 // arrow buttons\cf0 \
				\cf4 \\hu\cf0  -> 10, \cf4 \\hl\cf0  -> 11, \cf4 \\hr\cf0  -> 12, \cf4 \\hd\cf0  -> 13, \cf3 // hat positions\cf0 \
				\cf4 \\x\cf0  -> 14, \cf4 \\y\cf0  -> 15, \cf4 \\z\cf0  -> 16, \cf3 // axes\cf0 \
				\cf4 \\slider\cf0 -> 17,\
				\cf4 \\hat\cf0 -> 18\
			]);\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
}