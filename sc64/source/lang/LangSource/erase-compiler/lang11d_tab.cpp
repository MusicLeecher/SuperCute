
/*  A Bison parser, made from lang11d
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	INTEGER	258
#define	SC_FLOAT	259
#define	ACCIDENTAL	260
#define	SYMBOL	261
#define	STRING	262
#define	ASCII	263
#define	PRIMITIVENAME	264
#define	CLASSNAME	265
#define	CURRYARG	266
#define	VAR	267
#define	ARG	268
#define	CLASSVAR	269
#define	SC_CONST	270
#define	NILOBJ	271
#define	TRUEOBJ	272
#define	FALSEOBJ	273
#define	PSEUDOVAR	274
#define	ELLIPSIS	275
#define	DOTDOT	276
#define	PIE	277
#define	BEGINCLOSEDFUNC	278
#define	BADTOKEN	279
#define	INTERPRET	280
#define	BEGINGENERATOR	281
#define	LEFTARROW	282
#define	WHILE	283
#define	BINOP	284
#define	KEYBINOP	285
#define	READWRITEVAR	286
#define	UMINUS	287

#line 16 "lang11d"


#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void *alloca(unsigned long size); 
void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		532
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 287 ? yytranslate[x] : 156)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    54,     2,     2,     2,     2,    50,
    51,    37,    38,    49,    34,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,    48,    35,
    31,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    46,     2,    47,    52,     2,    42,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    39,    45,    53,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    32,    33,    40,    43
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    16,    23,    33,
    39,    40,    42,    43,    46,    47,    50,    54,    58,    62,
    63,    66,    74,    83,    91,   100,   101,   103,   104,   106,
   107,   109,   111,   114,   119,   122,   124,   126,   129,   130,
   133,   134,   138,   139,   143,   145,   148,   150,   152,   153,
   155,   158,   163,   168,   175,   182,   191,   197,   205,   210,
   213,   218,   224,   231,   237,   243,   250,   258,   266,   273,
   280,   289,   297,   302,   303,   311,   312,   320,   321,   324,
   329,   335,   341,   344,   349,   354,   356,   358,   360,   362,
   364,   366,   370,   373,   377,   381,   386,   390,   392,   397,
   399,   405,   411,   418,   426,   434,   443,   450,   457,   465,
   474,   483,   493,   496,   499,   503,   509,   514,   517,   520,
   524,   529,   535,   537,   539,   541,   543,   549,   552,   557,
   561,   566,   572,   580,   585,   592,   600,   601,   604,   607,
   612,   614,   618,   621,   622,   625,   627,   631,   634,   638,
   643,   649,   651,   655,   658,   663,   665,   669,   672,   673,
   676,   678,   682,   684,   688,   690,   692,   694,   696,   698,
   700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
   720,   722,   724,   726,   728,   730,   732,   734,   736,   738,
   740,   742,   744,   746,   748,   750,   752,   754,   760,   766,
   767,   770,   772,   775,   779,   780,   784,   790,   794,   800,
   802,   806,   811,   812,   814,   816,   820,   822,   826,   832,
   833,   835,   837,   841,   843,   847,   852,   856,   859,   861,
   865,   866,   868,   870,   874,   877,   882,   887,   891,   895,
   898,   900,   904,   905,   907,   912,   918,   922,   927,   928,
   931,   933,   937,   938,   940,   942,   944,   945,   947,   949,
   952,   954,   957,   959,   962,   964,   966,   968,   971,   974,
   976,   979,   981,   983,   985,   987,   989,   991,   993,   995,
   997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,
  1017,  1019,  1021,  1023
};

static const short yyrhs[] = {    56,
     0,    57,     0,    26,    70,     0,     0,    56,    58,     0,
    59,     0,    57,    59,     0,   143,    61,    44,    62,    64,
    45,     0,   143,    46,    60,    47,    61,    44,    62,    64,
    45,     0,    38,   143,    44,    64,    45,     0,     0,   142,
     0,     0,    30,   143,     0,     0,    62,    63,     0,    15,
   124,    48,     0,    13,   124,    48,     0,    16,   113,    48,
     0,     0,    64,    65,     0,   142,    44,   112,   109,    72,
    71,    45,     0,    37,   142,    44,   112,   109,    72,    71,
    45,     0,   152,    44,   112,   109,    72,    71,    45,     0,
    37,   152,    44,   112,   109,    72,    71,    45,     0,     0,
    48,     0,     0,    49,     0,     0,    31,     0,    74,     0,
    93,    74,     0,    50,   110,    69,    51,     0,   110,    69,
     0,    69,     0,    73,     0,    93,    73,     0,     0,   144,
    66,     0,     0,    52,    90,    66,     0,     0,    52,    90,
    66,     0,    76,     0,    75,    76,     0,   104,     0,    79,
     0,     0,    75,     0,   142,    75,     0,    50,   154,    51,
    75,     0,   142,    50,    51,    77,     0,   142,    50,    96,
   100,    51,    77,     0,    50,   154,    51,    50,    51,    77,
     0,    50,   154,    51,    50,    96,   100,    51,    77,     0,
   142,    50,    97,   100,    51,     0,    50,   154,    51,    50,
    97,   100,    51,     0,   143,    46,    94,    47,     0,   143,
    75,     0,   143,    50,    51,    77,     0,   143,    50,    98,
    51,    77,     0,   143,    50,    96,   100,    51,    77,     0,
   143,    50,    97,   100,    51,     0,    90,    41,    50,    51,
    77,     0,    90,    41,    50,    98,    51,    77,     0,    90,
    41,   142,    50,    98,    51,    77,     0,    90,    41,    50,
    96,   100,    51,    77,     0,    90,    41,    50,    97,   100,
    51,     0,    90,    41,   142,    50,    51,    77,     0,    90,
    41,   142,    50,    96,   100,    51,    77,     0,    90,    41,
   142,    50,    97,   100,    51,     0,    90,    41,   142,    77,
     0,     0,    44,    30,    93,    80,    49,    83,    45,     0,
     0,    44,    48,    93,    81,    49,    83,    45,     0,     0,
    49,    83,     0,   142,    28,    93,    82,     0,   142,   142,
    28,    93,    82,     0,    13,   142,    31,    93,    82,     0,
    93,    82,     0,    30,    30,    93,    82,     0,    30,    29,
    93,    82,     0,   106,     0,   104,     0,    79,     0,   105,
     0,   155,     0,    78,     0,    50,    93,    51,     0,    53,
   142,     0,    46,    94,    47,     0,    50,    88,    51,     0,
    50,    30,    89,    51,     0,    50,   123,    51,     0,   151,
     0,    84,    46,    96,    47,     0,    85,     0,    84,    46,
    96,    22,    47,     0,    84,    46,    22,    93,    47,     0,
    84,    46,    96,    22,    93,    47,     0,    84,    46,    96,
    22,    47,    31,    90,     0,    84,    46,    22,    93,    47,
    31,    90,     0,    84,    46,    96,    22,    93,    47,    31,
    90,     0,    90,    41,    46,    96,    22,    47,     0,    90,
    41,    46,    22,    93,    47,     0,    90,    41,    46,    96,
    22,    93,    47,     0,    90,    41,    46,    96,    22,    47,
    31,    90,     0,    90,    41,    46,    22,    93,    47,    31,
    90,     0,    90,    41,    46,    96,    22,    93,    47,    31,
    90,     0,    93,    22,     0,    22,    93,     0,    93,    22,
    93,     0,    93,    49,    93,    22,    93,     0,    93,    49,
    93,    22,     0,    22,    93,     0,    93,    22,     0,    93,
    22,    93,     0,    93,    49,    93,    22,     0,    93,    49,
    93,    22,    93,     0,    84,     0,    87,     0,    86,     0,
   143,     0,    90,    41,    46,    96,    47,     0,    42,    90,
     0,    90,   154,    91,    90,     0,   142,    31,    90,     0,
    53,   142,    31,    90,     0,    90,    41,   142,    31,    90,
     0,   142,    50,    96,   100,    51,    31,    90,     0,    54,
   101,    31,    90,     0,    84,    46,    96,    47,    31,    90,
     0,    90,    41,    46,    96,    47,    31,    90,     0,     0,
    41,   142,     0,    41,   137,     0,    41,    50,    93,    51,
     0,    90,     0,    92,    48,    90,     0,    92,    66,     0,
     0,    95,    67,     0,    93,     0,    93,    30,    93,     0,
   153,    93,     0,    95,    49,    93,     0,    95,    49,   153,
    93,     0,    95,    49,    93,    30,    93,     0,    93,     0,
    96,    49,    93,     0,    37,    93,     0,    96,    49,    37,
    93,     0,    99,     0,    98,    49,    99,     0,   153,    93,
     0,     0,    49,    98,     0,   102,     0,   102,    21,   142,
     0,   142,     0,   102,    49,   142,     0,   137,     0,   141,
     0,   148,     0,   150,     0,   149,     0,   145,     0,   146,
     0,   147,     0,   131,     0,   126,     0,   108,     0,   142,
     0,   137,     0,   141,     0,   148,     0,   150,     0,   149,
     0,   145,     0,   146,     0,   147,     0,   131,     0,   126,
     0,   137,     0,   141,     0,   148,     0,   150,     0,   149,
     0,   142,     0,   145,     0,   146,     0,   147,     0,   132,
     0,   127,     0,    44,   112,   109,    69,    45,     0,    24,
   112,   109,    69,    45,     0,     0,   109,   111,     0,   111,
     0,   110,   111,     0,    13,   119,    48,     0,     0,    14,
   119,    48,     0,    14,   118,    21,   142,    48,     0,    39,
   116,    39,     0,    39,   115,    21,   142,    39,     0,   114,
     0,   113,    67,   114,     0,   136,   142,    31,   103,     0,
     0,   116,     0,   117,     0,   116,    67,   117,     0,   142,
     0,   142,    68,   103,     0,   142,    68,    50,    93,    51,
     0,     0,   119,     0,   120,     0,   119,    49,   120,     0,
   142,     0,   142,    31,    90,     0,   142,    50,    93,    51,
     0,    93,    30,    93,     0,   153,    93,     0,   121,     0,
   122,    49,   121,     0,     0,   122,     0,   125,     0,   124,
    49,   125,     0,   135,   142,     0,   135,   142,    31,   103,
     0,    54,    50,   130,    51,     0,    50,   130,    51,     0,
   107,    30,   107,     0,   153,   107,     0,   128,     0,   129,
    49,   128,     0,     0,   129,     0,    54,    46,   133,    47,
     0,    54,   143,    46,   133,    47,     0,    46,   133,    47,
     0,   143,    46,   133,    47,     0,     0,   134,    67,     0,
   107,     0,   134,    49,   107,     0,     0,    35,     0,    40,
     0,    36,     0,     0,    35,     0,     4,     0,    34,     4,
     0,     5,     0,    34,     5,     0,     6,     0,    34,     6,
     0,    23,     0,   138,     0,   139,     0,   138,   140,     0,
   137,   140,     0,   140,     0,    34,   140,     0,     3,     0,
    29,     0,    11,     0,    10,     0,    18,     0,    19,     0,
    17,     0,     9,     0,     7,     0,     8,     0,    20,     0,
    32,     0,    40,     0,    35,     0,    36,     0,    34,     0,
    37,     0,    38,     0,    39,     0,    33,     0,   152,     0,
   153,     0,    12,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    40,    42,    44,    48,    49,    53,    54,    58,    62,    69,
    75,    76,    79,    80,    84,    85,    89,    91,    93,    97,
    98,   102,   105,   108,   111,   116,   117,   120,   121,   124,
   125,   128,   129,   133,   135,   137,   141,   142,   146,   147,
   151,   153,   157,   159,   163,   164,   170,   171,   174,   175,
   178,   182,   186,   190,   195,   199,   204,   222,   235,   237,
   248,   259,   270,   283,   304,   313,   322,   327,   340,   360,
   364,   370,   388,   394,   394,   404,   404,   410,   432,   436,
   470,   508,   522,   533,   537,   562,   563,   564,   565,   566,
   567,   568,   574,   584,   586,   588,   590,   592,   594,   607,
   610,   637,   655,   682,   710,   729,   757,   784,   802,   827,
   855,   874,   902,   921,   940,   957,   971,   992,  1011,  1029,
  1046,  1062,  1078,  1079,  1080,  1081,  1082,  1095,  1109,  1114,
  1118,  1129,  1134,  1144,  1149,  1163,  1179,  1180,  1181,  1182,
  1185,  1186,  1192,  1195,  1196,  1200,  1201,  1203,  1208,  1210,
  1217,  1225,  1226,  1230,  1232,  1236,  1237,  1241,  1245,  1246,
  1249,  1251,  1255,  1256,  1261,  1262,  1263,  1264,  1265,  1266,
  1267,  1268,  1269,  1270,  1273,  1276,  1279,  1280,  1281,  1282,
  1283,  1284,  1285,  1286,  1287,  1288,  1291,  1292,  1293,  1294,
  1295,  1296,  1297,  1298,  1299,  1300,  1301,  1304,  1307,  1312,
  1313,  1317,  1318,  1322,  1326,  1327,  1331,  1335,  1339,  1345,
  1346,  1350,  1354,  1355,  1358,  1359,  1363,  1365,  1367,  1375,
  1376,  1379,  1380,  1384,  1386,  1388,  1396,  1398,  1405,  1406,
  1410,  1411,  1414,  1415,  1419,  1421,  1425,  1429,  1433,  1435,
  1442,  1443,  1447,  1448,  1453,  1455,  1459,  1461,  1465,  1466,
  1469,  1470,  1474,  1475,  1477,  1479,  1483,  1484,  1488,  1489,
  1498,  1499,  1508,  1509,  1520,  1523,  1524,  1525,  1531,  1539,
  1546,  1555,  1556,  1559,  1562,  1565,  1568,  1571,  1574,  1577,
  1580,  1583,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
  1596,  1599,  1600,  1603
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","INTEGER",
"SC_FLOAT","ACCIDENTAL","SYMBOL","STRING","ASCII","PRIMITIVENAME","CLASSNAME",
"CURRYARG","VAR","ARG","CLASSVAR","SC_CONST","NILOBJ","TRUEOBJ","FALSEOBJ","PSEUDOVAR",
"ELLIPSIS","DOTDOT","PIE","BEGINCLOSEDFUNC","BADTOKEN","INTERPRET","BEGINGENERATOR",
"LEFTARROW","WHILE","':'","'='","BINOP","KEYBINOP","'-'","'<'","'>'","'*'","'+'",
"'|'","READWRITEVAR","'.'","'`'","UMINUS","'{'","'}'","'['","']'","';'","','",
"'('","')'","'^'","'~'","'#'","root","classes","classextensions","classdef",
"classextension","optname","superclass","classvardecls","classvardecl","methods",
"methoddef","optsemi","optcomma","optequal","funcbody","cmdlinecode","methbody",
"primitive","retval","funretval","blocklist1","blocklistitem","blocklist","msgsend",
"generator","@1","@2","nextqual","qual","expr1","valrangex1","valrangeassign",
"valrangexd","valrange2","valrange3","expr","adverb","exprn","exprseq","arrayelems",
"arrayelems1","arglist1","arglistv1","keyarglist1","keyarg","optkeyarglist",
"mavars","mavarlist","slotliteral","blockliteral","pushname","pushliteral","listliteral",
"block","funcvardecls","funcvardecls1","funcvardecl","argdecls","constdeflist",
"constdef","slotdeflist0","slotdeflist","slotdef","vardeflist0","vardeflist",
"vardef","dictslotdef","dictslotlist1","dictslotlist","rwslotdeflist","rwslotdef",
"dictlit","dictlit2","litdictslotdef","litdictslotlist1","litdictslotlist","listlit",
"listlit2","literallistc","literallist1","rwspec","rspec","integer","floatr",
"accidental","pie","floatp","name","classname","primname","trueobj","falseobj",
"nilobj","ascii","symbol","string","pseudovar","binop","keybinop","binop2","curryarg", NULL
};
#endif

static const short yyr1[] = {     0,
    55,    55,    55,    56,    56,    57,    57,    58,    58,    59,
    60,    60,    61,    61,    62,    62,    63,    63,    63,    64,
    64,    65,    65,    65,    65,    66,    66,    67,    67,    68,
    68,    69,    69,    70,    70,    70,    71,    71,    72,    72,
    73,    73,    74,    74,    75,    75,    76,    76,    77,    77,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    80,    79,    81,    79,    82,    82,    83,
    83,    83,    83,    83,    83,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    85,    85,    85,    86,    86,    86,    87,    87,    87,    87,
    87,    87,    88,    88,    88,    88,    88,    89,    89,    89,
    89,    89,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    91,    91,    91,    91,
    92,    92,    93,    94,    94,    95,    95,    95,    95,    95,
    95,    96,    96,    97,    97,    98,    98,    99,   100,   100,
   101,   101,   102,   102,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   104,   105,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   108,   108,   109,
   109,   110,   110,   111,   112,   112,   112,   112,   112,   113,
   113,   114,   115,   115,   116,   116,   117,   117,   117,   118,
   118,   119,   119,   120,   120,   120,   121,   121,   122,   122,
   123,   123,   124,   124,   125,   125,   126,   127,   128,   128,
   129,   129,   130,   130,   131,   131,   132,   132,   133,   133,
   134,   134,   135,   135,   135,   135,   136,   136,   137,   137,
   138,   138,   139,   139,   140,   141,   141,   141,   141,   141,
   141,   142,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   152,   152,   152,   152,   152,   152,   152,
   153,   154,   154,   155
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     2,     6,     9,     5,
     0,     1,     0,     2,     0,     2,     3,     3,     3,     0,
     2,     7,     8,     7,     8,     0,     1,     0,     1,     0,
     1,     1,     2,     4,     2,     1,     1,     2,     0,     2,
     0,     3,     0,     3,     1,     2,     1,     1,     0,     1,
     2,     4,     4,     6,     6,     8,     5,     7,     4,     2,
     4,     5,     6,     5,     5,     6,     7,     7,     6,     6,
     8,     7,     4,     0,     7,     0,     7,     0,     2,     4,
     5,     5,     2,     4,     4,     1,     1,     1,     1,     1,
     1,     3,     2,     3,     3,     4,     3,     1,     4,     1,
     5,     5,     6,     7,     7,     8,     6,     6,     7,     8,
     8,     9,     2,     2,     3,     5,     4,     2,     2,     3,
     4,     5,     1,     1,     1,     1,     5,     2,     4,     3,
     4,     5,     7,     4,     6,     7,     0,     2,     2,     4,
     1,     3,     2,     0,     2,     1,     3,     2,     3,     4,
     5,     1,     3,     2,     4,     1,     3,     2,     0,     2,
     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     5,     0,
     2,     1,     2,     3,     0,     3,     5,     3,     5,     1,
     3,     4,     0,     1,     1,     3,     1,     3,     5,     0,
     1,     1,     3,     1,     3,     4,     3,     2,     1,     3,
     0,     1,     1,     3,     2,     4,     4,     3,     3,     2,
     1,     3,     0,     1,     4,     5,     3,     4,     0,     2,
     1,     3,     0,     1,     1,     1,     0,     1,     1,     2,
     1,     2,     1,     2,     1,     1,     1,     2,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1
};

static const short yydefact[] = {     4,
    43,     0,     1,     2,     6,   272,   259,   261,   263,   280,
   281,   279,   274,   294,     0,   278,   276,   277,   282,   265,
   205,   273,     0,     0,   205,   144,   231,     0,     0,     0,
    36,     3,    32,    91,    88,   123,   100,   125,   124,   141,
    26,    43,    87,    89,    86,   175,    43,   202,   186,   185,
   177,   266,   267,   270,   178,   176,   126,   182,   183,   184,
   179,   181,   180,    98,    90,     0,     5,    13,     7,     0,
   222,   224,   220,   213,   200,   260,   262,   264,   271,   231,
   128,     0,     0,   200,   291,   146,     0,    28,     0,     0,
     0,   283,   287,   285,   286,   288,   289,   290,   284,     0,
     0,    43,   229,   232,     0,   292,   293,     0,    26,    93,
   249,   243,     0,   161,   163,     0,     0,   287,     0,   293,
   137,    27,   143,    33,    35,   203,   269,   268,     0,     0,
    51,    45,    48,    47,   144,     0,    60,    20,     0,    11,
     0,   204,     0,     0,     0,     0,   221,     0,    28,   215,
    30,    43,    74,    76,    43,     0,    94,    29,   145,   148,
   114,     0,     0,     0,    95,   113,     0,     0,    92,     0,
     0,    97,   228,     0,    27,    44,     0,   249,   243,   251,
   197,   196,     0,    28,   187,   188,   192,     0,   193,   194,
   195,   189,   191,   190,     0,   241,   244,     0,     0,     0,
     0,     0,   249,     0,   152,     0,     0,     0,    49,     0,
     0,   142,   130,     0,    49,   159,   159,    46,     0,    49,
   159,   159,     0,   156,     0,     0,    14,     0,    12,    15,
   223,   225,     0,     0,   206,     0,   208,    29,     0,    31,
     0,     0,   201,     0,     0,     0,   147,   149,     0,   118,
    96,   119,     0,   115,   227,     0,    34,     0,   230,     0,
     0,    52,   131,     0,     0,   245,    29,   250,   249,     0,
     0,   237,   240,   134,   162,   164,     0,     0,     0,    99,
     0,     0,     0,    49,   159,   159,     0,     0,     0,    50,
    73,     0,     0,   139,   138,   129,   154,    53,     0,     0,
     0,     0,    59,    61,     0,     0,     0,    49,   158,   288,
    10,    21,     0,     0,    13,    20,   226,     0,     0,   216,
     0,     0,   218,   174,   173,   165,   166,   170,   171,   172,
   167,   169,   168,   199,     0,     0,   198,     0,   150,   120,
     0,   117,    49,   159,   159,   247,   238,   252,     0,   239,
   242,   246,   102,   101,     0,     0,   153,     0,     0,   127,
    65,     0,     0,    49,   132,    49,   159,   159,     0,     0,
     0,   160,    49,    57,    49,    64,   157,    62,     0,     0,
   205,   205,     0,   253,   253,   257,    16,     0,   207,   209,
     0,     0,     0,     0,    78,   176,     0,   151,   121,   116,
    55,     0,     0,   248,     0,     0,   103,   135,   108,   107,
     0,     0,    49,    69,    66,    70,     0,     0,    49,   140,
   155,     0,    54,    63,   205,   205,   200,   200,    15,   254,
   256,   255,     0,   233,     0,     0,   258,    28,   210,     0,
     8,   219,     0,     0,     0,    75,     0,    83,     0,     0,
    77,   122,    49,    58,   105,   104,     0,     0,     0,   109,
   136,    68,    49,    72,    67,   133,   200,   200,    39,    39,
    20,    18,   253,   235,    17,    19,   257,     0,     0,    78,
    78,    79,    78,     0,    56,   106,   111,   110,     0,    71,
    39,    39,   275,    41,    26,    41,     0,   234,     0,   211,
     0,    78,    85,    84,    80,    78,   112,    41,    41,     0,
     0,    37,    41,    40,     0,     9,   236,   212,    82,    81,
     0,     0,    26,    22,    38,    24,    23,    25,    42,     0,
     0,     0
};

static const short yydefgoto[] = {   530,
     3,     4,    67,     5,   228,   141,   316,   387,   226,   312,
   123,   159,   241,    31,    32,   511,   494,   512,    33,   290,
   132,   291,    34,    35,   244,   245,   448,   394,    36,    37,
    38,    39,   100,   163,    40,   211,    41,   205,    87,    88,
   206,   217,   372,   224,   300,   113,   114,   323,    43,    44,
    45,   180,    46,   152,    47,   243,    75,   438,   439,   148,
   149,   150,   146,    70,    71,   103,   104,   105,   433,   434,
    49,   181,   196,   197,   198,    50,   182,   183,   184,   435,
   440,    51,    52,    53,    54,    55,    56,    57,   495,    58,
    59,    60,    61,    62,    63,    64,   106,   120,   121,    65
};

static const short yypact[] = {   194,
  1066,    53,    53,   -16,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   118,-32768,-32768,-32768,-32768,-32768,
    21,-32768,   249,  1742,    17,  1378,   792,  1742,   118,    41,
-32768,-32768,-32768,-32768,-32768,    31,-32768,-32768,-32768,  1827,
    62,    75,-32768,-32768,-32768,-32768,  1118,-32768,-32768,-32768,
   109,   109,-32768,-32768,-32768,   106,   187,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    94,-32768,   156,-32768,   -21,
-32768,   -10,   118,   118,-32768,-32768,-32768,-32768,-32768,   858,
-32768,  1742,  1742,-32768,-32768,   116,   122,   123,  1742,  1742,
  1430,-32768,   249,-32768,-32768,-32768,-32768,-32768,-32768,   136,
    -6,  1118,-32768,   134,   147,-32768,  1742,   174,  1798,   197,
  1794,   717,   203,    13,-32768,   193,  1482,-32768,    93,-32768,
   209,  1742,-32768,-32768,-32768,-32768,-32768,-32768,  1742,  1170,
   186,-32768,-32768,-32768,  1378,   910,   186,-32768,    53,   118,
   214,-32768,   118,  1742,  1742,   266,   131,   273,    34,-32768,
    63,  1118,-32768,-32768,  1118,  1742,-32768,  1378,-32768,-32768,
-32768,  1742,   251,    58,-32768,  1742,  1742,  1742,-32768,   264,
  1378,-32768,-32768,    73,-32768,-32768,  1742,  1794,   717,-32768,
-32768,-32768,   252,   272,   109,-32768,-32768,   280,-32768,-32768,
-32768,-32768,-32768,-32768,   288,-32768,   287,   294,  1794,  1742,
   118,   118,  1794,  1742,-32768,    14,  1534,   962,   269,    64,
  1742,  1827,  1827,  1742,   186,   302,   314,-32768,   309,   186,
   302,   314,    23,-32768,  1742,   674,-32768,   317,-32768,-32768,
-32768,  1827,   315,   118,-32768,   118,-32768,-32768,   118,-32768,
   552,   322,-32768,   316,   319,   324,-32768,   342,  1742,-32768,
-32768,  1742,  1742,-32768,-32768,   351,-32768,   344,-32768,  1742,
  1222,   186,  1827,   328,   326,-32768,  1794,-32768,  1794,  1794,
   717,-32768,-32768,  1827,-32768,-32768,   331,   333,  1586,   352,
  1742,  1742,    29,   186,   302,   314,   189,  1742,  1014,   186,
-32768,   382,  1742,-32768,-32768,   349,-32768,-32768,  1274,   345,
   362,   346,-32768,-32768,   348,   350,   362,   186,-32768,   293,
-32768,-32768,   358,   359,   377,   290,-32768,   360,   372,-32768,
  1742,     4,-32768,-32768,-32768,   109,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1326,  1326,-32768,  1742,-32768,-32768,
   391,  1742,   186,   302,   314,-32768,-32768,-32768,   374,-32768,
-32768,-32768,   392,   393,   378,  1742,-32768,   386,  1638,   401,
-32768,   394,   398,   186,  1827,   186,   302,   314,   246,   399,
  1742,   388,   165,-32768,   186,-32768,-32768,-32768,   408,   409,
    21,    21,   410,   239,   239,   407,-32768,   815,-32768,-32768,
   406,   118,   279,   414,   411,   218,   416,-32768,  1742,-32768,
-32768,   413,   415,-32768,  1742,  1742,   431,  1827,   437,   439,
   429,  1742,   186,-32768,-32768,-32768,   426,   428,   186,-32768,
-32768,  1742,-32768,-32768,    21,    21,-32768,-32768,-32768,-32768,
-32768,-32768,   235,-32768,   118,   291,-32768,   301,-32768,   118,
-32768,-32768,   451,  1742,  1742,-32768,  1326,-32768,  1742,   456,
-32768,-32768,   186,-32768,  1827,  1827,  1742,  1742,  1742,   459,
  1827,-32768,   186,-32768,-32768,  1827,-32768,-32768,   132,   132,
   290,-32768,   239,   460,-32768,-32768,   407,   463,  1742,   411,
   411,-32768,   411,  1742,-32768,  1827,  1827,  1827,  1742,-32768,
   132,   132,-32768,  1690,   461,  1690,  1813,-32768,   628,-32768,
   628,   411,-32768,-32768,-32768,   411,  1827,  1690,  1690,  1742,
   442,-32768,   447,-32768,   469,-32768,-32768,-32768,-32768,-32768,
   475,   477,  1798,-32768,-32768,-32768,-32768,-32768,-32768,   523,
   524,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   525,-32768,   212,    99,-32768,  -303,-32768,
  -106,  -147,-32768,   -27,-32768,  -282,  -275,    19,   488,   -39,
   -78,   320,-32768,    92,-32768,-32768,  -220,  -328,-32768,-32768,
-32768,-32768,-32768,-32768,   -18,-32768,-32768,    -1,   404,-32768,
    28,   -67,  -113,   227,   304,-32768,-32768,  -185,   254,-32768,
-32768,     6,-32768,   -75,   509,    11,   -20,-32768,    65,-32768,
-32768,   308,-32768,   470,   403,   379,-32768,-32768,   164,    78,
  -234,-32768,   281,-32768,   375,  -230,-32768,  -164,-32768,-32768,
-32768,   -79,-32768,-32768,   -22,   -70,   145,   501,-32768,   -63,
   -26,   231,   248,   307,   385,-32768,  -207,   486,   -23,-32768
};


#define	YYLAST		1868


static const short yytable[] = {    42,
    79,   239,   176,   108,    84,    81,   324,   397,   155,   109,
   325,    48,   388,   264,    13,   166,   131,   137,   314,   125,
   144,     2,   223,   167,    86,   101,   142,   143,   127,   128,
    73,   185,   185,   201,    73,   279,   268,    48,   277,   145,
   186,   186,   168,     6,   169,    42,    82,   189,   189,   111,
   359,    13,   218,   112,  -214,    74,   108,   126,   218,    74,
   280,   202,   281,    13,    83,  -217,     6,     7,   222,    22,
    79,   307,   237,   308,   170,   360,   117,   281,   101,   252,
   153,   154,   238,  -217,   190,   190,   111,   160,   161,   164,
   112,  -217,    22,   240,   287,     6,    21,   292,   185,   185,
    42,  -217,   380,   212,   349,   173,   253,   186,   186,   122,
   213,  -217,   126,   293,   189,   189,    25,   195,   482,   185,
     6,    22,   261,   185,   242,   232,    28,   246,   186,    21,
   294,    20,   186,    86,   262,   189,   129,   138,   207,   189,
   286,   493,   208,   233,    15,   156,    22,   133,   133,    25,
    42,   190,   190,    42,   247,   130,   248,   216,   263,    72,
   250,   326,   127,   221,   254,   255,   256,   497,   157,   258,
   327,   158,   190,   110,   115,   369,   190,   328,   235,   143,
   314,   274,   171,   218,   195,   139,   165,   185,    21,   185,
   185,   185,   296,   345,   496,   422,   186,   172,   186,   186,
   186,   140,   278,   189,   273,   189,   189,   189,    25,    21,
    21,   218,   297,   515,   329,   508,   509,    72,   151,     1,
     6,   368,   133,   309,   174,   521,   522,   177,   133,    25,
    25,     2,   135,   200,   283,   285,   136,   307,   203,   364,
   190,    21,   190,   190,   190,   449,    22,   339,   129,   210,
   340,   341,    76,    77,    78,   187,   187,   230,   173,   503,
   504,    25,   505,   209,   324,   133,   324,   130,   325,   365,
   325,    20,   348,   430,   431,   350,   195,   355,   432,   357,
   358,   519,   472,   473,   229,   520,   234,    72,   344,   314,
   477,   370,    21,   236,   307,     6,   419,   357,   266,   288,
   133,   251,   384,   127,   385,   386,   133,   444,   445,   134,
   134,   133,    25,   517,   257,   518,   367,   270,   289,   391,
   267,    22,   187,   187,    92,   269,   118,    94,    95,    96,
    97,    98,    99,   395,   395,   271,   398,   408,   475,   473,
   400,   191,   191,   187,   272,   275,   276,   187,   476,   238,
   299,   469,   470,   133,   295,   303,   131,   411,   192,   192,
   427,   428,   301,   315,   335,   317,   334,   336,   337,   421,
   313,   338,   342,   167,   346,   133,   347,   352,   318,   353,
   319,   133,   356,   151,   134,    76,   455,   456,   514,   119,
   134,   491,   492,   461,    85,   373,   374,   452,   375,   133,
   376,   381,   382,   466,   467,   468,   139,   389,   191,   191,
   390,   187,   399,   187,   187,   187,   529,   193,   193,   326,
   404,   326,   405,   406,   407,   192,   192,   134,   327,   191,
   327,   412,   409,   191,   133,   328,   307,   328,   486,   487,
   488,   437,   480,   481,   413,   395,   192,   483,   414,   420,
   192,   425,   426,   429,   379,   133,   442,   133,   446,   447,
   451,   457,   134,   453,   133,   454,   133,   458,   134,   459,
   507,   330,   329,   134,   329,   460,   463,   502,   464,   396,
   396,   479,   506,   484,   193,   193,   524,   133,   331,   489,
   499,   523,   513,   501,   513,   194,   194,   191,   510,   191,
   191,   191,    66,    68,   133,   193,   513,   513,   175,   193,
   133,    89,   107,   526,   192,   134,   192,   192,   192,   527,
   302,   528,   531,   532,   305,   306,   383,   471,    69,   124,
   116,   525,   313,   377,   298,   102,   443,   134,   219,   304,
   450,   500,   147,   134,   133,   231,   320,   332,   436,   259,
   498,   351,     0,   265,   133,     7,     8,     9,    10,    11,
    12,   134,   194,   194,     0,   107,     0,     0,    16,    17,
    18,     0,     0,   193,    20,   193,   193,   193,     0,   474,
     0,     0,     0,   194,   478,    23,     0,   194,   362,   363,
     0,   396,     0,     0,     0,     0,   134,   199,     0,     0,
     0,   321,     0,   361,     0,   322,     0,     0,     0,     0,
     0,   188,   188,     0,     0,     0,     0,   134,     0,   134,
    89,   225,     0,     0,     0,   333,   134,   378,   134,     0,
     0,     7,     8,     9,    10,    11,    12,     0,     0,   227,
     0,   313,     0,   249,    16,    17,    18,   402,   403,   134,
    20,   194,     0,   194,   194,   194,   260,     0,     0,     0,
     0,    23,   401,     0,   199,     0,   134,     0,     0,     0,
   417,   418,   134,     0,     0,     0,     6,     0,   188,   188,
     0,   322,     0,   415,     0,   416,     0,     0,     0,     0,
     0,     0,   423,   225,   424,     0,     0,     0,     0,   188,
     0,     0,    22,   188,     0,    92,   134,   118,    94,    95,
   310,    97,    98,    99,     0,     0,   134,     0,   311,     6,
     7,     8,     9,    10,    11,    12,     0,    13,     0,   330,
     0,   330,   462,    16,    17,    18,     0,     0,   465,    20,
     0,     0,     0,     0,     0,    22,   331,     0,   331,    85,
    23,     0,     0,     0,     0,     0,   199,     0,     0,     0,
     0,     0,   178,     0,     0,     0,   179,   188,     0,   188,
   188,   188,   485,     0,   225,     0,     0,     0,     0,     0,
     0,     0,   490,     0,   225,     0,   225,     0,     0,     0,
     0,     0,   225,     0,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,    15,   332,     0,   332,    16,    17,
    18,    19,     0,    90,    20,    21,     0,     6,     0,     0,
    22,    91,   116,    92,    85,    93,    94,    95,    96,    97,
    98,    99,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,     0,    22,    29,    30,    92,     0,   118,    94,
    95,   310,    97,    98,    99,     0,     0,     0,     0,   441,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,    90,
    20,    21,     0,   333,     0,   333,    22,    91,     0,    92,
    85,    93,    94,    95,    96,    97,    98,    99,     0,    24,
     0,    25,     0,    26,     0,     0,     0,    80,     0,     0,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,    22,     0,
     0,     0,    85,    23,     0,     0,   214,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
   220,     0,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,    85,    23,     0,     0,   214,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,   284,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,    85,    23,     0,     0,
   214,     0,     0,     0,     0,    24,     0,    25,     0,    26,
     0,     0,     0,    80,   366,     0,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,    15,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,    22,     0,     0,     0,     0,    23,
     0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
     0,    26,     0,     0,     0,    27,     0,    28,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
    15,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
     0,    23,     0,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,     0,     0,    80,     0,    28,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,    22,     0,
     0,     0,     0,    23,     0,     0,   214,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
   215,     0,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,     0,    23,     0,     0,   214,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,   343,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,     0,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,    85,    23,     0,     0,
   371,     0,     0,     0,     0,    24,     0,    25,     0,    26,
     0,     0,     0,    80,     0,     0,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,   392,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,    22,   393,     0,     0,     0,    23,
     0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
     0,    26,     0,     0,     0,    80,     0,     0,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
    85,    23,     0,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,     0,     0,    80,     0,     0,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,   162,    20,    21,     0,     0,     0,     0,    22,     0,
     0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
     0,     0,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,   204,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,     0,    23,     0,     0,     0,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,     0,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,    14,     0,     0,     0,     0,
    16,    17,    18,    19,     0,   282,    20,    21,     0,     0,
     0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
     0,     0,     0,     0,     0,    24,     0,    25,     0,    26,
     0,     0,     0,    80,     0,     0,    29,    30,     6,     7,
     8,     9,    10,    11,    12,     0,    13,    14,     0,     0,
     0,     0,    16,    17,    18,    19,     0,     0,    20,    21,
     0,     0,     0,     0,    22,     0,     0,     0,     0,    23,
     0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
     0,    26,   354,     0,     0,    80,     0,     0,    29,    30,
     6,     7,     8,     9,    10,    11,    12,     0,    13,    14,
     0,     0,     0,     0,    16,    17,    18,    19,     0,     0,
    20,    21,     0,     0,     0,     0,    22,     0,     0,     0,
     0,    23,     0,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,   410,     0,     0,    80,     0,     0,
    29,    30,     6,     7,     8,     9,    10,    11,    12,     0,
    13,    14,     0,     0,     0,     0,    16,    17,    18,    19,
     0,     0,    20,    21,     0,     0,     0,     0,    22,     0,
     0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
     0,    24,     0,    25,     0,    26,     0,     0,     0,    80,
     0,   510,    29,    30,     6,     7,     8,     9,    10,    11,
    12,     0,    13,    14,     0,     0,     0,     0,    16,    17,
    18,    19,     0,     0,    20,    21,     0,     0,     0,     0,
    22,     0,     0,     0,     0,    23,     0,     0,     0,     0,
     0,     0,     0,    24,     0,    25,     0,    26,     0,     0,
     0,    80,     0,     0,    29,    30,     6,     7,     8,     9,
    10,    11,    12,     0,    13,     0,     0,     0,     0,     0,
    16,    17,    18,     0,     0,     6,    20,     0,     0,     0,
     0,     0,    22,     0,     0,     0,     0,    23,     0,    92,
    85,   118,    94,    95,    96,    97,    98,    99,   119,   178,
     0,    22,     0,   179,    92,   175,   118,    94,    95,   310,
    97,    98,    99,     0,     0,     0,     0,   516,    92,    85,
   118,    94,    95,    96,    97,    98,    99,   119
};

static const short yycheck[] = {     1,
    23,   149,   109,    27,    25,    24,   241,   336,    84,    28,
   241,     1,   316,   178,    11,    22,    56,    57,   226,    47,
    31,    38,   136,    30,    26,    27,    48,    49,    51,    52,
    14,   111,   112,    21,    14,    22,   184,    27,   203,    50,
   111,   112,    49,     3,    51,    47,    30,   111,   112,    46,
    22,    11,   131,    50,    21,    39,    80,    47,   137,    39,
    47,    49,    49,    11,    48,     3,     3,     4,   136,    29,
    93,    49,    39,    51,   102,    47,    46,    49,    80,    22,
    82,    83,    49,    21,   111,   112,    46,    89,    90,    91,
    50,    29,    29,    31,   208,     3,    24,    34,   178,   179,
   102,    39,   310,   122,   269,   107,    49,   178,   179,    48,
   129,    49,   102,    50,   178,   179,    44,   112,   447,   199,
     3,    29,    50,   203,   152,   144,    52,   155,   199,    24,
   210,    23,   203,   135,   174,   199,    31,    44,    46,   203,
   208,    10,    50,   145,    13,    30,    29,    56,    57,    44,
   152,   178,   179,   155,   156,    50,   158,   130,   177,    15,
   162,   241,   185,   136,   166,   167,   168,   471,    47,   171,
   241,    49,   199,    29,    30,   289,   203,   241,    48,    49,
   388,   200,    49,   262,   179,    30,    51,   267,    24,   269,
   270,   271,   211,   261,   470,    31,   267,    51,   269,   270,
   271,    46,   204,   267,   199,   269,   270,   271,    44,    24,
    24,   290,   214,   496,   241,   491,   492,    73,    74,    26,
     3,   289,   131,   225,    51,   508,   509,    31,   137,    44,
    44,    38,    46,    31,   207,   208,    50,    49,    46,    51,
   267,    24,   269,   270,   271,    28,    29,   249,    31,    41,
   252,   253,     4,     5,     6,   111,   112,    44,   260,   480,
   481,    44,   483,   119,   499,   174,   501,    50,   499,   288,
   501,    23,   267,    35,    36,   270,   271,   279,    40,   281,
   282,   502,    48,    49,   140,   506,    21,   143,   261,   497,
   438,   293,    24,    21,    49,     3,    51,   299,    47,    31,
   209,    51,    13,   326,    15,    16,   215,    29,    30,    56,
    57,   220,    44,   499,    51,   501,   289,    30,    50,   321,
    49,    29,   178,   179,    32,    46,    34,    35,    36,    37,
    38,    39,    40,   335,   336,    49,   338,   356,    48,    49,
   342,   111,   112,   199,    51,   201,   202,   203,    48,    49,
    49,   427,   428,   262,   210,    47,   396,   359,   111,   112,
   381,   382,    49,    47,    49,    51,    45,    49,    45,   371,
   226,    30,    22,    30,    47,   284,    51,    47,   234,    47,
   236,   290,    31,   239,   131,     4,   405,   406,   495,    41,
   137,   467,   468,   412,    33,    51,    51,   399,    51,   308,
    51,    44,    44,   422,   425,   426,    30,    48,   178,   179,
    39,   267,    22,   269,   270,   271,   523,   111,   112,   499,
    47,   501,    31,    31,    47,   178,   179,   174,   499,   199,
   501,    31,    47,   203,   343,   499,    49,   501,   457,   458,
   459,    35,   444,   445,    51,   447,   199,   449,    51,    51,
   203,    44,    44,    44,   310,   364,    51,   366,    45,    49,
    45,    31,   209,    51,   373,    51,   375,    31,   215,    31,
   489,   241,   499,   220,   501,    47,    51,   479,    51,   335,
   336,    31,   484,    28,   178,   179,    45,   396,   241,    31,
    31,   510,   494,    31,   496,   111,   112,   267,    52,   269,
   270,   271,     2,     3,   413,   199,   508,   509,    48,   203,
   419,    26,    27,    45,   267,   262,   269,   270,   271,    45,
   217,    45,     0,     0,   221,   222,   315,   429,     4,    42,
    30,   513,   388,   307,   215,    27,   392,   284,   135,   220,
   396,   477,    73,   290,   453,   143,   239,   241,   385,   171,
   473,   271,    -1,   179,   463,     4,     5,     6,     7,     8,
     9,   308,   178,   179,    -1,    80,    -1,    -1,    17,    18,
    19,    -1,    -1,   267,    23,   269,   270,   271,    -1,   435,
    -1,    -1,    -1,   199,   440,    34,    -1,   203,   285,   286,
    -1,   447,    -1,    -1,    -1,    -1,   343,   112,    -1,    -1,
    -1,    50,    -1,   284,    -1,    54,    -1,    -1,    -1,    -1,
    -1,   111,   112,    -1,    -1,    -1,    -1,   364,    -1,   366,
   135,   136,    -1,    -1,    -1,   241,   373,   308,   375,    -1,
    -1,     4,     5,     6,     7,     8,     9,    -1,    -1,   139,
    -1,   497,    -1,   158,    17,    18,    19,   344,   345,   396,
    23,   267,    -1,   269,   270,   271,   171,    -1,    -1,    -1,
    -1,    34,   343,    -1,   179,    -1,   413,    -1,    -1,    -1,
   367,   368,   419,    -1,    -1,    -1,     3,    -1,   178,   179,
    -1,    54,    -1,   364,    -1,   366,    -1,    -1,    -1,    -1,
    -1,    -1,   373,   208,   375,    -1,    -1,    -1,    -1,   199,
    -1,    -1,    29,   203,    -1,    32,   453,    34,    35,    36,
    37,    38,    39,    40,    -1,    -1,   463,    -1,    45,     3,
     4,     5,     6,     7,     8,     9,    -1,    11,    -1,   499,
    -1,   501,   413,    17,    18,    19,    -1,    -1,   419,    23,
    -1,    -1,    -1,    -1,    -1,    29,   499,    -1,   501,    33,
    34,    -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    46,    -1,    -1,    -1,    50,   267,    -1,   269,
   270,   271,   453,    -1,   289,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   463,    -1,   299,    -1,   301,    -1,    -1,    -1,
    -1,    -1,   307,    -1,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    13,   499,    -1,   501,    17,    18,
    19,    20,    -1,    22,    23,    24,    -1,     3,    -1,    -1,
    29,    30,   322,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    -1,    29,    53,    54,    32,    -1,    34,    35,
    36,    37,    38,    39,    40,    -1,    -1,    -1,    -1,    45,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,
    23,    24,    -1,   499,    -1,   501,    29,    30,    -1,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    33,    34,    -1,    -1,    37,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    51,    -1,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    51,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
    37,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    -1,    -1,    -1,    50,    51,    -1,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    13,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    -1,    -1,    -1,    50,    -1,    52,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    13,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    52,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    51,    -1,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    51,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
    37,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    13,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    22,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    -1,    -1,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    22,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    18,    19,    20,    -1,    22,    23,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,
    -1,    -1,    -1,    50,    -1,    -1,    53,    54,     3,     4,
     5,     6,     7,     8,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    -1,    46,    47,    -1,    -1,    50,    -1,    -1,    53,    54,
     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    18,    19,    20,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,    -1,
    53,    54,     3,     4,     5,     6,     7,     8,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    18,    19,    20,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    46,    -1,    -1,    -1,    50,
    -1,    52,    53,    54,     3,     4,     5,     6,     7,     8,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    -1,    -1,
    -1,    50,    -1,    -1,    53,    54,     3,     4,     5,     6,
     7,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
    17,    18,    19,    -1,    -1,     3,    23,    -1,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    46,
    -1,    29,    -1,    50,    32,    48,    34,    35,    36,    37,
    38,    39,    40,    -1,    -1,    -1,    -1,    45,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 41 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 2:
#line 43 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 1; ;
    break;}
case 3:
#line 45 "lang11d"
{ gRootParseNode = (PyrParseNode*)yyvsp[0]; gParserResult = 2; ;
    break;}
case 4:
#line 48 "lang11d"
{ yyval = 0; ;
    break;}
case 5:
#line 50 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 7:
#line 55 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 8:
#line 59 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-5], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 0); 
				;
    break;}
case 9:
#line 63 "lang11d"
{ yyval = (long)newPyrClassNode((PyrSlotNode*)yyvsp[-8], (PyrSlotNode*)yyvsp[-4], 
					(PyrVarListNode*)yyvsp[-2], (PyrMethodNode*)yyvsp[-1], 
					(PyrSlotNode*)yyvsp[-6]); 
				;
    break;}
case 10:
#line 70 "lang11d"
{ 
					yyval = (long)newPyrClassExtNode((PyrSlotNode*)yyvsp[-3], (PyrMethodNode*)yyvsp[-1]); 
				;
    break;}
case 11:
#line 75 "lang11d"
{ yyval = 0; ;
    break;}
case 13:
#line 79 "lang11d"
{ yyval = 0; ;
    break;}
case 14:
#line 81 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 15:
#line 84 "lang11d"
{ yyval = 0; ;
    break;}
case 16:
#line 86 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 17:
#line 90 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varClass); ;
    break;}
case 18:
#line 92 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varInst); ;
    break;}
case 19:
#line 94 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varConst); ;
    break;}
case 20:
#line 97 "lang11d"
{ yyval = 0; ;
    break;}
case 21:
#line 99 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 22:
#line 103 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 23:
#line 106 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 24:
#line 109 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 0); ;
    break;}
case 25:
#line 112 "lang11d"
{ yyval = (long)newPyrMethodNode((PyrSlotNode*)yyvsp[-6], (PyrSlotNode*)yyvsp[-2], 
					(PyrArgListNode*)yyvsp[-4], (PyrVarListNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1], 1); ;
    break;}
case 33:
#line 130 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 34:
#line 134 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-2], (PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 35:
#line 136 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, (PyrVarListNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 36:
#line 138 "lang11d"
{ yyval = (long)newPyrBlockNode(NULL, NULL, (PyrParseNode*)yyvsp[0], false); ;
    break;}
case 38:
#line 143 "lang11d"
{ yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 39:
#line 146 "lang11d"
{ yyval = 0; ;
    break;}
case 40:
#line 148 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 41:
#line 152 "lang11d"
{ yyval = (long)newPyrReturnNode(NULL); ;
    break;}
case 42:
#line 154 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 43:
#line 158 "lang11d"
{ yyval = (long)newPyrBlockReturnNode(); ;
    break;}
case 44:
#line 160 "lang11d"
{ yyval = (long)newPyrReturnNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 46:
#line 165 "lang11d"
{ 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 49:
#line 174 "lang11d"
{ yyval = 0; ;
    break;}
case 51:
#line 179 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 52:
#line 183 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0, 0); 
			;
    break;}
case 53:
#line 187 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-3], NULL, NULL, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 54:
#line 191 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 55:
#line 196 "lang11d"
{
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], NULL, NULL, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 56:
#line 200 "lang11d"
{
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3], 
						(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 57:
#line 205 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-2])) {
					((PyrPushNameNode*)yyvsp[-2])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 58:
#line 223 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)yyvsp[-2],
					newPyrPushLitNode((PyrSlotNode*)yyvsp[-5], NULL));
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 59:
#line 236 "lang11d"
{ yyval = (long)newPyrDynListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 60:
#line 238 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 61:
#line 249 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, NULL, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 62:
#line 260 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 63:
#line 271 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-5]), 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 64:
#line 284 "lang11d"
{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-4])) {
					((PyrPushNameNode*)yyvsp[-4])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)yyvsp[-4]),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 65:
#line 305 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-4], NULL, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 66:
#line 314 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 67:
#line 323 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 68:
#line 328 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 69:
#line 341 "lang11d"
{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-5])) {
					((PyrPushNameNode*)yyvsp[-5])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5],
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 70:
#line 361 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-5], NULL, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 71:
#line 365 "lang11d"
{ 
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-3]);
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-5], args, (PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 72:
#line 371 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				if (isSuperObjNode((PyrParseNode*)yyvsp[-6])) {
					((PyrPushNameNode*)yyvsp[-6])->mSlot.us = s_this;
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)yyvsp[-6], newPyrPushLitNode((PyrSlotNode*)yyvsp[-4], NULL));
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-2]);
				yyval = (long)newPyrCallNode(selectornode, args, (PyrParseNode*)yyvsp[-1], 0); 
			;
    break;}
case 73:
#line 389 "lang11d"
{ 
				yyval = (long)newPyrCallNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[-3], 0, (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 74:
#line 394 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 1); ;
    break;}
case 75:
#line 395 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[-1], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				yyval = (long)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0); 
			;
    break;}
case 76:
#line 404 "lang11d"
{ pushls(&generatorStack, yyvsp[0]); pushls(&generatorStack, 2); ;
    break;}
case 77:
#line 405 "lang11d"
{
				yyval = yyvsp[-1];
			;
    break;}
case 78:
#line 411 "lang11d"
{ 
					// innermost part
					int action = popls(&generatorStack); 
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);
					
					switch (action) 
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);
					
							yyval = (long)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							yyval = (long)expr;
						} break;
					}
				;
    break;}
case 79:
#line 433 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 80:
#line 437 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 81:
#line 471 "lang11d"
{ 
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)yyvsp[-1];
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (callnode->mSelector->mSlot.us == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
						
						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						yyval = (long)callnode; 
						
					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
					
					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
				}
			;
    break;}
case 82:
#line 509 "lang11d"
{ 
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)yyvsp[-1]);
				
				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 83:
#line 523 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit);

				yyval = (long)newPyrCallNode(selectornode, args2, 0, 0); 
			;
    break;}
case 84:
#line 534 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 85:
#line 538 "lang11d"
{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);
				
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);
				
				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);
				
				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0); 
				
				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)yyvsp[0], false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-1], blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				yyval = (long)newPyrCallNode(selectornode2, args3, 0, 0); 
			;
    break;}
case 92:
#line 569 "lang11d"
{ 
				PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
				node->mParens = 1;
				yyval = yyvsp[-1]; 
			;
    break;}
case 93:
#line 575 "lang11d"
{ 
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, argnode, 0, 0); 
			;
    break;}
case 94:
#line 585 "lang11d"
{ yyval = (long)newPyrDynListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 95:
#line 587 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 96:
#line 589 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 97:
#line 591 "lang11d"
{ yyval = (long)newPyrDynDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 98:
#line 593 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 99:
#line 595 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 101:
#line 611 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-2]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 102:
#line 638 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-4], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 103:
#line 656 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 104:
#line 683 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 105:
#line 711 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 106:
#line 730 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 107:
#line 758 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-2]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], (PyrParseNode*)yyvsp[-2]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 108:
#line 785 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-5], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 109:
#line 803 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-3]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-4]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-6], (PyrParseNode*)yyvsp[-3]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 110:
#line 828 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-4]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-5]);
					compileErrors++;
				}
				
				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], (PyrParseNode*)yyvsp[-4]);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 111:
#line 856 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-7], nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 112:
#line 875 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				
				int arglen = nodeListLength((PyrParseNode*)yyvsp[-5]);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-6]);
					compileErrors++;
				}
				
				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-8], (PyrParseNode*)yyvsp[-5]);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)yyvsp[-3]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 113:
#line 903 "lang11d"
{
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 114:
#line 922 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 115:
#line 941 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 116:
#line 958 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 117:
#line 972 "lang11d"
{ 
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				PyrPushLitNode *nilnode;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-3], 
					(PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 118:
#line 993 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 119:
#line 1012 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-1], nilnode);
				args = linkNextNode(args, nilnode2);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 120:
#line 1030 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-2], nilnode);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 121:
#line 1047 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]);
				args = linkNextNode(args, nilnode);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 122:
#line 1063 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;
				
				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-2]);
				args = linkNextNode(args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 126:
#line 1081 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 127:
#line 1083 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-4], 
					(PyrParseNode*)yyvsp[-1]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 128:
#line 1096 "lang11d"
{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;
				
				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(slotnode, args, 0, 0); 
			;
    break;}
case 129:
#line 1110 "lang11d"
{ 
				yyval = (long)newPyrBinopCallNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0], (PyrParseNode*)yyvsp[-1]); 
			;
    break;}
case 130:
#line 1115 "lang11d"
{ 
				yyval = (long)newPyrAssignNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 131:
#line 1119 "lang11d"
{ 
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)yyvsp[-2], NULL);
				args = linkNextNode(argnode, (PyrParseNode*)yyvsp[0]);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 132:
#line 1130 "lang11d"
{ 
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-2], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 133:
#line 1135 "lang11d"
{ 
				if (yyvsp[-3] != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)yyvsp[-3]);
					compileErrors++;
				}
				yyval = (long)newPyrSetterNode((PyrSlotNode*)yyvsp[-6], 
						(PyrParseNode*)yyvsp[-4], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 134:
#line 1145 "lang11d"
{ 
				yyval = (long)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[0], 0); 
			;
    break;}
case 135:
#line 1150 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-5], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 136:
#line 1164 "lang11d"
{ 
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;
				
				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)yyvsp[-6], 
					(PyrParseNode*)yyvsp[-3]);
				args = linkNextNode( args, (PyrParseNode*)yyvsp[0]);
				yyval = (long)newPyrCallNode(selectornode, args, 0, 0); 
			;
    break;}
case 137:
#line 1179 "lang11d"
{ yyval = 0; ;
    break;}
case 138:
#line 1180 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 139:
#line 1181 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 140:
#line 1182 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 142:
#line 1187 "lang11d"
{ 
				yyval = (long)newPyrDropNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
			;
    break;}
case 144:
#line 1195 "lang11d"
{ yyval = 0; ;
    break;}
case 145:
#line 1197 "lang11d"
{ yyval = yyvsp[-1]; ;
    break;}
case 147:
#line 1202 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 148:
#line 1204 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 149:
#line 1209 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 150:
#line 1211 "lang11d"
{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], elems); 
				;
    break;}
case 151:
#line 1218 "lang11d"
{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); 
					yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-4], elems); 
				;
    break;}
case 153:
#line 1227 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 154:
#line 1231 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 155:
#line 1233 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 157:
#line 1238 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 158:
#line 1242 "lang11d"
{ yyval = (long)newPyrPushKeyArgNode((PyrSlotNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 159:
#line 1245 "lang11d"
{ yyval = 0; ;
    break;}
case 160:
#line 1246 "lang11d"
{ yyval = yyvsp[0]; ;
    break;}
case 161:
#line 1250 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 162:
#line 1252 "lang11d"
{ yyval = (long)newPyrMultiAssignVarListNode((PyrSlotNode*)yyvsp[-2], (PyrSlotNode*)yyvsp[0]); ;
    break;}
case 164:
#line 1257 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 165:
#line 1261 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 166:
#line 1262 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 167:
#line 1263 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 168:
#line 1264 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 169:
#line 1265 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 170:
#line 1266 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 171:
#line 1267 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 172:
#line 1268 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 173:
#line 1269 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 174:
#line 1270 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 175:
#line 1273 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 176:
#line 1276 "lang11d"
{ yyval = (long)newPyrPushNameNode((PyrSlotNode*)yyvsp[0]); ;
    break;}
case 177:
#line 1279 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 178:
#line 1280 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 179:
#line 1281 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 180:
#line 1282 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 181:
#line 1283 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 182:
#line 1284 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 183:
#line 1285 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 184:
#line 1286 "lang11d"
{ yyval = (long)newPyrPushLitNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 185:
#line 1287 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 186:
#line 1288 "lang11d"
{ yyval = (long)newPyrPushLitNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 187:
#line 1291 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 188:
#line 1292 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 189:
#line 1293 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 190:
#line 1294 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 191:
#line 1295 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 192:
#line 1296 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 193:
#line 1297 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 194:
#line 1298 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 195:
#line 1299 "lang11d"
{ yyval = (long)newPyrLiteralNode((PyrSlotNode*)yyvsp[0], NULL); ;
    break;}
case 196:
#line 1300 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 197:
#line 1301 "lang11d"
{ yyval = (long)newPyrLiteralNode(NULL, (PyrParseNode*)yyvsp[0]); ;
    break;}
case 198:
#line 1305 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], false); ;
    break;}
case 199:
#line 1308 "lang11d"
{ yyval = (long)newPyrBlockNode((PyrArgListNode*)yyvsp[-3], (PyrVarListNode*)yyvsp[-2], 
					(PyrParseNode*)yyvsp[-1], true); ;
    break;}
case 200:
#line 1312 "lang11d"
{ yyval = 0; ;
    break;}
case 201:
#line 1314 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 203:
#line 1319 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-1], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 204:
#line 1323 "lang11d"
{ yyval = (long)newPyrVarListNode((PyrVarDefNode*)yyvsp[-1], varLocal); ;
    break;}
case 205:
#line 1326 "lang11d"
{ yyval = 0; ;
    break;}
case 206:
#line 1328 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 207:
#line 1332 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 208:
#line 1336 "lang11d"
{
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-1], NULL); 
				;
    break;}
case 209:
#line 1340 "lang11d"
{ 
					yyval = (long)newPyrArgListNode((PyrVarDefNode*)yyvsp[-3], (PyrSlotNode*)yyvsp[-1]); 
				;
    break;}
case 211:
#line 1347 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 212:
#line 1351 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 213:
#line 1354 "lang11d"
{ yyval = 0; ;
    break;}
case 216:
#line 1360 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 217:
#line 1364 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 218:
#line 1366 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 219:
#line 1368 "lang11d"
{
					PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
					node->mParens = 1;
					yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-4], node, 0);
				;
    break;}
case 220:
#line 1375 "lang11d"
{ yyval = 0; ;
    break;}
case 223:
#line 1381 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 224:
#line 1385 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, 0); ;
    break;}
case 225:
#line 1387 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], 0); ;
    break;}
case 226:
#line 1389 "lang11d"
{ 
									PyrParseNode* node = (PyrParseNode*)yyvsp[-1]; 
									node->mParens = 1;
									yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-3], node, 0); 
								;
    break;}
case 227:
#line 1397 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 228:
#line 1399 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 230:
#line 1407 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 231:
#line 1410 "lang11d"
{ yyval = 0; ;
    break;}
case 234:
#line 1416 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 235:
#line 1420 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[0], NULL, yyvsp[-1]); ;
    break;}
case 236:
#line 1422 "lang11d"
{ yyval = (long)newPyrVarDefNode((PyrSlotNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0], yyvsp[-3]); ;
    break;}
case 237:
#line 1426 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 238:
#line 1430 "lang11d"
{ yyval = (long)newPyrLitDictNode((PyrParseNode*)yyvsp[-1]); ;
    break;}
case 239:
#line 1434 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 240:
#line 1436 "lang11d"
{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)yyvsp[-1], NULL);
					yyval = (long)linkNextNode(key, (PyrParseNode*)yyvsp[0]); 
				;
    break;}
case 242:
#line 1444 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 243:
#line 1447 "lang11d"
{ yyval = 0; ;
    break;}
case 245:
#line 1454 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 246:
#line 1456 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 247:
#line 1460 "lang11d"
{ yyval = (long)newPyrLitListNode(0, (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 248:
#line 1462 "lang11d"
{ yyval = (long)newPyrLitListNode((PyrParseNode*)yyvsp[-3], (PyrParseNode*)yyvsp[-1]); ;
    break;}
case 249:
#line 1465 "lang11d"
{ yyval = 0; ;
    break;}
case 252:
#line 1471 "lang11d"
{ yyval = (long)linkNextNode((PyrParseNode*)yyvsp[-2], (PyrParseNode*)yyvsp[0]); ;
    break;}
case 253:
#line 1474 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 254:
#line 1476 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 255:
#line 1478 "lang11d"
{ yyval = rwReadWrite; ;
    break;}
case 256:
#line 1480 "lang11d"
{ yyval = rwWriteOnly; ;
    break;}
case 257:
#line 1483 "lang11d"
{ yyval = rwPrivate; ;
    break;}
case 258:
#line 1485 "lang11d"
{ yyval = rwReadOnly; ;
    break;}
case 259:
#line 1488 "lang11d"
{ yyval = zzval; ;
    break;}
case 260:
#line 1490 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.ui = -node->mSlot.ui;
				yyval = zzval;
			;
    break;}
case 261:
#line 1498 "lang11d"
{ yyval = zzval; ;
    break;}
case 262:
#line 1500 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -node->mSlot.uf;
				node->mSlot.utag = tagFloat;
				yyval = zzval;
			;
    break;}
case 263:
#line 1508 "lang11d"
{ yyval = zzval; ;
    break;}
case 264:
#line 1510 "lang11d"
{
					PyrSlotNode *node; 
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(node->mSlot.uf + 0.5);
					fracval = node->mSlot.uf - intval;
					node->mSlot.uf = -intval + fracval;
					node->mSlot.utag = tagFloat;
					yyval = zzval;
				;
    break;}
case 265:
#line 1520 "lang11d"
{ yyval = zzval; ;
    break;}
case 268:
#line 1526 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)yyvsp[-1];
				node->mSlot.uf *= pi;
			;
    break;}
case 269:
#line 1532 "lang11d"
{
				PyrSlotNode *node; 
				double ival;
				node = (PyrSlotNode*)yyvsp[-1];
				ival = node->mSlot.ui;
				node->mSlot.uf = ival * pi;
				node->mSlot.utag = tagFloat;
			;
    break;}
case 270:
#line 1540 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = pi;
				node->mSlot.utag = tagFloat;
				yyval = zzval;
			;
    break;}
case 271:
#line 1547 "lang11d"
{
				PyrSlotNode *node; 
				node = (PyrSlotNode*)zzval; 
				node->mSlot.uf = -pi;
				node->mSlot.utag = tagFloat;
				yyval = zzval;
			;
    break;}
case 272:
#line 1555 "lang11d"
{ yyval = zzval; ;
    break;}
case 273:
#line 1556 "lang11d"
{ yyval = zzval; ;
    break;}
case 274:
#line 1559 "lang11d"
{ yyval = zzval; ;
    break;}
case 275:
#line 1562 "lang11d"
{ yyval = zzval; ;
    break;}
case 276:
#line 1565 "lang11d"
{ yyval = zzval; ;
    break;}
case 277:
#line 1568 "lang11d"
{ yyval = zzval; ;
    break;}
case 278:
#line 1571 "lang11d"
{ yyval = zzval; ;
    break;}
case 279:
#line 1574 "lang11d"
{ yyval = zzval; ;
    break;}
case 280:
#line 1577 "lang11d"
{ yyval = zzval; ;
    break;}
case 281:
#line 1580 "lang11d"
{ yyval = zzval; ;
    break;}
case 282:
#line 1583 "lang11d"
{ yyval = zzval; ;
    break;}
case 283:
#line 1586 "lang11d"
{ yyval = zzval; ;
    break;}
case 284:
#line 1587 "lang11d"
{ yyval = zzval; ;
    break;}
case 285:
#line 1588 "lang11d"
{ yyval = zzval; ;
    break;}
case 286:
#line 1589 "lang11d"
{ yyval = zzval; ;
    break;}
case 287:
#line 1590 "lang11d"
{ yyval = zzval; ;
    break;}
case 288:
#line 1591 "lang11d"
{ yyval = zzval; ;
    break;}
case 289:
#line 1592 "lang11d"
{ yyval = zzval; ;
    break;}
case 290:
#line 1593 "lang11d"
{ yyval = zzval; ;
    break;}
case 291:
#line 1596 "lang11d"
{ yyval = zzval; ;
    break;}
case 294:
#line 1603 "lang11d"
{ yyval = zzval; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1605 "lang11d"
