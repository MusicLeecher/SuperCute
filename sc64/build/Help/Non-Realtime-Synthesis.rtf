{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Non-Realtime Synthesis
\f1\b0\fs24 \
\
This documentation is initial.\
\
SuperCollider 3 supports non-realtime synthesis through the use of binary files of OSC commands.\
\
First create an OSC command file (i.e. a score)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 f = \cf2 File\cf0 (\cf3 "Cmds.osc"\cf0 ,\cf3 "w"\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // start a sine oscillator at 0.2 seconds.\cf0 \
c = [ 0.2, [\cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1001, 0, 0]].asRawOSC;\
f.write(c.size); \cf4 // each bundle is preceeded by a 32 bit size.\cf0 \
f.write(c); \cf4 // write the bundle data.\cf0 \
\
\cf4 // stop sine oscillator at 3.0 seconds.\cf0 \
c = [ 3.0, [\cf5 \\n_free\cf0 , 1001]].asRawOSC;\
f.write(c.size);\
f.write(c);\
\
\cf4 // scsynth stops processing immediately after the last command, so here is\cf0 \
\cf4 // a do-nothing command to mark the end of the command stream.\cf0 \
c = [ 3.2, [\cf5 0\cf0 ]].asRawOSC;\
f.write(c.size);\
f.write(c);\
\
f.close;
\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf4 // the 'NRTsine' SynthDef\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "NRTsine"\cf0 ,\{ \cf2 arg\cf0  freq = 440;\
	\cf2 Out\cf0 .ar(0,\
		 \cf2 SinOsc\cf0 .ar(freq, 0, 0.2)\
	)\
\}).writeDefFile;\
)
\f1\fs24 \
\
then on the command line (i.e. in Terminal):\
\
./scsynth -N Cmds.osc _ NRTout.aiff 44100 AIFF int16\
\
The command line arguments are:\
\
    -N <cmd-filename> <input-filename> <output-filename> <sample-rate> <header-format> <sample-format> 	<...other scsynth arguments>\
\
If you do not need an input sound file, then put "_" for the file name as in the example above.\
\
For details on other valid arguments to the scsynth app see 
\f0\b [\ul Server-Architecture\ulnone ]
\f1\b0 .\
\
This could be executed in SC as:\
\

\f2\fs18 \cf3 "./scsynth -N Cmds.osc _ NRTout.aiff 44100 AIFF int16 -o 1"\cf0 .unixCmd; \cf4 // -o 1 is mono output
\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
A more powerful option is to use the 
\f0\b Score 
\f1\b0 object, which has convenience methods to create OSC command files and do nrt synthesis. See the 
\f0\b [\ul Score\ulnone ] 
\f1\b0 helpfile for more details.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
x = [\
\
[0.0, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1000, 0, 0,  \cf5 \\freq\cf0 , 1413 ]],\
[0.1, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1001, 0, 0,  \cf5 \\freq\cf0 , 712 ]],\
[0.2, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1002, 0, 0,  \cf5 \\freq\cf0 , 417 ]],\
[0.3, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1003, 0, 0,  \cf5 \\freq\cf0 , 1238 ]],\
[0.4, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1004, 0, 0,  \cf5 \\freq\cf0 , 996 ]],\
[0.5, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1005, 0, 0,  \cf5 \\freq\cf0 , 1320 ]],\
[0.6, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1006, 0, 0,  \cf5 \\freq\cf0 , 864 ]],\
[0.7, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1007, 0, 0,  \cf5 \\freq\cf0 , 1033 ]],\
[0.8, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1008, 0, 0,  \cf5 \\freq\cf0 , 1693 ]],\
[0.9, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1009, 0, 0,  \cf5 \\freq\cf0 , 410 ]],\
[1.0, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1010, 0, 0,  \cf5 \\freq\cf0 , 1349 ]],\
[1.1, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1011, 0, 0,  \cf5 \\freq\cf0 , 1449 ]],\
[1.2, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1012, 0, 0,  \cf5 \\freq\cf0 , 1603 ]],\
[1.3, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1013, 0, 0,  \cf5 \\freq\cf0 , 333 ]],\
[1.4, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1014, 0, 0,  \cf5 \\freq\cf0 , 678 ]],\
[1.5, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1015, 0, 0,  \cf5 \\freq\cf0 , 503 ]],\
[1.6, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1016, 0, 0,  \cf5 \\freq\cf0 , 820 ]],\
[1.7, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1017, 0, 0,  \cf5 \\freq\cf0 , 1599 ]],\
[1.8, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1018, 0, 0,  \cf5 \\freq\cf0 , 968 ]],\
[1.9, [ \cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1019, 0, 0,  \cf5 \\freq\cf0 , 1347 ]],\
\
[3.0, [\cf5 \\c_set\cf0 , 0, 0]] \
];\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 You can then use Score.write to convert the above to the OSC command file as follows:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 Score\cf0 .write(x, \cf3 "score-test.osc"\cf0 );\
\cf3 "./scsynth -N score-test.osc _ score-test.aiff 44100 AIFF int16 -o 1"\cf0 .unixCmd;
\f1\fs24 \
\
Score also provides methods to do nrt synthesis directly:\

\f2\fs18 \
(\
\cf2 var\cf0  f, o;\
g = [\
	[0.1, [\cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1000, 0, 0, \cf5 \\freq\cf0 , 440]],	\
	[0.2, [\cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1001, 0, 0, \cf5 \\freq\cf0 , 660]],\
	[0.3, [\cf5 \\s_new\cf0 , \cf5 \\NRTsine\cf0 , 1002, 0, 0, \cf5 \\freq\cf0 , 220]],\
	[1, [\cf5 \\c_set\cf0 , 0, 0]]\
	];
\f1\fs24 \

\f2\fs18 o = \cf2 ServerOptions\cf0 .new.numOutputBusChannels = 1; \cf4 // mono output\cf0 \
\cf2 Score\cf0 .recordNRT(g, \cf3 "help-oscFile.osc"\cf0 , \cf3 "helpNRT.aiff"\cf0 , options: o); \cf4 // synthesize\cf0 \
)
\f1\fs24 \
}