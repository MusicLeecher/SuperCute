{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red96\green96\blue96;\red0\green0\blue191;\red0\green115\blue0;
\red191\green0\blue0;\red0\green0\blue0;\red96\green96\blue96;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 String\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Superclass: RawArray\
\

\f1\b0 String represents an array of characters.\
Strings can be written literally using double quotes:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "my string"\cf0 .class.postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Class Methods\ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \ulnone \

\f0\b *readNew(file)\

\f1\b0 \
Read the entire contents of a 
\f0\b File
\f1\b0  and return them as a new String.
\f2 \

\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Instance Methods\ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \ulnone \

\f0\b at(index)\
\

\f1\b0 Strings respond to .at in a manner similar to other indexed collections. Each element is a 
\f0\b Char
\f1\b0 .\

\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf2 "ABCDEFG"\cf0 .at(2).postln;
\f0\b\fs24 \
\
compare(aString)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Returns a -1, 0, or 1 depending on whether the receiver should be sorted before the argument,\
is equal to the argument or should be sorted after the argument. This is a case sensitive compare.\
\

\f0\b < aString\

\f1\b0 \
Returns a Boolean whether the receiver should be sorted before the argument.\
\

\f0\b == aString\

\f1\b0 \
Returns a Boolean whether the two Strings are equal.\
\

\f0\b post
\f1\b0 \
\
Prints the string to the current post window.\
\

\f0\b postln
\f1\b0 \
\
Prints the string and a carriage return to the current post window.\
\

\f0\b postc 	postcln
\f1\b0 \
\
As post and postln above, but formatted as a comment.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "This is a comment."\cf0 .postcln;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 postf
\f1\b0 \
\
Prints a formatted string with arguments to the current post window. The % character in the format string is replaced by a string representation of an argument. To print a % character use \\\\% .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
postf(\cf2 "this % a %. pi = %, list = %\\n", "is"\cf0 , \cf2 "test"\cf0 , pi.round(1e-4), (1..4))\
\
this is a test. pi = 3.1416, list = [ 1, 2, 3, 4 ]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 format
\f1\b0 \
\
Returns a formatted string with arguments. The % character in the format string is replaced by a string representation of an argument. To print a % character use \\\\% .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
format(\cf2 "this % a %. pi = %, list = %\\n", "is"\cf0 , \cf2 "test"\cf0 , pi.round(1e-4), (1..4))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 this is a test. pi = 3.1416, list = [ 1, 2, 3, 4 ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\

\f0\b error
\f1\b0 \
\
Prepends an error banner and posts the string\
\

\f0\b warn
\f1\b0 \
\
Prepends a warning banner and posts the string.\
\

\f0\b inform
\f1\b0 \
\
Posts the string.\
\

\f0\b ++ aString\

\f1\b0 \
Return a concatenation of the two strings.\
\

\f0\b + aString\

\f1\b0 \
Return a concatenation of the two strings with a space between them.\
\

\f0\b compile
\f1\b0 \
\
Compiles a String containing legal SuperCollider code and returns a Function.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
\cf3 var\cf0  f;\
f = \cf2 "2 + 1"\cf0 .compile.postln;\
f.value.postln;\
)
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 asCompileString
\f1\b0 \
\
Returns a String formatted for compiling.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
\cf3 var\cf0  f;\
f = \cf2 "myString"\cf0 ;\
f.postln;\
f.asCompileString.postln;\
)
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \

\f0\b postcs
\f1\b0 \
\
As postln, but posts the compileString of the reciever\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 List\cf0 [1, 2, [\cf2 "comment"\cf0 , [3, 2]], \{ 1.0.rand \}].postcs;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \

\f0\b interpret
\f1\b0 \
\
Compile and execute a String containing legal SuperCollider code, returning the result.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "2 + 1"\cf0 .interpret.postln;
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \

\f0\b interpretPrint
\f1\b0 \
\
Compile, execute and print the result of a String containing legal SuperCollider code.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "2 + 1"\cf0 .interpretPrint;
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \

\f0\b asSymbol
\f1\b0 \
\
Return a Symbol derived from the String.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\cf3 var\cf0  z;\
z = \cf2 "myString"\cf0 .asSymbol.postln;\
z.class.postln;\
)
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \

\f0\b asInteger
\f1\b0 \
\
Return an Integer derived from the String. Strings beginning with non-numeric characters return 0.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "4"\cf0 .asInteger.postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 asFloat
\f1\b0 \
\
Return a Float derived from the String. Strings beginning with non-numeric characters return 0.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "4.3"\cf0 .asFloat.postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 catArgs(... args)
\f1\b0 \
\
Concatenate this string with the following args.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are some args: "\cf0 .catArgs(\cf4 \\fish\cf0 , \cf3 SinOsc\cf0 .ar, \{4 + 3\}).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 scatArgs(... args)
\f1\b0 \
\
Same as catArgs, but with spaces in between.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are some args: "\cf0 .scatArgs(\cf4 \\fish\cf0 , \cf3 SinOsc\cf0 .ar, \{4 + 3\}).postln;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 ccatArgs(... args)
\f1\b0 \
\
Same as catArgs, but with commas in between.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "a String"\cf0 .ccatArgs(\cf4 \\fish\cf0 , \cf3 SinOsc\cf0 .ar, \{4 + 3\}).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 catList(list)	scatList(list)	ccatList(list)
\f1\b0 \
\
As catArgs, scatArgs and ccatArgs above, but takes a Collection (usually a List or an Array) as an argument. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "a String"\cf0 .ccatList([\cf4 \\fish\cf0 , \cf3 SinOsc\cf0 .ar, \{4 + 3\}]).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 split(separator)
\f1\b0 \
\
Returns an Array of Strings split at the separator. The separator is a 
\f0\b Char
\f1\b0 , and is not included in the output array. The default separator is $/, handy for Unix paths.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "This/could/be/a/Unix/path"\cf0 .split.postln;\
\cf2 "These are several words"\cf0 .split($ ).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 find(string, ignoreCase, offset)
\f1\b0 \
\
Returns the index of the string in the receiver, or nil if not found. If 
\f0\b ignoreCase
\f1\b0  is true, find makes no difference between uppercase and lowercase letters. The 
\f0\b offset
\f1\b0  is the point in the string where the search begins.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are several words"\cf0 .find(\cf2 "are"\cf0 ).postln;\
\cf2 "These are several words"\cf0 .find(\cf2 "fish"\cf0 ).postln;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 findBackwards(string, ignoreCase, offset)
\f1\b0 \
\
Same like find, but starts at the end of the string.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf5 // compare:\cf6 \
\cf7 "These words are several words"\cf6 .find(\cf7 "words"\cf6 ); \cf5 // 6\cf6 \
\cf7 "These words are several words"\cf6 .findBackwards(\cf7 "words"\cf6 ); \cf5 // 24\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 findAll(string,  ignoreCase, offset)
\f1\b0 \
\
Returns the indices of the string in the receiver, or nil if not found.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are several words which are fish"\cf0 .findAll(\cf2 "are"\cf0 ).postln;\
\cf2 "These are several words which are fish"\cf0 .findAll(\cf2 "fish"\cf0 ).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 contains(string)
\f1\b0 \
\
Returns a 
\f0\b Boolean
\f1\b0  indicating if the String contains string.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are several words"\cf0 .contains(\cf2 "are"\cf0 ).postln;\
\cf2 "These are several words"\cf0 .contains(\cf2 "fish"\cf0 ).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 containsi(string)\
\

\f1\b0 Same as contains, but case insensitive.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are several words"\cf0 .containsi(\cf2 "ArE"\cf0 ).postln;
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
containsStringAt(index, string)
\f1\b0 \
\
Returns a 
\f0\b Boolean 
\f1\b0 indicating if the String contains string beginning at the specified index.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 "These are several words"\cf0 .containsStringAt(6, \cf2 "are"\cf0 ).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 icontainsStringAt(index, string)\
\

\f1\b0 Same as containsStringAt, but case insensitive.\
\

\f0\b escapeChar(charToEscape)
\f1\b0 \
\
Add the escape character (\\) at the location of your choice.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "This will become a Unix friendly string"\cf0 .escapeChar($ ).postln;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 tr(from, to)\
\

\f1\b0 Transliteration. Replace all instances of from with to.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 ":-(:-(:-("\cf0 .tr($(, $)); \cf8 //turn the frowns upside down\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 replace(find, replace)
\f1\b0 \
\
Like 
\f0\b tr
\f1\b0 , but with strings as arguments.
\f2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 \
\cf7 "Here are several words which are fish"\cf6 .replace(\cf7 "are"\cf6 , \cf7 "were"\cf6 );
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 printOn(stream)\
\

\f1\b0 Print the String on stream.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Print this on Post"\cf0 .printOn(\cf3 Post\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // equivalent to:\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Post\cf0  << \cf2 "Print this on Post"\cf0 ;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 storeOn(stream)\
\

\f1\b0 Same as printOn, but formatted asCompileString.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Store this on Post"\cf0 .storeOn(\cf3 Post\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // equivalent to:\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Post\cf0  <<< \cf2 "Store this on Post"\cf0 ;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 inspectorClass\
\

\f1\b0 Returns class StringInspector.\
\

\f0\b stripRTF
\f1\b0 \
\
Returns a new String with all RTF formatting removed.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 // same as File-readAllStringRTF\cf0 \
g = \cf3 File\cf0 (\cf2 "/code/SuperCollider3/build/Help/UGens/Chaos/HenonC.help.rtf"\cf0 ,\cf2 "r"\cf0 );\
g.readAllString.stripRTF.postln;\
g.close;\
)
\f1\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Unix Support
\f1\b0\fs24 \ul \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone Where relevant, the current working directory is the same as the location of the SuperCollider app and the shell is the Bourne shell (sh). Note that the cwd, and indeed the shell itself, does not persist:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 \ulnone "echo $0"\cf0 .unixCmd; \cf8 // print the shell (sh)\cf0 \
\cf2 "pwd"\cf0 .unixCmd;\
\cf2 "cd Help/"\cf0 .unixCmd;\
\cf2 "pwd"\cf0 .unixCmd;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf2 \ulnone "export FISH=mackerel"\cf0 .unixCmd;\
\cf2 "echo $FISH"\cf0 .unixCmd;
\f1\fs24 \ul \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ulnone It is however possible to execute complex commands:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "pwd; cd Help/; pwd"\cf0 .unixCmd;
\f1 \

\f2 \cf2 "export FISH=mackerel; echo $FISH"\cf0 .unixCmd;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 Should you need an environment variable to persist you can use 
\f0\b setenv
\f1\b0  (see below).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
unixCmd\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Execute the String on the command line using the Bourne shell (sh) and send stdout to the post window. See man sh for more details.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf2 "ls Help"\cf0 .unixCmd;
\f0\b\fs24 \
\
setenv(value)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Set the environment variable indicated in the string to equal the String 
\f0\b value
\f1\b0 . This value will persist until it is changed or SC is quit. Note that if 
\f0\b value
\f1\b0  is a path you may need to call standardizePath on it (see below).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf8 // all defs in this directory will be loaded when a local server boots
\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "SC_SYNTHDEF_PATH"\cf0 .setenv(\cf2 "~/scwork/"\cf0 .standardizePath); \
\cf2 "echo $SC_SYNTHDEF_PATH"\cf0 .unixCmd;
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
getenv\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Returns the value contained in the environment variable indicated by the String.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "USER"\cf0 .getenv;
\f0\b\fs24 \
\
pathMatch\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Returns an 
\f0\b Array
\f1\b0  containing all paths matching this String. Wildcards apply, non-recursive.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 Post\cf0  << \cf2 "Help/*"\cf0 .pathMatch;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 loadPaths\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Perform pathMatch (see above) on this String, then load and execute all paths in the resultant 
\f0\b Array
\f1\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Help/Collections/loadPaths example.rtf"\cf0 .loadPaths; \cf8 //This file posts some text
\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 load\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Load and execute the file at the path represented by the receiver.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 standardizePath\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Expand ~ to your home directory, and resolve symbolic links. See 
\f0\b PathName 
\f1\b0 for more complex needs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "~"\cf0 .standardizePath; \cf8 //This will print your home directory
\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 basename\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Return the filename from a Unix path.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Imaginary/Directory/fish.rtf"\cf0 .basename;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 dirname\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Return the directory name from a Unix path.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Imaginary/Directory/fish.rtf"\cf0 .dirname;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 splitext\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Split off the extension from a filename or path and return both in an 
\f0\b Array 
\f1\b0 as [path or filename, extension].\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "fish.rtf"\cf0 .splitext;\
\cf2 "Imaginary/Directory/fish.rtf"\cf0 .splitext;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Document Support\ul \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \ulnone newTextWindow(title, makeListener)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Create a new 
\f0\b Document
\f1\b0  with this.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Here is a new Document"\cf0 .newTextWindow;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 openDocument\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Create a new 
\f0\b Document
\f1\b0  from the path corresponding to this. Returns the Document.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
d = \cf2 "Help/Help.help.rtf"\cf0 .openDocument;\
d.class;\
)
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 openTextFile(selectionStart, selectionLength)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Create a new 
\f0\b Document
\f1\b0  from the path corresponding to this. The selection arguments will preselect the indicated range in the new window. Returns this.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
d = \cf2 "Help/Help.help.rtf"\cf0 .openTextFile(0, 20);\
d.class;\
)
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 findHelpFile\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Returns the path for the helpfile named this, if it exists, else returns nil.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Document"\cf0 .findHelpFile;\
\cf2 "foobar"\cf0 .findHelpFile;
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 openHelpFile\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 Performs foundHelpFile(above) on this, and opens the file it if it exists, otherwise opens the main helpfile.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 "Document"\cf0 .openHelpFile;\
\cf2 "foobar"\cf0 .openHelpFile;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 Drawing Support
\fs28 \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 The following methods must be called within an SCWindow-drawHook or a SCUserView-drawFunc function, and will only be visible once the window or the view is refreshed. Each call to SCWindow-refresh SCUserView-refresh will 'overwrite' all previous drawing by executing the currently defined function.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
See also: 
\f0\b [\ul \ulc3 SCWindow\ulnone ]
\f1\b0 , 
\f0\b [\ul SCUserView\ulnone ]
\f1\b0 , 
\f0\b [\ul Color\ulnone ]
\f1\b0 , and 
\f0\b [\ul Pen\ulnone ]
\f1\b0 .
\f0\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \

\f0\b draw\

\f1\b0 	\
Draws the String at the current 0@0 
\f0\b [\ul Point\ulnone ]
\f1\b0 . If not transformations of the graphics state have taken place this will be the upper left corner of the window. See also 
\f0\b [\ul Pen\ulnone ]
\f1\b0 .\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
(\
w = \cf3 SCWindow\cf0 .new.front;\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.draw\
\};\
w.refresh\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 drawAtPoint(point, font, color)\

\f1\b0 \
Draws the String at the given 
\f0\b [\ul Point\ulnone ] 
\f1\b0 using the 
\f0\b [\ul Font\ulnone ]
\f1\b0  and 
\f0\b [\ul Color\ulnone ]
\f1\b0  specified.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
w = \cf3 SCWindow\cf0 .new.front;\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.drawAtPoint(\
		100@100, \
		\cf3 Font\cf0 (\cf2 "
\f1 Gadget
\f2 "\cf0 , 30), \
		\cf3 Color\cf0 .blue(0.3, 0.5))\
\};\
w.refresh\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 drawInRect(rect, font, color)\
\

\f1\b0 Draws the String into the given 
\f0\b [\ul Rect\ulnone ]
\f1\b0  using the 
\f0\b [\ul Font\ulnone ]
\f1\b0  and 
\f0\b [\ul Color\ulnone ]
\f1\b0  specified.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (\
w = \cf3 SCWindow\cf0 .new.front;\
r = \cf3 Rect\cf0 (100, 100, 100, 100);\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.drawInRect(\cf3 r\cf0 , \cf3 Font\cf0 (\cf2 "
\f1 Gadget
\f2 "\cf0 , 30), \cf3 Color\cf0 .blue(0.3, 0.5));\
	Pen.strokeRect(r);\
\};\
w.refresh\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf8 //	drawCenteredIn(inRect)\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 	draws the String into the center of the given rect with font and color into the window.\

\f0\b 	Unfortunately does not work for now...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
w = \cf3 SCWindow\cf0 .new.front;\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.drawCenteredIn(\
		\cf3 Rect\cf0 (100, 100, 100, 100), \
		\cf3 Font\cf0 (\cf2 "
\f1 Gadget
\f2 "\cf0 , 30), \
		\cf3 Color\cf0 .blue(0.3, 0.5)\
	)\
\};\
w.refresh\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf8 //	drawLeftJustIn(inRect)\cf0 \
	Unfortunately does not work for now...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
w = \cf3 SCWindow\cf0 .new.front;\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.drawLeftJustIn(\
		\cf3 Rect\cf0 (100, 100, 100, 100), \
		\cf3 Font\cf0 (\cf2 "
\f1 Gadget
\f2 "\cf0 , 30), \
		\cf3 Color\cf0 .blue(0.3, 0.5)\
	)\
\};\
w.refresh\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf8 //	drawRightJustIn(inRect)\cf0 \
	Unfortunately does not work for now...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
w = \cf3 SCWindow\cf0 .new.front;\
w.view.background_(\cf3 Color\cf0 .white);\
w.drawHook = \{\
	\cf2 "abababababa\\n\\n\\n"\cf0 .scramble.drawLeftJustIn(\
		\cf3 Rect\cf0 (100, 100, 100, 100), \
		\cf3 Font\cf0 (\cf2 "
\f1 Gadget
\f2 "\cf0 ,
\f1  
\f2 30), \
		\cf3 Color\cf0 .blue(0.3, 0.5)\
	)\
\};\
w.refresh\
)}