{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green0\blue0;
\red0\green0\blue191;\red0\green115\blue0;\red0\green115\blue0;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Pbind
\f1\b0 \cf2 \

\f0\b\fs24 \cf0 \
superclass: Pattern\

\f1\b0 \
Pbind(pattern pairs)\
\
The class Pbind provides a bridge between value patterns and event patterns. It binds symbols in each event to values obtained from a pattern. Pbind takes arguments in pairs, the first of a pair being a Symbol and the second being a value Pattern. Any object can act as a Pattern, so constants can be used as values.\
\
\
The Pbind stream returns nil whenever the first one of its streams ends or if nil is passed in.\
\

\f2\fs18 \cf3 // example:\cf4 \
\
a = \cf5 Pbind\cf4 (\cf6 \\x\cf4 , 77, \cf6 \\y\cf4 , \cf5 Pseq\cf4 ([1, 2, 3]));\
x = a.asStream;\
4.do \{ x.next(\cf5 Event\cf4 .new).postln \};
\f1\fs24 \cf0 \
\

\f2\fs18 \cf4 a = \cf5 Pbind\cf4 (\cf6 \\x\cf4 , 77, \cf6 \\y\cf4 , \cf5 Pseq\cf4 ([1, 2, 3]));\
x = a.asStream;\
x.next; \cf3 // this returns nil.
\f1\fs24 \cf0 \
\
\
An 
\f3\i\b event stream
\f1\i0\b0  is created for a Pattern by sending it the 
\f4\i asEventStream
\f1\i0  message. The 
\f4\i asEventStream
\f1\i0  message takes an Event as an argument. This event is copied for each call to next to pass down and back up the tree of patterns so that each pattern can modify the event. What Pbind does is put the values for its symbols into the event, possibly overwriting previous bindings to those symbols.\
\
This uses the default event.  In the next example we will supply our own event (synth function).\
\

\f2\fs18 \cf3 // example:\cf4 \
(\
\cf5 Pbind\cf4 (\
	\cf6 \\degree\cf4 , \cf5 Pseq\cf4 ([1,3,5,7], \cf5 inf\cf4 ),\
	\cf6 \\dur\cf4 , 0.125, \
	\cf6 \\octave\cf4 , 4, \
	\cf6 \\root\cf4 , 3\
).play\
)\
\cf0 \
\

\f1\fs24 To use another than the default SynthDef, we need to read the synth description library so that event know's what kind of arguments there are in each SynthDef.  Use 
\f0\b .store
\f1\b0  (instead of load or send) to create a Synth Description (SynthDesc).\
\
Special 
\f0\b control name conventions
\f1\b0   which should be used so that the SynthDef works with the default system:\
\

\f0\b out		
\f1\b0 output bus index
\f0\b \
gate		
\f1\b0 envelope gate (not level!) - should default to 1.0
\f0\b \
amp		
\f1\b0 synth amplitude - should default to 0.1
\f0\b \
\

\f1\b0 The control names of the synth definition should match the keys. The default event scheme omplements a couple of useful  parameter transformations in addition to that.\

\f0\b \
sustain	
\f1\b0 envelope duration (not dur!) - should default to 1.0. 
\f0\b legato 
\f1\b0 and
\f0\b  du
\f1\b0 r values are translated to 
\f0\b sustain\
freq		
\f1\b0 some frequency input - often defaults to 440. 
\f0\b degree, note 
\f1\b0 and
\f0\b  midinote
\f1\b0  values are translated to 
\f0\b freq
\f1\b0 .
\f0\b \
bufnum	
\f1\b0 buffer number
\f0\b \
pan		
\f1\b0 panning position\
\
\
\

\f2\fs18 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf7 \\cfstring1\cf0 , \{ \cf2 arg\cf0  i_out, freq = 360, gate = 1, pan, amp=0.1;\
	\cf2 var\cf0  out, eg, fc, osc, a, b, w;\
	fc = \cf2 LinExp\cf0 .kr(\cf2 LFNoise1\cf0 .kr(\cf2 Rand\cf0 (0.25,0.4)), -1,1,500,2000);\
	osc = \cf2 Mix\cf0 .fill(8, \{\cf2 LFSaw\cf0 .ar(freq * [\cf2 Rand\cf0 (0.99,1.01),\cf2 Rand\cf0 (0.99,1.01)], 0, amp) \}).distort * 0.2;\
	eg = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .asr(1,1,1), gate, doneAction:2);\
	out = eg * \cf2 RLPF\cf0 .ar(osc, fc, 0.1);\
	#a, b = out;\
	\cf2 Out\cf0 .ar(i_out, \cf2 Mix\cf0 .ar(\cf2 PanAz\cf0 .ar(4, [a, b], [pan, pan+0.3])));\
\}).store;\
)\
\
\
(\
e = \cf2 Pbind\cf0 (\
	\cf7 \\degree\cf0 , \cf2 Pwhite\cf0 (0,12), \
	\cf7 \\dur\cf0 , 0.2, \
	\cf7 \\instrument\cf0 , \cf7 \\cfstring1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ).play; \cf8 // returns an EventStream\cf0 \
)\
\
\cf3 // the event stream's stream can be changed while it is running:\cf4 \
\
(\
e.stream = \cf5 Pbind\cf4 (\
			\cf6 \\degree\cf4 , \cf5 Pseq\cf4 ([0,1,2,4,6,3,4,8],\cf5 inf\cf4 ), \
			\cf6 \\dur\cf4 , \cf5 Prand\cf4 ([0.2,0.4,0.8],\cf5 inf\cf4 ), \
			\cf6 \\amp\cf4 , 0.05, \cf6 \\octave\cf4 , 5, \
			\cf6 \\instrument\cf4 , \cf6 \\cfstring1\cf4 , \cf6 \\ctranspose\cf4 , 0\
).asStream;\
)\
\
(\
e.stream = \cf5 Pbind\cf4 (\
			\cf6 \\degree\cf4 , \cf5 Pseq\cf4 ([0,1,2,4,6,3,4,8],\cf5 inf\cf4 ), \
			\cf6 \\dur\cf4 , \cf5 Prand\cf4 ([0.2,0.4,0.8],\cf5 inf\cf4 ), \
			\cf6 \\amp\cf4 , 0.05, \cf6 \\octave\cf4 , 5, \
			\cf6 \\instrument\cf4 , \cf6 \\cfstring1\cf4 , \cf6 \\ctranspose\cf4 , 0\
).asStream;\
)\
\
(\
e.stream = \cf5 Pbind\cf4 (\
			\cf6 \\degree\cf4 , \cf5 Pxrand\cf4 ([0,1,2,4,6,3,5,7,8],\cf5 inf\cf4 ), \
			\cf6 \\dur\cf4 , \cf5 Prand\cf4 ([0.2,0.4,0.8],\cf5 inf\cf4 ), \cf6 \\amp\cf4 , 0.05, \
			\cf6 \\octave\cf4 , 5, \cf6 \\instrument\cf4 , \cf6 \\cfstring1\
\cf4 ).asStream;\
\cf0 )\
\
\cf3 // pairs of names can be used to group several parameters\cf4 \
\
(\
e.stream = \cf5 Pbind\cf4 (\
	[\cf6 \\degree\cf4 , \cf6 \\dur\cf4 ], \cf5 Pseq\cf4 ([\
			\cf5 Pseq\cf4 ([[0,0.1],[2,0.1],[3,0.1],[4,0.1],[5,0.8]],2),\
			\cf5 Ptuple\cf4 ([\cf5 Pxrand\cf4 ([6,7,8,9],4), 0.4]),\
			\cf5 Ptuple\cf4 ([\cf5 Pseq\cf4 ([9,8,7,6,5,4,3,2]), 0.2])\
		],\cf5 inf\cf4 ),\
	\cf6 \\amp\cf4 , 0.05, \cf6 \\octave\cf4 , 5, \cf6 \\instrument\cf4 , \cf6 \\cfstring1\cf4 , \cf6 \\mtranspose\cf4 , 0).asStream;\
)\
\
(\
e.stream = \cf5 Pbind\cf4 (\
	[\cf6 \\degree\cf4 , \cf6 \\dur\cf4 ], \cf5 Pseq\cf4 ([\
			\cf5 Pseq\cf4 ([[0,0.1],[2,0.1],[3,0.1],[4,0.1],[5,0.8]],2),\
			\cf5 Ptuple\cf4 ([\cf5 Pxrand\cf4 ([6,7,8,9],4), 0.4]),\
			\cf5 Ptuple\cf4 ([\cf5 Pseq\cf4 ([9,8,7,6,5,4,3,2]), 0.2])\
		],\cf5 inf\cf4 ),\
	\cf6 \\amp\cf4 , 0.05, \cf6 \\octave\cf4 , 6, \cf6 \\instrument\cf4 , \cf6 \\cfstring1\cf4 , \cf6 \\mtranspose\cf4 , 0).asStream;\
)\
\
\
\
\
\cf3 // play control:\cf4 \
\
\cf0 e.mute; \cf8 // keeps playing, but replaces notes with rests\cf0 \
\
e.unmute;\
\
e.reset;  \cf8 // reset the stream.\cf0 \
e.reset;  \cf8 // reset the stream.\cf0 \
e.reset;  \cf8 // reset the stream.\cf0 \
e.reset;  \cf8 // reset the stream.\cf0 \
\
e.pause;  \cf8 // will resume where paused.\cf0 \
\
e.play;\
\
e.stop;  \cf8 // will reset before resume.\cf0 \
\
e.play;\
\

\f1\fs24 \
\
\
Another example with a different SynthDef:\

\f2\fs18 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf7 \\berlinb\cf0 , \{ \cf2 arg\cf0  out=0, freq = 80, amp = 0.01, pan=0, gate=1;\
	\cf2 var\cf0  synth, env;\
	env = \cf2 Decay2\cf0 .kr(gate, 0.05, 8, 0.0003);\
	synth = \cf2 RLPF\cf0 .ar(\
		\cf2 LFPulse\cf0 .ar(freq, 0, \cf2 SinOsc\cf0 .kr(0.12,[0,0.5pi],0.48,0.5)),\
		freq * \cf2 SinOsc\cf0 .kr(0.21,0,18,20),\
		0.07\
	);\
	#a, b = synth*env;\
	\cf2 DetectSilence\cf0 .ar(a, 0.1, doneAction: 2);\
	\cf2 Out\cf0 .ar(out, \cf2 Mix\cf0 .ar(\cf2 PanAz\cf0 .ar(4, [a,b], [pan, pan+1])));\
\}).store;\
)\
\
(\
f = \cf2 Pbind\cf0 (\
		\cf7 \\degree\cf0 , \cf2 Pseq\cf0 ([0,1,2,4,6,3,4,8],\cf2 inf\cf0 ), \
		\cf7 \\dur\cf0 , 0.5, \cf7 \\octave\cf0 , 3, \cf7 \\instrument\cf0 , \cf7 \\berlinb\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ).play;\
)\
\
(\
f.stream = \cf2 Pbind\cf0 (\
		\cf7 \\degree\cf0 , \cf2 Pseq\cf0 ([0,1,2,4,6,3,4,8],\cf2 inf\cf0 ), \
		\cf7 \\dur\cf0 , 0.5, \cf7 \\octave\cf0 , [2,1],\
		\cf7 \\instrument\cf0 , \cf7 \\berlinb\cf0 , \
		\cf7 \\pan\cf0 , \cf2 Pfunc\cf0 (\{1.0.rand2\}) \
).asStream;\

\f1\fs24 )\
\
\
\

\f0\b Additional arguments\

\f1\b0 Here is an example with more bindings; Here we have added a filter with cutoff and resonance arguments.\
You will need to hit command '.' before executing the next few pbind ex. without having them stack up.\
also, due to the synthdef's and synthdeclib, if the server is shut down you will have to reload the \
synthdef and re-read the synthdesclib. \
\

\f2\fs18 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf9 "acid"\cf0 , \{ \cf2 arg\cf0  out, freq = 1000, gate = 1, pan = 1, cut = 4000, rez = 0.8, amp = 1;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Pan2\cf0 .ar(\
			\cf2 RLPF\cf0 .ar(\
				\cf2 Pulse\cf0 .ar(freq,0.05),\
			cut, rez),\
		pan) * \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(0.01, 1, 0.3), gate, amp, doneAction:2);\
	) \
\}).store;\
)\
\
(\
\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],\cf2 inf\cf0 ), \cf7 \\root\cf0 ,-12,\
	 \cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,5,1],\cf2 inf\cf0 ), \cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\
	 \cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.2).play;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 The 
\f0\b ListPatterns
\f1\b0  can be put around Event Streams to create sequences of Event Streams.\

\f2\fs18 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pseq\cf0 ([\
	\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],4), \cf7 \\root\cf0 ,-24,\
		\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,5,1],\cf2 inf\cf0 ), \cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\
		\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ),\cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.2),\
\
	\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25],6), \cf7 \\root\cf0 ,-24, \cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([18,17,11,9],\cf2 inf\cf0 ),\
		\cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\cf7 \\cut\cf0 ,1500, \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.16)\
\
],\cf2 inf\cf0 ).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
'
\f0\b Pseq
\f1\b0 ' in the above ex. can be any pattern object:\

\f2\fs18 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Prand\cf0 ([\
	\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],4), \cf7 \\root\cf0 ,-24,\
		\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,5,1],\cf2 inf\cf0 ),\cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\
		\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \
		\cf7 \\amp\cf0 ,0.2),\
\
	\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25],6), \cf7 \\root\cf0 ,-24, \cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([18,17,11,9],\cf2 inf\cf0 ), 		\cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\cf7 \\cut\cf0 ,1500, \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.16)\
\
],\cf2 inf\cf0 ).play;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \

\f0\b Multichannel Expansion.\

\f1\b0 If we supply an array for any argument, the synth node will \
automatically replicate to handle the additional arguments.\
When we give the 'root' argument an array, we should hear a chord....\
\

\f2\fs18 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pbind\cf0 (\
	\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],\cf2 inf\cf0 ), \
	\cf7 \\root\cf0 ,[-24,-17], \
	\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,5,1],\cf2 inf\cf0 ), \
	\cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}),\
	\cf7 \\amp\cf0 ,0.2).play;\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Using [
\f0\b \ul Pdef\ulnone ]
\f1\b0  (JITLib) makes it easy to replace patterns on the fly:
\f2\fs18 \
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pdef\cf0 (\cf7 \\buckyball\cf0 ).play;\
)\
\
(\
\cf2 Pdef\cf0 (\cf7 \\buckyball\cf0 , \cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],\cf2 inf\cf0 ), \cf7 \\root\cf0 ,[-24,-17], \
	\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,[5,17],1],\cf2 inf\cf0 ), \cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{[1.0.rand2,1.0.rand2]\}),\
	\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,[0.15,0.22]));\
)\
(\
\cf2 Pdef\cf0 (\cf7 \\buckyball\cf0 , \cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],\cf2 inf\cf0 ), \cf7 \\root\cf0 ,[-24,-17], \
	\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0b,3b,5b,7b,9b,11b,5b,0b],\cf2 inf\cf0 ), \cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),  \cf8 //notice the flats\cf0 \
	\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.2));\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //stop the Pdef\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pdef\cf0 (\cf7 \\buckyball\cf0 ).stop;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //start the Pdef\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pdef\cf0 (\cf7 \\buckyball\cf0 ).resume;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //removing the Pdef\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Pdef\cf0 .remove(\cf7 \\buckyball\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 \
Sending to effects.\

\f1\b0 Assignment to effect processors can be achieved by setting the 'out' argument to the desired\
efx's input bus.  The effect Synth must also be created.  Synth.new is one way of doing this.\
\

\f2\fs18 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //efx synthdef- dig the timing on the delay and the pbind.  :-P\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf9 "pbindefx"\cf0 , \{ \cf2 arg\cf0  out, in, time1=0.25, time2=0.5;  	var audio, efx;\
	audio = \cf2 In\cf0 .ar([20,21],2);\
	efx=\cf2 CombN\cf0 .ar(audio, 0.5, [time1,time2], 10, 1, audio);  	\cf2 Out\cf0 .ar(out, \cf2 efx\cf0 );\
	\}).load(s);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 \
//create efx synth\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 a = Synth\cf0 .after(1, \cf9 "pbindefx"\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 \
//if you don't like the beats change to 0.4,0.24\cf0 \
\cf8 //a.set(\\time1,0.4, \\time2,0.24);\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf9 "acid"\cf0 , \{ \cf2 arg\cf0  out, freq = 1000, gate = 1, pan = 0, cut = 4000, rez = 0.8, amp = 1;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 Pan2\cf0 .ar(\
			\cf2 RLPF\cf0 .ar(\
				\cf2 Pulse\cf0 .ar(freq,0.05),\
			cut, rez),\
		pan) * \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .linen(0.02, 1, 0.3), gate, amp, doneAction:2);\
	) \
\}).load(s);\
\
\cf2 SynthDescLib\cf0 .global.read;\
\
)\
\
\
(\
\cf2 Pbind\cf0 (\cf7 \\instrument\cf0 ,\cf7 \\acid\cf0 , \cf7 \\out\cf0 , 20, \cf7 \\dur\cf0 ,\cf2 Pseq\cf0 ([0.25,0.5,0.25],\cf2 inf\cf0 ), \cf7 \\root\cf0 ,[-24,-17],\
	\cf7 \\degree\cf0 ,\cf2 Pseq\cf0 ([0,3,5,7,9,11,5,1],\cf2 inf\cf0 ), \cf7 \\pan\cf0 ,\cf2 Pfunc\cf0 (\{1.0.rand2\}),\
	\cf7 \\cut\cf0 ,\cf2 Pxrand\cf0 ([1000,500,2000,300],\cf2 inf\cf0 ), \cf7 \\rez\cf0 ,\cf2 Pfunc\cf0 (\{0.7.rand +0.3\}), \cf7 \\amp\cf0 ,0.12).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf8 //
\f0\b UGens as Event values.
\f1\b0 \cf0 \
\cf8 //The following example creates unit generators instead of scalar values for\cf0 \
\cf8 //the values bound to the arguments. This shows that you can use patterns\cf0 \
\cf8 //to dynamically build your patch. Score data is not limited to scalar values.\cf0 \
\cf8 //This example can generate 36 different patches: 3 instruments * 3 freqs\cf0 \
\cf8 //* 2 amps * 2 pans\cf0 \
\cf8 //\
//\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf8 //I don't know if this is possible in sc3.  \cf0 \
\cf8 ////(\cf0 \
\cf8 //SynthDef(\\cfstring1.postln, \{ arg i_out, freq = 360, gate = 1, pan, amp=0.1;\cf0 \
\cf8 //	var out, eg, fc, osc, a, b, w;\cf0 \
\cf8 //	fc = LinExp.kr(LFNoise1.kr(Rand(0.25,0.4)), -1,1,500,2000);\cf0 \
\cf8 //	osc = Mix.fill(8, \{ LFSaw.ar(freq * [Rand(0.99,1.01),Rand(0.99,1.01)], 0, amp) \}).distort * 0.2;\cf0 \
\cf8 //	eg = EnvGen.kr(Env.asr(0.1,1,1), gate, doneAction:2);\cf0 \
\cf8 //	out = eg * RLPF.ar(osc, fc, 0.1);\cf0 \
\cf8 //	#a, b = out;\cf0 \
\cf8 //	Out.ar(i_out, Mix.ar(PanAz.ar(4, [a, b], [pan, pan+0.3])));\cf0 \
\cf8 //\}).load(s);\cf0 \
\cf8 //\cf0 \
\cf8 //SynthDef(\\berlinb, \{ arg out=0, freq = 80, amp = 0.01, pan=0, gate=1;\cf0 \
\cf8 //	var synth, env;\cf0 \
\cf8 //	env = Decay2.kr(gate, 0.05, 8, 0.0003);\cf0 \
\cf8 //	synth = RLPF.ar(\cf0 \
\cf8 //		LFPulse.ar(freq, 0, SinOsc.kr(0.12,[0,0.5pi],0.48,0.5)),\cf0 \
\cf8 //		freq * SinOsc.kr(0.21,0,18,20),\cf0 \
\cf8 //		0.07\cf0 \
\cf8 //	);\cf0 \
\cf8 //	#a, b = synth*env;\cf0 \
\cf8 //	DetectSilence.ar(a, 0.1, doneAction: 2);\cf0 \
\cf8 //	Out.ar(out, Mix.ar(PanAz.ar(4, [a,b], [pan, pan+1])));\cf0 \
\cf8 //\}).load(s);\cf0 \
\cf8 //\cf0 \
\cf8 //SynthDef("acid", \{ arg out, freq = 1000, gate = 1, pan = 0,  amp = 0.3;\cf0 \
\cf8 //	Out.ar(out,\cf0 \
\cf8 //		Pan2.ar(\cf0 \
\cf8 //				Pulse.ar(freq*0.125,0.05),\cf0 \
\cf8 //		pan) * EnvGen.kr(Env.linen(0.01, 1, 0.3), gate, amp, doneAction:2);\cf0 \
\cf8 //	) \cf0 \
\cf8 //	\}).load(s);\cf0 \
\cf8 //\cf0 \
\cf8 //SynthDescLib.global.read;\cf0 \
\cf8 //)\cf0 \
\cf8 //\cf0 \
\cf8 //(\cf0 \
\cf8 //var a, b, c, pattern, stream;\cf0 \
\cf8 //\cf0 \
\cf8 //pattern = Pbind(\cf0 \
\cf8 //	\\freq, Pfunc(\{Line.kr(40, 2000, 0.2)\}),\cf0 \
\cf8 //		\cf0 \
\cf8 //	\\amp, Pfunc(\{  \cf0 \
\cf8 //			[\cf0 \
\cf8 //				\{ SinOsc.kr(20.0.rand, 0, 0.1, 0.1) \},\cf0 \
\cf8 //				\{ XLine.kr(exprand(0.002, 0.2), exprand(0.002, 0.2), 2.2) \} \cf0 \
\cf8 //			].choose.value;\cf0 \
\cf8 //		\}),\cf0 \
\cf8 //	\\pan, Pfunc(\{  \cf0 \
\cf8 //			[\cf0 \
\cf8 //				\{ Line.kr(1.0.rand2, 1.0.rand2, 2.2)  \},\cf0 \
\cf8 //				\{ SinOsc.kr(4.0.rand) \}\cf0 \
\cf8 //			].choose.value;\cf0 \
\cf8 //		\}),\cf0 \
\cf8 //	\\instrument, Prand([ \\cfstring1, \\acid, \\berlinb ], inf)\cf0 \
\cf8 //);\cf0 \
\cf8 //\cf0 \
\cf8 //)\cf0 \
\cf8 //\cf0 \
}