{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 InFeedback
\fs28 		read signal from a bus with a current or one cycle old timestamp\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 superclass: MultiOutUGen
\f1\b0\fs18 \cf2 \
	\

\f0\b\fs24 \cf0 *ar(bus, numChannels)\
	\
bus 
\f2\b0 - the index of the bus to read in from.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li280\fi-280\ql\qnatural

\f0\b \cf0 numChannels 
\f2\b0 - the number of channels (i.e. adjacent buses) to read in. The default is 1. You cannot modulate this number by assigning it to an argument in a SynthDef.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
When the various output ugens (
\f0\b Out
\f2\b0 , 
\f0\b OffsetOut
\f2\b0 , 
\f0\b XOut
\f2\b0 ) write data to a bus, they 
\f3\i mix
\f2\i0  it with any data from the current cycle, but 
\f3\i overwrite
\f2\i0  any data from the previous cycle. (
\f0\b ReplaceOut
\f2\b0  overwrites all data regardless.) Thus depending on node order and what synths are writing to the bus, the data on a given bus may be from the current cycle or be one cycle old at the time of reading. 
\f0\b In.ar
\f2\b0  checks the timestamp of any data it reads in and zeros any data from the previous cycle (for use within that node; the data remains on the bus). This is fine for audio data, as it avoids feedback, but for control data it is useful to be able to read data from any place in the node order. For this reason 
\f0\b In.kr
\f2\b0  also reads data that is older than the current cycle.\
\
In some cases we might also want to read audio from a node later in the current node order. This is the purpose of InFeedback. The delay introduced by this is one block size, which equals about 0.0014 sec at the default block size and sample rate. (See the resonator example below to see the implications of this.)\
\
The variably mixing and overwriting behaviour of the output ugens can make order of execution crucial. (No pun intended.) For example with a node order like the following the InFeedback ugen in Synth 2 will only receive data from Synth 1 (-> = write out; <- = read in):\
\
Synth 1 -> busA					this synth overwrites the output of Synth3 before it reaches Synth 2\
Synth 2 (with InFeedback) <- busA \
Synth 3 -> busA\
\
If Synth 1 were moved after Synth 2 then Synth 2's InFeedback would receive a mix of the output from Synth 1 and Synth 3. This would also be true if Synth 2 came after Synth1 and Synth 3. In both cases data from Synth 1 and Synth 3 would have the same time stamp (either current or from the previous cycle), so nothing would be overwritten.\
\
Because of this it is often useful to allocate a separate bus for feedback. With the following arrangement Synth 2 will receive data from Synth3 regardless of Synth 1's position in the node order.
\f1\fs18 \cf2 \
\

\f2\fs24 \cf0 Synth 1 -> busA\
Synth 2 (with InFeedback) <- busB \
Synth 3 -> busB + busA \
\
The second example below demonstrates this issue.\
\
See also 
\f0\b LocalIn
\f2\b0  and 
\f0\b LocalOut
\f2\b0 .
\f1\fs18 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs32 \cf0 \ul \ulc0 \
Examples
\f2\b0\fs24 \ulnone \
\
audio feedback modulation:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
	(\
	SynthDef\cf0 (\cf3 "help-InFeedback"\cf0 , \{ \cf2 arg\cf0  out=0, in=0;\
		\cf2 var\cf0  input, sound;\
			input = \cf2 InFeedback.ar(\cf0 in, 1);\
			sound = SinOsc.ar(input * 1300 + 300, 0, 0.4);\cf4 \
\cf0 			\cf2 Out\cf0 .ar(out, sound);\
\
	\}).play;\
	)\
\

\f2\fs24 this shows how a node can read audio from a bus that is being written to by a synth following it:
\f1\fs18 \cf2 \
\
\cf0 	(\
	\cf2 SynthDef\cf0 (\cf3 "help-InFeedback"\cf0 , \{ \cf2 arg\cf0  out=0, in=0;\
		\cf2 Out\cf0 .ar(out,\
			\cf2 InFeedback\cf0 .ar(in, 1)\
		);\
	\}).send(s);\
	\cf2 SynthDef\cf0 (\cf3 "help-SinOsc"\cf0 , \{ \cf2 arg\cf0  out=0, freq=440;\
		\cf2 Out\cf0 .ar(out, \cf2 SinOsc\cf0 .ar(freq, 0, 0.1))\
	\}).send(s);\
	)\
	\
	x = Bus.audio(s, 1);\
\
	\cf4 // read from bus n play to bus 0 (silent)\cf0 \
	a = \cf2 Synth\cf0 (\cf3 "help-InFeedback"\cf0 ,[\cf5 \\in\cf0 , x.index, \cf5 \\out\cf0 , 0]);\
\
	\cf4 // now play a synth after this one, playing to bus x\cf0 \
	b = \cf2 Synth\cf0 .after(a, \cf3 "help-SinOsc"\cf0 , [\cf5 \\out\cf0 , x.index]);\
	\
	\cf4 // add another synth before a which also writes to bus x\cf0 \
	\cf4 // now you can't hear b, as its data is one cycle old, and is overwritten by c\cf0 \
	c = \cf2 Synth\cf0 .before(a, \cf3 "help-SinOsc"\cf0 , [\cf5 \\out\cf0 , x.index, \cf5 \\freq\cf0 , 800]);\
	\
	\cf4 // free c and you can hear b again\cf0 \
	c.free;\
	x.free;\
	\
	a.free; b.free;\
\

\f2\fs24 The example below implements a resonator. Note that you must subtract the blockSize in order for the tuning to be correct. See 
\f0\b LocalIn
\f2\b0  for an equivalent example.\
	
\f1\fs18 \
	(\
	\cf2 var\cf0  play, imp, initial;\
	\cf2 SynthDef\cf0 (\cf3 "testRes"\cf0 , \{\
	\
	play = \cf2 InFeedback\cf0 .ar(10, 1); \cf4 // 10 is feedback channel\cf0 \
	imp = \cf2 Impulse\cf0 .ar(1);\
	\
	\cf4 // feedback\cf0 \
	\cf2 OffsetOut\cf0 .ar(10, \cf2 DelayC\cf0 .ar(imp + (play * 0.995), 1, \
		440.reciprocal - ControlRate.ir.reciprocal)); \cf4 // subtract block size\cf0 \
	\
	\cf2 OffsetOut\cf0 .ar(0, play);\
	\
	\}).play(s);\
	\
	\cf4 // Compare with this for tuning\cf0 \
	\{ \cf2 SinOsc\cf0 .ar(440, 0, 0.2) \}.play(s, 1);\
	)
\f2\fs24 \
		}