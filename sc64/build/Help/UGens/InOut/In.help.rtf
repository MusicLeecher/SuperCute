{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 In
\fs28 				read a signal from a bus\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 superclass: AbstractIn
\f2\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	
\f0\b\fs24 *ar(bus, numChannels) 
\f2\b0 - read a signal from an audio bus.
\f0\b \
	*kr(bus, numChannels) 
\f2\b0 -
\f0\b  
\f2\b0 read a signal from a control bus.\
\

\f0\b bus 
\f2\b0 - the index of the bus to read in from.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li280\fi-280\ql\qnatural

\f0\b \cf0 numChannels 
\f2\b0 - the number of channels (i.e. adjacent buses) to read in. The default is 1. You cannot modulate this number by assigning it to an argument in a SynthDef.
\f1\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 In.kr is functionally similar to 
\f0\b [\ul InFeedback\ulnone ]. 
\f2\b0 That is it reads all data on the bus whether it is from the current cycle or not. This allows for it to receive data from later in the node order. In.ar reads only data from the current cycle, and will zero data from earlier cycles (for use within that synth; the data remains on the bus). Because of this and the fact that the various out ugens 
\f3\i mix
\f2\i0  their output with data from the current cycle but 
\f3\i overwrite
\f2\i0  data from an earlier cycle it may be necessary to use a private control bus when this type of feedback is desired. There is an example below which demonstrates the problem. See the 
\f0\b [\ul InFeedback\ulnone ]
\f2\b0  and 
\f0\b [\ul Order-of-execution\ulnone ]
\f2\b0  helpfiles for more details.\
\
Note that using the 
\f0\b Bus
\f2\b0  class to allocate a multichannel bus simply reserves a series of adjacent bus indices with the 
\f0\b [\ul Server\ulnone ]
\f2\b0  object's bus allocators. abus.index simply returns the first of those indices. When using a Bus with an 
\f0\b In
\f2\b0  or 
\f0\b [\ul Out\ulnone ]
\f2\b0  ugen there is nothing to stop you from reading to or writing from a larger range, or from hardcoding to a bus that has been allocated. You are responsible for making sure that the number of channels match and that there are no conflicts. See the 
\f0\b [\ul Server-Architecture\ulnone ]
\f2\b0  and 
\f0\b [\ul Bus\ulnone ]
\f2\b0  helpfiles for more information on buses and how they are used. \
\
The hardware input busses begin just after the hardwrae output busses and can be read from using In.ar. (See  
\f0\b [\ul Server-Architecture\ulnone ]
\f2\b0  for more details.) The number of hardware input and output busses can vary depending on your Server's options. For a convienent wrapper class which deals with this issue see 
\f0\b [\ul AudioIn\ulnone ]
\f2\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 read from an audio bus\ul \
\ulnone \
	
\f1\fs18 (\
	s = \cf2 Server\cf0 .local;\
	s.boot;\
	)\
	\
	(\
	\cf2 SynthDef\cf0 (\cf3 "help-PinkNoise"\cf0 , \{ \cf2 arg\cf0  out=0; \
		\cf2 Out\cf0 .ar(out, \cf2 PinkNoise\cf0 .ar(0.1)) \
	\}).send(s);\
	\
	\cf2 SynthDef\cf0 (\cf3 "help-In"\cf0 , \{ \cf2 arg\cf0  out=0, in=0;\
		\cf2 var\cf0  input;\
			input = \cf2 In\cf0 .ar(in, 1);\
			\cf2 Out\cf0 .ar(out, input);\
\
	\}).send(s);\
	)\
	\
	\cf4 //play noise on the right channel\cf0 \
	x = \cf2 Synth\cf0 (\cf3 "help-PinkNoise"\cf0 , [\cf5 \\out\cf0 , 1]);\
	 \
	\cf4 //read the input and play it out on the left channel\cf0 \
	\cf2 Synth\cf0 .after(x, \cf3 "help-In"\cf0 , [\cf5 \\out\cf0 , 0, \cf5 \\in\cf0 , 1]); \
									\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \ul read from a  control bus
\f1\fs18 \ulnone \
\
	(\
	\cf2 SynthDef\cf0 (\cf3 "help-InKr"\cf0 ,\{ \cf2 arg\cf0  out=0, in=0;\
		\cf2 Out\cf0 .ar(out,\
			\cf2 SinOsc\cf0 .ar(In.kr(in, 1), 0, 0.1)\
		)\
	\}).send(s);\
	S\cf2 ynthDef\cf0 (\cf3 "help-lfo"\cf0 , \{ \cf2 arg\cf0  out=0; \
		\cf2 Out\cf0 .kr(out, \cf3 LFNoise1.kr(0.3, 200, 800)\cf0 ) \
	\}).send(s);\
	)\
	\
	\
	b = \cf2 Bus\cf0 .control(s,1);\
	b.set(800);\
	\
	\cf2 Synth\cf0 (\cf3 "help-InKr"\cf0 ,[\cf5 \\in\cf0 , b.index]); \
	b.set(400);\
	b.set(300);\
	Synth("help-lfo", [\\out, b.index]);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 read control data from a synth later in the node order\ul \

\f1\fs18 \ulnone 	\
	(\
	\cf2 SynthDef\cf0 (\cf3 "help-Infreq"\cf0 , \{ \cf2 arg\cf0  bus;\
		\cf2 Out\cf0 .ar(0, \cf2 FSinOsc\cf0 .ar(\cf2 In\cf0 .kr(bus), 0, 0.5));\
	\}).send(s);\
	\
	\cf2 SynthDef\cf0 (\cf3 "help-Outfreq"\cf0 , \{ \cf2 arg\cf0  freq = 400, bus;\
		\cf2 Out\cf0 .kr(bus, \cf2 SinOsc\cf0 .kr(1, 0, freq/40, freq));\
	\}).send(s);\
	\
	b = \cf2 Bus\cf0 .control(s,1);\
	)\
	\
	\cf4 // add the first control Synth at the tail of the default server; no audio yet\cf0 \
	x = \cf2 Synth\cf0 .tail(s, \cf3 "help-Outfreq"\cf0 , [\cf5 \\bus\cf0 , b.index]);\
	\
	\cf4 // add the sound producing Synth BEFORE it; It receives x's data from the previous cycle\cf0 \
	y = \cf2 Synth\cf0 .before(x, \cf3 "help-Infreq"\cf0 , [\cf5 \\bus\cf0 , b.index]);\
	\
	\cf4 // add another control Synth before y, at the head of the server\cf0 \
	\cf4 // It now overwrites x's cycle old data before y receives it\cf0 \
	z = \cf2 Synth\cf0 .head(s, \cf3 "help-Outfreq"\cf0 , [\cf5 \\bus\cf0 , b.index, \cf5 \\freq\cf0 , 800]);\
	\
	\cf4 // get another bus\cf0 \
	c = \cf2 Bus\cf0 .control(s, 1);\
	\
	\cf4 // now y receives x's data even though z is still there\cf0 \
	y.set(\cf5 \\bus\cf0 , c.index); x.set(\cf5 \\bus\cf0 , c.index);\
	\
	x.free; y.free; z.free;\

\f2\fs24 	}