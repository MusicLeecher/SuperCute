{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf380
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 Dbufrd
\f1\b0\fs18 		
\f0\b\fs24  buffer demand ugen
\f1\b0\fs18 \
\

\f2\fs24 superclass: UGen\
\
\

\f0\b *new(bufnum, phase, loop)\

\f2\b0 	\

\f0\b bufnum
\f2\b0 	buffer number to read from\

\f0\b phase
\f2\b0 	index into the buffer (demand ugen or any other ugen)\

\f0\b loop
\f2\b0 		when phase exceeds number of frames in buffer, loops when set to 1 (default :1)\
	
\f1\fs18 \
	\
\
\cf2 // example\cf3 \
\
b = \cf4 Buffer\cf3 .alloc(s, 24, 1);\
b.setn(0, \{ exprand(200, 500) \} ! b.numFrames);\
b.getn(0, b.numFrames, \{\cf4 |x|\cf3  x.postln \})\
\
(\
\{\'ca\cf4 var\cf3  indexPattern;\
	indexPattern = \cf4 Dseq\cf3 ([\cf4 Dseq\cf3 ([0, 3, 5, 0, 3, 7, 0, 5, 9], 3), \cf4 Dbrown\cf3 (0, 23, 1, 5)], \cf4 inf\cf3 );\
	\cf4 SinOsc\cf3 .ar(\
		\cf4 Demand\cf3 .kr(\cf4 Dust\cf3 .kr(10), 0, \cf4 Dbufrd\cf3 (b.bufnum, indexPattern))\
	) * 0.1\
\}.play;\
)\
\
\cf2 // buffer as a time pattern\cf3 \
\
c = \cf4 Buffer\cf3 .alloc(s, 24, 1);\
c.setn(0, \{ [1, 0.5, 0.25].choose \} ! c.numFrames);\
c.getn(0, c.numFrames, \{\cf4 |x|\cf3  x.postln \})\
\
(\
\{\'ca\cf4 var\cf3  indexPattern;\
	indexPattern = \cf4 Dseq\cf3 ([\cf4 Dseq\cf3 ([0, 3, 5, 0, 3, 7, 0, 5, 9], 3), \cf4 Dbrown\cf3 (0, 23, 1, 5)], \cf4 inf\cf3 );\
	\cf4 SinOsc\cf3 .ar(\
		\cf4 Duty\cf3 .kr(\
			\cf4 Dbufrd\cf3 (c.bufnum, \cf4 Dseries\cf3 (0, 1, \cf4 inf\cf3 )) * 0.5, \
			0, \
			\cf4 Dbufrd\cf3 (b.bufnum, indexPattern)\
		)\
	) * 0.1\
\}.play;\
)\
\cf0 \
\cf2 // free buffers\cf3 \
\
b.free; c.free;\
\cf0 \
\
\
}