{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 DiskOut
\f1\b0\fs18 \
\

\f0\b\fs24 DiskOut.ar(bufnum, channelsArray)\
\

\f2\b0 Record to a soundfile to disk. Uses a 
\f0\b Buffer
\f2\b0 .\

\f0\b bufnum
\f2\b0  - the number of the buffer to write to (prepared with /b-write or Buffer.write) \

\f0\b channelsArray
\f2\b0  - the Array of channels to write to the file.
\f1\fs18 \
\
\
s.boot; \cf2 // start the server\cf0 \
(\
\cf2 // something to record\cf0 \
\cf3 SynthDef\cf0 (\cf4 "bubbles"\cf0 , \{\
	\cf3 var\cf0  f, zout;\
	f = \cf3 LFSaw\cf0 .kr(0.4, 0, 24, \cf3 LFSaw\cf0 .kr([8,7.23], 0, 3, 80)).midicps; \cf2 // glissando function\cf0 \
	zout = \cf3 CombN\cf0 .ar(\cf3 SinOsc\cf0 .ar(f, 0, 0.04), 0.2, 0.2, 4); \cf2 // echoing sine wave\cf0 \
	\cf3 Out\cf0 .ar(0, zout);\
\}).send(s);\
\
\cf2 // this will record to the disk\cf0 \
\cf3 SynthDef\cf0 (\cf4 "help-Diskout"\cf0 , \{\cf3 arg\cf0  bufnum;\
	\cf3 DiskOut\cf0 .ar(bufnum, \cf3 In\cf0 .ar(0,2));\
\}).send(s);\
\
\cf2 // this will play it back\cf0 \
\cf3 SynthDef\cf0 (\cf4 "help-Diskin-2chan"\cf0 , \{ \cf3 arg\cf0  bufnum = 0;\
	\cf3 Out\cf0 .ar(0, \cf3 DiskIn\cf0 .ar(2, bufnum));\
\}).send(s);\
)\
\

\f0\b\fs24 Object Style:
\f1\b0\fs18 \
\
\cf2 // start something to record\cf0 \
x = \cf3 Synth\cf0 .new(\cf4 "bubbles"\cf0 );\
\
\cf2 // allocate a disk i/o buffer\cf0 \
b= \cf3 Buffer\cf0 .alloc(s, 65536, 2);
\f2\fs24 \

\f1\fs18 \cf2 \
// create an output file for this buffer, leave it open
\f2\fs24 \cf0 \

\f1\fs18 b.write(\cf4 "recordings/diskouttest.aiff"\cf0 , \cf4 "aiff"\cf0 , \cf4 "int16"\cf0 , 0, 0, \cf3 true\cf0 );\
\cf2 // create the diskout node; making sure it comes after the source\cf0 \
d = \cf3 Synth\cf0 .tail(\cf3 nil\cf0 , \cf4 "help-Diskout"\cf0 , [\cf4 "bufnum"\cf0 , b.bufnum]);\
\cf2 // stop recording\cf0 \
d.free;\
\cf2 // stop the bubbles\cf0 \
x.free;\
\cf2 // close the buffer and the soundfile\cf0 \
b.close;\
\cf2 // free the buffer\cf0 \
b.free;\
\
\cf2 // play it back\cf0 \
(\
x = \cf3 Synth\cf0 .basicNew(\cf4 "help-Diskin-2chan"\cf0 );\
m = \{ \cf3 arg\cf0  buf; x.addToHeadMsg(nil, [\cf5 \\bufnum\cf0 ,buf.bufnum])\};\
\
b = \cf3 Buffer\cf0 .cueSoundFile(s,\cf4 "recordings/diskouttest.aiff"\cf0 , 0, 2, completionMessage: m);\
)\
x.free; b.close; b.free; \cf2 // cleanup
\f2\fs24 \cf0 \

\f1\fs18 \

\f0\b\fs24 Messaging Style
\f1\b0\fs18 \cf2 :\cf0 \
\
\cf2 // The same thing done in Messaging Style (less overhead but without the convienence of objects)\cf0 \
\cf2 // start something to record\cf0 \
s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "bubbles"\cf0 , 2003, 1, 1);\
\
\cf2 // allocate a disk i/o buffer\cf0 \
s.sendMsg(\cf4 "/b_alloc"\cf0 , 0, 65536, 2); \cf2 // Buffer number is 0\cf0 \
\
\cf2 // create an output file for this buffer, leave it open\cf0 \
s.sendMsg(\cf4 "/b_write"\cf0 , 0, \cf4 "recordings/diskouttest.aiff"\cf0 , \cf4 "aiff"\cf0 , \cf4 "int16"\cf0 , 0, 0, 1);\
\
\cf2 // create the diskout node\cf0 \
s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "help-Diskout"\cf0 , 2004, 3, 2003, \cf4 "bufnum"\cf0 , 0);\
\
s.sendMsg(\cf4 "/n_free"\cf0 , 2004); \cf2 // stop recording\cf0 \
s.sendMsg(\cf4 "/n_free"\cf0 , 2003); \cf2 // stop the bubbles\cf0 \
\
s.sendMsg(\cf4 "/b_close"\cf0 , 0); \cf2 // close the file.\
\cf0 s.sendMsg(\cf4 "/b_free"\cf0 , 0);\
\

\f2\fs24 \
See 
\f0\b RecordBuf
\f2\b0  for recording into a buffer in memory.
\f1\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \

\f2\b0 \
\
\
}