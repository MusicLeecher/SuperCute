{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PV_ConformalMap			complex plane attack \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 PV_ConformalMap.ar(buffer, real, imag)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Applies the conformal mapping z -> (z-a)/(1-za*) to the phase vocoder bins z with a given by the real and imag imputs to the UGen.\
\
ie, makes a transformation of the complex plane so the output is full of phase vocoder artifacts but may be musically fun. Usually keep |a|<1 but you can of course try bigger values to make it really noisy. a=0 should give back the input mostly unperturbed.\
\
See http://mathworld.wolfram.com/ConformalMapping.html\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 buffer
\f2\b0  - buffer number of buffer to act on, passed in through a chain (see examples below).\

\f0\b real
\f2\b0  - real part of a. \

\f0\b imag
\f2\b0  - imaginary part of a.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //explore the effect\cf0 \
(\
\cf3 SynthDef\cf0 (\cf4 "conformer1"\cf0 , \{\
	\cf3 var\cf0  in, chain;\
	in = \cf3 AudioIn\cf0 .ar(1,0.5);\
	chain = \cf3 FFT\cf0 (0, in);\
	chain=\cf3 PV_ConformalMap\cf0 (chain, \cf3 MouseX\cf0 .kr(-1.0,1.0), \cf3 MouseY\cf0 .kr(-1.0,1.0));\
	\cf3 Out\cf0 .ar(0, \cf3 Pan2\cf0 .ar(\cf3 IFFT\cf0 (chain),0));\
\}).load(s);\
)\
\
s.sendMsg(\cf4 "/b_alloc"\cf0 , 0, 1024, 1);\
s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "conformer1"\cf0 , 2002, 1, 0);\
s.sendMsg(\cf4 "/n_free"\cf0 , 2002);\
\
\
\
(\
\cf3 SynthDef\cf0 (\cf4 "conformer2"\cf0 , \{\
	\cf3 var\cf0  in, chain, out;\
	in = \cf3 Mix\cf0 .ar(\cf3 LFSaw\cf0 .ar(\cf3 SinOsc\cf0 .kr(\cf3 Array\cf0 .rand(3,0.1,0.5),0,10,[1,1.1,1.5,1.78,2.45,6.7]*220),0,0.3));\
	chain = \cf3 FFT\cf0 (0, in);\
	chain=\cf3 PV_ConformalMap\cf0 (chain, \cf3 MouseX\cf0 .kr(0.01,2.0, \cf5 'exponential'\cf0 ), \cf3 MouseY\cf0 .kr(0.01,10.0, \cf5 'exponential'\cf0 ));\
	out=\cf3 IFFT\cf0 (chain);\
	\
	\cf3 Out\cf0 .ar(0, \cf3 Pan2\cf0 .ar(\cf3 CombN\cf0 .ar(out,0.1,0.1,10,0.5,out),0));\
\}).load(s);\
)\
\
\
s.sendMsg(\cf4 "/b_alloc"\cf0 , 0, 2048, 1);\
s.sendMsg(\cf4 "/s_new"\cf0 , \cf4 "conformer2"\cf0 , 2002, 1, 0);\
s.sendMsg(\cf4 "/n_free"\cf0 , 2002);\
}