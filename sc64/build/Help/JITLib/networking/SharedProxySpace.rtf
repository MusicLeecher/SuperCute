{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 SharedProxySpace
\f1\b0\fs18 			
\f0\b\fs24 distributed system\
\
experimental.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 superclass: ProxySpace\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	*new(broadcastServer, name, clock)
\f2\b0 \
		return a new instance. the server should be a fresh, unused 
\f0\b BroadcastServer
\f2\b0 \
	\
	
\f0\b *push(broadcastServer, name, clock)
\f2\b0 \
		return a new instance and make it the currentEnvironment\
	\
	
\f0\b broadcast
\f2\b0 \
		return the broadcast server\
		\
	
\f0\b server
\f2\b0 \
		return the home server\
	\
	
\f0\b makeSharedProxy(key, rate, numChannels)
\f2\b0 \
		create a SharedNodeProxy with a group id that is derived from the \
		key: only short strings work. This should be done with a fresh, unused server.\
	\
	\
	
\f0\b addSharedKeys(controlKeys, audioKeys, firstAudioKey)
\f2\b0 \
		create multiple SharedNodeProxies.\
		This should be done with a fresh, unused server\
			
\f0\b controlKeys
\f2\b0 : names of the control rate proxies\
			
\f0\b audioKeys
\f2\b0 : names of the audio rate proxies\
			
\f0\b firstAudioKey
\f2\b0 : if the above are not given, generate them automatically.\
							using the letters a-z.\
							this is a character (default: $s) of the first audio key in alphabet\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // examples:\cf0 \
\
\cf2 // prepare and boot two servers\cf0 \
(\
x = \cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57201);\
y = \cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57202);\
\
a = \cf3 BroadcastServer\cf0 (\cf5 \\B1\cf0 , x, \cf3 nil\cf0 , 0).allAddr_( [x, y]);\
b = \cf3 BroadcastServer\cf0 (\cf5 \\B2\cf0 , y, \cf3 nil\cf0 , 1).allAddr_( [x, y]);\
\
a.boot;\
b.boot;\
a.makeWindow;\
b.makeWindow;\
)\
\
\
(\
p = \cf3 SharedProxySpace\cf0 .new(a, \cf4 "Elizabeth"\cf0 );\
r = \cf3 SharedProxySpace\cf0 .new(b, \cf4 "George"\cf0 );\
\
\cf2 // this has to be done with the fresh servers:\cf0 \
p.makeSharedProxy(\cf5 \\ensemble\cf0 , \cf5 \\audio, 1\cf0 );\
r.makeSharedProxy(\cf5 \\ensemble\cf0 , \cf5 \\audio, 1\cf0 );\
)\
\
p.envir[\cf5 \\ensemble\cf0 ]; \cf2 // returns a shared node proxy.\cf0 \
\
\
\cf2 // Elizabeth pushes her proxspace:\cf0 \
p.push;\
currentEnvironment === p;\
\
~out.play; \cf2 // play locally\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // play sine tone with freq dependant on ensemble, but a little random.\cf0 \
~out = \{ \cf3 SinOsc\cf0 .ar(440 + (300 * ~ensemble.ar) + \cf3 Rand\cf0 (0, 10), 0, 0.1) \}; \
~ensemble = 1; \cf2 // tune up a bit;\cf0 \
~ensemble = \{\'ca\cf3 Line\cf0 .ar(0, 2, 10) \};\
\
\
\cf2 // Henry pushes his proxyspace\cf0 \
r.push;\
~out.play;\
~out = \{\'ca\cf3 Ringz\cf0 .ar(\cf3 Impulse\cf0 .ar(9, 0, 0.8), ~ensemble.ar * 300 + 400, 0.2) \};\
~ensemble = 0.5; \cf2 // now both depend on the "same" bus.\cf0 \
~ensemble = \{ \cf3 SinOsc\cf0 .ar(0.4, 0, 0.6) \};\
\
\cf2 // Elizabeth\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
p.push;\
\
~freq = 300 * ~ensemble + 400;\
~out = \{ \cf3 SinOsc\cf0 .ar(~freq.ar * [1, 1.02], \cf3 SinOsc\cf0 .ar(~freq.ar, 0, pi)) * 0.1 \};\
\
~out.stop; \cf2 // stop only locally\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // Henry\cf0 \
\
r.push;\
~out.stop;  \cf2 // stop only locally\cf0 \
\
\
\cf2 // finish:\cf0 \
r.clear;\
p.clear;\
\
\
\cf2 // quit the servers\cf0 \
a.quit;\
b.quit;\
\
}