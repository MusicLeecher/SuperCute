{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Public
\f1\b0\fs18 				
\f0\b\fs24 dispatch system
\f1\b0\fs18 \

\f0\b\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs22 \cf0 superclass: EnvirDispatch
\fs24 \
\
\
\
\
experimental.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 Dispatchers like Public can be used for any EnvironmentRedirect, such as LazyEnvir and ProxySpace. They cause a mirroring of parts of the environment to multiple locations.  This done by
\f3\i\b  sending the code itself
\f2\i0\b0 , which is very flexible and leightweight but it also means that one has to be 
\f0\b careful
\f2\b0  not to do harm to the other systems. Code is only sent if it interprets without error on the sender side. Timing is still not yet synchronized, although it works pretty well for not too costly code.\
\
see also: 
\f0\b [\ul public_proxy_space\ulnone ]
\f2\b0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b \cf0 class methods:
\f2\i0\b0 \
\
	
\f0\b *new(envir
\f2\b0 ) 			create a new instance (with an 
\f4\i EnvironmentRedirect
\f2\i0 )\
	\
	
\f0\b *all
\f2\b0 					a dictionary of all available dispatchers. dispatchers with the same name \
						send to and receive from each other (alternative: provide a sendToName)\
	\
	
\f0\b *startListen(addr)
\f2\b0 		start to receive messages from the network\
						addr:  whom to listen to. 
\f0\b nil
\f2\b0 : listen to all. (default)\
						\
	
\f0\b *stopListen
\f2\b0 			stop listening\
\
\
\

\f3\i\b instance methods:
\f2\i0\b0 \
\
	\
	
\f0\b addresses_(list)
\f2\b0 		a list of addresses (NetAddr) to which to send to.\
						this list can contain also the sender's address, which it then sends to,\
						but does not get evaluated.\
							\
	
\f0\b sendingKeys_(list)
\f2\b0 		keys from which to send (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	
\f0\b listeningKeys_(list)
\f2\b0 		keys at which to receive (list of symbols). If 
\f0\b nil
\f2\b0 , do not send, if 
\f0\b \\all
\f2\b0 , send to all.\
	\
	\
	
\f0\b put(key, obj)
\f2\b0 			put an object in the space (see superclass).\
						if this key is sending, send object to all. object must be reproducible\
						as a 
\f0\b compileString!
\f2\b0 . (closed functions, patterns with no open functions)\
	\
	
\f0\b at(key)				
\f2\b0 returns an object from the space at that key (see superclass).\
	\
	\
	
\f0\b join(channel, nickname)
\f2\b0 	join a channel with a nickname\
	\
	
\f0\b leave
\f2\b0 				leave the channel\
	\
	
\f0\b public_(bool)	
\f2\b0 		if public is set to 
\f0\b false
\f2\b0 , no broadcasting happens.\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	basicSafety_(bool)
\f2\b0 		if true (default), the "worst" commands are rejected - like unixCmd etc.\
	\
	
\f0\b logSelf_(bool)			
\f2\b0 if logSelf is set to true, my own changes are passed into\
						the action function (e.g. the log window)\
	\
	
\f0\b logAll_(bool)
\f2\b0 			if logAll is true, I can see all messages that are coming in, \
						even if they do not effect me (listeningKeys != \\all). \
						This is only allowed if sendingKeys are set to \\all\
			
\f3\i\b \
	
\f0\i0 channel_(name)
\f2\b0 		set / get channel name
\f3\i\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i0\b0 \cf0 \
	
\f0\b nickname_(string)
\f2\b0 		set / get nickname\
	\
	
\f0\b action_(func
\f2\b0 )			action to be evaluated when receiving a message (optional)						function args: 
\f4\i dispatch, nickname,  key, receivedString
\f2\i0 \
						
\f0\b note
\f2\b0 : if you want to call the os from this action (e.g. for GUI), you need to\
						use defer \{ \}\
	\
	
\f0\b makeLogWindow
\f2\b0 		create a log window.	\
	\
	
\f0\b lurk / boss / merge
\f2\b0 		change behaviour diametrically (just try it out)\
			\
\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf2 // example\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
\cf3 var\cf0  addresses;\
\
\cf3 Public\cf0 .startListen;	\cf2 // start an osc responder to dispatch the messages\cf0 \
addresses = [\cf3 NetAddr\cf0 (\cf4 "127.0.0.1"\cf0 , 57120)]; \cf2 // this is loopback for now. Port must be 57120 (sc-lang)\cf0 \
d = \cf3 Public\cf0 .new;	\cf2 // create 2 new instances (one "remote" one "local")\cf0 \
e = \cf3 Public\cf0 .new;\
d.addresses = addresses; \cf2 // set the addresses - this can be done at any time laterto add new ones.\cf0 \
e.addresses = addresses;\
\
e.join(\cf5 \\waitingroom\cf0 , \cf5 \\eve\cf0 ); \cf2 // join a channel, provide a unique nickname.\cf0 \
d.join(\cf5 \\waitingroom\cf0 , \cf5 \\ade\cf0 );\
e.sendingKeys = \cf5 \\all\cf0 ;		\cf2 // if keys are set to \\all, the spaces are enitirelly open.\cf0 \
d.sendingKeys = \cf5 \\all\cf0 ;\
d.listeningKeys = \cf5 \\all\cf0 ;\
e.listeningKeys = \cf5 \\all\cf0 ;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // create two new environment redirect (works basically like an environment)\cf0 \
\
a = \cf3 EnvironmentRedirect\cf0 .new;	\
b = \cf3 EnvironmentRedirect\cf0 .new;\
\
\cf2 // set their dispatch variables. the envir is registered in the dispatch implicitly\cf0 \
\
a.dispatch = d; 	\
b.dispatch = e;\
\
\
\
)\
\
(\
e.makeLogWindow; \cf2 // see what is going on\cf0 \
d.makeLogWindow;\
)\
\
\
\
\cf2 // using the environment\cf0 \
\
a[\cf5 \\x\cf0 ] = 5;\
b[\cf5 \\x\cf0 ]; \cf2 // 5 is in b now as well.\cf0 \
\
b[\cf5 \\x\cf0 ] = \{ 1.0.rand \};\
a[\cf5 \\x\cf0 ].postcs;\
\
a[\cf5 \\x\cf0 ] = \cf3 Array\cf0 .rand(20, 0, 10);\
b[\cf5 \\x\cf0 ];\
\
b[\cf5 \\x\cf0 ] = \cf4 "hi adam"\cf0 ;\
\
a[\cf5 \\x\cf0 ] = \cf4 "hi eve"\cf0 ;\
\
\
\cf2 // more to come...\cf0 \
\
a.clear;\
b.clear;\
\
}