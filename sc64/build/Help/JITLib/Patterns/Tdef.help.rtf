{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
\f3\fswiss\fcharset77 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Tdef	
\f1\b0\fs18 			 
\f0\b\fs24 task reference definition
\f1\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 superclass: TaskProxy\
\
\
\
\
keeps a reference to a task (
\f3\i\b time pattern
\f2\i0\b0 ) that can be replaced while playing.\
It plays on when the old stream ended and a new stream is set and schedules the changes to the beat.\
\
Tdef(key) returns the instance, Tdef(key, pat) defines the pattern and returns the instance, like Pdef and Ndef.\
it is very similar to [
\f0\b \ul TaskProxy\ulnone ]
\f2\b0 \
\
\
	\
	
\f0\b *new(key, obj)
\f2\b0 \
			store the task in a global dictionary under key.\
			if there is already a Tdef there, replace its task\
			with the new one.\
			
\f0\b obj
\f2\b0  is a function or a pattern of time values.\
			\
	
\f0\b *new(key)
\f2\b0 \
			acess the task at that key (if none is there, a default task is created)\
			\
	
\f0\b *default
\f2\b0 \
			a default source, if none is given. the default is a loop that does nothing with a 1.0 beat wait time\
		\
	
\f0\b *removeAll
\f2\b0 \
			remove all tasks\
	\
	
\f0\b *all
\f2\b0 \
			dict that stores all Tdefs\
	\
	
\f0\b *all_(envir)
\f2\b0 \
			set the global environment\
				\
	
\f0\b quant_(beats)
\f2\b0 \
			set the quantisation time for beat accurate scheduling\
			can be a pair [offset, quant]\
	\
	*
\f0\b defaultQuant_(beats)
\f2\b0 \
			set the default quantisation for new instances (default: 1.0)\
			can be a pair [offset, quant]\
\
	
\f0\b condition_(func)
\f2\b0 \
			provide a condition under which the pattern is switched when a new one is inserted.\
			the stream value and a count is passed into the function.\
			the methods 
\f0\b count_(n) 
\f2\b0 simply counts up to n and switches the pattern then\
	\
	
\f0\b reset
\f2\b0 		\
			switch the pattern immediately. (stuck conditions can be subverted by this)\
\
\
	
\f0\b envir_(event)
\f2\b0 \
			provide a default environment for the proxy. \
			If given,  it is used as an environment for the routine \
			function. When set for the first time, the routine pattern is rebuilt.\
	\
	
\f0\b set(key, val, key2, val2, ...)
\f2\b0 \
			set arguments in the environment. \
			If there is none, it is created and the routine pattern is rebuilt.\
\
	
\f0\b endless
\f2\b0 \
			returns a Proutine that plays the proxy endlessly, replacing 
\f0\b nil
\f2\b0  with a 
\f0\b default
\f2\b0 \
			value (1 s. wait time). This allows to create streams that idle on until a new pattern is inserted.
\f1\fs18 \

\f2\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b \cf0 a) using it as stream reference
\f2\i0\b0 \
	\
	\
	
\f0\b embedInStream(inval)\
			
\f2\b0 just like any stream, embeds itself in stream.\
			see example for usage.\
	\
	\
\
	\

\f3\i\b b) using it as Task
\f2\i0\b0 \
\
	
\f0\b play(clock, doReset, quant)
\f2\b0 \
			starts the Pdef and creates a player. \
			if you want to play multiple instances, use 
\f0\b .playOnce(clock, doReset, quant)
\f2\b0 			
\f0\b quant 
\f2\b0 can be an array of [quant, phase]\
			\
	
\f0\b stop
\f2\b0 \
			stops the task\
	\
	
\f0\b player
\f2\b0 	\
			the current task (if the Tdef is simply used in other streams this is nil)\
\
	
\f0\b pause / resume / reset / mute / unmute\
			
\f2\b0 perform player method \
			\
	
\f0\b isPlaying
\f2\b0  \
			returns true if Tdef is running.\
			if a Tdef is playing and its stream ends, it will schedule a task for playing \
			as soon as a new function is assigned to it.\
		
\f1\fs18 \
\
\
\
\

\f3\i\b\fs24 a) using Tdef as a task player
\f1\i0\b0\fs18 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Tdef\cf0 (\cf3 \\x\cf0 ).play; \cf4 // create an empty Tdef and play it.\cf0 \
\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ loop(\{ \cf5 "ggggggggggggggggg9999ggg999ggg999gg"\cf0 .scramble.postln; 0.5.wait; \}) \});\
\
\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ loop(\{ \cf5 "---------////----------------------"\cf0 .scramble.postln; 0.25.wait; \}) \});\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ loop(\{ \cf2 thisThread\cf0 .seconds.postln; 1.wait; \}) \});\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ loop(\{ \cf2 thisThread\cf0 .seconds.postln; 1.01.wait; \}) \});\
\
\cf2 TempoClock\cf0 .default.tempo = 2;\
\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \cf5 "the end"\cf0 .postln \});\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \cf5 "one more"\cf0 .postln \});\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ loop(\{ \cf5 "some more"\cf0 .scramble.postln; 0.25.wait; \}) \});\
\
\cf2 TempoClock\cf0 .default.tempo = 1;\
\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 ).stop;\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 ).play;\
\
\cf2 Tdef(\\x)\cf0 .clear;\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // sound example\cf0 \
\
(\
\cf4 // load a synthdef\cf0 \
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf5 "pdef_grainlet"\cf0 , \
	\{ \cf2 arg\cf0  out=0, freq=440, dur=0.05;\
		\cf2 var\cf0  env;\
		env = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .perc(0.01, dur, 0.3), doneAction:2);\
		\cf2 Out\cf0 .ar(out, \cf2 SinOsc\cf0 .ar(freq, 0, env))\
	\}).store;\
)\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 ).play;\
\
(\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \
	loop(\{\
		s.sendMsg(\cf5 "/s_new"\cf0 , \cf5 "pdef_grainlet"\cf0 , -1,0,0, \cf3 \\freq\cf0 , rrand(600, 640));\
		0.1.wait;\
	\})\
\})\
)\
\
(\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \
	\cf2 var\cf0  x;\
	x = \cf2 Pseries\cf0 (300, 20, 100).loop.asStream;\
	loop(\{\
		s.sendMsg(\cf5 "/s_new"\cf0 , \cf5 "pdef_grainlet"\cf0 , -1,0,0, \cf3 \\freq\cf0 , x.next);\
		0.05.wait;\
	\})\
\})\
)\
\
(\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \
	\cf2 var\cf0  x;\
	x = \cf2 Plazy\cf0 (\{ Pseries(300 + 300.rand, 10 + 30.rand, 10 + 30.rand) \}).loop.asStream;\
	loop(\{\
		s.sendMsg(\cf5 "/s_new"\cf0 , \cf5 "pdef_grainlet"\cf0 , -1,0,0, \cf3 \\freq\cf0 , x.next);\
		0.05.wait;\
	\})\
\})\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // metronome\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Tdef\cf0 (\cf3 \\y\cf0 , \{ loop(\{ s.sendMsg(\cf5 "/s_new"\cf0 , \cf5 "pdef_grainlet"\cf0 , -1,0,0, \cf3 \\freq\cf0 , 1500); 1.wait; \}) \}).play;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // play ending stream once\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Tdef\cf0 (\cf3 \\x\cf0 , \{ \
	\cf2 var\cf0  x, dt;\
	dt = [0.1, 0.125, 0.05].choose;\
	x = \cf2 Plazy\cf0 (\{ \cf2 Pseries\cf0 (1300 + 300.rand, 110 + 130.rand, 16) \}).asStream;\
	x.do(\{ \cf2 arg\cf0  item;\
		s.sendMsg(\cf5 "/s_new"\cf0 , \cf5 "pdef_grainlet"\cf0 , -1,0,0, \cf3 \\freq\cf0 , item);\
		dt.wait;\
	\})\
\})\
)\
\
... and so on ...\
\
\cf2 Tdef\cf0 (\cf3 \\x\cf0 ).stop;\
\cf2 Tdef\cf0 .removeAll;\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b\fs24 \cf0 b) embedding Tdef into other Tasks / Routines
\f1\i0\b0\fs18 \
\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Tdef\cf0 (\cf3 \\a\cf0 , \{\'ca\cf5 "one"\cf0 .postln; 1.wait; \cf5 "two"\cf0 .postln \});\
\cf2 Tdef\cf0 (\cf3 \\c\cf0 , \{ \cf2 var\cf0  z; z = \cf2 Synth\cf0 (\cf3 \\default\cf0 ); 0.5.wait; z.release \});\
r = \cf2 Task\cf0 (\{\
	\cf5 "counting..."\cf0 .postln;\
	2.wait;\
	\cf2 Tdef\cf0 (\cf3 \\a\cf0 ).embedInStream;\
	1.wait;\
	\cf2 Tdef\cf0 (\cf3 \\c\cf0 ).embedInStream;\
	\cf5 "done."\cf0 .postln;\
\});\
)\
\
r.play; \cf4 // play a stream\cf0 \
\
\cf2 Tdef\cf0 (\cf3 \\c\cf0 , \{ \cf2 var\cf0  z; z = \cf2 Synth\cf0 (\cf3 \\default\cf0 , [\cf3 \\freq\cf0 , 300]); 1.5.wait; z.release \}); \cf4 // change the def\cf0 \
\
r.reset;\
r.play;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // of course Tdefs can be used in other Tdefs:\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Tdef\cf0 (\cf3 \\b\cf0 , \{\
	\cf5 "counting..."\cf0 .postln;\
	2.wait;\
	\cf2 Tdef\cf0 (\cf3 \\a\cf0 ).embedInStream;\
	1.wait;\
	\cf2 Tdef\cf0 (\cf3 \\c\cf0 ).embedInStream;\
	\cf5 "done."\cf0 .postln;\
\});\
)\
\cf2 Tdef\cf0 (\cf3 \\b\cf0 ).asStream.play;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // if one wants to branch off a stream in a separate thread, asStream is used.\
// also the method playOnce can be used\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Routine\cf0 (\{\
	\cf2 Tdef\cf0 (\cf3 \\c\cf0 ).asStream.play;\
	0.1.wait;\
	\cf2 Tdef\cf0 (\cf3 \\c\cf0 ).asStream.play;\
	0.1.wait;\
	\cf2 Tdef\cf0 (\cf3 \\a\cf0 ).asStream.play;\
\
\}).play;\
)\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\i\b\fs24 \cf0 Tdef as a time pattern
\f1\i0\b0\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 Instead of using a Pdefn for time values, it can be useful to use a Tdef. \
When changing its source, it keeps the stream of values synchronized to its clock.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // load a synthdef\cf0 \
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf5 "pdef_grainlet"\cf0 , \
	\{ \cf2 arg\cf0  out=0, freq=440, dur=0.05;\
		\cf2 var\cf0  env;\
		env = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .perc(0.01, dur, 0.3), doneAction:2);\
		\cf2 Out\cf0 .ar(out, \cf2 SinOsc\cf0 .ar(freq, 0, env))\
	\}).store;\
)\
\
\
\
\
\cf2 Tdef\cf0 (\cf3 \\z\cf0 , \cf2 Pseq\cf0 ([1, 1, 1, 0.5, 0.5], \cf2 inf\cf0 ));\
\
(\
	\cf2 Pset\cf0 (\cf3 \\instrument\cf0 , \cf3 \\pdef_grainlet\cf0 , \
		\cf2 Ppar\cf0 ([\
			\cf2 Pbind\cf0 (\
				\cf3 \\dur\cf0 , \cf2 Tdef\cf0 (\cf3 \\z\cf0 ),\
				\cf3 \\note\cf0 , \cf2 Pseq\cf0 ([1, 3, 2, 1, 0], \cf2 inf\cf0 ),\
				\cf3 \\x\cf0 , \cf2 Pfunc\cf0  \{\'ca\cf2 TempoClock\cf0 .default.elapsedBeats.postln \} \cf4 // posts the onset times\cf0 \
			),\
			\cf2 Pbind\cf0 (\
				\cf3 \\dur\cf0 , 4, \cf4 // reference beat\cf0 \
				\cf3 \\sustain\cf0 , 0.1,\
				\cf3 \\note\cf0 , 8\
			)\
		])\
	).play(quant:1);\
)\
\
\
\cf2 Tdef\cf0 (\cf3 \\z\cf0 , \cf2 Prand\cf0 ([1, 1, 0.23, 0.5, 0.5], \cf2 inf\cf0 )); \cf4 // exchange time pattern\cf0 \
\cf2 Tdef\cf0 (\cf3 \\z\cf0 , \cf2 Pseq\cf0 ([1, 1, 1, 1], \cf2 inf\cf0 )); \cf4 // pattern stays in sync.\cf0 \
\cf2 Tdef\cf0 (\cf3 \\z\cf0 , \cf2 Pseq\cf0 ([1, 1, 1, 0.5, 0.5], \cf2 inf\cf0 )); \cf4 // but might be in different order (\
									// to avoid this, set the quant to a appropriate value.\cf0 \
\
\
}