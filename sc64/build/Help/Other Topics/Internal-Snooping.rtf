{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;\red0\green112\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Snooping around SuperCollider
\f1\b0\fs24 \
\
You can inspect much of the internal structure of the class library and other data structures.\
This can often be useful for research and debugging purposes.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Class Definitions, Implementations, and References
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
Selecting the name of any Class (e.g. 
\f0\b Object
\f1\b0 ) and typing cmd-j will open its class definition file.\
\
Selecting the name of any method (e.g. 
\f0\b play
\f1\b0 ) and typing cmd-y will open a window showing all implementations of that method and their arguments. Selecting one of those classes and methods (e.g. 
\f0\b Sample-play
\f1\b0 ) and typing cmd-j will open the class definition at that method. (Note that cmd-y only shows implementations, and does not indicate inheritance).\
\
Selecting any text (e.g. 
\f0\b SCWindow 
\f1\b0 or 
\f0\b asStream
\f1\b0 ) and typing shift-cmd-y will open a window showing all references to the selected text, i.e. each place it is used within the class library. (This will not find methods calls compiled with special byte codes like 'value'.)\
\
SC  has a graphical Class browser which will show all methods, arguments, subclasses, instance variables and class variables. (Currently this is only OSX.) Using the browser's buttons you can easily navigate to the class' superclass, subclasses, class source, method source, helpfile (if there is one), check references or implementation of methods, or even open a web browser to view the corresponding entry in the online CVS repository. (Note that the web repository is a backup often a day or two behind the status of what is available to developers.)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf2 SequenceableCollection\cf0 .browse;
\f1\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Snooping in Classes
\f1\b0\fs24 \
\
The 
\f0\b Class
\f1\b0  help file documents some of these snooping methods.\
Even though you may access these data structures, if you store things into them, you may break something.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 Collection\cf0 .dumpInterface;	\cf3 // print all instance methods defined for this class\
\cf0 \
\cf2 Collection\cf0 .class.dumpInterface;	\cf3 // print all class methods defined for this class\
\
\
// The following three include inherited methods\
\cf0 \
\cf2 Collection\cf0 .methods.collect(_.name);	\
						\cf3 // print all instance methods that instances of this class respond to\cf0 \
\
\cf2 Collection\cf0 .class.methods.collect(_.name); \
						\cf3 // print all class methods that this class responds to\cf0 \
\
\cf2 Collection\cf0 .dumpFullInterface;	\cf3 // print all instance and class methods that this class responds to\cf0 \
\
\cf2 Collection\cf0 .dumpMethodList;	\cf3 // print instance methods of this class and superclasses, in alpha order\cf0 \
						\cf3 // also shows from which class the method is inherited\cf0 \
						\cf3 // does not include Object or Class methods\cf0 \
						\cf3 // for class methods, do Meta_Collection.dumpMethodList\cf0 \
\
\cf2 Collection\cf0 .dumpClassSubtree;	\cf3 // dump all subclasses of this class\
\cf0 \
\cf2 Collection\cf0 .dumpSubclassList;	\cf3 // dump all subclasses, in alphabetical order\cf0 \
\
\cf2 SCWindow\cf0 .instVarNames.dump;	\cf3 // dump all instance variable names of this class\
\cf0 \
\cf2 SCWindow\cf0 .classVarNames.dump;	\cf3 // dump all class variable names of this class\
\cf0 \
\cf2 SCWindow\cf0 .filenameSymbol.postln;	\cf3 // the path to the file that defined this class\
\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // print all classes whose names start with 'F'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Class\cf0 .allClasses.do(\{ \cf2 arg\cf0  class;\
	if (class.name.asString.at(0) == $F, \{ class.name.postln; \});\
\})\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // find and print all class variable names defined in the system\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Class\cf0 .allClasses.do(\{ \cf2 arg\cf0  class;\
    if (class.classVarNames.notNil, \{\
		\cf3 // classVarNames is an Array of Symbols\
\cf0         class.classVarNames.do(\{ \cf2 arg\cf0  varname;\
            (class.name.asString ++ \cf4 " "\cf0  ++ varname.asString).postln;\
        \})\
    \});\
\});\
)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // find and print all methods that contain "ascii"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Class\cf0 .allClasses.do(\{ \cf2 arg\cf0  class;\
   	class.methods.do(\{ \cf2 arg\cf0  sel;\
   			if(sel.name.asString.find("ascii").notNil) \{\
            		(class.name.asString + "-" + sel.name).postln;\
            \}\
      \});\
\}); ""\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Snooping in Methods
\f2\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 Same thing goes here, if you store things into Methods, you may break something.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 Collection\cf0 .findMethod(\cf5 'select'\cf0 ); \cf3 // does it have this method?\cf0 \
\
\cf2 Array\cf0 .findMethod(\cf5 'select'\cf0 ); \cf3 // this class doesn't\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 Array\cf0 .findRespondingMethodFor(\cf5 'select'\cf0 ); \cf3 // climb the class tree to find the method
\fs24 \cf0 \

\fs18 \cf2 \
Collection\cf0 .findMethod(\cf6 'select'\cf0 ).dump; \cf3 // find a method object\
\cf0 \
\cf2 Collection\cf0 .findMethod(\cf6 'select'\cf0 ).argNames.dump; \cf3 // dump its argument names\
\cf0 \
\cf2 Collection\cf0 .findMethod(\cf6 'select'\cf0 ).varNames.dump; \cf3 // dump its local variable names\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // dump its code. mostly for debugging the compiler.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Collection\cf0 .findMethod(\cf6 'select'\cf0 ).dumpByteCodes;	\
\
\cf2 Collection\cf0 .dumpByteCodes(\cf6 'select'\cf0 );	\cf3 // a shorter version of the above\
\cf0 \
\{ 1 + 2 \}.dump; \cf3 // this is a Function\
\cf0 \
\{ 1 + 2 \}.def.dump;	\cf3 // get its FunctionDef\
\cf0 \
\{ 1 + 2 \}.def.dumpByteCodes;	\cf3 // dump its code.\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Snooping in Windows\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // create some windows to snoop in\cf0 \
5.do(\{ \cf2 arg\cf0  i;\
	\cf2 var\cf0  w, b;\
	w = \cf2 SCWindow\cf0 .new(\cf4 "snoop "\cf0  ++ i.asString, \
		\cf2 Rect\cf0 .new( 200 + 400.rand, 69 + 300.rand, 172, 90 ));\
	w.front;\
	b = \cf2 SCButton\cf0 .new( w, \cf2 Rect\cf0 .new( 23, 28, 127, 25 ));\
	b.states = [[\cf4 "BLAM-O"\cf0 , \cf2 Color\cf0 .red]];\
\}))\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SCWindow\cf0 .allWindows.dump;	\cf3 // dump a list of all open SCWindows\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // a little more helpful, dump their names\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SCWindow\cf0 .allWindows.collect(\{ \cf2 arg\cf0  w; w.name \}).postln;	\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // change background colors of all open windows\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SCWindow\cf0 .allWindows.do(\{ \cf2 arg\cf0  window;\
	window.view.background = \cf2 Color\cf0 .new(0.5 + 0.5.rand, 0.5 + 0.5.rand, 0.5 + 0.5.rand);\
\}))\
\
\cf2 SCWindow\cf0 .closeAll; \cf3 // close all the windows (This will close the server windows)\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Snooping in SynthDefs
\f2\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 // First execute this:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
f = \cf2 SynthDef\cf0 (\cf4 "Help-SnoopSynthDef"\cf0 , \
	\{ \cf2 arg\cf0  out=0;\
		 \cf2 Out\cf0 .ar(out, \cf2 PinkNoise\cf0 .ar(0.1))\
	\});\
)\
\
\cf2 f.dumpUGens;\cf0 	\cf3 // get the ugens, listed in order of execution, with rate, index and\
				// inputs\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Snooping in the Interpreter
\f1\b0\fs24 \
\
When evaluating text in the interpreter, the variable 'this' always refers to the interpreter.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf2 this\cf0 .dump;	\cf3 // display the values of all the interpreter variables a-z\
\cf0 \
\cf2 this\cf0 .clearAll;	\cf3 // set all variables a-z to nil\
\cf0 \
g = \cf2 this\cf0 .compile(\cf4 "(1 + 2).postln"\cf0 );	\cf3 // compile some text into a Function\
\cf0 \
g.postln;		\cf3 // see, g is a Function\
\cf0 \
g.value;	\cf3 // evaluate g\
\cf0 \
\cf2 this\cf0 .interpret(\cf4 "(1 + 2).postln"\cf0 );	\cf3 // interpret some text\
\cf0 \
\cf2 this\cf0 .interpretPrint(\cf4 "1 + 2"\cf0 );	\cf3 // interpret some text and print the result\
\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
}