{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 asTarget
\f1\b0\fs24 \
\

\f0\b Convert to a valid Node Target
\f1\b0 \
\
The classes listed below implement the method asTarget. This is used widely in the 
\f0\b Node
\f1\b0  classes (
\f0\b Group
\f1\b0  and 
\f0\b Synth
\f1\b0 ) to convert non-Node objects to an appropriate target. This allows nil and instances of 
\f0\b Server
\f1\b0  to be used as targets. This can be useful when writing classes which create nodes internally, but in most cases there should be little need to call asTarget in normal use.\
\
\

\f0\b Node
\f1\b0  - Returns the instance of Node itself. The subclasses of 
\f0\b Node
\f1\b0  (
\f0\b Synth
\f1\b0  and 
\f0\b Group
\f1\b0 ) are valid targets and require no conversion.\
\
\

\f0\b Server
\f1\b0  - Returns a 
\f0\b Group
\f1\b0  object representing the 
\f0\b default_group
\f1\b0  of this instance of 
\f0\b Server
\f1\b0 . Note that this object may not be identical with other objects representing the default group, but will be equivalent.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1140\fi-1140\ql\qnatural
\cf0 \
	
\f2\fs18 s = \cf2 Server\cf0 .default;\
	g = s.asTarget; \cf3 // the default group of s\cf0 \
	h = s.defaultGroup; \cf3 // and again\cf0 \
	g == h; 	\cf3 // true\cf0 \
	g === h;	\cf3 // false
\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\

\f0\b Nil
\f1\b0  - Returns a 
\f0\b Group
\f1\b0  object representing the 
\f0\b default_group
\f1\b0  of the current default 
\f0\b Server
\f1\b0 .\
\
	
\f2\fs18 s = \cf2 Server\cf0 .default;\
	g = nil.asTarget;\
	g == s.defaultGroup; \cf3 // true
\f1\fs24 \cf0 \
\
\

\f0\b Integer
\f1\b0  - Returns a 
\f0\b Group
\f1\b0  object representing a group node on the current default 
\f0\b Server
\f1\b0  with this 
\f0\b Integer
\f1\b0  as its node ID number. 
\f0\b Note:
\f1\b0  Although this can be convenient in some cases, it does not create the corresponding node on the default server, nor does it check to make sure that it exists. As well it does not directly access the server's NodeIDAllocator, so duplication of node IDs is possible. For these reasons this method should be used with care. When not dealing with the default Server, Group-basicNew is safer and simpler, as otherwise one needs to set the server instance variable to ensure correct targeting.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf3 /////// Showing the problems\cf0 \
\
	s = \cf2 Server\cf0 .default;\
	s.boot;\
	g = s.nextNodeID.asTarget;\
	x = \cf2 Synth\cf0 .head(g, \cf4 "default"\cf0 ); 	\cf3 // but g doesn't exist on the server\cf0 \
	s.sendMsg(*g.addToHeadMsg); 	\cf3 // now it's sent to the default server, in the default group\cf0 \
	x = \cf2 Synth\cf0 .head(g, \cf4 "default"\cf0 ); 	\cf3 // now this works\cf0 \
	x.free; g.free;\
	\
	\cf3 // if not using the default Server Integer-asTarget can be problematic\cf0 \
	\
	\cf2 Server\cf0 .default = \cf2 Server\cf0 .local; \
	\cf2 Server\cf0 .default.boot; 			\cf3 // quit the default server\cf0 \
	i = \cf2 Server\cf0 .internal; i.boot;\
	g = i.nextNodeID.asTarget;\
	i.sendMsg(*g.addToHeadMsg);		\cf3 // seems to work, but...\cf0 \
	x = \cf2 Synth\cf0 .head(g, \cf4 "default"\cf0 ); 	\cf3 // oops, this goes to the default server, so Group not Found\cf0 \
	\cf5 g.server == \cf6 Server\cf5 .default;		\cf7 // true, so that's the problem\cf0 \
	g.server = i;\
	x = \cf2 Synth\cf0 .head(g, \cf4 "default"\cf0 ); 	\cf3 // now to the right place\cf0 \
	x.free; g.free;\
	\
\cf3 /////// A more practical example\cf0 \
\
	s = \cf2 Server\cf0 .default;\
	s.boot;\
	s.sendMsg(\cf8 \\g_new\cf0 , x = s.nextNodeID);\
	\cf3 // ...\cf0 \
	\
	\cf3 // now if we need to use Node objects for some reason\cf0 \
	y = \cf2 Synth\cf0 .head(x.asTarget, \cf4 "default"\cf0 ); \
	\
	\cf3 // this is simpler than Group.basicNew(s, x);, providing you're using the default server:\cf0 \
	z = \cf2 Synth\cf0 .head(\cf2 Group\cf0 .basicNew(s, x), \cf4 "default"\cf0 ); \
	\
	y.free; z.free; x.asTarget.free;\
\
}