{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 Courier;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green112\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Control Structures\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Control structures in SuperCollider are implemented via message sends. Here are a few of those available. \
See [\ul Syntax-Shortcuts\ulnone ] for the various ways expressions can be written.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 If\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Conditional execution is implemented via the 
\f0\b if
\f1\b0  message. The 
\f0\b if
\f1\b0  message is sent to an expression which must return a Boolean value. In addition it takes two arguments: a function to execute if the expression is true and another optional function to execute if the expression is false. The 
\f0\b if
\f1\b0  message returns the value of the function which is executed. If the falseFunc is not present and the expression is false then the result of the 
\f0\b if
\f1\b0  message is nil.\
\
syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 if (expr, trueFunc, falseFunc);\
..or..\
expr.if (trueFunc, falseFunc);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\
see also: the
\f0\b  [\ul if\ulnone ] helpfile
\f1\b0 \
\
examples:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 if ( [\cf2 false\cf0 , \cf2 true\cf0 ].choose,				\cf3 // Boolean expression (chooses one at random)\
\cf0 	\{ \cf4 "expression was true"\cf0 .postln \},	\cf3 // true function\
\cf0 	\{ \cf4 "expression was false"\cf0 .postln \}	\cf3 // false function\
\cf0 )\
\
(\
\cf2 var\cf0  a = 1, z;\
z = if (a < 5, \{ 100 \},\{ 200 \});\
z.postln;\
)\
\
(\
\cf2 var\cf0  x;\
if (x.isNil, \{ x = 99 \});\
x.postln;\
)
\fs24 \
\
'
\f1 If' expressions are optimized (i.e. inlined) by the compiler if they do not contain variable declarations in the trueFunc and the falseFunc.\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 While\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The 
\f0\b while
\f1\b0  message implements conditional execution of a loop. If the testFunc answers true when evaluated, then the bodyFunc is evaluated and the process is repeated. Once the testFunc returns false, the loop terminates.\
\
syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 while ( testFunc, bodyFunc );\
..or..\
testFunc.while( bodyFunc );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
example:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3 \cf0 i = 0;\
while ( \{ i < 5 \}, \{ i = i + 1; \cf4 "boing"\cf0 .postln \});\
)
\fs24 \
\
'
\f1 While' expressions are optimized by the compiler if they do not contain variable declarations in the testFunc and the bodyFunc.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 For\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The 
\f0\b for
\f1\b0  message implements iteration over an integer series from a starting value to an end value stepping by one each time. A function is evaluated each iteration and is passed the iterated numeric value as an argument.\
\
syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 for ( startValue, endValue, function )\
..or..\
startValue.for ( endValue, function )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
example:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 for (3, 7, \{ \cf2 arg\cf0  i; i.postln \}); \cf3 // prints values 3 through 7
\fs24 \cf3 \
\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 ForBy\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
The 
\f0\b forBy
\f1\b0  selector implements iteration over an integer series with a variable step size. A function is evaluated each iteration and is passed the iterated numeric value as an argument.\
\
syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 forBy ( startValue, endValue, stepValue, function );\
..or..\
startValue.forBy ( endValue, stepValue, function );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
example:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 forBy (0, 8, 2, \{ \cf2 arg\cf0  i; i.postln \}); \cf3 // prints values 0 through 8 by 2's
\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Do\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Do
\f1\b0  is used to iterate over a collection. Positive Integers also respond to 'do' by iterating from zero up to their value. Collections iterate, calling the function for each object they contain. Other kinds of Objects respond to do by passing themselves to the function one time. The function is called with two arguments, the item, and an iteration counter.\
\
syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 do ( collection, function )\
..or..\
collection.do(function)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 example:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 [ 1, 2, \cf4 "abc"\cf0 , (3@4) ].do(\{ \cf2 arg\cf0  item, i; [i, item].postln; \});\
\
5.do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // iterates from zero to four\
\cf0 \
\cf4 "you"\cf0 .do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // a String is a collection of characters\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 'they'\cf0 .do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // a Symbol is a singular item\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (8..20).do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // iterates from eight to twenty \
\
\cf0 (8,10..20).do(\{ \cf2 arg\cf0  item; item.postln \}); \cf3 // iterates from eight to twenty, with stepsize two\
\
\cf2 Routine\cf0 (\{ \cf2 var\cf0  i=10; while \{ i > 0 \} \{ i.yield; i = i - 5.0.rand \} \}).do(\{ \cf2 arg\cf0  item; item.postln \});
\fs24 \cf3 \
\cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Switch\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Object implements a 
\f0\b switch 
\f1\b0 method which allows for conditional evaluation with multiple cases. These are implemented as pairs of test objects (tested using if this == test.value) and corresponding functions to be evaluated if true. The switch statement will be inlined if the test objects are all Floats, Integers, Symbols, Chars, nil, false, true and if the functions have no variable or argument declarations. The inlined switch uses a hash lookup (which is faster than nested if statements), so it should be very fast and scale to any number of clauses.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\b0\fs18 \cf0 (\
\cf2 var\cf0  x, z;\
z = [0, 1, 1.1, 1.3, 1.5, 2];\
switch (z.choose.postln,\
	1,   \{ \cf6 \\no\cf0  \},\
	1.1, \{ \cf6 \\wrong\cf0  \},\
	1.3, \{ \cf6 \\wrong\cf0  \},\
	1.5, \{ \cf6 \\wrong\cf0  \},\
	2,   \{ \cf6 \\wrong\cf0  \},\
	0,   \{ \cf6 \\true\cf0  \}\
).postln;\
)
\fs20 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 or:
\f3\fs20 \
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\cf2 var\cf0  x, z;\
z = [0, 1, 1.1, 1.3, 1.5, 2];\
x = switch (z.choose)\
	\{1\}   \{ \cf6 \\no\cf0  \}\
	\{1.1\} \{ \cf6 \\wrong\cf0  \}\
	\{1.3\} \{ \cf6 \\wrong\cf0  \}\
	\{1.5\} \{ \cf6 \\wrong\cf0  \}\
	\{2\}   \{ \cf6 \\wrong\cf0  \}\
	\{0\}   \{ \cf6 \\true\cf0  \};\
x.postln;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Case
\f3\b0\fs20 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Function implements a 
\f0\b case 
\f1\b0 method which allows for conditional evaluation with multiple cases. Since the receiver represents the first case this can be simply written as pairs of test functions and corresponding functions to be evaluated if true. Case is inlined and is therefore just as efficient as nested if statements.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\cf2 var\cf0  i, x, z;\
z = [0, 1, 1.1, 1.3, 1.5, 2];\
i = z.choose;\
x = case\
	\{ i == 1 \}   \{ \cf6 \\no\cf0  \}\
	\{ i == 1.1 \} \{ \cf6 \\wrong\cf0  \}\
	\{ i == 1.3 \} \{ \cf6 \\wrong\cf0  \}\
	\{ i == 1.5 \} \{ \cf6 \\wrong\cf0  \}\
	\{ i == 2 \}   \{ \cf6 \\wrong\cf0  \}\
	\{ i == 0 \}   \{ \cf6 \\true\cf0  \};\
x.postln;\
)
\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 \
\
Other Control Structures\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \
Using Functions, many control structures can be defined like the ones above. In the class 
\f0\b Collection
\f1\b0  there are many more messages defined for iterating over Collections.\
\
}