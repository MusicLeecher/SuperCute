{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red96\green96\blue96;\red0\green0\blue191;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Node Messaging\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 The most direct and fast way to send commands to the server is to send messages to the Server object, if you are within sc-lang.  If you are in a shell you can use 
\f0\b sendOSC
\f1\b0  (available from CNMAT).\
\
this messaging scheme is explained in detail in \
\
	
\f0\b Server-Architecture
\f1\b0 \
	
\f0\b Server-Command-Reference
\f1\b0 \
	
\f0\b Tutorial\

\f1\b0 \
When creating nodes on the server (synths and groups) the only things we need to know are the nodeID and the server (its address to be precise).\
\
In order to communicate with a synth, one sends messages with its nodeID. If you do not intend to communicate with the node after its creation (and the node will cause itself to end without external messaging), the node id can be set to -1, which is the server's equivalent to nil.\
\
As soon as you want to pass around the reference to a certain node, assuming that you might not have only one server, it can be useful to create a Synth or Group object. These objects also respond to messages, and when needed can be used to obtain the state of the server side node.\
\
see 
\f0\b Node
\f1\b0 , 
\f0\b Synth
\f1\b0 , and 
\f0\b Group
\f1\b0  help for more detailed helpfiles on node objects.
\f2\fs18 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // the equivalent of\cf0 \
	n = s.nextNodeID;\
	s.sendMsg(\cf3 "/s_new"\cf0 , \cf3 "default"\cf0 , n);\
	s.sendMsg(\cf3 "/n_free"\cf0 , n);\
	\
\cf2 // is \cf0 \
	n = \cf4 Synth\cf0 (\cf3 "default"\cf0 );\
	n.free;\
	\
	\
\cf2 // when passing arguments:\cf0 \
	n = s.nextNodeID;\
	s.sendMsg(\cf3 "/s_new"\cf0 , \cf3 "default"\cf0 , n, 0, 0, \cf5 \\freq\cf0 , 850);\
	s.sendMsg(\cf3 "/n_set"\cf0 , n, \cf5 \\freq\cf0 , 500);\
	s.sendMsg(\cf3 "/n_free"\cf0 , n);\
	\
\cf2 // it is\cf0 \
	n = \cf4 Synth\cf0 (\cf3 "default"\cf0 , [\cf5 \\freq\cf0 , 850]);\
	n.set(\cf5 \\freq\cf0 , 500)\
	n.free;\
	\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 The answer to the question of whether one should work with 
\f0\b node objects 
\f1\b0 or 
\f0\b directly with messages
\f1\b0  depends to some extent on context, and to some extent is a matter of personal taste.\
\
The encapsulation of node objects results in a certain generalization, meaning that other compound objects can respond to the same messages and thus exploit polymorphism. They also provide a certain level of convienence, keeping track of indexes and IDs, etc.
\f2\fs18 \
\

\f1\fs24 In certain cases, such as for granular synthesis it is recommended to use messages directly, because there is no benefit to be gained from the node objects (i.e. no need to message them) and they add cpu load to the client side.\
	\
	
\f2\fs18 (\
	\cf4 SynthDef\cf0 (\cf3 "grain"\cf0 , \{ \
		\cf4 Out\cf0 .ar(0, \cf4 Line\cf0 .kr(0.1, 0, 0.01, doneAction:2) * \cf4 FSinOsc\cf0 .ar(12000))\
	\}).send(s);\
	)\
	\
	(\
	\cf4 Routine\cf0 (\{ \
		20.do(\{\
			s.sendMsg(\cf3 "/s_new"\cf0 , \cf3 "grain"\cf0 , -1); \
			0.01.wait;\
		\})\
	\}).play;\
	)\
	
\f1\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 In cases where you need to keep track of the synth's state, it is advisable to use node objects and register them with a 
\f0\b NodeWatcher
\f1\b0 . (see helpfile)\
\
Apart from such cases it is a matter of taste whether you want to use the combination of message and a numerical global representation or an object representation. The two can be mixed, and certain advantages of the object style can be accessed when using messaging style. For instance Server.nextNodeID allows one to use dynamically assigned IDs in messaging style. As a gross generalization, it is probably fair to say that object style is more convienent, but messaging style is more efficient, due to reduce client-side CPU load.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 IMPORTANT NOTE:
\f1\b0  If you wish to have the functionality of the 
\f0\b default_group
\f1\b0  (e.g. problem free use of Server's record and scope functionality) you should treat ID 1 (the default_group) as the root of your node tree rather than ID 0 (the 
\f0\b RootNode
\f1\b0 ). See 
\f0\b default_group
\f1\b0  for more details.
\f2\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 Note that 
\f0\b Function-play
\f1\b0  and 
\f0\b SynthDef-play
\f1\b0  return a synth object that can be used to send messages to.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
x = \{ \cf4 arg\cf0  freq=1000; \cf4 Ringz\cf0 .ar(\cf4 Crackle\cf0 .ar(1.95, 0.1), freq, 0.05) \}.play(s);\
x.set(\cf5 \\freq\cf0 , 1500);\
x.free;\
\
\
\
\
\
}